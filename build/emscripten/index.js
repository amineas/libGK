
var Module;
if (typeof Module === 'undefined') Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {

  function runWithFS() {

function assert(check, msg) {
  if (!check) throw msg + new Error().stack;
}
Module['FS_createPath']('/', 'assets', true, true);
Module['FS_createDataFile']('/assets', 'test.png', [137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 57, 0, 0, 0, 57, 8, 6, 0, 0, 0, 140, 24, 131, 133, 0, 0, 0, 25, 116, 69, 88, 116, 83, 111, 102, 116, 119, 97, 114, 101, 0, 65, 100, 111, 98, 101, 32, 73, 109, 97, 103, 101, 82, 101, 97, 100, 121, 113, 201, 101, 60, 0, 0, 36, 8, 73, 68, 65, 84, 120, 218, 116, 123, 7, 148, 29, 213, 153, 230, 87, 175, 234, 229, 220, 253, 58, 103, 133, 150, 90, 57, 130, 36, 68, 16, 8, 12, 216, 4, 3, 6, 131, 129, 193, 198, 94, 60, 30, 216, 179, 102, 56, 51, 198, 187, 222, 53, 59, 235, 177, 103, 23, 123, 198, 246, 177, 61, 54, 96, 143, 195, 128, 13, 2, 131, 73, 2, 99, 36, 4, 8, 229, 216, 106, 181, 90, 173, 86, 231, 244, 186, 95, 191, 28, 43, 236, 119, 111, 181, 132, 189, 103, 182, 207, 41, 189, 126, 93, 85, 183, 238, 159, 190, 255, 251, 110, 93, 41, 241, 248, 56, 44, 203, 130, 170, 170, 48, 116, 29, 61, 61, 61, 129, 145, 225, 161, 123, 124, 126, 255, 157, 173, 173, 173, 107, 66, 161, 80, 148, 231, 29, 176, 76, 121, 29, 96, 193, 254, 224, 39, 63, 20, 135, 134, 241, 193, 227, 214, 146, 206, 73, 189, 121, 97, 35, 96, 24, 248, 139, 31, 121, 17, 254, 255, 63, 242, 188, 98, 95, 164, 252, 7, 231, 240, 255, 220, 255, 231, 227, 217, 231, 13, 211, 80, 227, 165, 146, 127, 127, 174, 80, 251, 239, 185, 66, 236, 101, 211, 116, 112, 72, 253, 226, 45, 202, 204, 204, 4, 28, 52, 48, 155, 78, 227, 216, 209, 163, 55, 134, 35, 225, 239, 116, 116, 116, 172, 244, 121, 253, 48, 77, 97, 152, 41, 199, 84, 228, 167, 201, 17, 21, 232, 180, 217, 176, 202, 242, 33, 170, 211, 141, 3, 239, 190, 134, 165, 85, 7, 177, 116, 125, 27, 80, 214, 63, 158, 136, 162, 252, 199, 86, 153, 127, 118, 254, 162, 33, 202, 252, 33, 46, 81, 164, 19, 97, 90, 246, 223, 28, 243, 227, 136, 191, 137, 235, 197, 119, 135, 131, 231, 84, 94, 234, 132, 226, 114, 1, 78, 77, 222, 87, 42, 71, 223, 73, 228, 151, 60, 86, 172, 68, 142, 43, 168, 200, 219, 52, 85, 117, 34, 151, 203, 160, 187, 251, 228, 87, 150, 45, 235, 250, 81, 83, 67, 61, 244, 114, 25, 186, 110, 160, 194, 168, 228, 42, 38, 210, 60, 146, 21, 11, 83, 37, 7, 194, 206, 10, 58, 125, 147, 240, 104, 45, 194, 100, 206, 201, 66, 133, 131, 15, 204, 56, 17, 136, 187, 233, 12, 39, 52, 78, 160, 98, 88, 200, 23, 43, 114, 158, 170, 195, 54, 70, 204, 207, 233, 116, 240, 94, 21, 5, 58, 163, 88, 209, 225, 84, 233, 117, 204, 159, 231, 97, 240, 31, 131, 55, 121, 93, 26, 2, 30, 23, 138, 226, 186, 82, 69, 218, 234, 113, 113, 108, 94, 47, 254, 102, 86, 138, 136, 249, 13, 132, 125, 194, 169, 12, 134, 234, 131, 18, 138, 194, 173, 22, 182, 55, 184, 38, 247, 196, 173, 13, 119, 103, 141, 166, 55, 28, 86, 5, 194, 124, 156, 61, 115, 230, 250, 174, 174, 174, 31, 121, 67, 17, 188, 115, 126, 14, 147, 69, 11, 9, 58, 33, 169, 43, 72, 51, 244, 37, 94, 230, 208, 52, 62, 32, 140, 229, 250, 35, 140, 252, 12, 214, 184, 158, 166, 33, 89, 104, 138, 133, 185, 138, 27, 255, 114, 186, 11, 43, 220, 107, 81, 27, 114, 35, 18, 240, 96, 98, 174, 128, 3, 125, 83, 116, 152, 142, 160, 199, 77, 231, 51, 15, 56, 153, 88, 181, 15, 93, 205, 81, 244, 77, 36, 112, 98, 96, 6, 17, 55, 157, 227, 116, 66, 165, 161, 58, 203, 37, 153, 43, 34, 158, 206, 163, 171, 181, 10, 219, 86, 183, 226, 252, 104, 2, 61, 125, 19, 116, 134, 130, 69, 109, 213, 168, 139, 248, 49, 48, 54, 131, 15, 142, 244, 67, 51, 242, 184, 98, 105, 8, 247, 109, 86, 176, 165, 105, 14, 152, 25, 5, 66, 117, 140, 50, 66, 49, 99, 207, 243, 186, 178, 125, 107, 209, 170, 57, 166, 141, 140, 140, 4, 171, 170, 171, 191, 223, 84, 87, 135, 151, 250, 102, 209, 87, 241, 97, 83, 99, 8, 107, 220, 154, 244, 124, 178, 164, 99, 56, 83, 194, 193, 41, 5, 11, 29, 207, 64, 179, 254, 13, 69, 243, 106, 59, 237, 56, 113, 101, 62, 37, 21, 166, 182, 131, 70, 84, 104, 84, 153, 247, 20, 10, 204, 134, 114, 5, 70, 197, 128, 14, 187, 230, 21, 78, 212, 100, 244, 74, 165, 50, 10, 121, 158, 231, 117, 140, 17, 163, 199, 113, 68, 180, 77, 3, 14, 30, 226, 26, 113, 127, 161, 88, 6, 111, 225, 193, 232, 50, 179, 210, 153, 2, 162, 126, 23, 220, 204, 4, 213, 161, 98, 112, 66, 199, 248, 92, 9, 39, 39, 106, 240, 153, 75, 107, 113, 255, 154, 81, 68, 51, 211, 64, 176, 150, 25, 85, 240, 71, 205, 125, 63, 158, 114, 220, 112, 165, 150, 73, 167, 238, 237, 92, 210, 213, 41, 210, 211, 100, 170, 220, 210, 17, 198, 226, 136, 23, 211, 185, 18, 92, 76, 141, 141, 177, 0, 211, 50, 128, 76, 226, 109, 196, 212, 31, 130, 99, 162, 232, 72, 195, 138, 232, 182, 129, 243, 70, 178, 66, 56, 121, 26, 200, 201, 26, 46, 166, 58, 39, 104, 48, 237, 45, 131, 198, 59, 237, 26, 211, 203, 76, 77, 135, 147, 23, 171, 48, 249, 60, 17, 101, 157, 53, 109, 177, 182, 196, 48, 26, 193, 66, 17, 32, 40, 199, 170, 200, 131, 83, 144, 37, 152, 43, 84, 80, 164, 225, 21, 58, 192, 205, 63, 250, 25, 4, 15, 243, 208, 163, 209, 105, 197, 60, 118, 247, 250, 48, 157, 105, 199, 163, 151, 157, 71, 117, 33, 5, 184, 2, 112, 101, 7, 55, 251, 188, 3, 183, 106, 94, 175, 239, 30, 143, 199, 45, 129, 197, 75, 143, 125, 107, 247, 25, 248, 156, 42, 82, 156, 176, 223, 229, 192, 207, 110, 90, 139, 3, 131, 103, 81, 139, 167, 144, 41, 142, 113, 98, 64, 1, 105, 58, 68, 212, 201, 124, 61, 241, 71, 56, 169, 44, 106, 133, 247, 148, 57, 145, 34, 163, 168, 243, 83, 92, 81, 225, 57, 69, 117, 163, 156, 153, 193, 216, 232, 65, 132, 86, 173, 97, 13, 197, 96, 48, 162, 250, 216, 62, 104, 238, 2, 202, 193, 133, 64, 237, 50, 70, 213, 41, 93, 38, 198, 42, 176, 166, 69, 81, 27, 186, 41, 35, 41, 34, 91, 18, 192, 70, 195, 253, 30, 167, 44, 129, 82, 217, 68, 46, 95, 132, 85, 201, 163, 111, 220, 135, 167, 246, 215, 225, 177, 171, 198, 88, 96, 166, 204, 68, 159, 113, 246, 1, 45, 86, 83, 187, 218, 146, 153, 231, 128, 143, 185, 49, 151, 206, 160, 192, 250, 43, 177, 62, 86, 182, 213, 225, 124, 124, 6, 211, 211, 47, 48, 5, 247, 49, 93, 138, 210, 164, 162, 153, 225, 100, 138, 4, 152, 224, 197, 116, 173, 240, 122, 153, 13, 156, 148, 136, 168, 240, 186, 152, 156, 128, 75, 131, 32, 162, 15, 29, 99, 86, 156, 195, 230, 237, 53, 248, 195, 219, 191, 196, 217, 242, 70, 212, 233, 103, 241, 119, 15, 116, 160, 165, 173, 13, 31, 238, 234, 198, 107, 239, 237, 64, 32, 210, 132, 153, 57, 5, 217, 74, 61, 231, 208, 194, 103, 56, 137, 43, 22, 199, 53, 80, 164, 209, 34, 162, 94, 6, 193, 231, 118, 17, 96, 137, 242, 70, 133, 14, 169, 32, 157, 45, 162, 54, 170, 226, 64, 191, 130, 125, 11, 34, 216, 186, 52, 207, 212, 112, 65, 211, 167, 54, 106, 161, 80, 48, 40, 38, 198, 92, 129, 143, 135, 94, 40, 160, 40, 234, 135, 211, 91, 86, 237, 101, 225, 127, 128, 152, 119, 12, 103, 206, 143, 202, 244, 53, 24, 241, 2, 189, 102, 152, 5, 126, 143, 208, 72, 11, 25, 225, 73, 214, 149, 72, 63, 81, 147, 2, 93, 133, 199, 69, 36, 161, 121, 81, 26, 216, 143, 123, 182, 38, 176, 229, 170, 181, 200, 164, 29, 248, 244, 29, 78, 44, 61, 217, 139, 171, 174, 91, 134, 5, 203, 154, 80, 46, 2, 183, 62, 120, 25, 81, 116, 39, 66, 161, 34, 154, 23, 55, 96, 207, 135, 221, 24, 63, 118, 6, 186, 103, 33, 141, 11, 163, 98, 170, 60, 207, 114, 40, 27, 112, 113, 124, 55, 13, 117, 107, 14, 102, 151, 41, 163, 158, 203, 151, 80, 32, 26, 155, 108, 113, 239, 116, 107, 216, 218, 229, 148, 1, 112, 88, 197, 42, 209, 108, 236, 118, 197, 127, 68, 154, 234, 197, 34, 35, 150, 197, 146, 88, 20, 233, 248, 94, 108, 232, 104, 197, 241, 222, 231, 81, 72, 3, 217, 20, 7, 164, 131, 202, 249, 2, 35, 151, 163, 39, 217, 167, 8, 56, 231, 199, 227, 80, 104, 140, 136, 164, 174, 155, 210, 179, 210, 72, 56, 81, 25, 61, 138, 7, 182, 207, 162, 163, 179, 22, 102, 98, 13, 22, 71, 239, 66, 38, 147, 199, 93, 143, 116, 34, 158, 59, 143, 215, 255, 240, 22, 14, 30, 125, 7, 83, 217, 35, 184, 236, 182, 54, 140, 197, 39, 209, 190, 42, 128, 47, 61, 114, 9, 30, 253, 47, 43, 112, 203, 230, 20, 150, 123, 246, 195, 156, 62, 193, 251, 138, 40, 148, 76, 137, 194, 162, 245, 8, 35, 77, 214, 124, 142, 89, 147, 165, 145, 101, 166, 191, 89, 41, 227, 204, 168, 142, 76, 137, 136, 46, 10, 154, 68, 198, 97, 99, 135, 232, 118, 10, 107, 80, 229, 133, 5, 84, 145, 8, 132, 141, 30, 108, 235, 172, 71, 93, 245, 58, 44, 111, 191, 31, 91, 87, 62, 140, 91, 46, 255, 9, 154, 162, 151, 32, 51, 87, 166, 87, 147, 236, 191, 78, 204, 204, 206, 226, 212, 112, 28, 190, 80, 144, 15, 52, 4, 31, 146, 222, 46, 177, 253, 228, 199, 251, 113, 199, 165, 67, 168, 107, 14, 162, 209, 123, 51, 54, 93, 114, 45, 26, 155, 154, 9, 54, 113, 252, 230, 151, 47, 162, 208, 191, 25, 151, 47, 120, 2, 165, 190, 45, 120, 241, 103, 251, 81, 118, 157, 69, 168, 57, 139, 125, 7, 222, 197, 72, 234, 16, 10, 206, 113, 172, 190, 178, 17, 127, 251, 245, 203, 241, 205, 135, 107, 208, 229, 59, 128, 169, 161, 62, 148, 13, 77, 130, 145, 75, 160, 172, 160, 60, 186, 64, 227, 146, 60, 12, 67, 199, 108, 186, 76, 7, 210, 64, 218, 35, 82, 82, 179, 35, 169, 200, 70, 236, 37, 107, 208, 88, 155, 141, 126, 162, 218, 244, 63, 96, 104, 244, 22, 193, 22, 176, 118, 201, 67, 178, 99, 36, 211, 131, 40, 176, 157, 40, 134, 135, 233, 18, 132, 135, 8, 247, 238, 135, 7, 48, 107, 121, 81, 227, 114, 243, 1, 68, 85, 182, 12, 49, 94, 142, 181, 189, 220, 191, 31, 107, 54, 54, 98, 207, 142, 28, 30, 250, 98, 141, 172, 221, 129, 145, 62, 28, 57, 249, 62, 86, 86, 255, 53, 238, 187, 251, 175, 229, 223, 150, 175, 88, 129, 183, 223, 232, 196, 107, 207, 60, 129, 75, 110, 9, 98, 102, 98, 26, 137, 66, 2, 170, 57, 198, 116, 156, 128, 207, 85, 135, 5, 235, 26, 241, 245, 21, 151, 226, 165, 231, 14, 226, 253, 99, 51, 136, 117, 108, 226, 243, 93, 50, 11, 69, 52, 69, 246, 20, 138, 37, 166, 167, 37, 51, 42, 71, 128, 100, 223, 146, 44, 72, 83, 148, 249, 116, 181, 4, 203, 112, 162, 57, 28, 64, 85, 234, 95, 80, 204, 246, 227, 143, 123, 190, 139, 125, 129, 95, 33, 26, 94, 192, 163, 3, 1, 95, 3, 214, 44, 253, 18, 234, 99, 171, 209, 80, 179, 2, 125, 103, 79, 227, 197, 221, 71, 80, 221, 182, 150, 245, 71, 160, 113, 184, 236, 214, 64, 170, 85, 26, 222, 143, 107, 111, 49, 112, 114, 127, 17, 139, 90, 183, 225, 143, 111, 191, 133, 165, 93, 157, 248, 224, 232, 11, 48, 115, 97, 172, 217, 242, 9, 28, 59, 118, 12, 107, 214, 172, 145, 134, 94, 119, 227, 141, 152, 152, 28, 194, 224, 233, 103, 176, 100, 147, 159, 169, 153, 101, 180, 136, 208, 102, 9, 69, 99, 14, 185, 210, 20, 219, 70, 45, 110, 189, 127, 57, 1, 119, 47, 94, 125, 179, 15, 174, 150, 107, 89, 50, 236, 231, 102, 145, 207, 39, 88, 101, 105, 164, 192, 58, 9, 84, 31, 115, 92, 237, 227, 116, 181, 36, 109, 122, 242, 182, 181, 132, 249, 219, 225, 246, 124, 25, 145, 80, 43, 124, 222, 90, 25, 53, 135, 74, 175, 17, 187, 5, 151, 117, 177, 77, 76, 140, 13, 225, 219, 63, 125, 14, 74, 227, 98, 168, 30, 15, 193, 163, 68, 143, 178, 166, 57, 122, 54, 147, 68, 123, 184, 23, 222, 80, 0, 229, 225, 149, 232, 29, 62, 141, 205, 91, 46, 69, 124, 38, 141, 195, 103, 159, 197, 186, 165, 55, 226, 149, 151, 95, 193, 209, 19, 135, 240, 202, 43, 47, 195, 239, 247, 203, 201, 220, 118, 251, 3, 120, 226, 251, 127, 64, 203, 170, 57, 153, 89, 186, 37, 102, 74, 67, 173, 20, 202, 74, 14, 5, 61, 201, 8, 85, 227, 134, 123, 150, 99, 104, 96, 39, 222, 124, 235, 95, 225, 104, 186, 158, 215, 170, 178, 30, 11, 172, 81, 183, 106, 147, 125, 203, 178, 173, 148, 224, 115, 225, 23, 249, 133, 223, 170, 57, 177, 53, 43, 190, 136, 165, 11, 111, 66, 77, 213, 50, 166, 68, 68, 122, 196, 52, 203, 52, 180, 66, 71, 24, 56, 124, 228, 48, 30, 254, 135, 31, 35, 238, 169, 71, 85, 99, 139, 124, 128, 97, 136, 190, 100, 194, 100, 186, 103, 199, 207, 96, 229, 170, 60, 28, 165, 78, 180, 54, 119, 97, 199, 139, 59, 112, 253, 141, 55, 227, 215, 207, 127, 31, 190, 186, 56, 252, 142, 14, 220, 253, 185, 187, 176, 121, 211, 38, 244, 246, 246, 94, 164, 238, 193, 48, 211, 62, 176, 17, 147, 131, 25, 246, 85, 161, 118, 116, 217, 58, 40, 51, 88, 135, 37, 228, 245, 4, 82, 197, 17, 210, 190, 33, 124, 230, 161, 205, 88, 218, 54, 71, 190, 188, 3, 165, 204, 36, 175, 33, 31, 46, 9, 172, 40, 161, 194, 67, 0, 162, 77, 84, 28, 172, 73, 197, 205, 169, 9, 38, 98, 17, 173, 76, 91, 66, 49, 69, 68, 100, 197, 131, 132, 225, 166, 193, 26, 203, 229, 112, 234, 244, 8, 94, 122, 235, 3, 236, 248, 160, 7, 245, 75, 151, 99, 97, 71, 187, 108, 208, 6, 7, 212, 105, 164, 80, 45, 229, 178, 224, 71, 131, 136, 212, 243, 211, 177, 10, 183, 220, 122, 3, 174, 218, 118, 136, 96, 114, 0, 253, 233, 95, 161, 173, 45, 130, 38, 79, 39, 94, 120, 225, 121, 236, 124, 107, 39, 110, 253, 244, 173, 127, 161, 81, 68, 246, 12, 14, 149, 81, 211, 238, 146, 142, 131, 67, 151, 32, 35, 229, 29, 103, 74, 220, 38, 103, 214, 81, 21, 112, 224, 147, 247, 93, 130, 202, 80, 18, 187, 246, 159, 192, 187, 189, 29, 112, 198, 22, 72, 150, 228, 20, 234, 196, 154, 151, 55, 116, 186, 54, 113, 226, 127, 27, 211, 253, 19, 234, 84, 70, 197, 139, 167, 170, 88, 167, 68, 46, 42, 5, 149, 240, 235, 33, 121, 118, 19, 140, 116, 14, 26, 79, 102, 49, 16, 207, 98, 162, 160, 33, 216, 182, 2, 145, 88, 76, 246, 167, 10, 39, 98, 24, 214, 188, 10, 82, 80, 200, 230, 209, 222, 144, 160, 231, 117, 142, 81, 3, 119, 192, 135, 190, 195, 221, 248, 205, 235, 95, 197, 246, 47, 187, 209, 127, 184, 136, 150, 75, 219, 112, 248, 240, 97, 214, 228, 81, 180, 180, 180, 252, 133, 145, 133, 66, 17, 69, 203, 166, 152, 194, 121, 66, 233, 56, 46, 200, 47, 145, 41, 150, 104, 77, 68, 208, 172, 3, 45, 43, 98, 232, 25, 157, 195, 79, 159, 188, 14, 127, 251, 141, 93, 120, 253, 176, 14, 79, 83, 23, 44, 135, 97, 167, 171, 98, 203, 49, 109, 97, 67, 159, 185, 80, 25, 86, 143, 158, 117, 147, 243, 233, 152, 243, 181, 224, 189, 190, 22, 122, 212, 73, 176, 113, 33, 16, 32, 226, 58, 189, 176, 194, 81, 170, 9, 3, 121, 26, 171, 138, 254, 36, 211, 200, 148, 199, 69, 175, 177, 111, 86, 10, 89, 132, 26, 242, 80, 3, 101, 28, 218, 247, 71, 76, 76, 13, 224, 228, 200, 83, 216, 242, 57, 54, 113, 143, 143, 77, 155, 42, 103, 58, 142, 127, 252, 199, 111, 225, 234, 171, 183, 161, 182, 182, 246, 162, 129, 84, 116, 24, 30, 233, 69, 100, 3, 251, 43, 191, 8, 7, 170, 66, 70, 205, 27, 41, 178, 75, 40, 25, 161, 101, 13, 35, 73, 153, 229, 129, 17, 82, 112, 126, 168, 23, 191, 252, 233, 13, 120, 240, 111, 222, 194, 155, 71, 253, 136, 198, 90, 229, 181, 182, 62, 117, 136, 126, 238, 82, 28, 46, 143, 236, 121, 75, 218, 44, 180, 183, 49, 122, 252, 238, 231, 0, 62, 30, 110, 242, 90, 39, 165, 144, 168, 203, 138, 64, 80, 161, 252, 231, 133, 252, 5, 237, 39, 14, 107, 126, 64, 1, 231, 14, 181, 140, 218, 14, 47, 92, 171, 95, 196, 108, 237, 147, 184, 228, 46, 11, 78, 191, 27, 121, 58, 209, 233, 215, 177, 103, 255, 30, 108, 216, 184, 1, 95, 123, 252, 107, 127, 17, 197, 147, 61, 231, 48, 62, 123, 0, 245, 139, 124, 146, 147, 10, 224, 177, 52, 251, 179, 194, 232, 138, 79, 157, 207, 210, 233, 224, 18, 101, 86, 186, 48, 139, 216, 66, 55, 14, 158, 28, 161, 33, 231, 240, 253, 127, 186, 12, 235, 218, 6, 36, 153, 145, 142, 159, 143, 164, 92, 214, 16, 18, 71, 20, 106, 158, 243, 207, 75, 0, 177, 189, 32, 69, 172, 168, 55, 89, 115, 134, 157, 154, 162, 76, 228, 57, 75, 254, 93, 24, 106, 10, 224, 98, 241, 90, 20, 224, 217, 153, 115, 188, 155, 212, 176, 82, 65, 237, 66, 47, 234, 22, 248, 73, 216, 45, 41, 124, 75, 236, 101, 53, 237, 30, 236, 63, 241, 18, 142, 245, 142, 147, 149, 144, 18, 178, 166, 83, 148, 93, 227, 212, 159, 191, 249, 183, 31, 160, 105, 125, 138, 76, 80, 101, 146, 242, 65, 4, 185, 227, 187, 210, 152, 25, 39, 114, 43, 134, 172, 69, 221, 212, 231, 141, 44, 19, 105, 51, 112, 147, 6, 78, 146, 141, 141, 141, 14, 32, 28, 137, 227, 239, 190, 210, 4, 37, 215, 77, 135, 154, 118, 138, 139, 242, 147, 107, 17, 18, 110, 129, 76, 193, 178, 7, 183, 108, 109, 33, 146, 208, 16, 80, 14, 203, 246, 160, 97, 211, 63, 105, 144, 108, 71, 150, 212, 130, 66, 28, 89, 84, 25, 217, 254, 247, 176, 96, 240, 61, 146, 5, 2, 21, 163, 86, 200, 145, 168, 23, 237, 21, 6, 49, 185, 50, 7, 112, 7, 93, 136, 173, 61, 135, 39, 158, 248, 2, 118, 190, 189, 27, 167, 250, 70, 113, 162, 251, 28, 126, 248, 228, 55, 145, 112, 189, 142, 37, 87, 132, 164, 17, 89, 34, 228, 59, 207, 204, 225, 253, 167, 10, 68, 205, 10, 35, 201, 250, 55, 197, 97, 167, 177, 16, 4, 37, 189, 72, 32, 162, 160, 32, 127, 30, 30, 41, 178, 20, 6, 176, 113, 131, 11, 235, 23, 199, 49, 60, 48, 196, 9, 42, 114, 13, 74, 187, 176, 238, 34, 140, 78, 83, 134, 33, 172, 219, 2, 86, 113, 216, 145, 148, 161, 19, 6, 218, 134, 10, 183, 8, 78, 104, 205, 83, 65, 177, 108, 101, 145, 89, 228, 179, 51, 216, 94, 26, 199, 195, 151, 221, 131, 31, 198, 127, 9, 79, 82, 120, 155, 64, 224, 97, 51, 38, 39, 22, 138, 65, 100, 116, 153, 140, 104, 233, 214, 48, 206, 5, 246, 226, 231, 175, 221, 142, 128, 214, 2, 143, 151, 173, 107, 113, 14, 155, 46, 143, 72, 39, 247, 29, 79, 97, 232, 117, 39, 238, 114, 223, 131, 3, 205, 199, 145, 163, 90, 137, 234, 140, 110, 69, 86, 165, 20, 9, 162, 54, 33, 228, 30, 213, 144, 229, 118, 96, 100, 180, 130, 213, 107, 178, 124, 86, 2, 219, 46, 119, 227, 192, 222, 195, 184, 227, 170, 86, 182, 60, 47, 108, 249, 15, 187, 166, 210, 25, 7, 98, 76, 51, 69, 172, 187, 204, 167, 164, 100, 14, 166, 144, 82, 54, 218, 201, 60, 119, 216, 70, 26, 210, 72, 177, 190, 66, 205, 88, 73, 163, 195, 23, 68, 179, 175, 10, 206, 3, 1, 244, 135, 103, 81, 211, 68, 201, 150, 99, 156, 181, 138, 80, 61, 212, 141, 164, 88, 78, 49, 55, 3, 45, 203, 253, 104, 93, 69, 79, 27, 9, 248, 3, 126, 56, 93, 126, 140, 14, 100, 112, 110, 183, 133, 206, 137, 181, 120, 160, 122, 49, 26, 45, 55, 122, 152, 37, 73, 203, 78, 85, 195, 180, 219, 136, 68, 93, 203, 94, 100, 227, 195, 33, 48, 101, 98, 138, 2, 221, 210, 152, 57, 179, 216, 176, 214, 139, 239, 190, 57, 134, 81, 114, 234, 197, 139, 59, 164, 166, 157, 95, 201, 80, 88, 27, 46, 120, 42, 162, 233, 43, 50, 178, 194, 38, 17, 60, 241, 41, 164, 161, 33, 73, 131, 67, 70, 69, 60, 79, 208, 113, 113, 152, 10, 5, 119, 117, 19, 62, 36, 89, 79, 36, 39, 241, 80, 221, 245, 104, 223, 187, 12, 99, 31, 58, 16, 31, 100, 25, 196, 85, 100, 231, 120, 100, 45, 228, 233, 196, 178, 131, 236, 132, 189, 56, 75, 150, 52, 151, 42, 163, 231, 80, 6, 239, 63, 77, 70, 243, 252, 34, 60, 226, 248, 2, 110, 170, 91, 131, 159, 236, 223, 129, 254, 153, 81, 42, 127, 39, 159, 97, 200, 244, 20, 134, 150, 69, 186, 154, 54, 16, 149, 69, 109, 82, 206, 145, 69, 98, 38, 81, 33, 81, 175, 208, 200, 12, 90, 26, 13, 168, 94, 29, 103, 251, 227, 252, 91, 217, 38, 232, 23, 86, 4, 211, 148, 39, 190, 74, 9, 218, 124, 18, 155, 138, 37, 207, 74, 4, 181, 46, 44, 145, 170, 50, 146, 246, 58, 29, 230, 81, 21, 112, 187, 131, 56, 191, 224, 10, 124, 175, 103, 55, 190, 28, 91, 129, 255, 220, 120, 45, 250, 203, 151, 224, 200, 233, 243, 24, 82, 39, 145, 118, 167, 145, 114, 230, 161, 107, 69, 142, 91, 1, 109, 132, 146, 117, 195, 91, 136, 162, 203, 219, 137, 109, 13, 107, 208, 186, 56, 140, 119, 207, 29, 194, 139, 167, 119, 161, 146, 79, 163, 161, 186, 14, 103, 114, 67, 228, 196, 194, 40, 19, 153, 89, 58, 51, 74, 71, 171, 52, 80, 72, 46, 182, 25, 151, 102, 43, 159, 116, 134, 6, 23, 69, 70, 149, 216, 29, 188, 168, 111, 112, 96, 112, 52, 45, 201, 186, 118, 97, 81, 87, 76, 57, 165, 211, 72, 34, 150, 207, 41, 154, 176, 34, 163, 101, 35, 172, 224, 145, 118, 84, 69, 103, 182, 129, 71, 149, 76, 201, 148, 90, 84, 227, 57, 3, 254, 198, 46, 236, 114, 123, 208, 125, 108, 39, 110, 40, 25, 216, 82, 213, 142, 91, 170, 151, 176, 63, 174, 71, 153, 217, 81, 150, 173, 93, 128, 185, 37, 151, 41, 157, 17, 178, 145, 26, 210, 64, 214, 213, 145, 177, 179, 120, 122, 244, 24, 41, 219, 20, 34, 38, 75, 130, 169, 95, 229, 13, 33, 103, 21, 216, 220, 237, 200, 9, 192, 153, 220, 111, 160, 106, 161, 130, 248, 57, 34, 245, 82, 201, 166, 165, 134, 45, 18, 77, 243, 57, 17, 12, 122, 207, 85, 64, 93, 157, 138, 120, 34, 47, 203, 76, 19, 125, 196, 94, 246, 36, 139, 55, 61, 80, 137, 134, 62, 246, 166, 188, 98, 27, 41, 22, 150, 100, 237, 205, 183, 10, 135, 38, 145, 199, 6, 30, 145, 210, 194, 61, 162, 78, 105, 132, 65, 126, 233, 165, 97, 67, 91, 62, 143, 239, 142, 158, 194, 47, 166, 206, 160, 109, 224, 125, 180, 16, 238, 107, 233, 136, 16, 91, 140, 123, 158, 232, 103, 74, 57, 100, 168, 192, 39, 10, 115, 152, 99, 207, 115, 16, 220, 156, 28, 211, 79, 52, 20, 232, 26, 9, 70, 17, 214, 124, 172, 199, 140, 152, 4, 138, 140, 148, 135, 81, 84, 189, 22, 186, 95, 19, 6, 242, 122, 175, 3, 58, 59, 66, 133, 14, 205, 137, 82, 200, 56, 33, 252, 67, 229, 140, 96, 80, 69, 122, 178, 34, 163, 109, 27, 105, 137, 245, 157, 18, 213, 54, 97, 132, 33, 23, 0, 81, 226, 213, 14, 134, 78, 211, 236, 54, 33, 218, 133, 37, 16, 82, 34, 171, 189, 8, 46, 160, 214, 82, 4, 226, 154, 178, 86, 201, 116, 37, 89, 112, 241, 211, 209, 177, 5, 249, 150, 13, 232, 214, 51, 232, 102, 12, 173, 244, 132, 164, 103, 234, 241, 215, 241, 176, 51, 132, 215, 70, 15, 194, 100, 211, 14, 183, 181, 50, 106, 36, 10, 115, 73, 24, 65, 246, 84, 34, 102, 38, 151, 196, 221, 117, 107, 225, 160, 248, 158, 211, 210, 168, 162, 3, 39, 78, 233, 168, 95, 165, 34, 210, 238, 64, 213, 34, 2, 90, 193, 192, 204, 144, 33, 110, 5, 181, 3, 14, 30, 102, 187, 217, 235, 193, 150, 205, 94, 82, 67, 83, 218, 84, 102, 29, 139, 117, 38, 219, 72, 195, 129, 230, 186, 34, 86, 181, 207, 192, 74, 185, 80, 162, 33, 215, 213, 157, 192, 144, 178, 8, 231, 243, 81, 105, 136, 1, 123, 249, 81, 153, 95, 35, 52, 231, 151, 35, 165, 231, 28, 234, 60, 226, 170, 50, 35, 20, 55, 25, 203, 224, 81, 56, 143, 252, 10, 30, 146, 252, 212, 162, 155, 17, 88, 243, 9, 169, 87, 115, 233, 89, 4, 72, 245, 90, 2, 117, 104, 189, 100, 19, 30, 127, 228, 113, 252, 233, 208, 94, 28, 59, 219, 131, 7, 111, 186, 19, 185, 185, 57, 252, 236, 15, 207, 97, 101, 108, 33, 166, 18, 179, 200, 70, 51, 168, 245, 42, 200, 204, 48, 85, 127, 107, 160, 122, 137, 3, 117, 203, 237, 239, 137, 65, 19, 237, 43, 8, 104, 51, 36, 6, 104, 198, 211, 207, 205, 161, 163, 45, 140, 250, 58, 147, 145, 53, 228, 2, 152, 64, 96, 135, 96, 4, 34, 34, 38, 39, 25, 210, 10, 236, 21, 140, 131, 94, 192, 53, 141, 147, 8, 48, 53, 4, 159, 148, 169, 42, 234, 83, 212, 163, 88, 115, 23, 232, 123, 161, 87, 58, 230, 15, 65, 233, 228, 119, 155, 119, 214, 79, 188, 138, 231, 158, 188, 26, 175, 62, 243, 0, 30, 234, 232, 134, 167, 123, 7, 50, 201, 28, 172, 230, 117, 56, 92, 72, 98, 121, 172, 13, 55, 117, 44, 133, 247, 228, 105, 68, 146, 25, 252, 143, 171, 111, 69, 253, 216, 44, 154, 70, 226, 88, 27, 161, 56, 143, 182, 227, 248, 244, 0, 204, 102, 54, 252, 60, 80, 183, 214, 129, 250, 245, 140, 98, 167, 130, 196, 144, 137, 212, 132, 133, 134, 13, 236, 128, 236, 159, 137, 49, 138, 229, 198, 107, 48, 148, 95, 129, 93, 123, 114, 20, 238, 94, 36, 18, 38, 169, 170, 104, 133, 50, 146, 78, 59, 50, 5, 78, 58, 165, 35, 203, 168, 6, 148, 52, 217, 132, 129, 129, 164, 79, 246, 23, 1, 56, 134, 34, 51, 64, 214, 158, 93, 143, 54, 186, 154, 243, 61, 72, 190, 163, 17, 204, 135, 81, 45, 102, 226, 88, 215, 145, 199, 242, 213, 115, 52, 220, 137, 111, 124, 227, 26, 124, 182, 119, 22, 207, 126, 240, 46, 222, 238, 115, 225, 40, 141, 188, 180, 182, 11, 111, 238, 217, 133, 142, 216, 24, 22, 243, 158, 169, 147, 195, 172, 173, 50, 78, 232, 41, 20, 90, 91, 80, 85, 118, 98, 95, 249, 52, 188, 173, 172, 199, 162, 41, 113, 195, 83, 103, 179, 175, 44, 137, 198, 220, 176, 129, 232, 66, 21, 74, 18, 152, 157, 246, 65, 245, 213, 48, 114, 46, 28, 236, 62, 139, 235, 175, 116, 34, 30, 55, 208, 218, 64, 222, 173, 138, 53, 30, 135, 109, 164, 94, 161, 186, 78, 151, 144, 228, 68, 131, 174, 44, 102, 60, 1, 204, 21, 197, 138, 215, 133, 215, 58, 243, 111, 151, 230, 83, 210, 188, 104, 152, 13, 64, 146, 33, 205, 131, 145, 147, 133, 210, 211, 61, 135, 222, 158, 131, 240, 134, 8, 233, 238, 24, 34, 53, 139, 240, 232, 29, 213, 184, 119, 42, 135, 29, 141, 26, 140, 189, 42, 9, 153, 15, 111, 142, 246, 226, 50, 71, 148, 232, 109, 97, 194, 101, 226, 109, 159, 142, 199, 218, 111, 199, 129, 131, 167, 112, 166, 97, 16, 205, 33, 141, 198, 155, 23, 73, 188, 38, 82, 119, 202, 196, 204, 72, 9, 45, 5, 47, 202, 19, 21, 36, 75, 203, 224, 8, 144, 217, 120, 44, 156, 159, 107, 64, 15, 29, 154, 156, 181, 208, 186, 46, 0, 241, 194, 139, 70, 186, 228, 228, 11, 37, 22, 51, 243, 56, 78, 181, 224, 13, 176, 73, 179, 21, 84, 24, 62, 55, 61, 81, 178, 156, 2, 58, 100, 211, 192, 252, 82, 137, 104, 50, 130, 97, 88, 23, 223, 211, 105, 210, 72, 209, 91, 221, 85, 49, 244, 91, 171, 241, 194, 115, 187, 241, 201, 155, 35, 108, 216, 253, 244, 1, 15, 10, 116, 183, 211, 143, 53, 172, 171, 215, 223, 61, 136, 187, 23, 220, 138, 111, 159, 124, 30, 39, 75, 105, 184, 137, 170, 195, 124, 230, 223, 108, 190, 15, 158, 201, 28, 158, 30, 255, 19, 252, 183, 177, 193, 151, 8, 102, 186, 205, 202, 120, 9, 82, 147, 236, 145, 253, 30, 124, 254, 218, 171, 176, 123, 223, 81, 12, 83, 96, 23, 67, 27, 56, 182, 72, 74, 10, 4, 215, 42, 252, 236, 165, 157, 88, 65, 189, 187, 116, 81, 136, 125, 84, 182, 16, 151, 156, 120, 86, 215, 216, 96, 13, 100, 130, 30, 212, 81, 125, 231, 51, 62, 153, 166, 196, 92, 180, 25, 125, 176, 188, 78, 156, 49, 22, 192, 37, 163, 168, 204, 51, 124, 101, 30, 101, 237, 186, 150, 89, 33, 100, 153, 166, 194, 119, 245, 131, 120, 246, 249, 211, 200, 16, 85, 215, 111, 12, 195, 229, 20, 105, 167, 99, 124, 52, 129, 35, 195, 213, 56, 226, 93, 132, 154, 169, 147, 248, 206, 165, 247, 227, 237, 212, 89, 230, 162, 19, 15, 182, 173, 69, 52, 109, 226, 127, 238, 221, 129, 177, 53, 35, 104, 173, 225, 156, 120, 143, 64, 118, 209, 165, 12, 114, 235, 254, 87, 137, 222, 76, 215, 187, 239, 108, 197, 141, 233, 78, 252, 232, 153, 163, 248, 224, 76, 55, 146, 115, 204, 142, 188, 120, 213, 24, 68, 159, 117, 43, 190, 178, 45, 135, 165, 75, 252, 156, 167, 126, 33, 146, 14, 136, 140, 16, 240, 159, 23, 238, 74, 228, 96, 48, 153, 43, 44, 220, 112, 37, 137, 175, 118, 190, 129, 247, 148, 77, 56, 57, 184, 4, 62, 197, 70, 86, 229, 2, 89, 16, 93, 143, 99, 88, 20, 214, 185, 196, 24, 242, 51, 67, 208, 197, 154, 104, 3, 29, 242, 217, 39, 241, 242, 187, 63, 199, 174, 103, 62, 128, 95, 163, 199, 181, 40, 114, 13, 215, 64, 93, 125, 19, 124, 141, 237, 248, 217, 91, 63, 192, 240, 161, 23, 113, 207, 226, 107, 80, 235, 140, 160, 247, 68, 15, 158, 27, 248, 8, 3, 157, 67, 88, 112, 9, 179, 135, 74, 70, 8, 3, 169, 11, 196, 74, 253, 36, 16, 91, 71, 46, 59, 90, 198, 63, 255, 240, 117, 124, 237, 177, 78, 124, 251, 155, 29, 52, 48, 132, 153, 89, 5, 83, 44, 133, 147, 167, 39, 240, 239, 111, 156, 71, 99, 227, 34, 4, 162, 110, 26, 94, 154, 55, 82, 188, 85, 130, 189, 190, 99, 16, 141, 10, 201, 50, 61, 199, 180, 240, 59, 113, 185, 239, 8, 226, 90, 35, 118, 156, 223, 64, 103, 155, 178, 77, 96, 222, 80, 193, 89, 45, 205, 131, 124, 42, 1, 229, 248, 239, 177, 202, 63, 129, 149, 11, 163, 52, 90, 193, 241, 238, 87, 112, 40, 193, 116, 185, 242, 1, 84, 188, 15, 96, 102, 110, 18, 206, 104, 29, 2, 17, 2, 132, 94, 130, 94, 46, 192, 187, 240, 50, 188, 117, 124, 7, 142, 79, 142, 195, 113, 158, 229, 226, 41, 35, 176, 213, 68, 219, 10, 167, 172, 67, 93, 183, 233, 164, 105, 75, 94, 40, 81, 226, 94, 65, 67, 75, 91, 0, 59, 223, 154, 67, 77, 184, 27, 215, 95, 223, 7, 39, 101, 76, 85, 85, 29, 26, 26, 194, 88, 191, 206, 133, 37, 11, 128, 95, 255, 226, 79, 216, 212, 122, 29, 154, 234, 34, 23, 140, 116, 176, 38, 72, 155, 68, 95, 97, 1, 36, 217, 132, 141, 12, 213, 129, 59, 137, 69, 222, 33, 60, 51, 242, 41, 228, 137, 92, 30, 151, 189, 204, 97, 47, 246, 209, 195, 78, 15, 50, 195, 253, 232, 154, 124, 17, 127, 255, 80, 23, 174, 216, 118, 53, 101, 147, 71, 158, 213, 73, 196, 119, 190, 126, 0, 255, 245, 255, 60, 142, 228, 149, 143, 195, 191, 100, 3, 8, 187, 228, 172, 57, 251, 205, 48, 51, 70, 172, 236, 69, 35, 33, 172, 185, 43, 134, 201, 124, 156, 105, 110, 201, 181, 165, 114, 113, 126, 141, 199, 178, 69, 185, 144, 123, 122, 137, 140, 42, 71, 80, 52, 124, 152, 61, 81, 64, 34, 114, 11, 126, 184, 59, 141, 169, 248, 62, 92, 185, 41, 7, 95, 96, 90, 226, 131, 147, 44, 105, 114, 220, 131, 99, 125, 179, 56, 116, 96, 8, 13, 55, 120, 47, 212, 164, 6, 183, 82, 166, 254, 35, 71, 228, 68, 18, 4, 148, 2, 141, 108, 245, 246, 34, 78, 160, 56, 175, 213, 194, 165, 138, 234, 119, 205, 247, 67, 81, 126, 110, 100, 168, 198, 175, 204, 255, 6, 255, 235, 155, 139, 16, 174, 201, 96, 122, 230, 21, 41, 165, 156, 174, 0, 75, 179, 14, 55, 222, 218, 142, 154, 218, 107, 241, 165, 39, 158, 66, 190, 158, 233, 235, 210, 164, 124, 179, 230, 55, 10, 88, 84, 60, 228, 210, 114, 225, 204, 161, 18, 69, 169, 24, 140, 138, 57, 191, 61, 192, 142, 162, 120, 45, 95, 41, 178, 148, 178, 194, 64, 63, 82, 189, 69, 12, 150, 175, 134, 210, 178, 145, 160, 164, 227, 215, 103, 91, 240, 254, 185, 195, 232, 170, 25, 69, 117, 32, 79, 182, 147, 195, 7, 71, 102, 16, 35, 247, 117, 178, 30, 141, 98, 122, 190, 79, 242, 39, 32, 94, 141, 123, 163, 212, 132, 85, 24, 228, 168, 51, 137, 115, 168, 113, 245, 34, 17, 168, 129, 206, 73, 184, 100, 159, 180, 87, 4, 68, 20, 114, 201, 4, 54, 166, 127, 133, 175, 222, 231, 66, 63, 217, 74, 241, 68, 14, 117, 77, 46, 84, 213, 24, 112, 186, 117, 184, 61, 65, 62, 176, 22, 75, 150, 87, 225, 115, 87, 155, 248, 193, 80, 15, 92, 93, 235, 164, 97, 50, 15, 200, 99, 43, 83, 231, 209, 212, 17, 160, 99, 60, 114, 217, 83, 55, 204, 139, 155, 58, 132, 145, 21, 138, 228, 18, 137, 128, 149, 115, 34, 104, 122, 145, 62, 83, 198, 168, 113, 29, 176, 240, 74, 40, 249, 44, 181, 60, 159, 85, 213, 138, 193, 82, 19, 250, 199, 226, 80, 114, 227, 204, 148, 52, 12, 213, 143, 71, 183, 204, 97, 85, 23, 185, 46, 138, 114, 51, 0, 113, 121, 24, 198, 220, 12, 218, 2, 87, 224, 242, 250, 45, 120, 103, 238, 40, 242, 179, 62, 132, 243, 41, 214, 78, 13, 185, 37, 46, 238, 192, 176, 228, 2, 150, 130, 224, 177, 103, 208, 222, 120, 14, 143, 127, 47, 138, 209, 66, 61, 203, 58, 204, 6, 222, 143, 191, 250, 140, 11, 219, 175, 115, 82, 246, 196, 57, 217, 89, 20, 178, 1, 4, 216, 251, 84, 163, 34, 137, 185, 67, 12, 192, 230, 95, 202, 146, 147, 206, 236, 197, 138, 59, 22, 147, 164, 199, 229, 18, 137, 80, 25, 226, 21, 32, 231, 206, 231, 210, 200, 60, 239, 40, 123, 224, 47, 187, 48, 123, 134, 237, 205, 123, 11, 12, 97, 96, 49, 101, 239, 254, 16, 154, 134, 209, 114, 42, 58, 28, 254, 48, 74, 190, 8, 106, 115, 41, 116, 13, 31, 192, 167, 54, 71, 208, 186, 128, 210, 43, 39, 208, 53, 63, 2, 228, 39, 232, 69, 15, 150, 135, 23, 225, 116, 124, 18, 61, 158, 106, 108, 245, 108, 130, 171, 114, 20, 241, 124, 6, 74, 196, 186, 184, 37, 197, 18, 239, 59, 250, 222, 67, 41, 147, 194, 239, 141, 207, 195, 92, 185, 26, 158, 234, 122, 150, 182, 19, 163, 131, 167, 241, 189, 159, 127, 11, 139, 59, 85, 52, 183, 154, 50, 253, 20, 221, 137, 190, 49, 55, 65, 163, 25, 10, 13, 17, 50, 77, 188, 51, 81, 15, 253, 2, 159, 216, 22, 38, 40, 57, 48, 69, 58, 151, 41, 22, 165, 4, 51, 25, 61, 147, 245, 167, 148, 53, 120, 45, 146, 17, 182, 139, 4, 65, 169, 174, 230, 10, 2, 75, 27, 70, 115, 195, 152, 84, 163, 243, 111, 184, 255, 76, 211, 138, 151, 254, 52, 62, 71, 70, 182, 214, 231, 199, 162, 8, 51, 84, 45, 75, 212, 162, 174, 73, 203, 201, 151, 40, 54, 79, 14, 246, 99, 209, 242, 53, 88, 229, 82, 49, 54, 219, 7, 135, 49, 9, 53, 214, 106, 83, 57, 216, 210, 195, 16, 43, 7, 181, 139, 96, 118, 93, 193, 180, 244, 50, 54, 21, 158, 230, 223, 24, 133, 208, 210, 117, 152, 237, 222, 136, 35, 7, 247, 33, 90, 165, 218, 139, 207, 217, 18, 78, 165, 186, 224, 109, 107, 97, 234, 176, 231, 9, 39, 237, 127, 22, 91, 219, 250, 145, 142, 104, 56, 217, 211, 139, 108, 62, 79, 7, 48, 169, 76, 21, 154, 233, 132, 151, 189, 217, 69, 37, 145, 155, 98, 91, 192, 102, 52, 118, 46, 71, 50, 218, 130, 4, 17, 119, 169, 217, 139, 89, 37, 0, 221, 241, 241, 62, 33, 129, 17, 30, 30, 55, 142, 29, 196, 121, 222, 155, 116, 135, 228, 106, 190, 189, 10, 105, 216, 91, 92, 236, 87, 3, 38, 70, 231, 166, 16, 232, 235, 69, 173, 219, 141, 230, 150, 5, 24, 28, 235, 197, 132, 35, 34, 37, 212, 252, 235, 33, 4, 232, 128, 98, 160, 85, 246, 126, 165, 82, 144, 59, 58, 20, 85, 179, 25, 137, 201, 180, 36, 185, 238, 63, 91, 194, 134, 245, 17, 100, 115, 36, 215, 156, 108, 50, 81, 148, 91, 97, 20, 193, 138, 62, 122, 10, 203, 130, 31, 34, 233, 215, 48, 120, 124, 138, 40, 76, 134, 196, 122, 96, 108, 161, 85, 56, 211, 60, 235, 48, 235, 66, 66, 91, 138, 92, 199, 181, 48, 99, 139, 145, 200, 78, 163, 126, 238, 28, 221, 233, 101, 130, 170, 210, 89, 186, 80, 10, 114, 195, 146, 253, 86, 174, 76, 84, 14, 121, 3, 136, 101, 147, 200, 17, 40, 29, 10, 197, 134, 200, 123, 75, 24, 41, 126, 225, 228, 220, 190, 0, 218, 151, 174, 192, 56, 47, 42, 142, 158, 195, 242, 246, 165, 216, 180, 228, 211, 232, 241, 185, 112, 136, 215, 132, 84, 21, 219, 189, 124, 0, 123, 220, 169, 66, 10, 43, 125, 94, 188, 67, 93, 152, 181, 108, 177, 43, 55, 73, 113, 156, 224, 162, 149, 248, 232, 181, 95, 162, 165, 169, 130, 250, 250, 0, 252, 126, 47, 182, 212, 244, 225, 133, 103, 254, 19, 252, 65, 31, 26, 195, 163, 200, 185, 195, 72, 157, 202, 67, 53, 195, 116, 148, 120, 60, 171, 198, 10, 66, 119, 213, 65, 143, 44, 129, 217, 190, 28, 102, 168, 17, 205, 201, 243, 8, 78, 237, 151, 128, 52, 236, 169, 69, 65, 165, 17, 211, 83, 200, 5, 252, 80, 75, 37, 185, 195, 205, 50, 132, 214, 117, 32, 104, 149, 144, 98, 186, 182, 178, 21, 14, 170, 98, 63, 65, 197, 110, 174, 182, 145, 21, 217, 183, 138, 236, 143, 227, 33, 31, 73, 237, 114, 164, 247, 124, 136, 217, 68, 28, 147, 197, 36, 124, 155, 55, 32, 224, 214, 144, 54, 138, 120, 107, 226, 101, 84, 72, 0, 138, 165, 33, 12, 251, 58, 209, 214, 120, 59, 137, 124, 80, 46, 109, 104, 210, 202, 10, 2, 157, 43, 145, 90, 247, 87, 248, 241, 243, 47, 35, 26, 96, 26, 59, 75, 116, 115, 25, 119, 108, 172, 198, 94, 146, 231, 236, 165, 143, 33, 85, 42, 194, 18, 59, 63, 114, 5, 18, 235, 8, 245, 167, 87, 238, 45, 96, 254, 139, 100, 145, 98, 183, 49, 222, 7, 63, 231, 118, 54, 178, 66, 46, 201, 180, 198, 123, 229, 26, 106, 21, 187, 192, 98, 87, 6, 241, 144, 135, 168, 204, 62, 90, 98, 102, 37, 29, 72, 164, 28, 24, 173, 89, 143, 59, 19, 103, 112, 58, 57, 14, 221, 12, 202, 58, 21, 122, 82, 147, 178, 90, 188, 2, 40, 230, 209, 119, 226, 24, 170, 58, 234, 208, 120, 207, 39, 48, 123, 170, 31, 190, 134, 106, 194, 177, 138, 229, 67, 211, 152, 118, 251, 225, 175, 94, 130, 35, 3, 175, 195, 76, 82, 165, 88, 39, 101, 242, 248, 23, 223, 71, 27, 210, 80, 152, 42, 26, 107, 65, 164, 113, 253, 141, 15, 1, 219, 238, 197, 200, 206, 111, 163, 208, 211, 131, 159, 124, 243, 179, 168, 33, 16, 188, 250, 228, 1, 52, 145, 78, 106, 11, 54, 194, 60, 61, 140, 194, 169, 211, 80, 58, 131, 80, 22, 53, 177, 209, 83, 7, 202, 119, 156, 98, 47, 15, 233, 164, 158, 199, 64, 164, 19, 145, 72, 150, 78, 44, 34, 160, 233, 88, 121, 98, 15, 62, 92, 190, 12, 97, 227, 35, 52, 210, 217, 103, 153, 57, 26, 211, 62, 74, 86, 83, 227, 137, 145, 39, 187, 49, 48, 218, 4, 115, 58, 141, 156, 199, 148, 160, 163, 216, 70, 150, 100, 89, 58, 29, 244, 172, 153, 148, 172, 99, 248, 204, 32, 92, 225, 32, 131, 108, 162, 247, 189, 195, 146, 166, 53, 85, 71, 81, 27, 232, 196, 217, 196, 110, 210, 51, 70, 184, 80, 70, 163, 30, 196, 232, 161, 111, 194, 116, 81, 234, 108, 190, 23, 97, 146, 128, 48, 83, 55, 89, 153, 68, 121, 250, 48, 172, 185, 94, 60, 248, 169, 58, 124, 250, 230, 14, 244, 245, 141, 32, 92, 152, 133, 55, 216, 44, 57, 188, 218, 92, 7, 207, 184, 88, 235, 201, 160, 116, 120, 31, 17, 188, 17, 102, 3, 81, 147, 106, 200, 201, 126, 151, 41, 102, 209, 21, 223, 141, 225, 153, 179, 114, 47, 128, 127, 98, 14, 153, 68, 30, 35, 3, 167, 228, 6, 167, 181, 154, 203, 198, 3, 102, 132, 146, 29, 66, 93, 54, 139, 80, 192, 131, 151, 154, 107, 48, 189, 38, 138, 155, 107, 89, 179, 101, 251, 237, 128, 109, 36, 233, 92, 67, 88, 193, 245, 183, 94, 143, 233, 185, 18, 6, 79, 156, 162, 220, 242, 161, 97, 113, 155, 92, 238, 136, 54, 212, 34, 80, 21, 145, 108, 162, 221, 179, 26, 67, 4, 28, 195, 57, 138, 83, 163, 123, 201, 49, 211, 88, 189, 237, 243, 184, 132, 196, 242, 216, 228, 97, 56, 199, 15, 34, 83, 25, 64, 62, 63, 139, 176, 95, 197, 39, 63, 17, 68, 42, 187, 159, 45, 37, 134, 175, 222, 219, 134, 127, 221, 245, 59, 116, 92, 113, 19, 50, 186, 15, 37, 82, 60, 95, 236, 60, 91, 210, 9, 68, 103, 182, 163, 137, 105, 123, 46, 228, 64, 42, 117, 4, 147, 70, 55, 166, 4, 94, 144, 233, 212, 7, 98, 136, 178, 149, 165, 85, 31, 106, 195, 97, 56, 243, 57, 153, 202, 155, 143, 141, 99, 52, 89, 132, 183, 162, 35, 77, 20, 239, 47, 86, 208, 229, 30, 194, 194, 245, 141, 8, 223, 182, 12, 40, 216, 124, 92, 147, 240, 71, 239, 123, 53, 50, 158, 248, 17, 204, 165, 86, 97, 114, 100, 0, 110, 175, 31, 75, 175, 220, 128, 2, 17, 242, 252, 241, 94, 180, 46, 111, 70, 99, 243, 98, 44, 168, 235, 66, 126, 116, 20, 231, 211, 73, 184, 172, 60, 26, 253, 173, 108, 234, 131, 120, 119, 100, 23, 229, 218, 52, 82, 233, 105, 130, 77, 0, 211, 169, 12, 2, 211, 121, 104, 90, 136, 105, 52, 6, 85, 171, 199, 103, 238, 92, 206, 230, 60, 128, 167, 126, 254, 48, 150, 220, 244, 79, 72, 137, 87, 15, 253, 175, 194, 93, 91, 70, 109, 223, 34, 44, 125, 35, 131, 220, 210, 143, 80, 140, 85, 161, 89, 137, 161, 125, 174, 5, 77, 165, 40, 130, 211, 30, 36, 168, 48, 202, 14, 55, 22, 206, 173, 199, 185, 234, 12, 212, 236, 33, 92, 174, 207, 226, 136, 169, 97, 188, 34, 246, 59, 168, 104, 227, 17, 101, 192, 86, 71, 29, 168, 11, 179, 221, 205, 136, 173, 160, 42, 73, 106, 69, 153, 33, 204, 53, 146, 146, 96, 107, 115, 15, 246, 143, 47, 65, 77, 83, 19, 154, 187, 22, 195, 229, 113, 211, 200, 44, 102, 39, 198, 209, 177, 217, 137, 161, 248, 113, 132, 138, 215, 19, 73, 83, 104, 168, 101, 142, 231, 153, 26, 133, 9, 244, 127, 248, 44, 90, 186, 234, 217, 180, 103, 161, 81, 3, 90, 206, 44, 130, 77, 94, 36, 199, 114, 232, 61, 149, 69, 172, 174, 4, 171, 124, 22, 98, 179, 237, 93, 247, 47, 66, 209, 74, 82, 52, 191, 1, 119, 244, 54, 152, 103, 200, 158, 86, 117, 98, 66, 169, 195, 241, 129, 157, 240, 152, 31, 97, 113, 223, 10, 172, 27, 187, 28, 62, 53, 134, 44, 123, 105, 162, 154, 58, 119, 178, 140, 28, 251, 104, 94, 137, 96, 107, 191, 142, 168, 59, 0, 197, 227, 194, 70, 246, 69, 51, 168, 200, 149, 133, 60, 85, 203, 233, 153, 18, 186, 174, 171, 150, 123, 13, 76, 34, 176, 233, 137, 37, 212, 255, 254, 200, 213, 91, 149, 217, 195, 93, 130, 175, 45, 105, 40, 98, 58, 118, 61, 206, 14, 138, 151, 31, 118, 173, 186, 253, 46, 244, 29, 57, 192, 52, 217, 128, 225, 137, 195, 212, 155, 103, 165, 190, 203, 38, 243, 236, 95, 35, 112, 120, 44, 196, 66, 148, 79, 126, 34, 89, 128, 112, 205, 158, 25, 223, 151, 128, 167, 209, 133, 146, 83, 65, 106, 176, 132, 173, 235, 125, 28, 62, 203, 86, 144, 102, 26, 167, 209, 214, 236, 197, 239, 255, 184, 143, 245, 216, 132, 197, 222, 141, 56, 49, 181, 147, 36, 225, 45, 177, 158, 140, 224, 112, 45, 234, 70, 91, 81, 27, 90, 134, 99, 91, 131, 232, 94, 23, 38, 130, 167, 161, 79, 156, 99, 41, 141, 163, 173, 102, 6, 24, 126, 19, 207, 159, 57, 139, 68, 197, 73, 174, 77, 137, 118, 225, 77, 55, 147, 114, 253, 149, 181, 184, 230, 203, 77, 80, 8, 142, 198, 204, 28, 244, 170, 117, 31, 58, 244, 200, 53, 191, 64, 185, 34, 213, 188, 226, 72, 227, 206, 134, 167, 233, 181, 211, 232, 57, 74, 34, 208, 63, 132, 114, 170, 12, 127, 40, 138, 116, 114, 26, 115, 103, 124, 32, 14, 160, 205, 123, 19, 141, 94, 65, 45, 73, 36, 44, 122, 81, 206, 82, 108, 207, 22, 144, 60, 150, 165, 231, 76, 212, 92, 19, 65, 110, 132, 68, 97, 198, 194, 225, 9, 5, 239, 238, 166, 140, 176, 92, 114, 87, 72, 124, 234, 28, 69, 238, 24, 194, 206, 34, 102, 115, 207, 35, 165, 211, 81, 150, 15, 153, 233, 26, 204, 197, 199, 225, 43, 118, 225, 36, 193, 233, 217, 134, 2, 78, 204, 26, 152, 58, 73, 89, 197, 200, 181, 79, 245, 96, 163, 53, 133, 237, 217, 19, 24, 204, 150, 113, 40, 99, 225, 119, 19, 57, 242, 236, 18, 26, 189, 76, 200, 156, 137, 72, 135, 31, 87, 60, 214, 42, 182, 44, 210, 64, 242, 91, 138, 254, 82, 248, 242, 95, 171, 95, 255, 214, 207, 207, 105, 201, 221, 87, 40, 227, 253, 237, 8, 6, 17, 13, 167, 176, 110, 137, 88, 227, 217, 4, 45, 188, 12, 115, 147, 9, 84, 215, 54, 176, 166, 52, 76, 14, 157, 135, 155, 12, 191, 18, 25, 194, 120, 230, 32, 42, 105, 63, 4, 207, 79, 13, 101, 224, 173, 241, 50, 122, 110, 26, 201, 212, 58, 94, 64, 96, 5, 191, 83, 149, 20, 210, 22, 60, 153, 34, 214, 173, 84, 49, 27, 47, 32, 151, 214, 144, 156, 245, 226, 181, 63, 22, 48, 75, 89, 55, 169, 237, 65, 243, 146, 45, 104, 239, 250, 111, 232, 61, 244, 91, 164, 235, 19, 112, 134, 111, 67, 42, 33, 86, 197, 201, 93, 115, 6, 60, 147, 83, 104, 168, 12, 99, 153, 171, 200, 50, 112, 162, 43, 228, 66, 140, 189, 202, 79, 44, 89, 69, 249, 230, 98, 226, 141, 45, 15, 224, 222, 111, 45, 70, 176, 142, 74, 105, 44, 9, 99, 118, 22, 102, 253, 134, 163, 153, 234, 7, 31, 213, 44, 197, 107, 148, 187, 190, 243, 136, 123, 114, 251, 71, 152, 74, 7, 208, 24, 195, 165, 107, 21, 172, 217, 112, 2, 239, 245, 91, 216, 123, 166, 22, 163, 147, 156, 188, 67, 108, 43, 115, 160, 168, 76, 96, 184, 176, 19, 94, 189, 3, 173, 45, 171, 208, 51, 250, 58, 220, 43, 220, 72, 82, 85, 56, 197, 234, 94, 138, 236, 167, 94, 101, 234, 16, 220, 250, 11, 208, 7, 115, 88, 180, 54, 204, 40, 137, 253, 61, 1, 228, 114, 30, 188, 242, 78, 10, 131, 4, 140, 236, 28, 197, 113, 220, 66, 56, 86, 34, 14, 84, 144, 205, 18, 3, 147, 22, 86, 20, 118, 193, 61, 123, 134, 170, 190, 17, 19, 211, 163, 200, 204, 156, 67, 75, 140, 153, 32, 250, 121, 214, 130, 75, 87, 240, 201, 118, 31, 110, 102, 246, 121, 91, 188, 240, 110, 13, 227, 246, 45, 33, 202, 65, 142, 55, 146, 128, 49, 53, 3, 195, 31, 44, 207, 134, 238, 253, 138, 162, 6, 75, 74, 62, 151, 97, 218, 177, 145, 207, 252, 238, 6, 215, 222, 47, 252, 14, 169, 124, 16, 181, 245, 64, 29, 139, 183, 138, 69, 226, 170, 70, 50, 31, 33, 101, 162, 62, 44, 185, 81, 209, 114, 114, 145, 216, 69, 74, 167, 177, 95, 21, 73, 240, 29, 30, 21, 149, 185, 36, 163, 157, 130, 42, 118, 60, 7, 20, 244, 158, 204, 226, 39, 207, 146, 124, 79, 166, 113, 239, 157, 13, 72, 166, 11, 24, 25, 43, 163, 239, 76, 133, 128, 226, 195, 117, 219, 155, 177, 126, 101, 4, 129, 48, 35, 225, 242, 179, 101, 85, 51, 122, 236, 207, 174, 16, 154, 216, 79, 167, 233, 180, 118, 191, 19, 35, 172, 179, 50, 121, 106, 155, 71, 147, 47, 157, 60, 20, 182, 138, 46, 222, 137, 40, 84, 63, 26, 180, 136, 106, 115, 212, 4, 29, 26, 79, 193, 74, 37, 161, 251, 131, 165, 15, 166, 175, 190, 191, 170, 235, 139, 207, 183, 182, 83, 6, 138, 77, 246, 242, 199, 25, 128, 154, 126, 127, 157, 179, 251, 239, 255, 217, 49, 178, 239, 10, 136, 205, 181, 254, 40, 181, 100, 128, 159, 164, 41, 94, 138, 74, 34, 26, 41, 6, 175, 245, 218, 175, 6, 228, 11, 89, 205, 94, 117, 22, 180, 174, 64, 80, 40, 39, 233, 109, 19, 191, 121, 109, 20, 111, 239, 157, 69, 34, 111, 160, 88, 22, 203, 153, 14, 68, 188, 76, 181, 166, 0, 46, 91, 29, 198, 37, 235, 195, 136, 53, 121, 237, 251, 132, 98, 160, 46, 4, 57, 167, 253, 195, 223, 245, 44, 228, 251, 251, 11, 255, 35, 225, 194, 255, 58, 176, 230, 101, 159, 148, 101, 140, 92, 201, 144, 20, 209, 44, 18, 3, 156, 204, 160, 186, 245, 7, 206, 227, 150, 71, 135, 227, 53, 31, 46, 88, 212, 130, 80, 36, 242, 177, 145, 114, 115, 46, 235, 13, 102, 214, 161, 78, 191, 112, 135, 54, 250, 194, 231, 148, 68, 247, 70, 165, 156, 139, 89, 170, 71, 181, 156, 126, 203, 36, 163, 177, 232, 12, 56, 253, 84, 246, 94, 123, 82, 114, 113, 90, 147, 235, 158, 242, 29, 66, 41, 41, 119, 17, 167, 57, 199, 225, 209, 18, 102, 146, 246, 27, 98, 183, 91, 69, 36, 232, 68, 172, 154, 71, 149, 216, 97, 98, 43, 31, 33, 133, 236, 125, 11, 134, 189, 119, 193, 154, 223, 152, 97, 86, 216, 118, 210, 54, 53, 179, 85, 227, 197, 255, 147, 162, 124, 108, 181, 98, 137, 151, 221, 174, 112, 194, 12, 118, 30, 169, 84, 95, 243, 219, 114, 240, 170, 223, 66, 241, 151, 53, 202, 63, 177, 223, 86, 172, 64, 254, 95, 1, 6, 0, 81, 64, 170, 115, 53, 113, 143, 144, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130], true, true);
Module['FS_createDataFile']('/assets', 'testOut.jpg', [255, 216, 255, 224, 0, 16, 74, 70, 73, 70, 0, 1, 1, 1, 0, 96, 0, 96, 0, 0, 255, 219, 0, 67, 0, 2, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 5, 3, 3, 3, 3, 3, 6, 4, 4, 3, 5, 7, 6, 7, 7, 7, 6, 7, 7, 8, 9, 11, 9, 8, 8, 10, 8, 7, 7, 10, 13, 10, 10, 11, 12, 12, 12, 12, 7, 9, 14, 15, 13, 12, 14, 11, 12, 12, 12, 255, 219, 0, 67, 1, 2, 2, 2, 3, 3, 3, 6, 3, 3, 6, 12, 8, 7, 8, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 255, 192, 0, 17, 8, 1, 42, 0, 240, 3, 1, 34, 0, 2, 17, 1, 3, 17, 1, 255, 196, 0, 31, 0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 255, 196, 0, 181, 16, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 125, 1, 2, 3, 0, 4, 17, 5, 18, 33, 49, 65, 6, 19, 81, 97, 7, 34, 113, 20, 50, 129, 145, 161, 8, 35, 66, 177, 193, 21, 82, 209, 240, 36, 51, 98, 114, 130, 9, 10, 22, 23, 24, 25, 26, 37, 38, 39, 40, 41, 42, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 255, 196, 0, 31, 1, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 255, 196, 0, 181, 17, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 119, 0, 1, 2, 3, 17, 4, 5, 33, 49, 6, 18, 65, 81, 7, 97, 113, 19, 34, 50, 129, 8, 20, 66, 145, 161, 177, 193, 9, 35, 51, 82, 240, 21, 98, 114, 209, 10, 22, 36, 52, 225, 37, 241, 23, 24, 25, 26, 38, 39, 40, 41, 42, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250, 255, 218, 0, 12, 3, 1, 0, 2, 17, 3, 17, 0, 63, 0, 253, 252, 162, 138, 40, 0, 162, 138, 40, 0, 160, 156, 81, 77, 148, 237, 140, 158, 159, 90, 0, 249, 191, 254, 10, 133, 251, 68, 69, 240, 79, 246, 110, 187, 211, 97, 104, 127, 181, 124, 108, 36, 210, 33, 142, 69, 221, 139, 102, 76, 92, 200, 7, 124, 70, 194, 48, 115, 195, 76, 135, 156, 96, 255, 0, 57, 127, 240, 86, 239, 16, 155, 239, 218, 19, 65, 11, 133, 181, 240, 255, 0, 133, 47, 136, 80, 126, 84, 150, 226, 210, 113, 25, 31, 247, 238, 76, 126, 53, 247, 15, 252, 21, 7, 254, 10, 35, 111, 251, 76, 126, 216, 23, 154, 126, 135, 125, 29, 199, 134, 188, 53, 175, 67, 225, 157, 54, 88, 219, 41, 55, 217, 162, 123, 251, 201, 87, 4, 134, 12, 33, 67, 184, 117, 89, 163, 82, 1, 78, 127, 63, 63, 224, 163, 115, 182, 183, 125, 38, 180, 205, 187, 237, 94, 22, 209, 165, 103, 29, 139, 166, 171, 19, 115, 245, 120, 255, 0, 49, 95, 51, 42, 174, 190, 59, 159, 236, 164, 210, 252, 175, 243, 63, 66, 192, 225, 35, 135, 202, 100, 151, 197, 38, 156, 190, 78, 246, 249, 89, 124, 217, 242, 191, 237, 87, 227, 25, 181, 211, 225, 93, 33, 89, 164, 135, 77, 182, 51, 34, 41, 201, 243, 31, 203, 129, 128, 252, 45, 20, 254, 53, 173, 163, 120, 194, 251, 83, 209, 117, 205, 62, 222, 232, 218, 218, 89, 90, 91, 173, 196, 219, 136, 253, 200, 219, 184, 171, 118, 45, 230, 201, 140, 159, 245, 89, 97, 147, 29, 112, 95, 20, 53, 3, 168, 107, 183, 151, 10, 223, 188, 181, 107, 131, 17, 31, 192, 60, 228, 193, 252, 11, 49, 21, 165, 99, 227, 184, 238, 62, 11, 127, 96, 45, 156, 127, 104, 241, 14, 186, 154, 141, 228, 200, 231, 205, 185, 72, 98, 48, 91, 219, 40, 227, 106, 196, 178, 207, 208, 252, 230, 237, 51, 143, 43, 21, 238, 114, 46, 68, 172, 124, 236, 177, 83, 120, 138, 146, 79, 127, 198, 202, 201, 124, 238, 143, 114, 248, 7, 240, 139, 91, 248, 221, 224, 13, 15, 195, 250, 110, 157, 36, 122, 78, 189, 174, 218, 219, 222, 222, 179, 109, 142, 210, 107, 166, 120, 109, 6, 206, 178, 58, 217, 174, 165, 114, 241, 169, 93, 170, 133, 203, 14, 3, 125, 183, 255, 0, 5, 52, 253, 145, 47, 124, 7, 251, 20, 233, 90, 237, 247, 218, 46, 181, 79, 9, 93, 195, 170, 95, 200, 241, 32, 99, 231, 101, 47, 20, 5, 10, 170, 155, 39, 184, 108, 1, 255, 0, 44, 147, 57, 60, 152, 126, 10, 252, 81, 240, 79, 236, 45, 251, 60, 124, 56, 95, 20, 252, 82, 240, 23, 129, 245, 173, 5, 110, 245, 209, 97, 107, 225, 251, 143, 20, 95, 106, 186, 149, 244, 105, 107, 61, 212, 236, 146, 69, 2, 52, 54, 164, 218, 194, 177, 179, 98, 221, 166, 7, 115, 130, 195, 148, 253, 160, 127, 224, 174, 62, 32, 253, 160, 60, 33, 174, 252, 62, 186, 147, 67, 241, 118, 135, 227, 207, 14, 249, 90, 110, 175, 113, 229, 105, 11, 52, 83, 61, 229, 165, 227, 8, 10, 135, 121, 214, 69, 81, 9, 70, 88, 227, 242, 101, 15, 231, 6, 19, 167, 131, 90, 165, 74, 149, 99, 58, 91, 39, 174, 143, 94, 250, 237, 177, 250, 70, 2, 133, 12, 62, 22, 181, 12, 68, 151, 180, 112, 90, 93, 93, 109, 203, 167, 110, 102, 187, 235, 181, 238, 120, 230, 183, 241, 93, 188, 125, 251, 29, 120, 15, 93, 154, 245, 161, 213, 60, 19, 172, 141, 39, 81, 187, 45, 251, 200, 2, 237, 178, 46, 15, 92, 148, 158, 222, 224, 158, 237, 111, 158, 217, 167, 124, 79, 241, 23, 252, 44, 175, 128, 151, 26, 227, 90, 121, 154, 135, 131, 94, 225, 53, 91, 8, 208, 55, 159, 164, 93, 72, 22, 250, 216, 43, 112, 223, 101, 187, 9, 52, 65, 129, 1, 128, 56, 32, 98, 190, 127, 248, 35, 226, 153, 117, 223, 132, 255, 0, 19, 252, 43, 114, 216, 251, 109, 133, 190, 183, 18, 177, 255, 0, 150, 254, 75, 91, 201, 199, 251, 211, 43, 125, 99, 30, 149, 232, 191, 2, 190, 39, 77, 225, 15, 28, 181, 158, 187, 27, 67, 253, 175, 105, 155, 248, 159, 7, 18, 129, 246, 59, 229, 61, 137, 220, 171, 48, 237, 251, 205, 220, 241, 93, 85, 176, 170, 159, 189, 13, 226, 255, 0, 7, 175, 249, 158, 94, 7, 53, 142, 33, 42, 117, 93, 149, 72, 217, 191, 239, 71, 69, 39, 247, 71, 214, 230, 23, 196, 143, 248, 40, 239, 196, 111, 20, 252, 77, 184, 241, 7, 139, 164, 210, 252, 119, 170, 107, 82, 27, 187, 157, 78, 255, 0, 204, 89, 175, 92, 227, 231, 202, 182, 197, 82, 133, 48, 161, 2, 160, 194, 128, 2, 128, 59, 77, 19, 254, 11, 123, 226, 15, 0, 233, 194, 219, 76, 248, 103, 225, 88, 111, 35, 249, 76, 151, 87, 82, 202, 153, 31, 236, 160, 67, 255, 0, 143, 87, 205, 127, 20, 188, 14, 254, 7, 212, 124, 73, 225, 246, 28, 232, 51, 27, 187, 2, 14, 124, 203, 57, 31, 128, 61, 118, 179, 99, 142, 238, 217, 251, 181, 202, 104, 186, 35, 252, 70, 211, 164, 91, 88, 191, 226, 101, 167, 199, 185, 240, 167, 109, 196, 99, 161, 39, 166, 241, 211, 7, 239, 14, 224, 131, 159, 106, 141, 87, 31, 122, 44, 248, 28, 85, 46, 89, 186, 107, 71, 219, 211, 70, 143, 171, 126, 34, 127, 193, 93, 190, 37, 124, 110, 215, 252, 7, 31, 137, 180, 191, 8, 233, 62, 27, 210, 60, 67, 6, 177, 34, 105, 22, 51, 71, 36, 192, 67, 61, 180, 129, 158, 89, 164, 202, 249, 23, 87, 11, 128, 7, 36, 122, 87, 132, 124, 82, 187, 31, 15, 62, 46, 223, 152, 216, 109, 142, 73, 83, 114, 158, 240, 186, 74, 164, 127, 192, 163, 199, 227, 89, 54, 94, 29, 109, 71, 193, 119, 22, 111, 19, 195, 123, 165, 220, 128, 241, 55, 222, 69, 127, 144, 175, 184, 12, 202, 192, 244, 33, 150, 185, 239, 31, 107, 178, 120, 142, 59, 123, 169, 25, 154, 102, 154, 125, 236, 122, 156, 99, 175, 224, 69, 103, 43, 212, 159, 52, 245, 123, 27, 84, 169, 236, 176, 188, 144, 238, 164, 189, 109, 103, 249, 35, 250, 110, 255, 0, 131, 85, 63, 106, 6, 248, 147, 240, 99, 226, 199, 195, 75, 139, 163, 112, 124, 7, 172, 88, 107, 26, 122, 179, 159, 220, 90, 106, 86, 107, 186, 37, 7, 141, 162, 226, 210, 226, 83, 143, 226, 185, 57, 234, 51, 250, 193, 95, 206, 7, 252, 25, 223, 241, 41, 143, 237, 215, 226, 171, 27, 171, 168, 173, 163, 241, 39, 195, 251, 145, 20, 18, 200, 21, 174, 231, 177, 184, 210, 34, 27, 1, 57, 102, 8, 211, 62, 6, 72, 93, 199, 128, 13, 127, 71, 245, 88, 125, 32, 163, 219, 79, 187, 67, 201, 196, 84, 231, 168, 231, 221, 220, 40, 162, 138, 216, 196, 40, 162, 138, 0, 40, 162, 138, 0, 40, 162, 138, 0, 40, 162, 138, 0, 40, 162, 138, 0, 40, 162, 138, 0, 43, 225, 239, 248, 47, 39, 252, 20, 70, 199, 246, 18, 253, 141, 245, 11, 75, 29, 82, 59, 63, 28, 248, 241, 37, 211, 116, 117, 18, 109, 146, 206, 220, 1, 246, 171, 211, 199, 221, 141, 24, 40, 201, 25, 121, 144, 14, 248, 251, 43, 199, 190, 59, 210, 62, 23, 248, 39, 88, 241, 39, 136, 53, 27, 77, 31, 65, 240, 245, 140, 250, 158, 167, 127, 117, 39, 151, 13, 149, 172, 49, 180, 147, 76, 237, 217, 81, 21, 152, 158, 192, 87, 225, 47, 199, 31, 138, 58, 191, 237, 144, 191, 22, 255, 0, 111, 47, 29, 248, 90, 255, 0, 73, 248, 111, 225, 13, 37, 188, 21, 240, 95, 195, 250, 157, 168, 121, 53, 141, 66, 230, 79, 178, 89, 234, 115, 69, 34, 136, 222, 218, 25, 111, 37, 184, 112, 55, 15, 56, 58, 171, 72, 45, 84, 203, 205, 138, 147, 228, 113, 93, 127, 5, 213, 154, 209, 254, 34, 254, 181, 63, 53, 190, 30, 120, 158, 226, 235, 226, 55, 129, 108, 90, 73, 22, 234, 223, 195, 250, 231, 138, 47, 3, 31, 157, 103, 189, 180, 184, 104, 213, 189, 89, 109, 163, 133, 114, 125, 43, 67, 246, 168, 241, 71, 252, 39, 127, 179, 52, 151, 209, 149, 105, 91, 194, 186, 123, 198, 192, 255, 0, 4, 119, 22, 76, 63, 95, 181, 126, 181, 115, 246, 71, 253, 156, 181, 255, 0, 139, 182, 31, 22, 62, 51, 217, 204, 182, 190, 11, 248, 99, 107, 31, 135, 139, 77, 19, 49, 212, 103, 190, 130, 75, 59, 107, 120, 159, 32, 3, 28, 105, 230, 185, 249, 176, 178, 68, 48, 60, 192, 71, 151, 233, 154, 203, 120, 131, 246, 117, 240, 254, 158, 205, 188, 173, 158, 167, 225, 123, 145, 233, 44, 114, 205, 52, 100, 253, 22, 120, 0, 250, 215, 149, 10, 92, 179, 82, 244, 127, 123, 108, 251, 60, 30, 41, 79, 15, 82, 138, 123, 169, 47, 185, 69, 126, 55, 185, 243, 174, 189, 121, 38, 163, 99, 103, 36, 121, 145, 175, 3, 198, 193, 121, 44, 217, 141, 136, 199, 251, 216, 175, 178, 190, 10, 127, 193, 44, 190, 34, 104, 126, 25, 248, 127, 227, 109, 70, 250, 203, 69, 182, 241, 23, 136, 116, 109, 14, 119, 179, 188, 198, 169, 225, 75, 75, 219, 139, 87, 75, 200, 246, 130, 35, 155, 201, 157, 101, 46, 199, 228, 73, 183, 109, 37, 193, 79, 43, 255, 0, 130, 70, 126, 201, 77, 251, 118, 255, 0, 193, 67, 62, 18, 252, 47, 186, 183, 105, 52, 75, 221, 119, 251, 75, 93, 97, 144, 23, 75, 182, 65, 117, 122, 11, 1, 242, 22, 134, 221, 227, 82, 120, 223, 42, 14, 114, 1, 253, 252, 241, 71, 252, 19, 47, 197, 62, 36, 248, 193, 226, 203, 31, 6, 248, 195, 192, 178, 120, 51, 196, 150, 177, 232, 80, 104, 190, 50, 240, 237, 238, 160, 52, 45, 58, 48, 241, 195, 103, 3, 218, 95, 91, 44, 176, 65, 28, 178, 199, 23, 156, 158, 98, 68, 203, 19, 75, 34, 69, 16, 78, 172, 195, 17, 58, 92, 177, 166, 214, 189, 250, 249, 121, 94, 231, 63, 14, 96, 240, 88, 152, 86, 169, 140, 83, 188, 82, 179, 139, 90, 93, 61, 93, 245, 109, 52, 158, 255, 0, 35, 242, 167, 226, 87, 236, 47, 240, 199, 192, 223, 16, 44, 239, 244, 157, 63, 196, 159, 19, 188, 73, 224, 159, 27, 95, 232, 158, 57, 109, 67, 93, 58, 182, 139, 175, 152, 181, 5, 54, 219, 111, 227, 180, 17, 133, 154, 207, 112, 120, 224, 150, 234, 245, 100, 44, 130, 220, 60, 108, 107, 232, 207, 217, 251, 254, 8, 49, 168, 248, 167, 199, 154, 63, 196, 239, 136, 75, 166, 233, 122, 30, 143, 28, 16, 120, 123, 193, 113, 233, 176, 201, 29, 165, 178, 134, 36, 92, 171, 239, 136, 72, 210, 59, 76, 241, 175, 155, 26, 203, 44, 192, 59, 255, 0, 172, 175, 212, 111, 134, 95, 240, 76, 143, 11, 124, 30, 241, 30, 147, 171, 248, 175, 94, 184, 248, 141, 226, 141, 10, 37, 131, 77, 158, 93, 62, 29, 47, 73, 209, 35, 10, 20, 71, 99, 167, 65, 251, 139, 101, 192, 31, 119, 36, 156, 156, 252, 204, 15, 168, 120, 250, 59, 109, 55, 69, 154, 226, 104, 255, 0, 209, 236, 99, 51, 56, 65, 143, 145, 6, 226, 0, 250, 10, 225, 206, 51, 172, 69, 122, 107, 15, 20, 160, 162, 154, 86, 90, 235, 187, 111, 91, 255, 0, 150, 135, 173, 195, 153, 70, 91, 131, 172, 177, 13, 202, 188, 164, 249, 155, 159, 195, 100, 238, 163, 24, 217, 104, 191, 189, 118, 247, 119, 105, 51, 249, 57, 241, 31, 128, 166, 248, 91, 251, 83, 248, 170, 214, 207, 202, 93, 55, 75, 209, 45, 164, 187, 79, 187, 132, 188, 181, 130, 100, 0, 116, 226, 89, 163, 92, 125, 49, 84, 254, 52, 234, 26, 150, 135, 225, 255, 0, 4, 248, 154, 250, 222, 63, 54, 235, 70, 211, 239, 227, 49, 140, 71, 119, 111, 20, 114, 105, 19, 21, 207, 36, 200, 52, 224, 36, 110, 243, 9, 176, 72, 197, 125, 103, 251, 96, 126, 202, 186, 141, 183, 196, 127, 219, 39, 80, 177, 181, 243, 174, 254, 27, 233, 190, 4, 211, 36, 219, 199, 207, 246, 91, 73, 174, 49, 238, 5, 139, 147, 143, 81, 235, 89, 95, 181, 103, 192, 8, 117, 127, 248, 33, 215, 236, 223, 241, 22, 43, 85, 251, 102, 147, 125, 226, 47, 13, 221, 74, 171, 204, 214, 211, 107, 90, 173, 196, 123, 143, 112, 147, 89, 178, 168, 236, 110, 159, 214, 189, 10, 117, 162, 227, 6, 252, 147, 249, 198, 231, 157, 44, 60, 155, 168, 169, 233, 241, 201, 124, 167, 203, 248, 90, 231, 203, 191, 21, 181, 88, 124, 79, 225, 237, 7, 196, 74, 223, 105, 107, 80, 250, 101, 228, 131, 173, 204, 14, 153, 25, 255, 0, 122, 51, 230, 12, 253, 210, 72, 234, 107, 211, 63, 224, 138, 255, 0, 179, 207, 130, 191, 104, 79, 219, 6, 219, 193, 62, 57, 182, 188, 189, 211, 53, 43, 134, 177, 11, 107, 57, 130, 66, 76, 82, 202, 102, 14, 191, 58, 24, 173, 237, 238, 101, 82, 27, 105, 113, 26, 186, 188, 101, 212, 252, 255, 0, 240, 107, 89, 109, 123, 78, 212, 60, 35, 60, 219, 38, 187, 132, 165, 163, 147, 247, 101, 66, 94, 35, 248, 54, 115, 235, 149, 21, 235, 31, 240, 77, 159, 5, 222, 248, 159, 254, 10, 35, 240, 215, 71, 181, 241, 21, 215, 129, 238, 124, 81, 171, 216, 105, 137, 168, 69, 104, 151, 77, 101, 37, 212, 235, 108, 255, 0, 187, 145, 149, 14, 34, 105, 200, 221, 145, 180, 16, 70, 79, 26, 74, 155, 84, 229, 78, 47, 91, 105, 250, 28, 21, 171, 66, 117, 41, 227, 42, 45, 46, 185, 191, 39, 243, 209, 52, 125, 121, 255, 0, 5, 23, 255, 0, 130, 76, 65, 251, 48, 90, 221, 248, 247, 192, 250, 164, 158, 36, 240, 45, 149, 212, 26, 30, 165, 119, 114, 82, 27, 187, 25, 174, 82, 67, 7, 152, 163, 229, 153, 60, 216, 89, 86, 69, 10, 195, 204, 80, 202, 65, 14, 63, 52, 181, 13, 11, 125, 199, 140, 56, 63, 103, 209, 86, 100, 92, 142, 4, 143, 58, 168, 255, 0, 199, 84, 215, 235, 31, 252, 28, 73, 251, 79, 120, 107, 225, 15, 196, 223, 0, 126, 203, 30, 0, 214, 181, 47, 16, 90, 252, 60, 213, 226, 241, 55, 196, 13, 110, 250, 72, 222, 227, 86, 214, 238, 34, 91, 123, 104, 164, 49, 162, 70, 166, 222, 210, 71, 37, 34, 81, 26, 249, 232, 184, 15, 19, 231, 243, 19, 226, 204, 16, 248, 79, 192, 151, 208, 121, 131, 237, 94, 44, 215, 46, 39, 144, 159, 225, 130, 57, 78, 51, 248, 132, 63, 240, 35, 85, 131, 141, 72, 83, 74, 171, 187, 30, 97, 90, 134, 34, 18, 169, 70, 60, 176, 139, 118, 79, 181, 146, 187, 245, 122, 159, 97, 255, 0, 193, 187, 94, 14, 147, 198, 63, 240, 88, 191, 217, 207, 71, 182, 107, 136, 127, 225, 31, 135, 84, 215, 46, 229, 136, 31, 221, 109, 211, 238, 9, 86, 32, 130, 21, 188, 164, 67, 216, 249, 160, 16, 65, 32, 255, 0, 90, 64, 228, 87, 242, 235, 255, 0, 6, 183, 252, 23, 241, 71, 143, 191, 224, 169, 26, 15, 136, 180, 70, 54, 163, 195, 182, 55, 90, 222, 191, 51, 198, 174, 44, 244, 166, 182, 150, 210, 27, 115, 187, 254, 90, 220, 73, 112, 152, 11, 200, 69, 103, 254, 2, 43, 250, 137, 69, 218, 43, 76, 59, 186, 126, 191, 215, 227, 115, 231, 171, 36, 159, 245, 253, 109, 97, 73, 197, 1, 179, 77, 147, 59, 14, 58, 211, 109, 162, 104, 161, 80, 216, 45, 129, 156, 122, 215, 65, 137, 37, 20, 81, 64, 5, 20, 81, 64, 5, 20, 81, 64, 5, 20, 81, 64, 5, 20, 81, 64, 5, 4, 226, 138, 70, 93, 227, 6, 128, 62, 80, 253, 176, 255, 0, 102, 157, 91, 254, 10, 99, 175, 89, 252, 59, 214, 238, 53, 13, 15, 246, 120, 211, 230, 75, 175, 21, 253, 142, 238, 91, 61, 75, 226, 13, 212, 79, 20, 176, 105, 209, 176, 64, 99, 210, 151, 151, 154, 226, 41, 4, 147, 58, 164, 113, 20, 85, 105, 91, 243, 159, 254, 14, 223, 253, 167, 52, 143, 129, 127, 6, 126, 18, 124, 4, 240, 189, 149, 190, 131, 167, 88, 219, 141, 116, 105, 250, 125, 180, 86, 214, 118, 150, 214, 241, 73, 99, 167, 219, 195, 26, 143, 145, 99, 205, 195, 44, 96, 42, 168, 134, 48, 51, 209, 127, 113, 130, 44, 17, 109, 85, 218, 170, 0, 0, 14, 130, 191, 33, 116, 143, 217, 123, 195, 191, 240, 86, 191, 248, 56, 151, 197, 95, 19, 174, 180, 155, 91, 207, 133, 95, 178, 173, 189, 151, 134, 238, 39, 228, 195, 226, 127, 22, 91, 188, 179, 44, 108, 1, 27, 150, 205, 230, 249, 248, 193, 107, 40, 21, 131, 36, 166, 177, 173, 79, 158, 60, 189, 237, 127, 66, 125, 228, 239, 29, 202, 218, 183, 252, 19, 202, 111, 216, 47, 254, 13, 141, 185, 240, 222, 171, 167, 46, 153, 227, 72, 100, 210, 126, 33, 120, 193, 120, 89, 99, 188, 58, 173, 141, 197, 212, 50, 100, 227, 116, 22, 40, 45, 78, 211, 130, 45, 248, 206, 121, 252, 2, 240, 134, 169, 53, 133, 255, 0, 139, 188, 40, 236, 35, 186, 146, 229, 117, 173, 52, 57, 225, 110, 20, 15, 53, 0, 245, 108, 194, 231, 60, 109, 182, 35, 189, 127, 105, 223, 180, 47, 192, 253, 15, 246, 147, 248, 27, 226, 207, 135, 222, 36, 251, 71, 252, 35, 254, 50, 210, 110, 116, 125, 64, 192, 202, 179, 44, 51, 70, 81, 218, 54, 101, 101, 14, 1, 202, 177, 83, 130, 1, 199, 21, 252, 85, 254, 217, 127, 15, 53, 159, 217, 183, 246, 164, 241, 95, 135, 111, 217, 151, 92, 240, 63, 136, 111, 180, 107, 167, 198, 209, 60, 150, 247, 15, 19, 190, 63, 184, 224, 12, 118, 42, 125, 43, 26, 212, 215, 58, 243, 86, 251, 172, 209, 232, 224, 241, 78, 150, 189, 19, 191, 222, 172, 255, 0, 11, 125, 199, 237, 87, 252, 26, 93, 251, 37, 248, 55, 225, 199, 193, 127, 138, 223, 180, 13, 246, 163, 107, 119, 174, 120, 163, 86, 111, 6, 233, 112, 91, 163, 77, 62, 137, 99, 26, 195, 121, 50, 72, 19, 37, 94, 225, 164, 131, 229, 101, 200, 75, 84, 32, 145, 33, 3, 245, 15, 225, 95, 142, 188, 27, 241, 102, 217, 53, 207, 2, 248, 163, 67, 241, 53, 169, 114, 76, 250, 125, 218, 92, 33, 193, 32, 156, 169, 35, 131, 193, 199, 126, 58, 215, 242, 87, 240, 11, 246, 227, 248, 169, 251, 17, 120, 206, 227, 198, 31, 8, 60, 105, 168, 248, 78, 109, 114, 32, 215, 80, 199, 28, 87, 86, 122, 130, 41, 102, 120, 46, 109, 102, 87, 134, 111, 45, 221, 221, 55, 161, 40, 37, 98, 164, 28, 154, 254, 130, 127, 224, 137, 223, 240, 84, 27, 95, 218, 155, 246, 47, 95, 136, 223, 17, 244, 95, 9, 248, 103, 196, 201, 173, 92, 248, 70, 218, 47, 15, 218, 60, 113, 234, 6, 210, 11, 73, 80, 71, 14, 92, 192, 166, 59, 164, 12, 187, 188, 181, 41, 145, 180, 58, 162, 249, 153, 165, 9, 185, 42, 174, 214, 209, 122, 31, 77, 146, 212, 138, 115, 195, 81, 82, 117, 37, 118, 146, 179, 82, 242, 181, 175, 162, 187, 62, 255, 0, 123, 105, 46, 38, 103, 149, 153, 155, 185, 53, 82, 255, 0, 194, 107, 174, 219, 205, 3, 175, 153, 29, 194, 24, 153, 122, 238, 12, 48, 69, 120, 158, 187, 255, 0, 5, 58, 248, 109, 103, 225, 203, 125, 74, 194, 233, 124, 73, 29, 245, 255, 0, 246, 85, 156, 126, 24, 115, 226, 25, 175, 175, 50, 227, 236, 240, 199, 98, 179, 60, 146, 254, 237, 255, 0, 118, 170, 91, 228, 110, 62, 83, 93, 119, 236, 249, 241, 39, 226, 87, 197, 95, 136, 158, 32, 185, 241, 47, 131, 35, 240, 39, 131, 237, 109, 109, 162, 210, 45, 174, 174, 68, 218, 205, 197, 209, 105, 90, 226, 89, 196, 100, 197, 20, 65, 13, 186, 164, 96, 153, 67, 172, 190, 102, 211, 133, 30, 116, 176, 242, 181, 230, 180, 61, 31, 223, 66, 46, 90, 43, 121, 167, 248, 38, 124, 99, 241, 111, 246, 78, 121, 191, 99, 191, 218, 115, 199, 26, 164, 107, 246, 143, 140, 126, 43, 241, 46, 181, 110, 202, 187, 88, 105, 26, 102, 159, 119, 111, 96, 73, 254, 37, 146, 13, 45, 174, 148, 244, 217, 120, 163, 212, 159, 158, 173, 190, 3, 220, 120, 191, 254, 13, 15, 240, 109, 236, 214, 82, 127, 105, 104, 182, 183, 254, 34, 141, 10, 124, 242, 68, 158, 40, 189, 187, 12, 63, 222, 183, 47, 143, 105, 43, 245, 51, 254, 10, 87, 162, 91, 217, 127, 193, 53, 62, 54, 197, 103, 107, 178, 93, 63, 225, 222, 189, 107, 164, 218, 218, 69, 243, 27, 137, 116, 139, 171, 43, 104, 34, 69, 25, 220, 205, 112, 177, 162, 168, 201, 44, 160, 14, 213, 243, 183, 252, 20, 43, 82, 240, 239, 252, 19, 127, 254, 8, 211, 225, 47, 133, 158, 35, 213, 44, 109, 95, 195, 158, 1, 183, 240, 221, 204, 192, 101, 110, 110, 99, 177, 91, 118, 117, 94, 119, 25, 39, 220, 193, 70, 114, 88, 14, 245, 221, 206, 163, 70, 233, 107, 204, 173, 242, 219, 240, 208, 242, 114, 217, 85, 175, 143, 133, 22, 244, 229, 149, 219, 217, 43, 55, 38, 255, 0, 22, 127, 46, 58, 246, 159, 255, 0, 8, 117, 202, 223, 195, 119, 229, 223, 218, 221, 4, 137, 87, 239, 13, 152, 253, 231, 208, 176, 108, 122, 224, 250, 87, 168, 65, 241, 114, 95, 11, 248, 207, 193, 254, 50, 240, 237, 245, 174, 139, 172, 75, 52, 119, 208, 94, 237, 19, 73, 162, 221, 193, 60, 114, 253, 162, 40, 137, 196, 140, 172, 179, 5, 70, 4, 55, 156, 70, 51, 140, 112, 127, 18, 227, 181, 241, 52, 22, 250, 149, 140, 31, 100, 181, 190, 71, 158, 56, 75, 111, 251, 44, 98, 66, 138, 9, 3, 159, 152, 72, 163, 142, 79, 65, 214, 183, 188, 55, 240, 245, 126, 24, 248, 54, 219, 90, 212, 173, 252, 205, 91, 82, 59, 44, 173, 219, 134, 228, 103, 191, 76, 14, 89, 143, 10, 49, 248, 251, 51, 146, 86, 111, 125, 143, 54, 157, 57, 74, 115, 167, 15, 130, 202, 77, 246, 219, 95, 158, 214, 58, 203, 255, 0, 13, 120, 127, 226, 130, 235, 126, 33, 214, 252, 93, 226, 169, 190, 36, 107, 87, 114, 106, 211, 220, 235, 17, 137, 87, 87, 185, 103, 243, 164, 121, 27, 239, 110, 103, 36, 179, 110, 36, 110, 45, 181, 171, 199, 252, 77, 226, 189, 67, 197, 158, 38, 181, 55, 2, 221, 100, 177, 79, 45, 18, 83, 242, 43, 238, 102, 114, 70, 121, 37, 217, 142, 49, 207, 3, 145, 94, 177, 251, 35, 254, 199, 31, 16, 127, 224, 160, 95, 25, 165, 210, 124, 23, 28, 55, 82, 105, 126, 84, 151, 87, 151, 47, 36, 54, 150, 200, 207, 128, 161, 149, 28, 130, 216, 114, 171, 180, 146, 168, 196, 244, 53, 250, 81, 240, 247, 254, 13, 35, 184, 214, 174, 109, 111, 252, 85, 241, 142, 226, 222, 75, 137, 68, 215, 150, 122, 103, 133, 211, 98, 131, 203, 66, 146, 201, 122, 173, 201, 224, 49, 143, 129, 206, 15, 74, 138, 52, 103, 6, 249, 165, 117, 210, 253, 63, 224, 30, 158, 51, 15, 83, 27, 135, 133, 92, 45, 14, 77, 90, 110, 46, 202, 73, 90, 206, 205, 189, 83, 186, 109, 111, 215, 83, 235, 79, 248, 51, 51, 224, 95, 139, 188, 39, 251, 45, 252, 89, 248, 137, 175, 125, 156, 232, 31, 16, 245, 251, 91, 109, 18, 86, 182, 217, 115, 120, 108, 18, 116, 185, 155, 204, 254, 56, 60, 217, 252, 180, 29, 164, 130, 224, 255, 0, 23, 63, 179, 149, 243, 79, 194, 175, 218, 59, 192, 31, 178, 223, 195, 237, 19, 193, 11, 224, 219, 191, 135, 190, 25, 240, 213, 164, 122, 102, 141, 107, 106, 162, 125, 62, 27, 104, 192, 84, 81, 46, 70, 8, 28, 177, 147, 146, 114, 73, 98, 114, 125, 251, 193, 223, 16, 52, 111, 136, 58, 88, 189, 209, 117, 27, 93, 70, 212, 227, 47, 12, 129, 138, 101, 67, 0, 203, 213, 73, 4, 28, 48, 6, 186, 169, 219, 150, 200, 249, 140, 78, 10, 190, 31, 248, 209, 107, 207, 254, 9, 177, 69, 20, 85, 28, 161, 69, 20, 80, 1, 69, 20, 80, 1, 69, 20, 80, 1, 69, 20, 80, 1, 69, 20, 80, 1, 69, 20, 80, 7, 143, 254, 221, 255, 0, 180, 38, 169, 251, 52, 126, 203, 222, 37, 241, 23, 134, 180, 123, 143, 17, 120, 222, 233, 97, 209, 60, 35, 163, 192, 209, 9, 53, 93, 114, 250, 100, 180, 211, 225, 253, 235, 162, 8, 254, 209, 52, 111, 43, 147, 136, 225, 73, 92, 228, 33, 21, 67, 254, 9, 219, 251, 26, 217, 126, 193, 255, 0, 178, 135, 135, 124, 1, 21, 252, 186, 230, 181, 31, 155, 170, 248, 151, 92, 157, 183, 220, 120, 131, 89, 187, 115, 61, 245, 228, 143, 181, 89, 183, 204, 236, 23, 120, 220, 177, 164, 106, 73, 219, 154, 244, 141, 127, 225, 165, 159, 139, 190, 33, 232, 30, 32, 212, 209, 110, 91, 194, 141, 52, 250, 68, 44, 191, 45, 173, 212, 177, 60, 18, 93, 127, 215, 65, 4, 146, 66, 164, 99, 106, 79, 56, 57, 243, 6, 222, 158, 128, 17, 151, 112, 175, 230, 83, 254, 14, 249, 253, 138, 63, 225, 74, 254, 220, 250, 79, 197, 75, 24, 26, 47, 14, 252, 103, 211, 51, 117, 42, 167, 201, 111, 171, 233, 241, 199, 12, 170, 66, 140, 40, 146, 220, 219, 200, 1, 229, 223, 206, 61, 137, 175, 233, 178, 190, 89, 255, 0, 130, 197, 255, 0, 193, 59, 52, 255, 0, 248, 41, 199, 236, 39, 226, 207, 134, 236, 176, 67, 226, 136, 128, 214, 252, 37, 125, 43, 109, 91, 13, 102, 221, 28, 219, 150, 60, 129, 28, 170, 207, 4, 132, 131, 136, 231, 144, 129, 184, 41, 19, 40, 220, 15, 228, 115, 246, 168, 253, 151, 252, 83, 251, 19, 252, 109, 214, 190, 25, 248, 219, 236, 114, 77, 102, 33, 187, 178, 213, 52, 247, 51, 233, 250, 181, 164, 200, 36, 180, 212, 237, 36, 199, 239, 109, 230, 137, 131, 14, 1, 193, 117, 96, 174, 165, 71, 215, 191, 240, 64, 15, 129, 94, 42, 241, 214, 187, 241, 10, 109, 67, 88, 213, 109, 254, 29, 219, 172, 58, 117, 206, 129, 231, 255, 0, 196, 183, 196, 26, 148, 191, 116, 202, 135, 42, 209, 197, 0, 109, 229, 48, 89, 103, 141, 28, 188, 50, 75, 27, 253, 61, 225, 143, 216, 245, 255, 0, 224, 180, 159, 240, 68, 91, 123, 89, 172, 87, 73, 253, 170, 191, 99, 22, 187, 240, 125, 197, 190, 163, 136, 46, 117, 29, 54, 209, 153, 226, 211, 46, 131, 99, 104, 16, 161, 142, 51, 47, 220, 184, 180, 151, 37, 22, 105, 13, 113, 255, 0, 29, 124, 61, 166, 255, 0, 193, 37, 191, 224, 155, 87, 22, 62, 19, 214, 38, 135, 197, 94, 38, 181, 138, 218, 121, 163, 152, 58, 157, 70, 100, 31, 106, 154, 34, 195, 238, 36, 121, 138, 22, 225, 246, 199, 22, 226, 73, 56, 21, 147, 212, 42, 98, 156, 98, 148, 91, 82, 216, 251, 71, 254, 9, 7, 225, 123, 127, 19, 120, 191, 226, 23, 137, 188, 54, 208, 197, 113, 172, 120, 215, 84, 208, 236, 245, 235, 114, 37, 184, 93, 62, 216, 199, 1, 138, 6, 12, 198, 0, 198, 44, 148, 84, 64, 193, 20, 153, 56, 85, 175, 212, 189, 19, 194, 113, 232, 122, 100, 54, 176, 163, 44, 118, 234, 16, 103, 147, 199, 114, 123, 253, 107, 249, 165, 255, 0, 131, 74, 255, 0, 109, 237, 63, 246, 125, 255, 0, 130, 134, 107, 94, 11, 241, 94, 176, 186, 127, 134, 126, 40, 104, 115, 71, 25, 184, 111, 244, 120, 181, 123, 82, 39, 130, 86, 118, 56, 82, 208, 139, 184, 179, 252, 79, 44, 107, 201, 218, 43, 247, 31, 246, 145, 255, 0, 130, 182, 120, 87, 192, 243, 75, 225, 223, 134, 122, 117, 199, 197, 47, 28, 92, 169, 91, 123, 125, 45, 89, 172, 173, 88, 140, 134, 153, 192, 46, 71, 180, 72, 231, 215, 104, 228, 124, 254, 97, 120, 214, 110, 79, 125, 82, 255, 0, 128, 125, 118, 30, 190, 39, 29, 66, 150, 27, 13, 74, 202, 156, 82, 109, 36, 149, 215, 86, 210, 93, 59, 245, 111, 185, 232, 191, 182, 255, 0, 237, 69, 240, 203, 246, 57, 248, 23, 113, 226, 175, 138, 23, 86, 231, 78, 181, 187, 182, 159, 78, 211, 2, 25, 174, 245, 93, 66, 25, 146, 226, 210, 43, 120, 87, 230, 150, 81, 60, 49, 186, 168, 239, 30, 78, 2, 177, 31, 207, 103, 252, 20, 235, 227, 215, 141, 191, 224, 164, 254, 56, 212, 126, 36, 124, 85, 121, 252, 27, 240, 243, 194, 240, 201, 54, 147, 225, 136, 101, 89, 165, 183, 136, 100, 121, 179, 183, 250, 182, 186, 147, 33, 84, 46, 85, 55, 4, 81, 146, 210, 63, 103, 251, 97, 127, 193, 71, 60, 29, 225, 127, 142, 218, 222, 171, 241, 163, 196, 30, 42, 241, 143, 197, 29, 46, 103, 211, 238, 116, 40, 52, 121, 173, 91, 195, 252, 130, 246, 169, 21, 199, 151, 29, 180, 96, 133, 220, 170, 205, 35, 237, 83, 35, 72, 85, 90, 190, 95, 248, 209, 251, 109, 107, 95, 183, 189, 157, 175, 129, 124, 53, 224, 53, 240, 222, 138, 250, 141, 179, 76, 175, 124, 103, 186, 212, 229, 18, 15, 34, 215, 42, 136, 136, 26, 70, 140, 144, 119, 97, 130, 29, 195, 128, 76, 61, 58, 205, 169, 114, 217, 46, 175, 244, 95, 169, 236, 71, 15, 151, 97, 105, 202, 156, 170, 42, 149, 100, 173, 203, 29, 85, 250, 38, 215, 69, 187, 87, 245, 190, 150, 242, 191, 217, 43, 224, 180, 63, 180, 31, 237, 3, 105, 97, 168, 90, 139, 127, 11, 120, 98, 217, 181, 239, 16, 136, 73, 219, 229, 196, 20, 36, 1, 137, 251, 204, 242, 67, 8, 207, 241, 75, 35, 122, 214, 150, 191, 225, 61, 99, 246, 233, 253, 171, 117, 13, 47, 71, 146, 45, 55, 195, 246, 51, 255, 0, 103, 125, 181, 19, 247, 22, 118, 234, 113, 39, 148, 156, 100, 177, 24, 85, 24, 196, 97, 20, 224, 87, 183, 120, 195, 77, 177, 253, 132, 255, 0, 96, 63, 16, 60, 19, 71, 125, 227, 143, 140, 26, 148, 150, 26, 116, 161, 54, 187, 216, 192, 239, 17, 184, 219, 206, 21, 153, 238, 36, 81, 220, 221, 68, 71, 49, 12, 116, 159, 240, 79, 127, 134, 86, 190, 1, 212, 226, 133, 23, 113, 131, 106, 72, 248, 255, 0, 91, 41, 57, 119, 62, 165, 143, 215, 128, 7, 64, 43, 191, 3, 254, 211, 86, 120, 143, 179, 29, 35, 231, 221, 158, 150, 93, 145, 198, 163, 167, 151, 213, 234, 253, 165, 75, 111, 179, 80, 133, 253, 21, 223, 175, 125, 79, 219, 207, 248, 34, 127, 236, 147, 240, 255, 0, 224, 143, 236, 247, 167, 248, 127, 69, 240, 253, 141, 138, 233, 144, 179, 137, 2, 131, 113, 169, 73, 38, 221, 247, 83, 201, 140, 201, 43, 109, 80, 115, 247, 85, 64, 0, 32, 85, 31, 79, 124, 101, 240, 60, 30, 25, 130, 59, 187, 79, 148, 77, 38, 31, 63, 117, 71, 95, 175, 29, 63, 26, 248, 143, 246, 120, 248, 201, 168, 124, 59, 183, 135, 236, 55, 19, 219, 174, 223, 52, 133, 155, 175, 202, 8, 246, 0, 97, 179, 220, 227, 167, 53, 244, 212, 95, 182, 151, 134, 229, 248, 109, 174, 107, 158, 58, 212, 33, 211, 124, 59, 225, 219, 55, 191, 212, 47, 85, 25, 228, 8, 1, 8, 145, 170, 166, 233, 36, 118, 194, 34, 42, 150, 119, 42, 170, 9, 96, 43, 213, 173, 11, 156, 217, 214, 93, 138, 194, 226, 222, 46, 155, 253, 204, 126, 202, 217, 37, 209, 45, 188, 202, 247, 218, 101, 175, 137, 108, 38, 179, 191, 179, 142, 230, 206, 85, 229, 36, 77, 224, 174, 6, 123, 112, 125, 201, 175, 145, 255, 0, 108, 159, 138, 158, 38, 255, 0, 130, 85, 69, 165, 252, 78, 240, 74, 222, 106, 154, 28, 218, 180, 122, 101, 214, 153, 230, 143, 179, 47, 154, 25, 196, 115, 100, 252, 177, 62, 194, 187, 198, 118, 185, 67, 193, 197, 121, 127, 138, 63, 224, 228, 239, 135, 111, 169, 234, 18, 248, 111, 225, 190, 169, 113, 162, 216, 220, 152, 227, 154, 109, 96, 188, 178, 40, 108, 49, 102, 72, 217, 35, 101, 231, 136, 133, 202, 100, 124, 178, 48, 193, 30, 225, 241, 35, 226, 23, 130, 255, 0, 224, 168, 223, 176, 175, 136, 237, 252, 35, 124, 186, 134, 143, 227, 125, 54, 88, 44, 100, 157, 54, 190, 157, 169, 66, 34, 154, 40, 39, 10, 91, 100, 176, 203, 228, 72, 195, 36, 52, 110, 174, 164, 163, 131, 85, 148, 225, 232, 83, 204, 40, 203, 28, 175, 75, 153, 115, 36, 218, 247, 91, 179, 122, 89, 233, 191, 157, 172, 101, 150, 102, 88, 76, 125, 71, 135, 131, 186, 123, 198, 75, 117, 229, 233, 247, 163, 215, 191, 98, 255, 0, 248, 44, 235, 254, 218, 191, 180, 22, 147, 224, 139, 31, 0, 216, 248, 14, 29, 74, 11, 137, 98, 184, 241, 63, 138, 33, 75, 253, 78, 91, 86, 255, 0, 74, 183, 176, 179, 134, 39, 23, 47, 26, 2, 196, 180, 209, 144, 129, 164, 10, 234, 140, 43, 238, 136, 216, 176, 175, 229, 247, 199, 127, 19, 181, 47, 132, 254, 16, 248, 79, 251, 64, 120, 66, 202, 123, 29, 103, 225, 174, 175, 22, 181, 37, 157, 203, 253, 166, 72, 110, 44, 192, 180, 212, 160, 148, 237, 95, 245, 176, 169, 152, 140, 12, 7, 65, 239, 95, 210, 135, 236, 239, 241, 179, 73, 253, 163, 190, 8, 248, 91, 199, 90, 27, 110, 210, 188, 85, 166, 67, 168, 219, 174, 119, 24, 195, 168, 44, 132, 224, 100, 171, 110, 82, 71, 4, 174, 71, 21, 209, 153, 70, 84, 177, 149, 112, 213, 41, 198, 156, 169, 201, 197, 168, 243, 90, 233, 218, 254, 244, 164, 223, 173, 237, 216, 249, 126, 40, 203, 105, 96, 49, 170, 149, 24, 181, 9, 69, 73, 93, 222, 253, 31, 220, 206, 210, 138, 64, 217, 52, 181, 198, 124, 232, 81, 69, 20, 0, 81, 69, 20, 0, 81, 69, 20, 0, 81, 69, 20, 0, 81, 69, 20, 0, 87, 131, 254, 215, 255, 0, 240, 80, 15, 7, 254, 199, 243, 217, 105, 250, 177, 109, 75, 95, 212, 34, 251, 76, 122, 108, 18, 109, 146, 40, 9, 117, 89, 164, 56, 37, 81, 158, 55, 81, 193, 45, 177, 241, 157, 166, 189, 226, 191, 3, 255, 0, 224, 232, 45, 75, 91, 211, 255, 0, 224, 163, 30, 27, 146, 63, 22, 127, 99, 233, 118, 223, 12, 236, 94, 215, 79, 154, 229, 21, 46, 238, 27, 84, 212, 196, 205, 18, 200, 200, 134, 77, 139, 8, 42, 100, 77, 235, 206, 239, 221, 109, 108, 113, 18, 148, 96, 220, 55, 57, 113, 147, 156, 105, 55, 77, 217, 244, 251, 207, 219, 159, 217, 219, 246, 128, 240, 239, 237, 59, 240, 147, 74, 241, 159, 133, 238, 62, 209, 164, 234, 130, 69, 1, 136, 243, 32, 146, 57, 26, 57, 34, 112, 164, 128, 202, 234, 192, 140, 250, 30, 245, 218, 179, 100, 227, 210, 191, 151, 79, 248, 36, 231, 252, 22, 79, 226, 39, 236, 121, 161, 124, 88, 240, 118, 141, 117, 30, 175, 111, 173, 106, 22, 58, 197, 133, 187, 60, 91, 116, 251, 166, 137, 161, 184, 125, 251, 27, 229, 104, 224, 181, 5, 84, 17, 149, 56, 57, 98, 231, 222, 111, 127, 224, 168, 223, 180, 111, 237, 161, 170, 235, 182, 119, 90, 230, 169, 167, 233, 186, 93, 156, 63, 97, 151, 64, 176, 54, 246, 145, 78, 202, 81, 146, 75, 198, 34, 222, 41, 247, 166, 252, 220, 58, 96, 76, 54, 144, 7, 4, 106, 59, 109, 169, 49, 197, 62, 84, 154, 214, 200, 251, 55, 246, 236, 253, 137, 237, 255, 0, 103, 175, 248, 40, 134, 181, 241, 115, 192, 126, 52, 151, 195, 54, 255, 0, 27, 188, 45, 54, 159, 227, 175, 9, 90, 170, 42, 107, 87, 86, 239, 2, 65, 122, 219, 129, 242, 227, 116, 44, 36, 40, 17, 154, 72, 179, 185, 132, 211, 99, 51, 254, 9, 53, 251, 51, 223, 126, 209, 223, 29, 190, 35, 124, 92, 213, 228, 210, 245, 239, 10, 248, 60, 221, 124, 60, 240, 254, 147, 168, 91, 71, 113, 97, 172, 121, 137, 19, 234, 210, 184, 101, 108, 14, 98, 183, 71, 25, 4, 11, 133, 101, 42, 113, 95, 18, 104, 31, 6, 127, 104, 255, 0, 143, 191, 21, 181, 47, 23, 124, 67, 248, 183, 121, 125, 117, 168, 89, 67, 165, 67, 46, 159, 162, 29, 107, 84, 180, 183, 134, 61, 137, 27, 133, 107, 43, 38, 199, 204, 219, 226, 186, 152, 179, 187, 179, 22, 44, 115, 246, 151, 192, 111, 218, 47, 197, 31, 240, 77, 15, 216, 186, 203, 194, 48, 105, 190, 43, 155, 195, 90, 28, 151, 134, 211, 86, 212, 175, 180, 235, 29, 66, 105, 110, 154, 91, 134, 68, 133, 44, 38, 87, 116, 99, 52, 138, 93, 220, 170, 171, 52, 174, 209, 198, 204, 186, 123, 57, 95, 158, 90, 33, 198, 50, 149, 110, 107, 63, 36, 113, 95, 181, 175, 252, 26, 233, 127, 240, 199, 227, 214, 151, 241, 207, 246, 43, 241, 164, 31, 7, 252, 125, 162, 205, 246, 248, 60, 45, 172, 151, 155, 73, 18, 50, 178, 205, 28, 51, 254, 248, 199, 28, 145, 179, 198, 246, 210, 164, 208, 72, 37, 100, 221, 28, 71, 109, 112, 31, 240, 81, 207, 248, 46, 5, 255, 0, 236, 13, 251, 43, 71, 240, 63, 225, 255, 0, 194, 219, 143, 128, 63, 30, 60, 81, 246, 139, 143, 22, 233, 82, 188, 49, 233, 222, 6, 75, 145, 190, 107, 205, 50, 234, 18, 208, 220, 27, 153, 36, 144, 219, 180, 108, 194, 29, 143, 185, 16, 162, 165, 121, 127, 198, 111, 248, 56, 179, 227, 183, 143, 239, 181, 13, 51, 192, 190, 44, 189, 240, 157, 148, 54, 254, 87, 219, 221, 116, 189, 73, 161, 92, 126, 242, 70, 145, 172, 17, 100, 144, 174, 10, 73, 24, 134, 40, 142, 227, 182, 241, 25, 36, 31, 155, 223, 23, 254, 58, 221, 126, 209, 191, 24, 252, 81, 227, 109, 79, 91, 184, 241, 55, 137, 47, 165, 142, 227, 196, 158, 60, 215, 128, 184, 101, 97, 26, 197, 18, 66, 161, 84, 52, 155, 35, 88, 226, 138, 36, 81, 182, 60, 42, 170, 33, 117, 231, 150, 42, 55, 180, 117, 127, 145, 239, 209, 203, 106, 180, 165, 87, 221, 79, 190, 239, 229, 250, 187, 37, 213, 158, 91, 127, 162, 234, 31, 16, 124, 123, 125, 168, 70, 215, 90, 134, 171, 169, 59, 234, 23, 218, 222, 166, 242, 58, 219, 171, 177, 103, 156, 188, 164, 188, 178, 49, 201, 243, 95, 59, 155, 36, 110, 57, 106, 250, 187, 254, 9, 127, 240, 110, 31, 17, 235, 122, 183, 138, 173, 102, 251, 14, 131, 225, 152, 238, 52, 253, 50, 242, 227, 133, 123, 195, 24, 251, 86, 161, 39, 168, 183, 138, 69, 56, 60, 98, 82, 71, 49, 100, 124, 159, 173, 92, 106, 255, 0, 20, 188, 69, 165, 120, 103, 195, 182, 183, 73, 111, 170, 94, 44, 86, 118, 242, 184, 107, 157, 74, 118, 59, 126, 209, 114, 227, 141, 221, 78, 51, 182, 48, 58, 146, 25, 143, 221, 95, 27, 252, 69, 165, 254, 200, 255, 0, 177, 206, 139, 224, 141, 26, 101, 146, 227, 86, 181, 22, 230, 68, 249, 90, 123, 88, 228, 96, 242, 30, 234, 215, 87, 109, 112, 228, 30, 85, 24, 47, 221, 192, 175, 51, 49, 169, 57, 65, 82, 95, 20, 191, 5, 213, 159, 89, 195, 56, 90, 49, 171, 44, 84, 151, 185, 73, 93, 190, 239, 162, 94, 93, 95, 125, 58, 30, 3, 241, 223, 226, 12, 191, 181, 119, 237, 177, 225, 189, 47, 75, 183, 153, 124, 63, 163, 79, 13, 158, 143, 101, 32, 220, 109, 244, 251, 52, 243, 21, 91, 253, 166, 84, 203, 127, 183, 35, 118, 53, 244, 127, 192, 125, 76, 248, 75, 82, 102, 149, 90, 54, 23, 28, 231, 140, 115, 95, 31, 126, 203, 63, 30, 60, 63, 240, 103, 226, 175, 136, 60, 97, 172, 223, 92, 29, 99, 74, 142, 56, 52, 235, 4, 179, 105, 163, 214, 89, 217, 141, 204, 5, 192, 62, 73, 59, 84, 44, 128, 240, 193, 114, 174, 187, 148, 251, 255, 0, 196, 47, 218, 91, 84, 241, 220, 235, 115, 224, 143, 132, 158, 40, 183, 73, 191, 120, 210, 235, 23, 80, 233, 225, 15, 98, 35, 27, 201, 255, 0, 190, 135, 78, 245, 237, 225, 104, 170, 88, 101, 78, 7, 208, 100, 28, 65, 150, 97, 213, 76, 102, 54, 186, 85, 37, 38, 237, 102, 223, 46, 202, 214, 78, 218, 223, 71, 109, 44, 237, 102, 126, 136, 252, 38, 248, 155, 29, 252, 80, 249, 83, 42, 149, 249, 129, 39, 59, 56, 246, 231, 235, 235, 93, 23, 237, 49, 111, 169, 124, 100, 253, 148, 188, 115, 224, 253, 30, 64, 117, 141, 115, 70, 255, 0, 137, 106, 70, 73, 146, 226, 254, 11, 171, 107, 200, 225, 69, 234, 100, 155, 236, 210, 69, 18, 143, 189, 52, 144, 168, 228, 230, 191, 53, 254, 30, 126, 218, 94, 44, 248, 89, 127, 9, 241, 151, 130, 238, 116, 253, 52, 17, 230, 94, 233, 119, 203, 124, 214, 222, 133, 224, 0, 49, 94, 164, 178, 146, 70, 62, 233, 175, 175, 62, 14, 254, 217, 158, 29, 248, 143, 225, 136, 230, 177, 190, 211, 117, 205, 46, 225, 124, 169, 118, 17, 52, 100, 17, 202, 72, 141, 209, 177, 213, 92, 3, 211, 32, 86, 202, 167, 73, 171, 31, 73, 237, 178, 220, 255, 0, 11, 83, 15, 130, 172, 155, 105, 166, 182, 146, 243, 179, 179, 183, 154, 208, 252, 92, 209, 124, 127, 170, 120, 119, 195, 207, 162, 195, 254, 143, 113, 28, 196, 44, 132, 156, 74, 0, 193, 143, 174, 7, 35, 57, 35, 158, 135, 21, 250, 131, 255, 0, 4, 60, 253, 156, 254, 63, 248, 115, 246, 108, 241, 47, 199, 143, 135, 208, 106, 90, 230, 134, 186, 140, 122, 125, 215, 131, 62, 104, 255, 0, 225, 54, 179, 182, 50, 75, 113, 115, 105, 187, 229, 105, 237, 164, 153, 163, 134, 68, 82, 76, 130, 234, 48, 210, 0, 240, 63, 177, 124, 97, 253, 133, 126, 22, 254, 214, 122, 197, 191, 138, 142, 159, 166, 143, 20, 71, 48, 184, 105, 238, 19, 45, 124, 227, 160, 185, 111, 249, 124, 67, 252, 75, 114, 30, 70, 192, 85, 158, 37, 200, 175, 186, 63, 103, 47, 218, 203, 86, 248, 84, 116, 203, 89, 180, 91, 29, 6, 27, 11, 120, 172, 225, 179, 179, 183, 88, 244, 200, 224, 64, 21, 99, 141, 19, 136, 81, 64, 1, 84, 102, 53, 225, 86, 71, 34, 159, 43, 103, 193, 224, 120, 31, 23, 151, 226, 30, 38, 78, 50, 148, 111, 202, 181, 87, 118, 234, 222, 199, 203, 30, 21, 253, 147, 99, 253, 162, 60, 43, 241, 11, 94, 240, 111, 142, 52, 88, 62, 30, 252, 80, 186, 155, 89, 178, 210, 111, 60, 54, 111, 110, 180, 141, 86, 97, 20, 119, 139, 54, 102, 143, 201, 149, 89, 102, 6, 44, 48, 87, 17, 6, 86, 80, 67, 126, 132, 127, 193, 17, 62, 30, 197, 240, 71, 246, 66, 210, 126, 28, 183, 142, 53, 205, 114, 247, 192, 165, 236, 31, 69, 191, 138, 4, 93, 22, 54, 145, 221, 22, 22, 17, 9, 164, 133, 183, 22, 86, 146, 71, 219, 157, 128, 225, 0, 174, 247, 195, 186, 15, 194, 239, 218, 22, 45, 83, 88, 210, 236, 236, 188, 63, 226, 205, 117, 124, 235, 255, 0, 44, 24, 126, 215, 112, 170, 23, 204, 112, 48, 36, 125, 160, 46, 252, 7, 101, 80, 14, 118, 140, 120, 63, 142, 254, 26, 248, 147, 225, 255, 0, 141, 45, 245, 175, 10, 94, 54, 135, 227, 77, 21, 152, 91, 206, 205, 186, 59, 158, 112, 97, 153, 49, 243, 196, 227, 177, 199, 92, 140, 16, 8, 233, 204, 51, 172, 77, 119, 106, 252, 174, 246, 77, 242, 65, 73, 242, 164, 149, 228, 162, 164, 218, 75, 91, 189, 122, 234, 105, 152, 74, 57, 173, 39, 135, 168, 157, 58, 177, 219, 153, 109, 221, 95, 249, 95, 117, 110, 143, 200, 253, 12, 8, 58, 244, 239, 245, 167, 87, 140, 254, 203, 95, 182, 46, 135, 251, 65, 105, 139, 166, 95, 61, 175, 135, 188, 125, 167, 102, 13, 87, 195, 179, 220, 15, 62, 57, 20, 101, 164, 183, 201, 204, 214, 236, 6, 229, 145, 65, 192, 225, 130, 176, 101, 30, 204, 14, 77, 112, 41, 38, 174, 143, 206, 107, 225, 234, 80, 155, 165, 85, 89, 173, 208, 81, 69, 20, 204, 66, 138, 40, 160, 2, 138, 40, 160, 2, 138, 40, 160, 2, 138, 40, 160, 0, 156, 10, 252, 130, 255, 0, 131, 146, 127, 99, 159, 25, 126, 210, 159, 30, 254, 19, 175, 131, 252, 32, 158, 44, 255, 0, 132, 139, 65, 212, 116, 123, 233, 39, 17, 71, 103, 163, 136, 39, 138, 104, 166, 158, 89, 48, 160, 55, 218, 36, 218, 167, 115, 49, 136, 249, 106, 88, 48, 63, 174, 247, 179, 173, 173, 172, 146, 63, 220, 141, 75, 182, 61, 7, 38, 190, 47, 248, 83, 123, 169, 120, 159, 67, 177, 188, 241, 20, 178, 93, 234, 139, 24, 243, 229, 155, 6, 73, 36, 192, 222, 206, 71, 86, 39, 175, 111, 78, 49, 89, 205, 39, 238, 179, 143, 25, 81, 36, 161, 223, 244, 177, 249, 251, 251, 9, 255, 0, 193, 182, 158, 19, 248, 27, 168, 195, 226, 47, 24, 106, 17, 120, 147, 197, 51, 198, 60, 209, 22, 245, 209, 236, 178, 1, 49, 195, 108, 216, 55, 24, 32, 229, 238, 129, 71, 4, 98, 222, 50, 185, 175, 209, 15, 134, 159, 176, 223, 129, 124, 44, 150, 187, 244, 159, 237, 9, 44, 151, 203, 183, 55, 39, 114, 219, 175, 247, 99, 94, 145, 175, 251, 40, 20, 14, 194, 187, 203, 27, 149, 44, 160, 26, 237, 188, 6, 182, 82, 223, 175, 218, 139, 5, 84, 227, 3, 130, 220, 127, 158, 43, 178, 17, 180, 71, 29, 135, 105, 94, 10, 240, 223, 195, 207, 14, 221, 106, 119, 22, 58, 118, 159, 166, 233, 182, 239, 115, 61, 193, 128, 50, 195, 18, 41, 103, 110, 132, 240, 1, 56, 25, 233, 222, 191, 157, 63, 248, 47, 175, 252, 21, 166, 95, 143, 31, 23, 230, 240, 190, 141, 35, 38, 143, 167, 175, 149, 99, 98, 164, 121, 81, 64, 197, 88, 59, 133, 249, 91, 126, 196, 114, 6, 229, 145, 145, 28, 153, 35, 142, 215, 31, 178, 31, 240, 92, 111, 218, 247, 71, 248, 7, 251, 57, 92, 105, 55, 87, 95, 232, 177, 89, 63, 136, 181, 203, 104, 156, 44, 147, 216, 219, 231, 236, 246, 249, 254, 19, 113, 116, 168, 170, 115, 207, 144, 234, 120, 53, 252, 194, 191, 128, 53, 127, 136, 95, 10, 124, 71, 241, 239, 198, 219, 174, 53, 47, 26, 120, 134, 77, 51, 195, 214, 251, 118, 139, 153, 215, 18, 93, 93, 42, 158, 60, 136, 11, 219, 219, 70, 160, 21, 221, 59, 96, 131, 110, 65, 242, 43, 86, 120, 138, 178, 164, 180, 140, 45, 127, 54, 250, 124, 149, 155, 245, 71, 215, 101, 184, 56, 96, 240, 208, 196, 201, 94, 165, 102, 249, 111, 246, 99, 29, 28, 190, 109, 52, 189, 25, 83, 254, 21, 150, 185, 241, 7, 194, 122, 108, 87, 218, 181, 198, 159, 30, 182, 205, 116, 150, 17, 171, 29, 182, 107, 35, 43, 222, 93, 63, 57, 50, 76, 146, 36, 81, 97, 157, 140, 51, 72, 193, 21, 98, 243, 173, 234, 254, 21, 177, 91, 182, 211, 98, 142, 72, 244, 31, 8, 166, 103, 130, 22, 3, 100, 207, 192, 139, 57, 33, 174, 166, 42, 60, 217, 50, 124, 181, 93, 138, 72, 136, 147, 234, 222, 55, 240, 134, 179, 240, 111, 224, 78, 147, 175, 220, 50, 205, 226, 143, 26, 92, 71, 167, 233, 17, 127, 28, 178, 36, 107, 18, 200, 7, 240, 67, 111, 18, 36, 113, 103, 143, 221, 147, 140, 0, 199, 39, 195, 223, 12, 244, 253, 91, 195, 150, 62, 26, 183, 221, 63, 135, 244, 69, 91, 223, 18, 95, 134, 101, 109, 78, 230, 96, 76, 118, 202, 195, 230, 13, 48, 82, 9, 206, 82, 221, 37, 96, 79, 152, 170, 121, 227, 89, 73, 251, 159, 10, 211, 238, 221, 254, 136, 246, 158, 91, 42, 109, 42, 186, 212, 118, 111, 213, 252, 49, 251, 181, 125, 146, 29, 251, 25, 120, 46, 29, 25, 245, 15, 136, 218, 236, 112, 219, 203, 117, 19, 69, 166, 70, 169, 133, 181, 181, 60, 101, 20, 244, 46, 48, 23, 190, 220, 114, 119, 154, 226, 127, 107, 47, 140, 55, 95, 16, 188, 101, 230, 180, 146, 121, 145, 72, 150, 86, 201, 187, 62, 91, 224, 34, 162, 255, 0, 215, 40, 251, 244, 222, 198, 187, 95, 140, 223, 19, 63, 177, 44, 227, 211, 224, 146, 24, 102, 100, 46, 136, 128, 44, 118, 200, 56, 51, 50, 244, 85, 94, 66, 47, 76, 251, 3, 143, 159, 60, 9, 35, 124, 78, 248, 229, 160, 218, 194, 172, 218, 124, 23, 106, 177, 169, 234, 202, 14, 230, 115, 254, 211, 17, 159, 92, 98, 157, 42, 119, 147, 196, 79, 162, 211, 201, 15, 48, 196, 123, 58, 48, 202, 232, 111, 38, 185, 159, 118, 222, 173, 255, 0, 90, 29, 199, 192, 27, 27, 127, 134, 190, 36, 212, 174, 229, 179, 134, 226, 255, 0, 79, 88, 98, 183, 150, 68, 220, 109, 228, 100, 220, 236, 185, 224, 55, 109, 221, 71, 99, 235, 233, 207, 251, 78, 93, 105, 87, 63, 52, 203, 187, 175, 50, 115, 92, 29, 143, 195, 141, 83, 198, 158, 42, 241, 28, 241, 200, 214, 182, 83, 107, 23, 106, 14, 8, 200, 73, 157, 113, 244, 24, 199, 225, 83, 120, 159, 224, 13, 198, 155, 18, 249, 51, 110, 97, 215, 112, 235, 95, 65, 70, 111, 217, 71, 78, 135, 193, 99, 41, 165, 94, 113, 91, 38, 215, 220, 236, 118, 215, 63, 180, 77, 143, 140, 213, 150, 104, 227, 50, 55, 86, 82, 57, 53, 227, 31, 17, 117, 205, 71, 192, 190, 55, 111, 16, 104, 58, 165, 246, 139, 119, 38, 20, 207, 103, 59, 68, 204, 61, 202, 158, 71, 177, 200, 53, 133, 227, 79, 134, 119, 250, 4, 198, 112, 178, 91, 182, 114, 94, 35, 128, 79, 190, 43, 151, 213, 124, 83, 168, 11, 95, 178, 106, 42, 215, 17, 145, 128, 255, 0, 197, 143, 113, 74, 165, 68, 213, 164, 140, 169, 198, 84, 230, 170, 83, 109, 53, 179, 90, 52, 125, 27, 240, 207, 254, 10, 183, 241, 99, 225, 100, 17, 180, 147, 120, 127, 196, 48, 198, 57, 109, 66, 197, 163, 147, 111, 126, 109, 222, 33, 145, 234, 71, 215, 53, 250, 15, 224, 175, 219, 151, 226, 151, 194, 139, 136, 99, 241, 247, 194, 111, 16, 77, 99, 42, 137, 6, 165, 160, 220, 11, 148, 150, 54, 28, 50, 67, 34, 174, 229, 42, 114, 15, 159, 140, 28, 215, 226, 222, 155, 124, 178, 196, 208, 179, 6, 236, 9, 254, 47, 206, 191, 99, 63, 97, 239, 218, 23, 196, 154, 127, 236, 215, 224, 127, 17, 105, 179, 73, 113, 101, 168, 105, 137, 21, 204, 12, 236, 171, 36, 246, 204, 246, 179, 23, 85, 33, 91, 116, 144, 59, 252, 224, 240, 224, 247, 174, 104, 201, 69, 219, 161, 250, 183, 1, 230, 217, 134, 97, 58, 216, 60, 69, 121, 74, 81, 138, 113, 230, 179, 186, 78, 205, 93, 166, 250, 163, 235, 111, 217, 215, 246, 245, 240, 79, 196, 237, 126, 206, 211, 71, 241, 7, 246, 126, 191, 33, 80, 186, 70, 168, 146, 105, 215, 238, 253, 2, 71, 27, 141, 147, 55, 57, 196, 45, 33, 198, 120, 198, 107, 234, 111, 15, 252, 74, 255, 0, 132, 194, 72, 215, 88, 185, 86, 149, 178, 124, 209, 195, 33, 249, 0, 7, 161, 232, 7, 229, 212, 87, 195, 51, 254, 210, 158, 3, 248, 197, 106, 52, 255, 0, 24, 120, 31, 195, 247, 82, 227, 107, 60, 150, 81, 252, 199, 232, 161, 69, 122, 119, 194, 15, 138, 90, 126, 135, 107, 111, 105, 106, 211, 199, 103, 11, 126, 225, 100, 184, 146, 95, 44, 22, 206, 11, 59, 51, 109, 29, 0, 39, 128, 0, 28, 116, 210, 113, 140, 214, 135, 215, 98, 178, 186, 179, 87, 171, 27, 62, 140, 250, 91, 227, 87, 236, 233, 168, 106, 119, 186, 15, 138, 52, 43, 159, 248, 71, 252, 105, 225, 199, 55, 222, 28, 241, 13, 178, 43, 152, 165, 100, 116, 35, 230, 220, 25, 29, 29, 227, 101, 96, 119, 36, 146, 43, 2, 172, 65, 250, 91, 246, 59, 253, 168, 173, 255, 0, 104, 205, 3, 90, 134, 238, 27, 205, 47, 197, 222, 26, 184, 142, 215, 93, 210, 110, 99, 84, 91, 41, 90, 48, 85, 224, 35, 151, 182, 144, 171, 178, 51, 18, 249, 220, 172, 126, 81, 94, 37, 251, 63, 126, 209, 86, 247, 222, 26, 147, 68, 213, 252, 187, 205, 62, 227, 5, 119, 185, 253, 193, 228, 110, 25, 25, 4, 156, 103, 182, 107, 228, 175, 23, 254, 223, 222, 5, 183, 253, 183, 245, 107, 127, 7, 221, 93, 120, 43, 227, 87, 195, 77, 98, 227, 65, 179, 182, 241, 28, 41, 111, 167, 120, 246, 207, 112, 89, 45, 163, 145, 36, 42, 76, 203, 181, 224, 142, 99, 27, 201, 190, 221, 227, 12, 223, 42, 112, 71, 154, 148, 154, 123, 126, 71, 192, 102, 249, 92, 241, 13, 211, 172, 173, 56, 252, 50, 232, 215, 102, 250, 124, 246, 244, 63, 98, 1, 205, 21, 192, 254, 204, 255, 0, 180, 14].concat([145, 251, 76, 252, 25, 209, 124, 95, 164, 230, 1, 169, 69, 139, 219, 25, 28, 52, 250, 69, 218, 241, 61, 156, 216, 233, 44, 79, 148, 60, 12, 224, 48, 225, 129, 61, 245, 117, 167, 117, 116, 124, 4, 163, 40, 201, 198, 74, 205, 5, 20, 81, 154, 9, 10, 40, 162, 128, 10, 40, 162, 128, 10, 71, 125, 139, 154, 90, 169, 174, 232, 86, 94, 39, 209, 238, 52, 253, 74, 210, 222, 250, 194, 242, 51, 21, 197, 181, 196, 98, 72, 167, 67, 213, 93, 91, 33, 148, 244, 32, 140, 26, 0, 242, 239, 137, 63, 180, 166, 157, 163, 93, 248, 186, 210, 202, 222, 109, 74, 215, 195, 94, 17, 188, 241, 5, 230, 163, 110, 82, 91, 56, 26, 48, 118, 219, 51, 12, 143, 53, 149, 93, 246, 146, 6, 208, 56, 57, 227, 230, 255, 0, 11, 120, 238, 221, 60, 65, 168, 88, 171, 237, 150, 206, 230, 88, 204, 100, 244, 195, 17, 95, 87, 124, 86, 248, 109, 165, 217, 126, 206, 222, 47, 240, 230, 145, 167, 218, 233, 58, 125, 230, 131, 125, 106, 150, 250, 125, 188, 112, 44, 65, 237, 157, 62, 68, 27, 80, 30, 120, 232, 56, 21, 249, 83, 251, 91, 120, 255, 0, 86, 248, 29, 241, 179, 92, 186, 176, 148, 121, 144, 95, 61, 204, 101, 91, 43, 44, 110, 119, 169, 30, 170, 85, 135, 231, 85, 83, 217, 186, 139, 145, 89, 127, 90, 255, 0, 192, 56, 177, 137, 74, 180, 20, 87, 67, 239, 95, 2, 234, 54, 122, 190, 177, 111, 29, 205, 194, 219, 193, 35, 225, 221, 143, 10, 59, 215, 164, 248, 146, 239, 69, 209, 174, 45, 161, 210, 228, 86, 218, 167, 204, 101, 147, 204, 7, 145, 142, 191, 143, 78, 58, 87, 231, 127, 236, 225, 255, 0, 5, 19, 240, 159, 197, 184, 62, 201, 117, 125, 30, 139, 172, 66, 219, 36, 183, 185, 125, 170, 199, 213, 73, 237, 95, 68, 120, 119, 227, 110, 153, 103, 169, 90, 238, 213, 44, 246, 180, 139, 207, 154, 48, 70, 121, 230, 187, 35, 6, 245, 70, 178, 139, 138, 181, 143, 200, 255, 0, 248, 56, 183, 246, 135, 184, 248, 201, 224, 15, 137, 215, 218, 109, 214, 253, 62, 47, 26, 219, 120, 92, 170, 157, 193, 109, 108, 26, 120, 124, 176, 127, 186, 247, 54, 207, 112, 0, 224, 125, 167, 220, 231, 229, 15, 218, 235, 84, 210, 52, 93, 115, 225, 111, 194, 61, 37, 145, 172, 126, 17, 233, 150, 218, 77, 207, 217, 207, 238, 166, 212, 154, 52, 154, 242, 69, 246, 146, 241, 218, 108, 158, 158, 104, 7, 149, 53, 183, 241, 219, 83, 186, 241, 71, 236, 63, 241, 171, 77, 212, 139, 93, 106, 254, 23, 241, 216, 184, 156, 183, 204, 222, 98, 92, 164, 78, 51, 254, 236, 115, 159, 162, 154, 249, 135, 199, 31, 16, 46, 60, 81, 241, 110, 127, 16, 105, 145, 205, 37, 239, 137, 174, 111, 117, 88, 33, 99, 243, 90, 201, 113, 115, 52, 144, 7, 61, 23, 108, 62, 67, 245, 198, 213, 252, 190, 111, 3, 204, 233, 214, 79, 119, 54, 223, 223, 127, 242, 63, 67, 205, 253, 157, 44, 70, 21, 197, 123, 170, 148, 18, 249, 93, 63, 191, 91, 250, 158, 173, 226, 239, 22, 107, 255, 0, 181, 95, 237, 41, 99, 99, 165, 164, 111, 105, 225, 235, 67, 162, 104, 246, 220, 253, 154, 209, 122, 220, 204, 196, 28, 172, 72, 50, 24, 231, 38, 53, 68, 7, 113, 76, 203, 241, 123, 227, 166, 135, 225, 198, 183, 240, 119, 195, 247, 93, 126, 29, 45, 228, 243, 117, 66, 119, 91, 93, 93, 62, 60, 233, 242, 191, 235, 228, 98, 160, 179, 46, 35, 10, 136, 136, 124, 184, 144, 183, 131, 223, 124, 90, 187, 210, 180, 111, 248, 65, 60, 34, 91, 110, 176, 201, 111, 171, 223, 163, 21, 159, 91, 118, 110, 32, 221, 213, 45, 85, 142, 118, 15, 245, 141, 150, 114, 192, 70, 145, 235, 252, 71, 177, 181, 248, 71, 225, 25, 244, 136, 103, 243, 117, 45, 65, 5, 157, 204, 234, 48, 202, 155, 67, 204, 171, 232, 54, 149, 92, 117, 62, 111, 36, 145, 154, 218, 20, 35, 24, 168, 244, 232, 191, 83, 41, 230, 117, 39, 237, 42, 199, 127, 181, 47, 55, 246, 87, 221, 111, 145, 203, 248, 219, 84, 155, 89, 240, 95, 246, 164, 151, 19, 77, 54, 185, 119, 32, 13, 39, 250, 201, 82, 62, 178, 49, 28, 99, 57, 10, 128, 0, 161, 71, 173, 122, 159, 252, 18, 251, 193, 86, 122, 183, 237, 29, 166, 106, 218, 172, 62, 110, 149, 160, 249, 186, 181, 204, 125, 228, 142, 11, 107, 134, 3, 30, 238, 22, 170, 254, 208, 255, 0, 9, 227, 248, 87, 225, 189, 43, 77, 186, 143, 117, 205, 134, 153, 5, 141, 188, 106, 62, 253, 212, 233, 25, 102, 199, 94, 130, 86, 199, 174, 43, 213, 63, 224, 158, 126, 18, 22, 30, 32, 154, 36, 27, 118, 146, 178, 21, 29, 98, 136, 108, 149, 9, 238, 26, 98, 23, 29, 212, 251, 212, 214, 139, 173, 67, 146, 31, 105, 168, 175, 159, 249, 35, 44, 45, 63, 170, 230, 17, 173, 136, 213, 211, 92, 239, 213, 45, 19, 245, 145, 238, 31, 15, 127, 103, 35, 101, 162, 90, 195, 120, 51, 112, 80, 201, 114, 64, 249, 90, 102, 59, 164, 35, 234, 229, 141, 105, 234, 255, 0, 4, 172, 173, 166, 218, 209, 249, 128, 12, 237, 198, 14, 15, 181, 123, 182, 149, 160, 161, 132, 72, 10, 174, 229, 36, 156, 246, 62, 220, 255, 0, 147, 94, 25, 251, 74, 252, 76, 181, 248, 121, 166, 187, 45, 194, 180, 243, 2, 21, 55, 224, 169, 231, 61, 63, 15, 207, 210, 190, 151, 149, 70, 54, 71, 198, 243, 57, 123, 210, 221, 158, 7, 251, 82, 120, 107, 71, 240, 222, 156, 240, 198, 241, 180, 204, 153, 117, 3, 133, 62, 158, 245, 242, 119, 137, 226, 141, 70, 214, 85, 97, 140, 14, 43, 212, 62, 39, 120, 222, 111, 16, 93, 77, 113, 117, 51, 54, 88, 147, 159, 95, 243, 248, 215, 141, 248, 139, 85, 251, 68, 239, 33, 249, 149, 114, 64, 245, 197, 112, 98, 101, 100, 115, 86, 150, 150, 71, 237, 247, 252, 26, 105, 255, 0, 4, 182, 248, 119, 251, 76, 254, 204, 191, 28, 188, 101, 241, 87, 192, 122, 23, 140, 180, 15, 22, 95, 67, 224, 237, 45, 53, 75, 96, 239, 4, 80, 194, 102, 188, 146, 221, 240, 30, 23, 102, 185, 183, 2, 104, 153, 93, 90, 15, 149, 148, 174, 107, 202, 63, 224, 163, 31, 177, 191, 198, 255, 0, 248, 32, 62, 171, 121, 165, 248, 62, 211, 78, 248, 153, 251, 55, 120, 143, 84, 147, 84, 209, 117, 13, 115, 74, 123, 135, 208, 46, 230, 84, 141, 237, 46, 231, 182, 146, 25, 97, 149, 150, 56, 130, 182, 241, 12, 251, 3, 42, 9, 4, 136, 191, 186, 223, 240, 72, 111, 217, 246, 31, 217, 119, 254, 9, 147, 240, 55, 193, 113, 64, 214, 215, 26, 127, 132, 44, 175, 47, 227, 42, 128, 139, 235, 184, 197, 221, 222, 118, 240, 115, 113, 60, 188, 242, 79, 82, 73, 201, 62, 211, 241, 139, 224, 231, 133, 255, 0, 104, 31, 134, 58, 223, 130, 252, 105, 162, 105, 254, 35, 240, 183, 137, 45, 90, 203, 82, 211, 111, 99, 243, 33, 187, 137, 187, 17, 212, 16, 112, 202, 202, 67, 43, 0, 202, 67, 0, 70, 28, 173, 175, 51, 187, 11, 137, 196, 97, 166, 171, 97, 166, 225, 53, 180, 150, 140, 254, 74, 244, 31, 248, 41, 223, 132, 60, 67, 112, 171, 226, 127, 8, 248, 139, 195, 119, 128, 2, 215, 58, 77, 196, 90, 164, 18, 177, 244, 138, 79, 179, 188, 74, 58, 243, 36, 205, 142, 57, 60, 159, 122, 248, 37, 251, 107, 248, 47, 89, 158, 40, 108, 124, 115, 162, 72, 88, 128, 177, 95, 74, 218, 116, 132, 159, 225, 2, 228, 71, 189, 191, 220, 221, 89, 95, 240, 94, 31, 248, 32, 166, 163, 255, 0, 4, 234, 241, 127, 252, 38, 126, 1, 135, 80, 214, 62, 14, 235, 215, 2, 27, 57, 39, 144, 220, 93, 248, 126, 229, 183, 183, 217, 46, 27, 25, 49, 144, 167, 202, 153, 142, 91, 238, 57, 222, 3, 73, 249, 173, 166, 201, 246, 107, 143, 42, 100, 219, 142, 28, 48, 168, 163, 120, 203, 83, 234, 48, 62, 40, 103, 20, 31, 178, 197, 168, 212, 183, 117, 103, 247, 198, 223, 138, 103, 239, 191, 194, 127, 218, 17, 180, 43, 155, 127, 180, 110, 88, 219, 14, 11, 12, 111, 92, 112, 65, 238, 59, 231, 165, 100, 126, 212, 159, 15, 126, 27, 252, 113, 248, 147, 111, 226, 47, 20, 88, 218, 222, 120, 127, 198, 150, 112, 120, 119, 196, 115, 0, 190, 118, 151, 122, 153, 77, 63, 82, 86, 244, 96, 198, 210, 80, 217, 12, 26, 208, 99, 229, 36, 126, 88, 254, 205, 82, 67, 105, 167, 109, 208, 245, 239, 17, 248, 90, 241, 78, 246, 26, 77, 249, 142, 222, 83, 235, 37, 179, 134, 134, 95, 163, 47, 97, 95, 69, 105, 191, 27, 124, 125, 164, 104, 247, 22, 58, 140, 62, 29, 248, 129, 165, 221, 68, 208, 78, 160, 190, 139, 168, 74, 140, 54, 182, 237, 162, 75, 118, 56, 57, 30, 90, 197, 131, 200, 35, 183, 84, 233, 243, 106, 207, 170, 163, 199, 89, 78, 57, 127, 181, 194, 84, 165, 223, 226, 143, 206, 214, 122, 245, 208, 251, 3, 246, 30, 253, 186, 188, 101, 255, 0, 4, 135, 253, 167, 215, 193, 255, 0, 20, 47, 53, 15, 22, 124, 31, 241, 108, 145, 218, 157, 124, 78, 100, 184, 210, 126, 236, 112, 222, 76, 27, 63, 104, 88, 212, 42, 51, 177, 19, 44, 64, 43, 60, 169, 21, 188, 113, 254, 234, 248, 119, 196, 86, 94, 45, 208, 44, 117, 77, 54, 225, 110, 244, 253, 74, 222, 59, 171, 105, 211, 59, 102, 137, 212, 50, 48, 207, 56, 42, 65, 175, 229, 35, 226, 87, 196, 239, 136, 159, 181, 14, 149, 162, 248, 22, 227, 79, 241, 39, 134, 252, 53, 166, 134, 151, 84, 213, 239, 161, 68, 187, 189, 139, 59, 98, 130, 57, 35, 118, 81, 149, 230, 66, 132, 110, 36, 14, 20, 16, 255, 0, 115, 127, 193, 46, 127, 224, 169, 122, 199, 252, 19, 143, 192, 203, 240, 246, 251, 71, 214, 252, 125, 240, 238, 217, 25, 52, 93, 57, 47, 98, 93, 67, 71, 187, 150, 65, 180, 36, 247, 50, 36, 107, 104, 242, 59, 52, 138, 237, 251, 172, 151, 65, 128, 200, 216, 83, 139, 82, 84, 251, 190, 182, 75, 95, 55, 100, 191, 35, 224, 120, 147, 25, 128, 150, 63, 151, 5, 46, 100, 210, 188, 190, 205, 251, 43, 235, 229, 175, 228, 126, 230, 120, 187, 196, 246, 190, 11, 240, 190, 165, 172, 94, 153, 22, 207, 74, 181, 146, 242, 224, 199, 25, 145, 196, 113, 169, 119, 194, 142, 88, 237, 7, 0, 114, 107, 159, 248, 51, 241, 106, 79, 140, 94, 16, 211, 181, 216, 252, 59, 174, 232, 58, 126, 173, 101, 5, 245, 160, 213, 150, 8, 238, 29, 37, 93, 234, 26, 56, 229, 147, 105, 216, 80, 224, 156, 252, 196, 16, 8, 34, 188, 63, 246, 55, 253, 176, 164, 255, 0, 130, 139, 248, 79, 226, 247, 132, 188, 101, 240, 191, 82, 240, 28, 222, 15, 212, 229, 240, 102, 191, 164, 223, 234, 73, 125, 29, 211, 201, 109, 139, 168, 132, 209, 42, 169, 10, 90, 68, 220, 132, 134, 141, 162, 117, 111, 159, 11, 244, 151, 133, 188, 59, 111, 225, 63, 12, 233, 186, 93, 174, 239, 179, 105, 182, 177, 90, 195, 187, 174, 200, 208, 34, 231, 240, 2, 189, 28, 102, 14, 88, 73, 75, 15, 94, 54, 168, 154, 234, 154, 179, 73, 171, 52, 218, 119, 186, 119, 189, 143, 62, 181, 23, 69, 186, 117, 23, 189, 234, 154, 181, 175, 208, 208, 162, 138, 43, 132, 231, 10, 40, 162, 128, 10, 40, 162, 128, 25, 55, 74, 252, 132, 253, 190, 124, 33, 30, 188, 186, 141, 214, 159, 14, 161, 255, 0, 20, 126, 171, 115, 225, 93, 74, 59, 200, 54, 220, 70, 45, 200, 54, 211, 54, 6, 26, 57, 173, 94, 9, 145, 193, 195, 36, 201, 208, 228, 15, 209, 143, 219, 235, 227, 21, 223, 193, 63, 217, 159, 86, 212, 180, 219, 131, 107, 170, 234, 23, 186, 126, 143, 102, 232, 251, 100, 223, 119, 121, 12, 14, 83, 131, 243, 44, 79, 43, 130, 57, 27, 50, 49, 140, 143, 129, 252, 115, 241, 10, 195, 192, 62, 46, 155, 196, 122, 156, 50, 106, 90, 79, 136, 44, 19, 73, 241, 69, 130, 198, 211, 189, 197, 162, 179, 152, 103, 137, 23, 37, 167, 181, 50, 72, 85, 16, 101, 227, 150, 100, 10, 242, 121, 27, 58, 112, 248, 127, 104, 155, 236, 122, 216, 28, 142, 166, 58, 133, 74, 212, 181, 148, 58, 117, 125, 255, 0, 3, 243, 19, 226, 167, 195, 219, 173, 31, 93, 251, 117, 158, 232, 198, 114, 197, 50, 15, 212, 85, 79, 15, 248, 255, 0, 196, 150, 1, 97, 139, 93, 213, 162, 78, 202, 183, 12, 49, 248, 87, 214, 95, 180, 7, 192, 105, 60, 35, 227, 59, 123, 51, 115, 107, 127, 225, 253, 90, 52, 159, 68, 213, 99, 145, 94, 214, 242, 213, 198, 248, 153, 100, 92, 171, 41, 86, 4, 48, 36, 16, 65, 7, 6, 188, 167, 196, 223, 179, 77, 206, 153, 120, 190, 117, 180, 150, 166, 65, 185, 9, 95, 149, 199, 168, 61, 8, 250, 86, 177, 139, 71, 45, 57, 233, 203, 51, 228, 105, 53, 148, 240, 255, 0, 197, 143, 136, 254, 10, 214, 38, 145, 180, 255, 0, 137, 118, 38, 254, 39, 144, 252, 210, 92, 54, 231, 102, 45, 234, 192, 234, 8, 15, 119, 217, 95, 55, 120, 19, 192, 247, 30, 26, 188, 241, 69, 149, 210, 153, 47, 180, 104, 154, 222, 70, 108, 156, 192, 17, 164, 220, 191, 236, 186, 34, 143, 247, 79, 21, 244, 119, 252, 20, 183, 75, 208, 254, 24, 106, 30, 18, 86, 214, 34, 183, 241, 114, 202, 118, 218, 70, 119, 79, 21, 174, 119, 199, 112, 253, 144, 36, 200, 54, 6, 198, 239, 54, 76, 2, 1, 199, 157, 235, 81, 127, 194, 115, 225, 197, 241, 102, 159, 26, 255, 0, 104, 71, 108, 218, 118, 185, 105, 23, 89, 34, 35, 12, 84, 117, 37, 65, 222, 189, 217, 89, 151, 169, 192, 240, 113, 84, 253, 141, 105, 56, 237, 47, 204, 250, 140, 37, 120, 227, 41, 66, 51, 214, 84, 175, 111, 56, 189, 254, 231, 103, 233, 115, 148, 248, 21, 240, 42, 227, 194, 159, 28, 245, 251, 205, 81, 190, 209, 15, 128, 124, 59, 255, 0, 9, 30, 165, 38, 48, 169, 36, 150, 241, 186, 68, 79, 247, 140, 147, 136, 255, 0, 222, 246, 175, 50, 212, 111, 175, 62, 36, 248, 246, 88, 252, 198, 154, 101, 70, 137, 73, 63, 122, 71, 111, 152, 255, 0, 223, 110, 121, 244, 2, 189, 83, 78, 248, 229, 36, 191, 8, 190, 46, 75, 51, 111, 214, 60, 92, 116, 11, 105, 166, 94, 158, 85, 180, 115, 73, 50, 159, 247, 165, 138, 19, 233, 242, 159, 165, 113, 127, 179, 71, 133, 100, 186, 248, 159, 111, 12, 159, 125, 110, 109, 73, 250, 121, 129, 219, 255, 0, 65, 173, 211, 124, 178, 156, 186, 127, 145, 195, 42, 113, 106, 142, 26, 134, 210, 109, 191, 94, 102, 151, 224, 147, 249, 158, 213, 251, 110, 248, 147, 251, 123, 226, 206, 155, 226, 56, 182, 201, 106, 190, 29, 130, 250, 202, 60, 124, 177, 202, 229, 144, 185, 247, 40, 144, 42, 251, 202, 13, 125, 61, 251, 14, 252, 3, 159, 225, 159, 195, 155, 57, 47, 161, 206, 177, 169, 71, 19, 93, 169, 5, 158, 16, 171, 132, 136, 255, 0, 181, 201, 102, 255, 0, 106, 66, 57, 10, 181, 242, 127, 195, 95, 17, 233, 255, 0, 16, 126, 44, 104, 246, 250, 179, 125, 159, 71, 240, 205, 211, 91, 149, 113, 185, 39, 154, 223, 49, 91, 161, 238, 85, 82, 40, 153, 134, 62, 102, 96, 49, 222, 191, 64, 62, 0, 248, 247, 75, 241, 174, 179, 105, 162, 219, 106, 118, 86, 247, 215, 141, 229, 91, 135, 138, 107, 187, 201, 75, 113, 152, 109, 161, 25, 145, 135, 252, 243, 145, 226, 39, 28, 87, 78, 95, 8, 168, 171, 253, 157, 63, 224, 156, 121, 197, 73, 206, 188, 165, 11, 254, 242, 206, 254, 75, 167, 162, 119, 55, 190, 55, 120, 242, 199, 225, 23, 129, 110, 36, 145, 191, 211, 153, 126, 68, 118, 200, 140, 255, 0, 192, 115, 158, 49, 192, 206, 113, 223, 138, 252, 213, 248, 207, 241, 82, 227, 199, 30, 48, 150, 73, 229, 44, 20, 156, 3, 252, 68, 245, 237, 207, 6, 191, 120, 252, 47, 255, 0, 4, 103, 248, 83, 227, 253, 54, 211, 88, 248, 193, 226, 47, 137, 154, 138, 184, 222, 250, 125, 236, 182, 190, 16, 177, 156, 122, 27, 99, 190, 252, 118, 229, 37, 247, 244, 197, 159, 17, 255, 0, 193, 40, 191, 96, 251, 56, 30, 194, 199, 224, 245, 157, 247, 153, 156, 186, 120, 143, 196, 87, 18, 182, 125, 37, 107, 228, 147, 242, 62, 149, 219, 82, 180, 81, 228, 172, 61, 73, 104, 143, 231, 3, 197, 154, 196, 218, 254, 163, 6, 149, 167, 163, 92, 93, 92, 73, 177, 35, 141, 114, 89, 155, 160, 31, 142, 43, 186, 253, 141, 191, 99, 189, 75, 246, 168, 253, 181, 62, 27, 252, 31, 183, 253, 253, 239, 141, 60, 65, 111, 167, 222, 201, 19, 110, 22, 246, 161, 188, 203, 201, 1, 29, 68, 112, 36, 206, 72, 235, 179, 233, 95, 99, 255, 0, 193, 68, 188, 25, 251, 19, 254, 207, 16, 234, 151, 95, 179, 247, 252, 39, 237, 241, 55, 120, 178, 9, 6, 178, 154, 159, 133, 116, 152, 203, 143, 180, 238, 150, 117, 123, 134, 184, 242, 183, 34, 172, 51, 184, 70, 99, 230, 21, 198, 198, 250, 147, 254, 13, 9, 255, 0, 130, 127, 223, 120, 235, 226, 239, 139, 127, 106, 15, 19, 105, 177, 174, 143, 163, 67, 55, 134, 60, 24, 215, 16, 229, 166, 187, 147, 2, 250, 242, 35, 144, 84, 71, 15, 250, 56, 96, 8, 115, 115, 112, 185, 6, 50, 15, 5, 73, 115, 180, 121, 242, 139, 117, 84, 59, 110, 126, 255, 0, 90, 91, 71, 103, 109, 28, 49, 198, 145, 199, 24, 216, 136, 139, 181, 81, 71, 0, 1, 216, 1, 142, 43, 193, 127, 106, 203, 239, 218, 22, 111, 141, 94, 0, 208, 254, 17, 255, 0, 194, 15, 167, 120, 47, 94, 138, 244, 120, 163, 196, 90, 214, 149, 38, 165, 113, 225, 185, 97, 84, 150, 216, 199, 110, 183, 182, 254, 122, 220, 254, 242, 28, 1, 251, 178, 55, 150, 228, 10, 247, 234, 49, 154, 234, 194, 226, 61, 141, 79, 105, 202, 165, 163, 210, 74, 235, 84, 213, 237, 221, 110, 175, 165, 214, 169, 173, 14, 250, 115, 229, 119, 178, 126, 167, 205, 127, 24, 127, 97, 111, 22, 126, 211, 159, 11, 60, 65, 224, 223, 136, 191, 26, 188, 85, 117, 225, 239, 21, 89, 93, 105, 250, 157, 135, 135, 188, 59, 163, 105, 182, 243, 67, 57, 35, 106, 155, 155, 107, 185, 163, 49, 174, 60, 183, 89, 68, 138, 192, 62, 253, 193, 74, 255, 0, 57, 63, 240, 91, 95, 248, 35, 183, 136, 127, 224, 154, 191, 27, 85, 173, 205, 198, 181, 224, 31, 19, 203, 60, 190, 27, 214, 93, 65, 150, 88, 208, 130, 109, 174, 118, 170, 170, 221, 70, 172, 128, 144, 21, 101, 31, 58, 1, 243, 164, 127, 214, 75, 190, 197, 207, 243, 175, 21, 253, 187, 252, 13, 240, 127, 227, 63, 192, 29, 107, 192, 255, 0, 25, 245, 143, 11, 105, 62, 23, 241, 5, 179, 147, 46, 177, 169, 193, 96, 214, 206, 133, 66, 220, 193, 36, 172, 187, 36, 137, 221, 8, 97, 192, 44, 1, 200, 98, 12, 214, 149, 76, 75, 81, 178, 191, 78, 88, 165, 255, 0, 164, 165, 115, 44, 77, 57, 98, 54, 94, 242, 218, 201, 47, 201, 31, 199, 55, 194, 207, 23, 73, 160, 106, 241, 186, 182, 201, 173, 219, 56, 61, 29, 123, 138, 250, 219, 224, 239, 139, 227, 248, 131, 171, 91, 219, 199, 184, 205, 28, 126, 115, 1, 243, 96, 116, 206, 56, 245, 175, 21, 253, 186, 191, 100, 102, 253, 149, 62, 61, 235, 250, 47, 135, 252, 67, 167, 248, 231, 195, 182, 55, 146, 38, 143, 226, 109, 40, 135, 211, 124, 67, 2, 164, 111, 230, 193, 34, 51, 198, 204, 130, 84, 89, 81, 29, 252, 183, 56, 36, 130, 164, 199, 255, 0, 4, 240, 248, 203, 109, 15, 237, 75, 162, 105, 58, 213, 212, 26, 125, 166, 169, 20, 214, 139, 37, 195, 236, 69, 148, 169, 100, 82, 217, 24, 220, 70, 209, 200, 249, 138, 142, 245, 156, 101, 82, 156, 221, 58, 169, 197, 173, 211, 86, 103, 45, 46, 104, 201, 194, 162, 179, 93, 15, 185, 252, 84, 209, 217, 248, 46, 49, 34, 170, 202, 174, 87, 205, 39, 253, 96, 30, 248, 199, 167, 25, 234, 107, 130, 211, 238, 90, 226, 233, 85, 151, 118, 78, 9, 35, 229, 231, 181, 123, 135, 197, 31, 2, 90, 235, 150, 82, 197, 166, 93, 91, 222, 181, 182, 119, 196, 142, 25, 149, 179, 147, 156, 122, 231, 189, 120, 221, 247, 130, 245, 15, 15, 72, 26, 88, 192, 69, 110, 153, 249, 64, 30, 190, 213, 85, 163, 120, 234, 58, 208, 78, 55, 63, 64, 63, 224, 219, 79, 139, 150, 190, 26, 253, 160, 126, 53, 120, 15, 87, 214, 158, 109, 79, 197, 150, 250, 111, 137, 180, 88, 239, 46, 36, 146, 226, 239, 201, 23, 16, 222, 168, 103, 39, 34, 53, 150, 204, 170, 253, 237, 172, 224, 13, 145, 140, 126, 194, 35, 169, 81, 205, 127, 36, 158, 31, 248, 213, 227, 255, 0, 130, 31, 23, 79, 143, 60, 35, 175, 93, 88, 120, 195, 192, 114, 73, 62, 151, 121, 111, 111, 28, 178, 121, 133, 94, 32, 171, 17, 82, 146, 111, 71, 43, 177, 213, 131, 7, 193, 7, 56, 175, 233, 239, 246, 26, 213, 245, 109, 123, 246, 115, 209, 46, 188, 67, 226, 173, 107, 197, 222, 40, 109, 195, 91, 187, 213, 99, 181, 138, 226, 222, 244, 28, 75, 111, 229, 219, 67, 12, 74, 145, 156, 4, 43, 26, 239, 77, 146, 29, 198, 66, 199, 219, 226, 12, 170, 166, 6, 170, 134, 35, 19, 10, 181, 57, 97, 164, 121, 238, 162, 225, 23, 7, 121, 66, 49, 126, 231, 46, 205, 254, 103, 183, 140, 203, 234, 97, 159, 37, 106, 170, 164, 146, 141, 237, 205, 162, 113, 78, 55, 110, 41, 107, 27, 108, 217, 236, 84, 81, 69, 120, 7, 158, 20, 81, 69, 0, 20, 81, 69, 0, 120, 31, 252, 20, 107, 225, 218, 252, 80, 253, 159, 151, 74, 184, 18, 46, 153, 46, 165, 18, 106, 18, 194, 251, 110, 45, 225, 146, 57, 160, 18, 64, 118, 145, 230, 172, 178, 196, 84, 156, 5, 251, 217, 202, 128, 127, 36, 62, 56, 120, 167, 197, 159, 10, 252, 87, 168, 248, 103, 198, 17, 199, 22, 185, 163, 184, 138, 118, 140, 20, 130, 237, 72, 221, 21, 212, 57, 235, 4, 200, 86, 68, 61, 64, 109, 173, 181, 213, 213, 127, 103, 191, 106, 109, 3, 197, 158, 55, 248, 95, 125, 161, 120, 67, 65, 240, 222, 181, 168, 234, 176, 60, 98, 77, 123, 87, 147, 79, 179, 176, 117, 195, 69, 54, 98, 183, 184, 121, 29, 101, 8, 234, 129, 20, 31, 44, 229, 215, 140, 254, 74, 127, 193, 85, 225, 248, 211, 227, 175, 217, 139, 196, 62, 38, 248, 157, 39, 192, 157, 55, 92, 248, 92, 33, 130, 220, 248, 99, 74, 213, 159, 86, 185, 137, 175, 34, 181, 120, 13, 205, 196, 235, 19, 69, 186, 70, 114, 173, 11, 128, 80, 149, 42, 204, 72, 245, 178, 124, 182, 174, 43, 17, 26, 84, 170, 66, 46, 109, 69, 41, 74, 205, 182, 236, 180, 73, 190, 189, 143, 166, 224, 252, 218, 166, 93, 152, 221, 181, 201, 87, 150, 54, 111, 94, 107, 187, 52, 190, 118, 214, 215, 62, 65, 241, 39, 237, 219, 170, 124, 43, 181, 184, 240, 205, 197, 167, 252, 36, 94, 5, 188, 149, 238, 98, 211, 153, 194, 207, 163, 93, 51, 23, 119, 180, 145, 190, 85, 142, 86, 37, 154, 22, 194, 121, 133, 156, 52, 101, 228, 223, 227, 127, 25, 127, 224, 166, 190, 42, 213, 180, 215, 210, 60, 23, 13, 143, 135, 239, 35, 140, 172, 83, 107, 151, 38, 226, 242, 208, 48, 251, 209, 91, 178, 136, 148, 240, 48, 196, 202, 135, 176, 61, 107, 217, 63, 106, 255, 0, 248, 37, 47, 198, 255, 0, 132, 183, 147, 77, 15, 133, 223, 199, 122, 32, 95, 58, 13, 79, 194, 224, 223, 121, 168, 121, 27, 173, 112, 46, 145, 192, 35, 112, 242, 153, 1, 200, 89, 28, 13, 199, 198, 63, 103, 239, 131, 65, 62, 53, 95, 77, 227, 111, 8, 200, 191, 240, 142, 232, 226, 23, 211, 245, 253, 28, 169, 205, 212, 224, 2, 240, 206, 131, 160, 183, 144, 0, 71, 252, 180, 106, 198, 49, 231, 75, 222, 212, 244, 49, 152, 44, 46, 107, 139, 231, 192, 84, 81, 115, 123, 45, 188, 221, 183, 86, 220, 248, 107, 226, 94, 159, 169, 106, 218, 221, 246, 167, 175, 107, 109, 173, 235, 250, 164, 166, 89, 167, 150, 224, 220, 92, 92, 73, 158, 172, 78, 88, 244, 199, 160, 246, 21, 209, 124, 2, 248, 209, 113, 225, 77, 78, 56, 100, 43, 33, 116, 242, 182, 72, 219, 82, 238, 63, 249, 230, 199, 179, 12, 146, 173, 216, 147, 212, 18, 15, 216, 223, 182, 71, 236, 133, 240, 231, 192, 158, 2, 184, 248, 141, 224, 104, 97, 240, 237, 229, 238, 169, 111, 165, 106, 250, 16, 93, 214, 199, 237, 2, 87, 75, 155, 46, 241, 46, 98, 43, 36, 7, 42, 55, 171, 33, 69, 5, 7, 195, 119, 250, 77, 152, 241, 158, 169, 12, 86, 187, 237, 237, 103, 19, 249, 8, 113, 152, 92, 2, 66, 250, 99, 112, 193, 236, 74, 250, 87, 159, 139, 161, 103, 236, 230, 121, 18, 203, 241, 89, 94, 41, 194, 109, 93, 62, 155, 53, 107, 166, 189, 117, 59, 239, 139, 190, 1, 181, 147, 74, 213, 117, 191, 14, 238, 147, 77, 213, 194, 181, 213, 178, 174, 215, 180, 157, 114, 126, 101, 254, 28, 135, 96, 71, 76, 144, 65, 42, 217, 29, 175, 252, 19, 251, 71, 181, 241, 111, 237, 87, 225, 187, 91, 144, 146, 89, 106, 119, 214, 150, 164, 183, 221, 6, 82, 99, 31, 147, 56, 252, 171, 207, 36, 179, 241, 87, 195, 77, 63, 73, 213, 160, 181, 189, 212, 124, 63, 226, 15, 49, 52, 221, 69, 173, 155, 201, 212, 149, 27, 108, 144, 156, 252, 178, 50, 22, 10, 202, 14, 228, 102, 3, 130, 70, 118, 254, 10, 124, 92, 209, 252, 5, 227, 219, 109, 110, 206, 79, 236, 187, 139, 91, 152, 174, 13, 179, 97, 76, 18, 198, 225, 178, 132, 224, 99, 32, 124, 167, 4, 99, 191, 74, 243, 113, 17, 169, 26, 50, 167, 228, 122, 185, 125, 106, 15, 25, 78, 191, 195, 102, 155, 93, 55, 233, 254, 71, 219, 63, 179, 47, 252, 17, 217, 191, 105, 47, 216, 243, 199, 62, 60, 211, 252, 113, 164, 232, 254, 49, 181, 241, 22, 171, 99, 225, 31, 14, 155, 127, 50, 95, 16, 201, 109, 119, 137, 13, 204, 161, 128, 183, 141, 216, 60, 113, 150, 28, 186, 130, 88, 32, 96, 223, 93, 126, 197, 255, 0, 240, 83, 31, 131, 63, 178, 223, 236, 173, 30, 131, 226, 97, 160, 252, 5, 241, 191, 135, 243, 160, 120, 151, 66, 211, 52, 105, 91, 197, 122, 221, 220, 35, 150, 186, 17, 70, 215, 114, 51, 113, 150, 109, 144, 156, 134, 30, 90, 183, 151, 31, 231, 39, 195, 159, 248, 40, 143, 140, 188, 23, 127, 127, 240, 235, 192, 250, 220, 62, 28, 179, 215, 181, 59, 237, 73, 252, 81, 108, 197, 181, 70, 138, 227, 51, 155, 123, 115, 32, 219, 108, 198, 67, 54, 233, 66, 180, 153, 100, 216, 209, 224, 150, 192, 214, 60, 57, 165, 221, 136, 255, 0, 176, 161, 190, 184, 241, 149, 229, 239, 217, 204, 214, 146, 73, 123, 170, 235, 82, 220, 16, 76, 82, 242, 210, 92, 188, 140, 1, 10, 67, 54, 238, 83, 6, 189, 76, 45, 59, 210, 141, 69, 219, 95, 235, 185, 225, 230, 24, 200, 66, 180, 168, 252, 86, 110, 215, 90, 46, 214, 62, 207, 248, 241, 255, 0, 7, 16, 248, 79, 195, 55, 79, 7, 195, 223, 132, 126, 38, 241, 5, 220, 203, 185, 117, 47, 25, 234, 17, 233, 113, 171, 116, 4, 218, 91, 153, 165, 117, 61, 126, 105, 163, 62, 160, 30, 7, 200, 63, 180, 127, 252, 21, 11, 227, 47, 237, 141, 165, 203, 165, 120, 131, 86, 210, 252, 47, 225, 91, 168, 140, 87, 90, 7, 133, 109, 229, 211, 236, 239, 148, 231, 114, 220, 72, 242, 73, 113, 50, 48, 32, 24, 222, 95, 44, 227, 59, 51, 156, 250, 31, 129, 255, 0, 224, 223, 255, 0, 218, 203, 227, 54, 167, 14, 161, 39, 195, 123, 31, 11, 90, 223, 40, 145, 31, 196, 254, 37, 211, 180, 217, 227, 86, 198, 12, 214, 166, 102, 186, 136, 227, 25, 87, 137, 88, 115, 242, 230, 182, 127, 108, 239, 248, 32, 215, 197, 223, 248, 39, 175, 236, 229, 117, 241, 27, 226, 23, 141, 190, 11, 199, 111, 10, 239, 182, 209, 180, 205, 118, 254, 227, 85, 212, 128, 193, 148, 65, 27, 216, 198, 146, 52, 74, 75, 185, 223, 177, 85, 73, 221, 202, 131, 209, 46, 68, 175, 115, 195, 171, 86, 188, 213, 149, 207, 152, 62, 1, 126, 205, 158, 42, 253, 184, 255, 0, 105, 111, 2, 252, 26, 240, 74, 68, 186, 247, 140, 47, 22, 194, 55, 219, 251, 141, 34, 213, 65, 123, 139, 167, 3, 24, 142, 8, 81, 228, 96, 57, 34, 61, 160, 22, 32, 31, 236, 43, 246, 81, 253, 153, 188, 39, 251, 28, 254, 206, 190, 15, 248, 101, 224, 139, 4, 211, 252, 51, 224, 205, 54, 61, 58, 205, 2, 133, 105, 177, 150, 146, 121, 48, 0, 105, 101, 149, 164, 150, 70, 198, 89, 228, 118, 60, 154, 252, 101, 255, 0, 131, 52, 127, 99, 248, 117, 141, 59, 226, 175, 237, 21, 173, 88, 195, 53, 229, 213, 226, 120, 43, 195, 51, 72, 167, 204, 181, 138, 53, 91, 139, 247, 64, 120, 196, 141, 37, 162, 7, 28, 143, 38, 101, 207, 204, 194, 191, 119, 43, 147, 204, 207, 15, 79, 150, 55, 123, 176, 162, 138, 41, 157, 2, 50, 239, 92, 122, 250, 26, 243, 143, 1, 254, 199, 95, 9, 190, 23, 248, 146, 235, 90, 240, 247, 195, 79, 2, 104, 250, 229, 237, 203, 222, 220, 106, 118, 218, 29, 178, 95, 92, 78, 210, 9, 90, 71, 159, 103, 152, 205, 230, 42, 182, 75, 18, 10, 174, 58, 12, 122, 69, 69, 123, 123, 14, 157, 105, 45, 197, 196, 145, 195, 4, 40, 100, 146, 73, 24, 42, 70, 160, 100, 177, 39, 128, 0, 228, 147, 90, 83, 173, 82, 9, 198, 18, 105, 61, 236, 247, 245, 42, 50, 146, 209, 51, 229, 111, 248, 43, 199, 192, 239, 4, 252, 120, 253, 149, 108, 252, 41, 227, 15, 2, 218, 248, 194, 15, 16, 120, 139, 76, 240, 254, 149, 49, 212, 87, 75, 155, 195, 87, 215, 215, 11, 103, 109, 127, 13, 215, 147, 59, 64, 82, 105, 163, 140, 236, 138, 64, 235, 41, 70, 73, 16, 178, 31, 229, 111, 246, 142, 255, 0, 130, 122, 120, 155, 224, 199, 237, 49, 226, 47, 135, 58, 231, 142, 62, 16, 92, 92, 120, 126, 100, 138, 231, 95, 211, 252, 79, 20, 186, 69, 204, 140, 138, 204, 144, 238, 11, 51, 60, 108, 76, 110, 134, 33, 178, 68, 101, 39, 128, 79, 245, 1, 255, 0, 5, 57, 248, 91, 169, 126, 215, 94, 18, 151, 225, 246, 177, 226, 205, 39, 65, 248, 91, 168, 44, 23, 58, 190, 143, 6, 147, 37, 230, 167, 226, 99, 28, 130, 100, 130, 121, 188, 248, 5, 165, 178, 186, 70, 251, 34, 18, 73, 49, 64, 29, 227, 140, 73, 12, 191, 44, 193, 251, 31, 248, 7, 225, 174, 141, 253, 147, 160, 54, 139, 166, 233, 251, 2, 61, 188, 126, 17, 180, 48, 48, 239, 152, 161, 146, 21, 199, 215, 63, 141, 79, 180, 163, 40, 40, 91, 222, 77, 221, 235, 170, 210, 203, 182, 142, 253, 14, 234, 121, 54, 47, 19, 8, 206, 133, 22, 252, 238, 149, 251, 110, 250, 31, 134, 63, 9, 124, 23, 240, 135, 246, 119, 241, 245, 142, 173, 113, 241, 75, 90, 241, 22, 161, 164, 200, 179, 75, 15, 135, 33, 22, 182, 115, 48, 108, 136, 218, 114, 255, 0, 188, 140, 227, 149, 92, 238, 28, 100, 115, 95, 82, 107, 191, 240, 80, 253, 63, 197, 186, 34, 199, 107, 225, 127, 244, 119, 81, 178, 91, 153, 194, 19, 244, 192, 201, 29, 56, 228, 126, 149, 233, 255, 0, 183, 71, 252, 18, 223, 225, 111, 196, 25, 198, 165, 225, 150, 208, 188, 45, 227, 59, 114, 36, 134, 254, 203, 67, 109, 27, 71, 187, 97, 201, 75, 155, 40, 100, 186, 247, 2, 104, 66, 184, 39, 115, 36, 128, 5, 175, 2, 240, 87, 236, 21, 170, 69, 172, 219, 175, 138, 188, 85, 225, 189, 31, 69, 140, 143, 182, 234, 22, 18, 220, 95, 95, 50, 119, 91, 72, 36, 130, 36, 46, 123, 25, 140, 104, 160, 18, 75, 144, 17, 244, 111, 168, 86, 225, 236, 209, 53, 31, 97, 45, 124, 180, 249, 181, 117, 247, 158, 217, 255, 0, 4, 149, 248, 123, 163, 252, 97, 255, 0, 130, 139, 124, 33, 241, 71, 141, 60, 57, 169, 91, 252, 63, 186, 241, 100, 150, 22, 87, 101, 182, 233, 183, 154, 253, 173, 161, 187, 181, 183, 118, 234, 251, 38, 251, 35, 236, 24, 5, 252, 176, 114, 55, 173, 126, 239, 71, 168, 55, 236, 221, 251, 87, 105, 182, 107, 39, 149, 224, 255, 0, 137, 71, 236, 108, 172, 113, 29, 142, 168, 3, 201, 108, 253, 149, 4, 202, 147, 64, 73, 203, 60, 159, 98, 65, 233, 95, 145, 255, 0, 28, 254, 60, 248, 95, 85, 253, 148, 124, 35, 224, 159, 131, 45, 14, 143, 168, 124, 45, 215, 180, 125, 111, 194, 218, 20, 161, 90, 225, 229, 180, 158, 93, 187, 36, 112, 55, 206, 207, 117, 52, 242, 202, 8, 121, 93, 166, 102, 251, 228, 31, 160, 255, 0, 105, 47, 219, 211, 227, 151, 237, 97, 240, 249, 180, 93, 23, 246, 119, 188, 208, 111, 21, 34, 159, 79, 214, 245, 47, 31, 88, 91, 201, 164, 223, 91, 202, 183, 22, 151, 162, 16, 153, 45, 13, 196, 81, 74, 21, 155, 12, 98, 0, 156, 19, 95, 77, 142, 193, 213, 204, 176, 88, 92, 93, 41, 195, 158, 17, 116, 229, 205, 82, 16, 118, 135, 192, 253, 249, 70, 254, 228, 148, 116, 191, 193, 185, 246, 24, 142, 26, 198, 42, 20, 227, 38, 155, 228, 229, 150, 189, 99, 240, 61, 109, 170, 248, 125, 23, 153, 250, 230, 14, 104, 175, 59, 253, 151, 190, 34, 248, 219, 226, 191, 193, 237, 43, 196, 30, 62, 240, 69, 167, 195, 191, 16, 106, 145, 173, 193, 208, 161, 214, 78, 170, 214, 113, 58, 171, 32, 150, 83, 4, 27, 101, 228, 135, 140, 33, 8, 70, 55, 55, 90, 244, 74, 249, 106, 148, 220, 36, 224, 237, 167, 102, 154, 249, 53, 116, 253, 83, 177, 240, 50, 141, 157, 152, 81, 69, 21, 4, 133, 20, 81, 64, 1, 25, 53, 241, 47, 252, 23, 67, 246, 111, 211, 126, 39, 255, 0, 193, 62, 190, 43, 107, 81, 92, 53, 134, 179, 167, 104, 139, 116, 140, 177, 25, 126, 218, 208, 79, 12, 169, 14, 213, 231, 124, 155, 4, 64, 142, 236, 153, 200, 92, 87, 219, 85, 135, 227, 63, 135, 186, 95, 143, 159, 76, 254, 212, 142, 230, 226, 45, 42, 240, 95, 69, 10, 93, 75, 20, 19, 72, 170, 202, 190, 116, 104, 193, 102, 65, 187, 112, 73, 67, 32, 117, 70, 198, 229, 82, 58, 242, 252, 87, 213, 113, 116, 177, 95, 243, 238, 81, 151, 254, 2, 239, 250, 26, 81, 154, 133, 88, 84, 127, 101, 167, 243, 78, 232, 252, 163, 253, 170, 127, 102, 223, 141, 222, 54, 240, 205, 215, 135, 173, 245, 168, 110, 211, 76, 219, 109, 168, 216, 233, 247, 40, 100, 142, 65, 26, 182, 201, 0, 239, 180, 171, 5, 207, 33, 148, 140, 130, 43, 225, 157, 67, 195, 90, 199, 195, 141, 43, 199, 26, 94, 185, 61, 235, 73, 99, 103, 163, 173, 172, 87, 46, 199, 236, 202, 47, 47, 124, 197, 80, 126, 232, 220, 200, 72, 28, 100, 231, 189, 127, 71, 94, 40, 248, 67, 225, 127, 26, 107, 214, 250, 182, 173, 225, 253, 27, 82, 213, 172, 227, 48, 219, 223, 220, 89, 198, 247, 86, 201, 207, 203, 28, 164, 111, 65, 243, 49, 249, 72, 193, 98, 122, 243, 95, 159, 127, 240, 95, 111, 216, 243, 195, 150, 127, 179, 30, 169, 241, 67, 64, 210, 99, 211, 117, 205, 38, 52, 176, 212, 158, 213, 60, 184, 174, 45, 164, 158, 25, 124, 217, 64, 225, 164, 89, 45, 227, 69, 102, 201, 196, 236, 51, 207, 60, 180, 101, 40, 206, 236, 232, 225, 174, 124, 46, 101, 78, 165, 215, 45, 223, 150, 174, 45, 47, 204, 252, 71, 253, 185, 124, 88, 173, 240, 175, 195, 122, 44, 95, 52, 154, 182, 177, 53, 254, 1, 237, 103, 104, 233, 143, 251, 249, 125, 17, 30, 165, 107, 228, 255, 0, 11, 120, 50, 63, 16, 248, 154, 77, 74, 27, 152, 160, 155, 200, 183, 72, 140, 138, 12, 51, 200, 214, 106, 68, 82, 28, 252, 171, 43, 102, 32, 221, 157, 148, 227, 131, 95, 126, 120, 15, 246, 61, 191, 248, 199, 240, 190, 243, 226, 230, 185, 230, 90, 248, 75, 194, 49, 203, 165, 233, 204, 199, 31, 104, 189, 102, 89, 46, 164, 80, 126, 241, 218, 44, 97, 140, 242, 190, 99, 204, 79, 49, 113, 242, 71, 194, 63, 132, 205, 168, 124, 108, 241, 111, 129, 110, 9, 177, 107, 253, 54, 75, 205, 34, 2, 79, 239, 196, 51, 25, 227, 84, 111, 246, 33, 107, 131, 145, 222, 216, 142, 184, 165, 152, 79, 151, 247, 221, 191, 45, 15, 162, 197, 98, 30, 59, 51, 157, 52, 245, 124, 170, 62, 77, 70, 223, 155, 57, 157, 7, 91, 190, 179, 240, 173, 246, 155, 111, 246, 205, 107, 193, 230, 121, 38, 213, 124, 51, 60, 204, 178, 105, 55, 78, 170, 141, 115, 26, 28, 136, 228, 33, 35, 87, 117, 24, 145, 99, 80, 217, 218, 140, 156, 70, 173, 121, 117, 167, 181, 212, 51, 219, 174, 183, 166, 96, 92, 36, 179, 66, 26, 234, 205, 147, 7, 47, 221, 148, 15, 149, 207, 33, 148, 231, 178, 227, 169, 241, 207, 131, 124, 75, 166, 120, 186, 235, 84, 251, 101, 210, 235, 246, 46, 86, 103, 73, 60, 155, 136, 182, 128, 0, 80, 48, 12, 97, 64, 192, 94, 139, 140, 140, 30, 103, 212, 239, 181, 77, 111, 66, 147, 80, 212, 52, 27, 169, 38, 210, 25, 77, 221, 254, 150, 159, 102, 190, 210, 142, 126, 87, 158, 28, 0, 1, 60, 110, 93, 169, 158, 8, 4, 130, 115, 169, 77, 239, 29, 81, 199, 70, 165, 58, 151, 139, 247, 38, 188, 180, 125, 253, 47, 219, 111, 66, 189, 223, 135, 60, 55, 226, 191, 15, 104, 58, 230, 151, 107, 103, 106, 218, 124, 138, 111, 173, 214, 20, 149, 46, 33, 87, 220, 91, 99, 252, 133, 128, 200, 59, 176, 173, 181, 179, 194, 215, 235, 191, 252, 18, 203, 224, 132, 119, 62, 21, 183, 212, 252, 45, 111, 105, 224, 187, 11, 224, 246, 211, 106, 86, 80, 15, 237, 107, 149, 7, 108, 208, 23, 1, 100, 78, 155, 100, 133, 60, 152, 1, 94, 99, 44, 9, 175, 197, 235, 182, 212, 108, 111, 5, 206, 146, 246, 184, 159, 247, 165, 35, 137, 173, 76, 164, 114, 36, 17, 125, 213, 110, 153, 41, 133, 62, 157, 115, 244, 127, 236, 95, 255, 0, 5, 57, 248, 193, 240, 151, 83, 179, 240, 47, 135, 45, 190, 218, 218, 195, 67, 167, 195, 28, 51, 193, 107, 168, 77, 26, 175, 149, 29, 172, 55, 18, 230, 54, 192, 42, 145, 9, 18, 89, 98, 85, 17, 192, 240, 166, 82, 140, 44, 148, 47, 25, 108, 44, 69, 24, 98, 42, 198, 82, 247, 101, 162, 122, 104, 252, 246, 127, 59, 31, 209, 30, 161, 251, 75, 248, 23, 246, 29, 240, 253, 142, 151, 161, 232, 55, 30, 38, 241, 230, 173, 110, 100, 211, 52, 179, 114, 178, 106, 90, 150, 56, 105, 164, 148, 169, 75, 59, 69, 39, 247, 147, 4, 10, 58, 40, 150, 66, 145, 191, 229, 135, 252, 22, 171, 199, 126, 37, 241, 39, 194, 93, 107, 90, 241, 182, 174, 186, 215, 196, 47, 136, 146, 38, 145, 28, 254, 91, 197, 99, 164, 90, 146, 101, 107, 59, 56, 73, 38, 27, 116, 69, 96, 50, 75, 200, 210, 121, 142, 204, 238, 196, 253, 31, 251, 11, 120, 27, 226, 71, 143, 124, 99, 99, 39, 252, 41, 59, 207, 133, 190, 29, 186, 152, 95, 120, 147, 196, 94, 50, 215, 226, 213, 53, 253, 121, 208, 113, 26, 195, 22, 102, 121, 153, 130, 131, 53, 211, 170, 36, 108, 229, 35, 119, 218, 43, 194, 63, 224, 191, 190, 17, 251, 47, 196, 127, 133, 218, 122, 172, 141, 105, 38, 163, 118, 101, 109, 191, 42, 186, 34, 20, 4, 246, 44, 12, 167, 29, 194, 231, 177, 170, 157, 175, 100, 125, 190, 91, 147, 225, 48, 148, 42, 56, 222, 117, 36, 185, 121, 154, 106, 202, 86, 77, 69, 52, 159, 93, 236, 126, 175, 127, 193, 189, 31, 6, 161, 248, 21, 255, 0, 4, 122, 248, 47, 162, 70, 201, 44, 183, 26, 117, 214, 169, 113, 48, 136, 70, 211, 75, 117, 125, 115, 112, 75, 14, 251, 86, 69, 64, 79, 56, 65, 244, 175, 180, 107, 228, 255, 0, 248, 34, 111, 196, 75, 31, 30, 255, 0, 193, 56, 62, 31, 195, 106, 143, 12, 190, 25, 134, 109, 10, 233, 25, 247, 226, 88, 101, 98, 8, 62, 141, 27, 198, 224, 127, 14, 236, 115, 140, 159, 172, 11, 98, 168, 252, 195, 25, 65, 208, 196, 78, 139, 251, 45, 175, 185, 133, 20, 133, 128, 168, 111, 53, 40, 108, 83, 116, 178, 4, 224, 158, 71, 80, 6, 79, 228, 40, 57, 133, 212, 47, 225, 210, 236, 102, 186, 185, 154, 59, 123, 123, 116, 50, 75, 44, 140, 21, 34, 64, 50, 89, 137, 224, 0, 50, 73, 60, 0, 43, 229, 127, 141, 63, 181, 85, 159, 138, 38, 71, 107, 123, 136, 109, 109, 39, 47, 166, 105, 215, 145, 52, 50, 25, 81, 155, 101, 229, 220, 39, 156, 140, 36, 144, 91, 201, 202, 28, 75, 42, 9, 149, 35, 131, 145, 253, 172, 255, 0, 107, 137, 60, 119, 226, 121, 180, 95, 12, 223, 51, 104, 186, 105, 120, 174, 46, 224, 155, 253, 22, 229, 248, 203, 175, 3, 204, 100, 193, 218, 196, 148, 83, 243, 40, 102, 9, 34, 241, 63, 179, 87, 192, 171, 207, 143, 190, 61, 88, 238, 162, 105, 52, 155, 6, 73, 111, 39, 148, 156, 168, 36, 144, 112, 78, 73, 102, 82, 7, 39, 185, 237, 92, 242, 168, 228, 249, 96, 125, 86, 93, 146, 70, 20, 190, 185, 142, 210, 43, 91, 119, 245, 255, 0, 35, 127, 225, 255, 0, 135, 117, 207, 141, 58, 205, 198, 161, 125, 113, 37, 142, 154, 219, 228, 154, 254, 228, 159, 222, 149, 229, 185, 25, 193, 253, 125, 56, 201, 175, 24, 248, 227, 241, 63, 69, 240, 77, 205, 213, 150, 159, 34, 221, 71, 25, 63, 190, 119, 12, 204, 65, 32, 224, 129, 156, 113, 220, 145, 233, 94, 173, 255, 0, 5, 39, 253, 179, 252, 63, 240, 155, 195, 227, 192, 62, 26, 107, 120, 237, 116, 208, 69, 219, 35, 28, 25, 7, 5, 7, 63, 54, 49, 201, 57, 228, 113, 211, 53, 249, 91, 241, 131, 246, 152, 184, 241, 69, 219, 172, 50, 22, 86, 56, 4, 85, 194, 42, 11, 83, 237, 178, 127, 107, 82, 31, 89, 172, 185, 98, 254, 24, 249, 116, 103, 101, 241, 171, 227, 101, 188, 183, 179, 72, 210, 6, 201, 32, 46, 107, 231, 223, 23, 120, 211, 80, 241, 141, 203, 71, 103, 230, 109, 98, 113, 129, 214, 180, 252, 51, 240, 255, 0, 94, 248, 155, 168, 169, 104, 165, 142, 23, 228, 179, 103, 165, 122, 246, 139, 240, 71, 254, 16, 221, 35, 203, 209, 244, 248, 181, 207, 17, 79, 136, 237, 44, 222, 127, 39, 237, 147, 31, 187, 18, 190, 27, 107, 55, 69, 200, 198, 236, 100, 168, 203, 11, 140, 101, 90, 164, 105, 67, 121, 52, 149, 218, 74, 239, 69, 118, 236, 151, 171, 216, 246, 37, 90, 82, 62, 126, 211, 62, 18, 106, 115, 143, 50, 235, 204, 82, 121, 193, 239, 94, 231, 240, 11, 226, 47, 143, 188, 47, 168, 233, 254, 29, 211, 228, 213, 181, 229, 190, 148, 65, 107, 166, 8, 218, 230, 121, 24, 158, 22, 1, 130, 251, 191, 217, 25, 30, 221, 235, 244, 11, 246, 13, 255, 0, 130, 76, 120, 119, 246, 145, 253, 157, 188, 25, 227, 239, 26, 223, 120, 155, 67, 191, 241, 86, 147, 14, 172, 116, 221, 61, 237, 252, 152, 99, 159, 47, 26, 137, 100, 141, 156, 183, 149, 179, 122, 148, 82, 174, 196, 115, 138, 251, 231, 224, 47, 236, 157, 240, 255, 0, 246, 104, 211, 150, 31, 6, 248, 103, 79, 210, 238, 26, 49, 20, 247, 229, 60, 219, 235, 161, 193, 62, 100, 237, 153, 24, 18, 1, 219, 157, 160, 244, 2, 179, 197, 96, 106, 211, 171, 42, 53, 52, 113, 109, 61, 158, 169, 217, 237, 163, 245, 216, 249, 28, 119, 21, 97, 232, 94, 20, 47, 41, 45, 59, 35, 178, 240, 24, 152, 248, 43, 71, 107, 171, 47, 236, 219, 175, 176, 193, 231, 89, 134, 221, 246, 87, 242, 215, 116, 121, 201, 251, 167, 43, 212, 244, 234, 107, 90, 128, 49, 69, 108, 143, 205, 155, 187, 184, 81, 69, 20, 8, 40, 162, 138, 0, 40, 162, 138, 0, 43, 206, 191, 107, 95, 129, 22, 63, 180, 223, 236, 215, 227, 111, 1, 234, 81, 249, 150, 254, 38, 210, 102, 181, 67, 230, 60, 126, 84, 219, 119, 193, 38, 87, 159, 146, 101, 141, 241, 130, 14, 220, 21, 96, 72, 62, 139, 69, 3, 140, 154, 119, 71, 227, 63, 237, 79, 240, 109, 126, 10, 126, 207, 191, 7, 255, 0, 103, 248, 29, 99, 131, 192, 62, 28, 130, 255, 0, 196, 77, 27, 226, 59, 189, 102, 235, 117, 197, 203, 146, 127, 128, 75, 52, 206, 1, 225, 68, 184, 254, 26, 252, 76, 253, 160, 126, 34, 220, 120, 231, 227, 20, 223, 17, 60, 15, 127, 61, 156, 158, 21, 212, 4, 158, 29, 150, 44, 140, 218, 192, 231, 19, 109, 199, 89, 28, 52, 188, 140, 236, 101, 82, 14, 220, 31, 218, 127, 248, 45, 191, 136, 103, 248, 127, 224, 175, 137, 186, 155, 201, 229, 234, 154, 214, 170, 186, 36, 24, 31, 195, 44, 161, 36, 65, 145, 156, 125, 149, 103, 32, 227, 162, 228, 118, 175, 201, 255, 0, 10, 120, 79, 193, 222, 41, 248, 255, 0, 12, 109, 164, 127, 101, 120, 95, 73, 208, 45, 252, 65, 226, 93, 62, 209, 155, 201, 158, 115, 33, 65, 5, 172, 72, 1, 133, 46, 164, 146, 197, 12, 104, 113, 23, 218, 102, 116, 242, 227, 141, 81, 54, 165, 203, 56, 90, 123, 108, 60, 60, 106, 207, 14, 241, 148, 229, 102, 167, 111, 59, 189, 127, 3, 106, 235, 197, 126, 21, 253, 161, 124, 61, 105, 241, 18, 215, 79, 254, 207, 214, 52, 171, 88, 159, 196, 154, 32, 93, 178, 232, 236, 225, 90, 59, 180, 140, 243, 45, 139, 239, 86, 142, 81, 159, 44, 202, 21, 178, 60, 167, 60, 126, 153, 240, 171, 198, 95, 30, 62, 32, 94, 127, 194, 189, 179, 214, 174, 53, 166, 182, 104, 225, 251, 13, 236, 118, 11, 115, 106, 138, 11, 193, 230, 51, 71, 230, 177, 3, 42, 21, 217, 152, 109, 12, 54, 0, 233, 244, 53, 207, 236, 213, 121, 251, 64, 95, 38, 181, 55, 130, 60, 91, 174, 248, 145, 225, 146, 45, 29, 124, 55, 61, 190, 147, 14, 144, 178, 41, 82, 210, 234, 78, 60, 137, 54, 171, 96, 91, 67, 190, 21, 25, 25, 152, 54, 213, 243, 47, 19, 254, 199, 30, 45, 253, 141, 60, 69, 162, 234, 126, 43, 248, 137, 224, 123, 113, 13, 201, 185, 189, 209, 244, 141, 98, 123, 13, 90, 40, 193, 45, 149, 97, 111, 228, 137, 0, 39, 50, 0, 132, 116, 87, 0, 2, 49, 163, 23, 69, 123, 24, 187, 199, 167, 116, 123, 24, 236, 117, 44, 77, 234, 219, 150, 167, 86, 182, 147, 239, 228, 223, 83, 230, 237, 91, 84, 188, 248, 117, 170, 165, 199, 137, 44, 22, 255, 0, 194, 250, 180, 112, 93, 168, 146, 53, 138, 105, 34, 121, 39, 129, 174, 21, 81, 179, 28, 169, 61, 188, 202, 71, 202, 199, 158, 6, 114, 83, 227, 103, 192, 121, 141, 194, 234, 218, 22, 160, 250, 246, 131, 168, 217, 61, 236, 18, 79, 47, 153, 112, 12, 120, 243, 98, 61, 119, 178, 130, 28, 30, 55, 32, 44, 7, 21, 232, 63, 240, 81, 79, 8, 120, 126, 211, 226, 239, 138, 110, 60, 63, 254, 143, 164, 235, 122, 77, 166, 181, 109, 103, 189, 159, 236, 114, 220, 57, 50, 199, 185, 176, 205, 153, 226, 184, 147, 39, 180, 181, 215, 124, 31, 248, 83, 121, 240, 139, 196, 191, 7, 116, 221, 106, 27, 137, 237, 124, 99, 109, 101, 174, 27, 123, 140, 102, 25, 218, 73, 45, 165, 80, 7, 69, 54, 243, 219, 55, 60, 238, 45, 233, 88, 242, 243, 79, 231, 103, 243, 254, 174, 117, 70, 181, 240, 202, 156, 245, 188, 92, 162, 250, 221, 55, 116, 251, 166, 180, 61, 131, 254, 9, 29, 255, 0, 5, 114, 248, 187, 240, 23, 70, 177, 240, 253, 228, 208, 124, 72, 240, 126, 151, 59, 91, 92, 104, 250, 197, 204, 145, 106, 154, 60, 97, 50, 143, 105, 123, 243, 177, 135, 162, 249, 82, 163, 170, 18, 138, 133, 21, 139, 39, 214, 127, 182, 143, 237, 29, 240, 175, 254, 10, 55, 107, 225, 173, 22, 207, 88, 255, 0, 133, 123, 226, 217, 245, 88, 69, 148, 158, 55, 120, 116, 173, 62, 214, 80, 141, 135, 150, 248, 60, 150, 209, 199, 176, 203, 25, 253, 225, 149, 132, 152, 142, 25, 36, 42, 141, 241, 199, 128, 127, 103, 187, 31, 3, 252, 99, 214, 252, 69, 103, 164, 207, 163, 233, 186, 164, 158, 85, 157, 148, 191, 235, 33, 180, 183, 181, 130, 217, 29, 134, 78, 26, 105, 150, 73, 66, 183, 204, 17, 84, 182, 214, 44, 162, 143, 237, 27, 166, 67, 172, 124, 61, 215, 108, 254, 207, 45, 209, 184, 178, 149, 18, 40, 227, 47, 36, 146, 109, 62, 88, 69, 28, 151, 222, 23, 104, 28, 150, 198, 57, 197, 122, 17, 195, 39, 27, 189, 209, 142, 15, 137, 113, 216, 87, 104, 75, 154, 59, 37, 37, 123, 47, 95, 202, 231, 235, 183, 195, 159, 129, 90, 247, 236, 77, 240, 39, 73, 79, 133, 255, 0, 22, 36, 241, 30, 157, 53, 220, 154, 181, 206, 177, 161, 234, 17, 77, 167, 221, 221, 181, 183, 144, 225, 96, 140, 188, 94, 80, 143, 105, 88, 228, 105, 152, 56, 15, 188, 149, 77, 152, 17, 127, 193, 84, 254, 57, 124, 51, 154, 56, 228, 215, 52, 159, 16, 91, 199, 32, 44, 186, 158, 153, 22, 246, 80, 75, 109, 223, 14, 195, 200, 224, 147, 147, 199, 24, 175, 32, 248, 67, 251, 37, 120, 187, 246, 0, 253, 141, 116, 191, 24, 120, 202, 210, 107, 31, 30, 120, 155, 68, 210, 244, 187, 189, 26, 242, 224, 171, 181, 228, 191, 103, 82, 110, 230, 80, 192, 58, 206, 75, 59, 0, 223, 103, 129, 37, 57, 44, 100, 68, 248, 195, 227, 47, 138, 60, 117, 227, 185, 245, 77, 105, 117, 207, 23, 77, 167, 233, 247, 109, 107, 246, 139, 29, 72, 104, 214, 239, 112, 168, 142, 208, 197, 2, 206, 155, 138, 172, 145, 179, 32, 243, 204, 34, 68, 89, 102, 102, 97, 187, 195, 204, 115, 10, 24, 59, 42, 141, 182, 245, 178, 237, 213, 187, 180, 146, 245, 123, 159, 169, 100, 188, 59, 12, 218, 159, 63, 44, 106, 55, 107, 202, 74, 205, 182, 155, 182, 156, 210, 114, 118, 150, 145, 79, 72, 183, 100, 145, 250, 183, 160, 127, 193, 116, 252, 93, 125, 166, 127, 103, 220, 120, 22, 198, 77, 83, 36, 173, 236, 58, 166, 213, 234, 79, 205, 17, 128, 141, 160, 28, 112, 65, 249, 71, 57, 201, 49, 248, 227, 246, 178, 248, 129, 251, 68, 232, 162, 45, 114, 72, 124, 63, 162, 220, 40, 73, 109, 44, 247, 43, 93, 40, 231, 107, 72, 196, 200, 235, 208, 237, 102, 97, 158, 113, 211, 31, 151, 255, 0, 240, 76, 127, 218, 183, 251, 123, 246, 173, 240, 207, 132, 126, 32, 92, 73, 113, 225, 253, 99, 83, 135, 68, 26, 166, 161, 18, 195, 115, 167, 222, 92, 56, 142, 222, 222, 118, 80, 18, 81, 43, 144, 168, 235, 243, 3, 243, 177, 104, 196, 146, 197, 250, 185, 251, 88, 124, 61, 240, 247, 236, 233, 47, 218, 167, 213, 173, 102, 181, 183, 77, 241, 217, 41, 204, 210, 142, 122, 242, 49, 147, 140, 231, 181, 117, 81, 168, 171, 83, 83, 166, 221, 188, 213, 154, 60, 217, 101, 121, 110, 15, 21, 236, 41, 211, 94, 211, 215, 154, 222, 154, 181, 249, 52, 238, 154, 77, 52, 71, 240, 135, 224, 244, 223, 19, 103, 95, 54, 56, 244, 223, 13, 216, 176, 91, 171, 201, 114, 145, 237, 24, 39, 158, 185, 35, 167, 7, 183, 28, 240, 239, 219, 39, 254, 10, 173, 224, 191, 217, 175, 225, 93, 207, 131, 62, 26, 237, 142, 99, 152, 38, 212, 100, 99, 189, 88, 228, 54, 222, 229, 186, 13, 217, 224, 16, 7, 99, 95, 12, 126, 208, 95, 240, 80, 175, 16, 248, 202, 222, 79, 15, 104, 183, 18, 77, 19, 18, 139, 107, 108, 222, 92, 49, 47, 31, 123, 4, 115, 212, 242, 73, 39, 215, 21, 207, 126, 204, 127, 176, 95, 143, 191, 108, 79, 24, 173, 197, 190, 151, 170, 120, 178, 229, 110, 163, 142, 229, 163, 30, 78, 155, 165, 25, 8, 230, 121, 223, 10, 21, 23, 46, 85, 114, 236, 170, 66, 43, 177, 10, 87, 180, 140, 125, 216, 234, 202, 196, 96, 232, 166, 177, 25, 132, 151, 44, 117, 74, 250, 95, 207, 187, 242, 60, 215, 90, 241, 183, 138, 191, 105, 63, 20, 205, 112, 166, 226, 72, 110, 36, 44, 211, 74, 72, 94, 125, 205, 123, 119, 236, 201, 255, 0, 4, 249, 241, 7, 197, 205, 103, 201, 240, 231, 135, 245, 15, 21, 95, 66, 192, 79, 44, 106, 18, 206, 213, 177, 144, 178, 76, 248, 141, 14, 57, 1, 152, 19, 216, 26, 253, 20, 253, 154, 63, 224, 134, 30, 29, 240, 109, 212, 58, 135, 196, 109, 122, 79, 17, 61, 188, 129, 224, 209, 52, 84, 125, 55, 76, 141, 70, 112, 37, 148, 31, 180, 77, 209, 27, 229, 104, 87, 130, 140, 178, 41, 57, 251, 147, 192, 159, 15, 180, 63, 134, 62, 19, 179, 208, 124, 61, 164, 233, 250, 46, 143, 167, 169, 75, 107, 59, 40, 22, 24, 97, 4, 150, 56, 85, 0, 100, 177, 36, 158, 164, 146, 78, 73, 38, 156, 105, 202, 78, 243, 62, 119, 49, 227, 8, 183, 203, 134, 141, 252, 222, 223, 114, 62, 9, 248, 25, 255, 0, 4, 76, 186, 134, 8, 228, 241, 167, 138, 45, 244, 187, 98, 191, 62, 159, 160, 197, 230, 76, 114, 115, 243, 92, 72, 2, 134, 3, 130, 4, 108, 185, 61, 72, 28, 253, 125, 240, 43, 246, 58, 248, 123, 251, 56, 218, 91, 143, 11, 248, 126, 214, 27, 232, 23, 111, 246, 149, 214, 110, 175, 159, 140, 31, 223, 73, 150, 80, 114, 114, 169, 181, 121, 60, 87, 168, 21, 205, 21, 178, 138, 71, 201, 98, 243, 108, 94, 39, 74, 179, 118, 236, 180, 95, 113, 196, 252, 20, 240, 34, 252, 49, 211, 117, 109, 14, 21, 117, 211, 173, 245, 57, 174, 180, 240, 204, 88, 71, 12, 231, 206, 40, 185, 60, 5, 145, 165, 80, 163, 0, 0, 56, 174, 218, 147, 109, 45, 109, 82, 164, 170, 73, 206, 91, 189, 206, 9, 73, 201, 221, 133, 20, 81, 89, 146, 20, 81, 69, 0, 20, 81, 69, 0, 20, 84, 73, 121, 28, 155, 118, 243, 187, 238, 227, 189, 60, 72, 164, 47, 251, 93, 51, 64, 14, 160, 243, 69, 25, 160, 15, 137, 191, 224, 185, 31, 240, 79, 200, 255, 0, 109, 31, 216, 247, 86, 189, 209, 84, 195, 227, 47, 3, 183, 252, 36, 54, 2, 62, 63, 181, 4, 16, 92, 35, 219, 72, 57, 221, 152, 167, 149, 144, 143, 152, 72, 168, 51, 181, 152, 31, 231, 235, 246, 116, 240, 158, 161, 224, 93, 55, 197, 223, 24, 24, 89, 139, 59, 43, 216, 160, 211, 146, 246, 221, 46, 34, 190, 251, 5, 168, 182, 111, 145, 199, 64, 76, 202, 113, 213, 136, 193, 12, 128, 143, 235, 110, 117, 12, 171, 187, 251, 194, 191, 151, 173, 3, 246, 80, 248, 161, 241, 183, 226, 204, 159, 13, 38, 181, 211, 116, 47, 3, 248, 62, 242, 120, 117, 27, 141, 50, 236, 77, 29, 173, 188, 83, 75, 202, 18, 8, 119, 145, 213, 182, 151, 36, 187, 150]).concat([145, 132, 136, 178, 130, 115, 89, 88, 170, 152, 151, 28, 63, 213, 210, 209, 203, 155, 240, 177, 15, 128, 62, 34, 126, 210, 159, 182, 190, 139, 113, 47, 133, 174, 27, 195, 58, 79, 218, 30, 206, 125, 74, 230, 79, 236, 251, 51, 50, 224, 75, 26, 18, 30, 226, 69, 82, 72, 221, 28, 100, 100, 99, 112, 96, 64, 235, 172, 255, 0, 224, 153, 127, 8, 127, 102, 145, 23, 196, 47, 143, 223, 18, 36, 215, 175, 116, 185, 23, 80, 123, 107, 169, 26, 218, 192, 204, 159, 50, 143, 45, 218, 75, 187, 182, 200, 194, 168, 101, 14, 112, 60, 179, 157, 181, 147, 226, 15, 143, 62, 37, 215, 188, 109, 23, 192, 239, 129, 186, 186, 120, 126, 199, 80, 187, 26, 121, 158, 57, 2, 69, 110, 209, 240, 210, 44, 251, 90, 72, 35, 137, 87, 50, 205, 25, 222, 225, 118, 130, 238, 113, 90, 215, 95, 240, 67, 159, 135, 215, 158, 37, 188, 185, 248, 129, 241, 11, 198, 190, 54, 214, 99, 39, 237, 55, 208, 220, 193, 167, 217, 150, 254, 39, 27, 210, 102, 198, 73, 229, 164, 39, 138, 169, 43, 162, 99, 202, 214, 167, 207, 95, 8, 190, 20, 94, 127, 193, 75, 255, 0, 106, 175, 18, 248, 251, 86, 211, 229, 210, 124, 15, 29, 228, 55, 109, 14, 208, 185, 179, 143, 116, 86, 150, 105, 183, 140, 249, 112, 237, 98, 188, 100, 72, 252, 110, 0, 253, 81, 241, 35, 224, 209, 241, 135, 199, 157, 27, 197, 23, 159, 103, 91, 31, 10, 217, 53, 182, 149, 105, 26, 127, 170, 119, 33, 164, 145, 143, 28, 146, 177, 42, 160, 225, 4, 0, 238, 38, 66, 169, 209, 216, 252, 84, 248, 43, 251, 42, 248, 79, 77, 240, 63, 132, 238, 35, 187, 211, 237, 225, 119, 138, 15, 15, 43, 106, 2, 22, 92, 13, 247, 14, 1, 98, 206, 64, 249, 142, 73, 192, 36, 224, 138, 242, 95, 137, 95, 240, 80, 93, 7, 195, 119, 141, 246, 93, 62, 86, 108, 110, 88, 110, 62, 89, 91, 254, 3, 193, 167, 74, 10, 49, 183, 204, 219, 17, 137, 115, 157, 214, 137, 43, 37, 228, 117, 222, 41, 211, 238, 10, 183, 238, 220, 241, 199, 21, 218, 127, 193, 47, 254, 37, 248, 19, 224, 231, 252, 20, 111, 192, 55, 95, 19, 116, 59, 123, 221, 39, 90, 75, 173, 51, 64, 190, 186, 80, 208, 233, 94, 32, 99, 20, 150, 18, 21, 110, 11, 200, 35, 185, 134, 35, 201, 89, 231, 131, 3, 113, 86, 79, 143, 252, 107, 255, 0, 5, 79, 241, 52, 240, 52, 122, 31, 132, 109, 227, 36, 96, 72, 209, 166, 127, 54, 6, 190, 123, 248, 197, 251, 88, 252, 70, 248, 169, 105, 52, 58, 150, 159, 50, 194, 206, 178, 33, 142, 103, 15, 4, 138, 67, 36, 136, 87, 27, 93, 88, 43, 43, 14, 133, 65, 174, 159, 105, 116, 211, 48, 85, 20, 117, 123, 31, 210, 7, 252, 21, 227, 227, 126, 153, 241, 99, 224, 213, 133, 174, 147, 246, 121, 160, 208, 245, 69, 185, 223, 47, 241, 11, 136, 38, 211, 222, 71, 110, 137, 28, 73, 122, 211, 51, 30, 0, 128, 158, 217, 31, 144, 126, 61, 248, 247, 163, 221, 126, 207, 150, 58, 45, 178, 161, 190, 208, 111, 53, 59, 91, 224, 127, 214, 198, 247, 26, 173, 246, 161, 19, 145, 212, 35, 69, 122, 177, 229, 185, 243, 109, 238, 23, 248, 42, 63, 128, 159, 240, 87, 77, 51, 226, 199, 131, 44, 244, 191, 138, 26, 196, 26, 31, 139, 26, 51, 109, 169, 54, 161, 111, 229, 233, 154, 230, 70, 26, 96, 192, 121, 81, 23, 25, 223, 27, 236, 140, 49, 59, 48, 164, 42, 242, 191, 25, 127, 101, 22, 248, 207, 170, 89, 235, 30, 6, 241, 103, 134, 110, 52, 120, 98, 22, 240, 125, 182, 254, 102, 138, 24, 247, 110, 219, 21, 197, 186, 76, 178, 6, 102, 44, 196, 236, 46, 126, 121, 12, 178, 52, 146, 73, 242, 249, 246, 70, 177, 141, 85, 142, 246, 73, 165, 228, 238, 159, 226, 244, 63, 162, 248, 55, 56, 194, 229, 184, 104, 85, 203, 36, 167, 15, 138, 215, 110, 73, 184, 180, 212, 146, 78, 73, 187, 167, 116, 157, 156, 118, 229, 147, 107, 230, 255, 0, 21, 107, 23, 26, 159, 132, 188, 115, 170, 91, 52, 240, 90, 218, 73, 98, 96, 154, 38, 195, 197, 124, 162, 229, 226, 117, 35, 159, 150, 21, 184, 39, 29, 9, 139, 60, 149, 175, 211, 15, 218, 131, 198, 222, 52, 248, 233, 241, 163, 92, 210, 100, 107, 169, 175, 38, 214, 238, 108, 226, 179, 180, 13, 44, 147, 74, 103, 117, 16, 196, 171, 150, 110, 126, 85, 11, 146, 120, 197, 124, 199, 224, 239, 130, 54, 255, 0, 0, 52, 184, 124, 81, 227, 239, 17, 120, 102, 250, 199, 193, 237, 253, 167, 101, 167, 104, 150, 146, 13, 54, 218, 228, 58, 148, 158, 233, 222, 8, 86, 70, 243, 35, 129, 188, 152, 162, 148, 220, 178, 66, 146, 77, 181, 76, 47, 244, 151, 252, 17, 7, 254, 10, 127, 107, 240, 151, 246, 153, 212, 175, 190, 36, 252, 44, 142, 15, 9, 248, 137, 149, 60, 59, 226, 203, 136, 247, 235, 154, 30, 18, 68, 145, 130, 201, 159, 58, 57, 131, 13, 226, 219, 14, 131, 143, 223, 87, 110, 7, 11, 58, 20, 156, 37, 165, 236, 188, 236, 187, 158, 14, 121, 154, 73, 98, 37, 136, 132, 28, 170, 78, 237, 69, 38, 181, 110, 239, 70, 147, 229, 90, 106, 210, 114, 147, 149, 150, 135, 220, 159, 240, 79, 223, 248, 32, 86, 157, 163, 233, 182, 126, 38, 248, 205, 254, 145, 117, 62, 217, 225, 240, 189, 172, 172, 137, 15, 66, 62, 215, 50, 156, 179, 30, 241, 198, 64, 29, 217, 190, 232, 253, 50, 240, 103, 130, 52, 127, 135, 126, 26, 179, 209, 180, 29, 47, 79, 209, 116, 155, 4, 242, 237, 172, 172, 96, 91, 123, 120, 23, 209, 81, 64, 3, 242, 166, 120, 31, 198, 218, 79, 196, 95, 12, 89, 107, 90, 14, 161, 103, 171, 105, 26, 132, 126, 101, 181, 221, 172, 130, 72, 166, 94, 156, 17, 232, 65, 4, 117, 4, 16, 112, 70, 43, 94, 187, 99, 78, 49, 216, 252, 131, 29, 142, 196, 98, 170, 115, 226, 36, 219, 237, 219, 228, 20, 81, 69, 81, 196, 20, 81, 69, 0, 20, 81, 69, 0, 20, 81, 69, 0, 20, 81, 69, 0, 20, 81, 69, 0, 97, 248, 203, 198, 86, 190, 15, 75, 115, 117, 111, 117, 112, 110, 219, 203, 141, 96, 139, 204, 102, 110, 62, 92, 103, 169, 207, 2, 185, 253, 79, 226, 166, 173, 13, 164, 146, 233, 158, 9, 215, 175, 159, 32, 236, 155, 101, 174, 226, 127, 222, 201, 253, 62, 184, 174, 163, 197, 94, 25, 143, 196, 246, 81, 35, 179, 71, 37, 188, 201, 113, 11, 175, 84, 117, 57, 7, 255, 0, 173, 86, 53, 153, 238, 44, 116, 139, 153, 173, 109, 133, 229, 204, 113, 51, 71, 6, 253, 158, 107, 1, 194, 238, 193, 198, 125, 113, 91, 211, 148, 21, 189, 219, 191, 54, 237, 250, 26, 71, 151, 77, 14, 47, 194, 191, 17, 124, 101, 172, 94, 170, 106, 30, 5, 254, 202, 133, 196, 132, 185, 213, 224, 148, 166, 214, 194, 130, 7, 57, 110, 113, 128, 84, 224, 228, 142, 51, 221, 91, 92, 23, 183, 86, 145, 90, 54, 42, 9, 86, 198, 87, 219, 130, 71, 30, 196, 215, 11, 175, 39, 196, 47, 20, 120, 86, 79, 236, 169, 60, 59, 225, 157, 66, 120, 228, 88, 205, 212, 50, 94, 155, 114, 195, 8, 248, 5, 84, 178, 158, 112, 70, 15, 112, 49, 207, 207, 190, 55, 253, 151, 127, 107, 207, 136, 154, 149, 208, 143, 246, 160, 240, 143, 129, 108, 195, 143, 178, 255, 0, 96, 124, 53, 130, 238, 64, 17, 21, 84, 201, 246, 185, 223, 62, 97, 105, 26, 69, 4, 97, 162, 136, 163, 42, 179, 70, 58, 232, 225, 105, 86, 151, 191, 86, 20, 151, 159, 59, 255, 0, 210, 84, 205, 163, 74, 19, 214, 82, 140, 126, 255, 0, 209, 51, 233, 47, 143, 218, 158, 167, 165, 252, 10, 241, 165, 214, 134, 222, 94, 183, 111, 160, 223, 75, 167, 177, 138, 73, 54, 220, 45, 188, 134, 51, 178, 48, 93, 190, 112, 188, 40, 44, 122, 0, 78, 43, 249, 105, 248, 233, 241, 103, 197, 94, 26, 215, 124, 121, 226, 45, 47, 93, 214, 188, 43, 116, 225, 52, 75, 91, 59, 59, 227, 11, 69, 10, 41, 41, 20, 187, 14, 26, 77, 210, 179, 55, 44, 55, 59, 0, 197, 112, 43, 238, 47, 217, 103, 226, 255, 0, 137, 62, 15, 126, 197, 223, 17, 53, 143, 17, 124, 112, 248, 173, 172, 248, 171, 225, 39, 138, 117, 95, 7, 69, 225, 161, 226, 22, 254, 193, 184, 148, 198, 34, 180, 156, 2, 158, 124, 177, 9, 30, 234, 85, 70, 151, 203, 38, 217, 85, 162, 219, 247, 190, 55, 209, 191, 102, 93, 55, 227, 97, 134, 61, 99, 86, 215, 19, 77, 142, 118, 184, 150, 218, 218, 100, 139, 237, 78, 220, 157, 242, 149, 47, 143, 247, 74, 158, 126, 247, 3, 27, 103, 153, 66, 203, 241, 179, 193, 170, 138, 124, 189, 82, 105, 119, 91, 249, 89, 246, 61, 215, 193, 248, 138, 255, 0, 187, 160, 212, 165, 204, 149, 222, 138, 221, 95, 229, 242, 185, 228, 95, 177, 135, 237, 75, 225, 63, 217, 171, 224, 23, 138, 60, 125, 113, 112, 183, 158, 52, 214, 53, 119, 208, 173, 99, 136, 111, 254, 200, 179, 69, 142, 100, 109, 178, 18, 206, 179, 73, 150, 98, 11, 110, 104, 162, 4, 141, 132, 215, 17, 251, 61, 120, 83, 227, 175, 237, 245, 241, 99, 84, 210, 254, 23, 217, 220, 94, 218, 164, 237, 61, 221, 228, 209, 44, 22, 58, 81, 153, 203, 114, 231, 228, 136, 22, 39, 108, 107, 140, 1, 133, 80, 160, 1, 246, 215, 197, 207, 248, 39, 62, 157, 241, 215, 192, 126, 25, 240, 255, 0, 131, 255, 0, 176, 252, 35, 15, 135, 221, 161, 48, 181, 179, 253, 158, 91, 105, 25, 25, 243, 179, 37, 228, 86, 66, 202, 24, 101, 203, 190, 93, 114, 90, 191, 72, 63, 224, 154, 255, 0, 177, 223, 135, 127, 100, 207, 130, 218, 63, 132, 188, 63, 10, 172, 22, 96, 205, 117, 116, 208, 170, 220, 106, 151, 79, 131, 53, 196, 159, 237, 49, 33, 64, 207, 202, 138, 138, 56, 81, 94, 94, 171, 115, 210, 163, 192, 213, 40, 226, 229, 28, 91, 189, 40, 164, 238, 190, 211, 118, 209, 117, 86, 214, 247, 95, 153, 249, 207, 225, 15, 248, 54, 59, 226, 190, 175, 160, 207, 171, 234, 223, 28, 52, 155, 31, 17, 221, 64, 93, 33, 93, 17, 238, 237, 94, 78, 161, 101, 118, 117, 32, 18, 112, 93, 99, 98, 61, 14, 49, 92, 175, 130, 255, 0, 224, 143, 159, 28, 166, 241, 108, 222, 12, 188, 248, 161, 224, 141, 15, 196, 22, 176, 181, 212, 154, 78, 179, 111, 123, 4, 151, 49, 39, 223, 186, 181, 48, 19, 29, 221, 168, 227, 51, 68, 119, 69, 144, 46, 35, 182, 118, 68, 111, 222, 95, 25, 125, 143, 194, 222, 31, 184, 190, 212, 174, 109, 116, 251, 11, 52, 105, 46, 110, 110, 230, 75, 123, 120, 20, 15, 190, 242, 49, 10, 170, 7, 114, 64, 21, 240, 103, 237, 137, 255, 0, 5, 37, 253, 153, 117, 205, 54, 63, 14, 234, 218, 230, 191, 227, 93, 71, 77, 188, 75, 157, 58, 95, 5, 88, 77, 253, 161, 165, 94, 33, 253, 213, 221, 133, 251, 24, 99, 73, 212, 242, 178, 65, 51, 14, 72, 36, 130, 65, 188, 61, 28, 70, 34, 92, 152, 104, 74, 79, 201, 55, 249, 29, 24, 236, 187, 33, 195, 210, 246, 149, 220, 105, 255, 0, 138, 77, 95, 241, 191, 221, 247, 31, 46, 219, 127, 193, 3, 126, 50, 61, 182, 219, 239, 137, 31, 9, 46, 51, 130, 203, 46, 137, 125, 58, 146, 61, 228, 110, 190, 248, 174, 111, 197, 223, 240, 65, 79, 136, 186, 125, 185, 146, 239, 197, 127, 10, 217, 87, 189, 150, 135, 57, 145, 143, 178, 149, 65, 248, 238, 175, 166, 124, 63, 255, 0, 5, 52, 248, 157, 225, 79, 135, 191, 103, 215, 62, 29, 216, 233, 47, 30, 229, 178, 215, 188, 93, 116, 52, 237, 75, 80, 183, 192, 242, 230, 155, 68, 179, 70, 217, 51, 100, 239, 9, 113, 12, 4, 141, 201, 229, 171, 8, 147, 196, 252, 81, 251, 109, 124, 98, 253, 165, 188, 125, 101, 225, 95, 15, 107, 87, 90, 150, 171, 175, 205, 246, 75, 45, 47, 77, 183, 77, 50, 204, 182, 11, 51, 182, 194, 242, 172, 40, 128, 180, 134, 121, 167, 69, 64, 196, 171, 112, 167, 223, 195, 112, 174, 101, 56, 186, 184, 132, 169, 65, 106, 220, 154, 209, 122, 43, 179, 231, 49, 25, 231, 8, 194, 81, 167, 135, 167, 58, 213, 30, 138, 49, 114, 213, 246, 187, 113, 95, 117, 207, 24, 147, 254, 8, 245, 160, 233, 215, 199, 254, 19, 189, 99, 86, 215, 165, 182, 59, 82, 11, 40, 6, 153, 6, 59, 43, 146, 242, 200, 220, 127, 117, 208, 15, 78, 245, 123, 71, 255, 0, 130, 119, 252, 37, 240, 94, 170, 183, 90, 62, 143, 171, 105, 87, 178, 100, 71, 37, 135, 136, 239, 109, 231, 39, 63, 192, 124, 208, 91, 232, 185, 53, 250, 29, 119, 240, 55, 254, 17, 143, 135, 214, 58, 30, 167, 169, 127, 110, 106, 86, 234, 237, 115, 124, 109, 68, 17, 220, 79, 33, 121, 28, 197, 10, 141, 176, 64, 25, 138, 197, 10, 228, 71, 26, 162, 229, 176, 88, 248, 63, 196, 159, 134, 211, 104, 111, 34, 225, 100, 183, 147, 57, 222, 3, 41, 30, 152, 60, 30, 213, 226, 167, 23, 240, 217, 174, 246, 63, 103, 202, 242, 60, 170, 24, 120, 242, 225, 99, 25, 89, 54, 159, 188, 211, 182, 220, 206, 237, 219, 185, 227, 48, 124, 50, 240, 14, 155, 119, 31, 246, 183, 246, 223, 137, 111, 52, 121, 55, 69, 31, 136, 245, 123, 157, 73, 44, 101, 3, 27, 188, 153, 216, 198, 178, 129, 252, 108, 155, 199, 247, 171, 181, 241, 47, 141, 33, 177, 211, 31, 73, 188, 183, 134, 238, 206, 84, 81, 45, 165, 196, 73, 53, 172, 138, 70, 66, 52, 76, 10, 145, 211, 130, 49, 92, 103, 197, 159, 8, 219, 248, 231, 195, 207, 111, 39, 218, 33, 189, 182, 137, 224, 138, 230, 221, 60, 203, 171, 120, 240, 127, 213, 174, 71, 156, 128, 103, 253, 29, 152, 112, 7, 148, 209, 54, 68, 147, 234, 218, 132, 186, 174, 183, 15, 219, 13, 157, 196, 210, 105, 150, 23, 34, 234, 202, 67, 53, 142, 160, 166, 35, 1, 158, 221, 200, 5, 163, 121, 109, 165, 59, 88, 43, 198, 193, 146, 68, 73, 17, 209, 106, 86, 113, 106, 199, 171, 69, 83, 133, 79, 171, 242, 40, 166, 186, 45, 255, 0, 207, 230, 125, 31, 251, 2, 254, 216, 150, 31, 178, 159, 140, 102, 151, 67, 212, 53, 111, 13, 88, 106, 75, 182, 239, 72, 107, 137, 111, 124, 59, 114, 220, 5, 147, 236, 172, 197, 173, 93, 71, 1, 173, 154, 53, 35, 135, 12, 0, 3, 245, 99, 224, 71, 237, 181, 225, 79, 140, 171, 107, 11, 77, 30, 153, 125, 120, 85, 96, 38, 117, 154, 214, 241, 142, 120, 138, 85, 56, 39, 129, 195, 5, 201, 96, 6, 227, 95, 136, 250, 23, 195, 127, 237, 152, 68, 150, 232, 191, 48, 252, 171, 111, 194, 122, 199, 138, 62, 16, 106, 127, 104, 210, 110, 102, 129, 73, 253, 228, 18, 41, 120, 38, 246, 100, 232, 126, 189, 125, 13, 121, 178, 140, 162, 253, 211, 230, 115, 174, 9, 193, 98, 219, 157, 31, 114, 126, 91, 63, 84, 127, 64, 138, 219, 135, 127, 196, 82, 215, 230, 127, 236, 141, 255, 0, 5, 18, 212, 173, 217, 44, 218, 228, 90, 235, 46, 139, 26, 233, 58, 221, 252, 205, 164, 222, 17, 141, 162, 41, 130, 187, 218, 49, 228, 101, 17, 215, 12, 219, 162, 149, 182, 149, 251, 183, 224, 119, 237, 29, 164, 252, 107, 130, 91, 127, 177, 106, 62, 29, 241, 13, 154, 151, 187, 208, 245, 49, 24, 187, 137, 50, 0, 158, 54, 141, 222, 43, 139, 118, 220, 184, 154, 23, 116, 12, 74, 57, 73, 82, 72, 208, 133, 69, 39, 110, 189, 143, 200, 115, 108, 151, 21, 151, 213, 246, 120, 136, 250, 62, 140, 244, 58, 40, 162, 180, 60, 144, 162, 138, 40, 0, 162, 138, 40, 0, 162, 138, 40, 0, 162, 138, 40, 0, 163, 173, 20, 80, 1, 138, 227, 62, 42, 126, 209, 95, 15, 126, 6, 77, 105, 31, 141, 188, 117, 224, 223, 7, 73, 168, 103, 236, 171, 174, 107, 86, 218, 123, 92, 224, 128, 118, 9, 157, 119, 96, 178, 142, 51, 201, 30, 181, 214, 234, 23, 241, 233, 118, 83, 92, 76, 219, 33, 129, 26, 71, 99, 252, 42, 6, 73, 175, 138, 254, 42, 127, 193, 86, 127, 103, 95, 139, 63, 16, 52, 159, 135, 171, 225, 31, 21, 124, 98, 241, 53, 245, 251, 174, 155, 160, 193, 224, 73, 110, 124, 203, 184, 60, 223, 49, 161, 109, 65, 33, 129, 154, 37, 134, 102, 50, 35, 149, 11, 27, 144, 220, 26, 244, 178, 220, 182, 182, 46, 126, 229, 57, 78, 49, 214, 92, 171, 101, 171, 187, 111, 69, 183, 94, 135, 86, 23, 15, 42, 178, 210, 45, 165, 189, 186, 124, 246, 251, 207, 203, 191, 248, 41, 95, 142, 252, 57, 109, 241, 59, 198, 218, 55, 130, 53, 237, 15, 196, 222, 23, 241, 215, 196, 141, 79, 199, 107, 171, 104, 247, 169, 123, 103, 168, 9, 172, 172, 34, 10, 147, 35, 50, 184, 138, 229, 47, 84, 128, 196, 44, 158, 96, 0, 99, 3, 147, 248, 27, 166, 121, 90, 108, 61, 23, 113, 7, 158, 245, 87, 254, 10, 15, 241, 129, 62, 61, 126, 217, 26, 198, 173, 111, 160, 221, 120, 94, 205, 124, 187, 123, 109, 26, 230, 8, 97, 155, 75, 78, 162, 25, 18, 6, 104, 150, 69, 221, 135, 8, 204, 187, 179, 243, 55, 222, 61, 39, 128, 30, 223, 65, 211, 97, 89, 22, 70, 149, 151, 17, 69, 16, 13, 44, 204, 184, 39, 104, 36, 0, 6, 70, 89, 138, 162, 238, 5, 153, 71, 53, 21, 170, 85, 196, 226, 29, 147, 148, 164, 236, 150, 237, 244, 91, 111, 234, 143, 216, 56, 126, 80, 163, 65, 226, 49, 18, 81, 140, 34, 174, 219, 178, 74, 218, 221, 237, 185, 244, 87, 193, 141, 58, 47, 54, 2, 195, 230, 110, 65, 206, 222, 6, 57, 250, 12, 243, 91, 31, 22, 191, 224, 171, 254, 27, 253, 158, 116, 118, 211, 252, 31, 111, 99, 226, 205, 106, 76, 68, 151, 147, 147, 253, 151, 28, 135, 162, 167, 150, 124, 203, 183, 36, 253, 200, 72, 86, 221, 196, 185, 5, 107, 228, 111, 27, 252, 85, 214, 126, 41, 205, 47, 135, 244, 25, 173, 218, 204, 55, 149, 119, 42, 134, 109, 54, 15, 85, 114, 54, 155, 201, 7, 247, 62, 88, 148, 133, 206, 25, 119, 183, 95, 240, 99, 224, 253, 167, 130, 245, 104, 239, 44, 77, 213, 239, 136, 39, 27, 36, 214, 46, 72, 146, 249, 243, 213, 98, 32, 98, 4, 61, 54, 196, 23, 35, 130, 91, 173, 125, 158, 91, 194, 116, 232, 175, 107, 153, 235, 47, 228, 79, 111, 241, 63, 209, 125, 231, 230, 124, 81, 226, 61, 92, 198, 111, 13, 144, 171, 67, 103, 86, 75, 127, 240, 71, 255, 0, 110, 151, 201, 33, 60, 79, 240, 155, 227, 23, 237, 249, 226, 187, 125, 91, 227, 55, 140, 181, 79, 14, 232, 48, 201, 231, 89, 232, 134, 21, 146, 249, 61, 12, 26, 114, 145, 5, 153, 199, 30, 109, 193, 51, 227, 168, 126, 149, 244, 111, 193, 159, 217, 71, 193, 31, 179, 230, 154, 146, 120, 79, 195, 195, 72, 190, 145, 118, 190, 179, 114, 255, 0, 109, 214, 174, 51, 199, 252, 124, 176, 204, 121, 233, 136, 22, 33, 206, 8, 61, 107, 150, 240, 199, 237, 83, 225, 31, 2, 95, 143, 9, 248, 35, 195, 250, 215, 197, 239, 136, 228, 148, 254, 192, 240, 180, 66, 224, 90, 200, 14, 15, 219, 47, 48, 97, 183, 0, 240, 227, 47, 42, 117, 49, 99, 154, 250, 95, 246, 118, 255, 0, 130, 107, 120, 243, 246, 173, 154, 61, 119, 246, 141, 214, 172, 116, 207, 14, 240, 240, 252, 50, 240, 157, 204, 144, 233, 229, 58, 133, 212, 175, 149, 132, 215, 135, 28, 60, 74, 203, 110, 248, 251, 131, 165, 111, 142, 226, 74, 56, 107, 80, 165, 101, 21, 246, 99, 100, 190, 127, 211, 103, 197, 82, 225, 124, 69, 120, 60, 94, 41, 189, 126, 220, 238, 219, 255, 0, 10, 221, 252, 146, 93, 218, 220, 252, 235, 248, 243, 225, 109, 103, 246, 151, 248, 173, 115, 224, 223, 131, 186, 14, 161, 227, 239, 16, 199, 57, 134, 254, 226, 209, 88, 233, 122, 67, 255, 0, 23, 218, 238, 192, 40, 36, 92, 243, 18, 146, 224, 240, 219, 1, 205, 125, 31, 255, 0, 4, 247, 253, 149, 103, 253, 128, 62, 34, 106, 222, 10, 248, 145, 14, 155, 121, 241, 3, 199, 150, 77, 123, 161, 248, 174, 21, 63, 98, 214, 109, 225, 79, 54, 125, 30, 5, 108, 253, 158, 226, 219, 13, 43, 68, 9, 23, 49, 42, 204, 9, 48, 75, 95, 172, 250, 31, 194, 47, 11, 252, 24, 248, 103, 111, 160, 248, 87, 65, 209, 124, 55, 160, 233, 48, 8, 109, 52, 253, 62, 213, 45, 109, 45, 144, 127, 117, 16, 5, 30, 189, 57, 63, 90, 249, 151, 246, 163, 248, 87, 162, 252, 121, 248, 127, 168, 120, 127, 88, 146, 226, 56, 228, 158, 43, 219, 11, 251, 9, 124, 187, 237, 30, 250, 23, 15, 107, 125, 107, 40, 255, 0, 85, 115, 12, 129, 93, 28, 119, 0, 28, 130, 65, 248, 172, 243, 136, 113, 152, 244, 169, 84, 118, 166, 182, 138, 219, 213, 247, 126, 191, 36, 125, 239, 7, 101, 56, 60, 47, 239, 48, 208, 253, 226, 251, 114, 221, 249, 37, 180, 87, 165, 223, 155, 71, 146, 248, 247, 77, 88, 46, 38, 12, 204, 185, 87, 39, 106, 128, 6, 115, 192, 253, 7, 63, 74, 241, 111, 137, 90, 116, 119, 90, 108, 209, 200, 126, 92, 146, 27, 166, 120, 233, 249, 145, 249, 118, 174, 223, 193, 191, 21, 181, 79, 19, 79, 169, 120, 103, 198, 214, 250, 125, 143, 142, 188, 59, 34, 90, 106, 162, 214, 35, 5, 166, 161, 43, 198, 242, 193, 127, 110, 189, 173, 239, 97, 138, 105, 163, 80, 127, 119, 37, 181, 237, 185, 230, 217, 90, 94, 43, 226, 142, 82, 41, 153, 113, 27, 199, 242, 170, 167, 45, 141, 199, 159, 76, 118, 31, 152, 246, 243, 104, 203, 221, 177, 251, 22, 91, 81, 214, 138, 154, 251, 187, 53, 186, 62, 94, 248, 129, 167, 52, 87, 204, 115, 243, 70, 112, 112, 217, 205, 112, 126, 38, 241, 219, 120, 3, 67, 186, 184, 117, 221, 164, 201, 118, 183, 55, 136, 78, 62, 199, 51, 148, 70, 187, 140, 127, 211, 69, 84, 73, 148, 99, 121, 88, 36, 36, 121, 45, 191, 212, 62, 36, 70, 25, 218, 77, 141, 135, 28, 250, 114, 121, 199, 248, 228, 215, 151, 248, 183, 65, 181, 241, 118, 145, 125, 166, 222, 174, 251, 43, 232, 30, 218, 225, 84, 224, 180, 110, 10, 183, 232, 107, 110, 99, 218, 173, 73, 202, 23, 95, 18, 213, 122, 255, 0, 95, 129, 245, 55, 192, 109, 33, 174, 52, 104, 219, 98, 182, 225, 203, 30, 128, 215, 178, 232, 255, 0, 5, 127, 183, 237, 215, 247, 10, 222, 97, 198, 10, 215, 133, 127, 193, 61, 60, 99, 255, 0, 9, 111, 194, 253, 50, 214, 242, 72, 223, 84, 210, 204, 154, 110, 161, 143, 227, 184, 183, 145, 161, 145, 190, 140, 83, 120, 255, 0, 101, 129, 239, 95, 120, 252, 43, 211, 173, 227, 187, 181, 89, 188, 177, 31, 27, 139, 122, 10, 229, 173, 23, 208, 240, 243, 44, 124, 169, 251, 240, 237, 115, 192, 53, 239, 216, 154, 107, 219, 111, 182, 64, 178, 68, 192, 150, 76, 169, 85, 39, 211, 252, 250, 215, 97, 240, 107, 199, 90, 175, 195, 157, 67, 77, 209, 60, 101, 246, 171, 205, 46, 206, 224, 77, 165, 234, 240, 99, 251, 67, 195, 215, 24, 40, 46, 32, 145, 149, 182, 144, 164, 130, 10, 178, 186, 22, 73, 21, 227, 102, 140, 253, 249, 111, 166, 248, 95, 196, 126, 18, 147, 78, 141, 109, 24, 180, 103, 114, 16, 3, 7, 3, 175, 231, 131, 94, 23, 227, 47, 131, 26, 125, 235, 220, 68, 222, 78, 229, 99, 243, 113, 131, 219, 7, 235, 143, 204, 245, 174, 26, 180, 101, 109, 207, 143, 163, 159, 211, 204, 99, 44, 46, 54, 158, 158, 123, 250, 167, 208, 199, 253, 141, 255, 0, 224, 181, 63, 5, 191, 105, 121, 223, 65, 159, 198, 182, 58, 79, 137, 173, 117, 9, 116, 200, 227, 214, 98, 93, 30, 109, 77, 163, 96, 161, 150, 218, 89, 11, 197, 35, 54, 228, 48, 55, 239, 21, 163, 96, 85, 120, 3, 236, 123, 123, 200, 238, 83, 114, 50, 183, 244, 239, 205, 126, 57, 126, 221, 191, 240, 72, 207, 8, 252, 104, 180, 189, 214, 180, 37, 182, 240, 191, 143, 46, 161, 49, 165, 234, 15, 244, 93, 81, 149, 72, 141, 110, 163, 229, 100, 24, 194, 238, 101, 220, 0, 33, 74, 231, 112, 249, 247, 254, 9, 143, 255, 0, 5, 151, 241, 143, 252, 19, 187, 227, 60, 31, 11, 254, 50, 79, 172, 175, 129, 237, 111, 83, 77, 190, 181, 212, 36, 107, 135, 240, 242, 29, 161, 47, 44, 229, 98, 88, 217, 168, 145, 36, 120, 50, 118, 35, 101, 6, 113, 230, 253, 38, 93, 130, 163, 143, 162, 214, 26, 118, 171, 21, 119, 9, 91, 222, 75, 126, 71, 213, 245, 229, 118, 125, 174, 126, 83, 159, 97, 49, 153, 77, 85, 82, 186, 83, 161, 39, 101, 56, 222, 241, 190, 220, 241, 123, 122, 166, 215, 228, 127, 66, 153, 205, 27, 176, 106, 143, 135, 124, 65, 97, 226, 173, 6, 207, 84, 210, 239, 172, 245, 45, 51, 82, 130, 59, 171, 75, 203, 73, 150, 107, 123, 168, 93, 67, 36, 145, 186, 146, 174, 140, 164, 48, 96, 72, 32, 130, 56, 174, 55, 227, 198, 189, 171, 120, 77, 60, 59, 169, 105, 178, 73, 246, 88, 53, 72, 210, 254, 20, 31, 235, 33, 108, 147, 147, 255, 0, 1, 219, 255, 0, 3, 246, 175, 62, 149, 55, 82, 106, 11, 118, 85, 56, 243, 59, 30, 129, 69, 69, 107, 117, 29, 212, 123, 163, 145, 36, 94, 155, 149, 131, 10, 150, 179, 36, 40, 162, 138, 0, 40, 162, 138, 0, 40, 162, 138, 0, 70, 1, 186, 215, 202, 223, 240, 86, 27, 143, 16, 120, 23, 224, 215, 129, 254, 32, 248, 70, 210, 61, 67, 196, 255, 0, 14, 60, 121, 164, 223, 233, 246, 179, 220, 188, 54, 210, 181, 241, 147, 70, 111, 56, 161, 200, 136, 38, 166, 204, 228, 2, 118, 43, 142, 1, 98, 62, 168, 149, 75, 47, 21, 249, 247, 255, 0, 5, 102, 248, 213, 226, 239, 133, 30, 7, 179, 209, 53, 63, 21, 105, 122, 141, 253, 229, 149, 211, 37, 142, 157, 167, 157, 38, 214, 230, 230, 111, 221, 218, 52, 158, 100, 183, 18, 20, 138, 24, 239, 228, 144, 137, 2, 175, 151, 27, 236, 44, 170, 14, 248, 106, 149, 97, 85, 74, 130, 230, 158, 201, 90, 247, 114, 210, 223, 59, 247, 71, 102, 7, 145, 86, 83, 169, 37, 24, 171, 185, 55, 178, 138, 87, 147, 251, 174, 126, 57, 222, 91, 205, 227, 223, 142, 58, 195, 89, 50, 220, 50, 221, 205, 51, 207, 59, 249, 112, 195, 4, 109, 134, 154, 87, 231, 100, 106, 49, 147, 207, 80, 0, 44, 85, 78, 253, 191, 136, 255, 0, 225, 102, 106, 19, 105, 122, 61, 196, 241, 248, 117, 72, 75, 173, 64, 47, 149, 115, 174, 17, 158, 23, 156, 195, 108, 50, 118, 160, 36, 156, 146, 88, 150, 118, 111, 25, 241, 175, 197, 11, 75, 184, 230, 240, 191, 133, 229, 107, 141, 21, 231, 89, 53, 93, 79, 110, 201, 124, 71, 112, 185, 195, 17, 156, 165, 170, 18, 194, 56, 179, 131, 146, 237, 185, 152, 177, 235, 254, 27, 248, 175, 91, 187, 213, 45, 252, 43, 224, 205, 62, 61, 95, 197, 215, 193, 64, 18, 156, 90, 105, 40, 64, 62, 117, 195, 113, 209, 72, 97, 30, 65, 193, 4, 144, 10, 135, 253, 63, 41, 203, 48, 249, 30, 21, 215, 175, 37, 237, 45, 172, 187, 127, 118, 61, 223, 119, 250, 30, 62, 59, 52, 198, 113, 78, 46, 56, 76, 58, 107, 13, 23, 238, 199, 103, 39, 252, 210, 253, 23, 69, 231, 169, 235, 126, 33, 248, 145, 225, 223, 129, 246, 186, 126, 154, 214, 247, 23, 154, 181, 240, 9, 165, 232, 122, 93, 191, 157, 125, 123, 206, 0, 142, 49, 128, 169, 158, 55, 185, 84, 200, 35, 37, 190, 83, 238, 223, 179, 159, 252, 19, 227, 199, 95, 181, 9, 143, 84, 248, 195, 173, 205, 224, 95, 6, 204, 187, 215, 193, 154, 5, 214, 46, 174, 227, 36, 0, 183, 215, 120, 12, 217, 201, 13, 26, 133, 66, 163, 230, 143, 35, 53, 173, 251, 24, 126, 199, 158, 31, 248, 7, 115, 115, 226, 13, 82, 111, 248, 74, 60, 113, 169, 47, 153, 125, 175, 94, 130, 101, 121, 78, 6, 200, 128, 226, 52, 1, 112, 0, 3, 11, 180, 96, 40, 8, 62, 169, 240, 239, 136, 78, 158, 219, 188, 215, 82, 238, 28, 238, 27, 179, 143, 148, 96, 96, 250, 119, 237, 215, 210, 190, 27, 56, 226, 44, 70, 42, 78, 20, 253, 216, 126, 47, 213, 159, 171, 100, 220, 17, 134, 192, 211, 83, 172, 148, 170, 118, 233, 31, 151, 86, 188, 254, 227, 218, 63, 103, 239, 131, 190, 3, 253, 155, 254, 30, 197, 225, 223, 2, 120, 119, 71, 240, 206, 155, 10, 109, 49, 219, 70, 170, 215, 36, 15, 148, 200, 227, 230, 115, 245, 63, 78, 43, 213, 60, 3, 241, 42, 29, 35, 80, 251, 47, 222, 86, 125, 178, 49, 232, 164, 231, 255, 0, 177, 31, 141, 124, 243, 164, 252, 66, 104, 237, 218, 25, 62, 101, 132, 169, 86, 216, 15, 60, 145, 159, 98, 127, 14, 181, 234, 95, 179, 229, 254, 131, 226, 39, 212, 155, 92, 188, 183, 243, 32, 129, 152, 153, 36, 218, 129, 6, 119, 190, 73, 232, 6, 50, 79, 29, 207, 173, 124, 199, 53, 157, 186, 154, 102, 184, 20, 168, 78, 165, 84, 218, 235, 109, 253, 127, 173, 142, 247, 227, 7, 197, 107, 120, 180, 149, 183, 179, 147, 204, 105, 152, 100, 30, 252, 55, 7, 35, 233, 223, 53, 224, 94, 34, 190, 254, 209, 183, 117, 76, 52, 140, 51, 26, 170, 149, 60, 147, 220, 96, 28, 140, 126, 57, 237, 81, 248, 225, 53, 15, 20, 223, 94, 92, 120, 95, 236, 16, 232, 94, 97, 242, 117, 221, 85, 159, 236, 147, 174, 79, 207, 12, 106, 68, 151, 107, 130, 165, 74, 180, 113, 56, 251, 179, 229, 77, 124, 115, 255, 0, 5, 0, 248, 157, 225, 191, 134, 62, 30, 121, 60, 83, 227, 45, 86, 250, 222, 226, 51, 246, 107, 27, 187, 175, 179, 219, 94, 1, 212, 71, 97, 110, 20, 93, 40, 110, 65, 153, 103, 40, 112, 90, 78, 51, 94, 182, 91, 145, 226, 243, 10, 150, 135, 186, 187, 187, 254, 11, 169, 224, 212, 226, 44, 167, 35, 161, 100, 221, 73, 111, 101, 110, 189, 222, 223, 131, 102, 95, 237, 227, 241, 135, 194, 62, 8, 241, 102, 135, 174, 104, 186, 220, 58, 135, 142, 188, 59, 51, 104, 250, 142, 151, 165, 149, 184, 184, 187, 211, 37, 158, 57, 36, 134, 70, 255, 0, 85, 13, 197, 188, 241, 65, 125, 0, 184, 100, 95, 58, 215, 99, 124, 146, 200, 167, 230, 255, 0, 140, 95, 240, 81, 91, 173, 99, 116, 76, 190, 29, 240, 164, 141, 16, 18, 153, 100, 147, 84, 186, 124, 246, 142, 4, 218, 177, 183, 166, 230, 145, 15, 241, 16, 57, 175, 149, 62, 49, 126, 209, 250, 183, 139, 231, 146, 223, 69, 134, 77, 23, 75, 198, 200, 119, 0, 38, 41, 219, 8, 185, 84, 30, 195, 56, 245, 171, 255, 0, 177, 199, 236, 163, 15, 199, 207, 17, 92, 107, 30, 40, 154, 234, 63, 15, 233, 234, 147, 155, 118, 14, 147, 235, 187, 193, 104, 254, 99, 130, 45, 92, 44, 164, 72, 132, 153, 60, 137, 85, 74, 237, 46, 63, 65, 255, 0, 86, 242, 188, 163, 13, 245, 140, 123, 115, 125, 22, 215, 125, 146, 95, 231, 234, 124, 150, 31, 141, 184, 143, 136, 51, 5, 128, 200, 173, 71, 158, 215, 107, 91, 47, 230, 114, 107, 162, 236, 147, 118, 209, 54, 123, 71, 132, 254, 33, 55, 197, 213, 183, 215, 172, 116, 253, 74, 207, 66, 177, 130, 107, 116, 213, 53, 11, 233, 164, 189, 241, 85, 195, 16, 175, 59, 64, 31, 236, 150, 214, 241, 5, 42, 137, 111, 16, 37, 139, 230, 89, 2, 229, 211, 84, 190, 242, 214, 70, 254, 21, 82, 121, 60, 244, 255, 0, 235, 87, 99, 241, 14, 246, 29, 57, 18, 11, 120, 227, 134, 222, 221, 4, 81, 69, 18, 133, 142, 20, 94, 21, 85, 64, 194, 168, 80, 0, 3, 128, 48, 0, 0, 87, 151, 120, 147, 92, 88, 224, 148, 19, 247, 134, 6, 123, 230, 190, 11, 21, 136, 246, 245, 157, 69, 21, 20, 246, 75, 100, 186, 35, 250, 63, 37, 202, 86, 85, 130, 142, 22, 85, 101, 86, 74, 238, 83, 147, 109, 202, 79, 119, 171, 118, 87, 217, 45, 18, 178, 61, 51, 246, 67, 241, 36, 190, 9, 253, 160, 117, 235, 88, 38, 101, 183, 215, 180, 237, 63, 196, 145, 69, 159, 149, 94, 69, 123, 73, 177, 248, 217, 35, 31, 121, 107, 244, 159, 225, 151, 140, 164, 212, 173, 33, 96, 202, 60, 176, 24, 142, 73, 39, 25, 192, 226, 191, 43, 252, 23, 35, 120, 127, 246, 145, 248, 113, 34, 225, 87, 80, 240, 117, 228, 14, 115, 247, 188, 187, 184, 138, 254, 69, 219, 254, 250, 53, 250, 9, 240, 151, 197, 27, 108, 99, 220, 219, 182, 168, 227, 158, 71, 167, 31, 90, 229, 156, 110, 142, 92, 77, 31, 105, 74, 94, 82, 127, 143, 189, 250, 159, 87, 120, 91, 95, 146, 225, 237, 228, 82, 171, 35, 182, 210, 23, 145, 211, 177, 29, 243, 143, 207, 214, 189, 187, 76, 248, 84, 222, 34, 209, 82, 233, 166, 104, 228, 145, 119, 42, 73, 158, 184, 199, 61, 240, 125, 127, 159, 127, 147, 124, 3, 226, 127, 50, 242, 18, 178, 5, 86, 219, 185, 9, 92, 130, 50, 115, 143, 65, 140, 255, 0, 245, 205, 125, 157, 240, 215, 197, 16, 127, 194, 188, 134, 226, 75, 136, 201, 134, 50, 210, 13, 220, 175, 124, 115, 245, 30, 254, 181, 201, 20, 147, 212, 252, 219, 136, 163, 91, 14, 163, 42, 61, 89, 226, 191, 17, 60, 12, 179, 141, 66, 198, 233, 74, 205, 25, 108, 2, 2, 128, 189, 191, 62, 58, 87, 227, 207, 252, 20, 223, 246, 72, 181, 248, 171, 172, 120, 247, 69, 179, 91, 123, 95, 22, 104, 111, 167, 120, 159, 74, 189, 124, 40, 153, 230, 55, 186, 116, 182, 210, 183, 95, 45, 227, 211, 45, 215, 60, 237, 33, 95, 156, 96, 254, 158, 107, 95, 181, 69, 159, 137, 254, 62, 120, 195, 195, 191, 103, 251, 58, 232, 250, 148, 58, 71, 246, 132, 151, 144, 226, 227, 83, 154, 193, 117, 47, 178, 8, 65, 243, 16, 125, 146, 69, 100, 145, 134, 36, 104, 110, 144, 96, 194, 60, 207, 145, 126, 41, 105, 241, 252, 83, 248, 139, 241, 59, 83, 143, 100, 145, 217, 88, 216, 105, 129, 129, 221, 243, 165, 246, 179, 114, 163, 208, 230, 218, 250, 206, 64, 123, 172, 138, 123, 212, 71, 218, 97, 234, 170, 177, 118, 106, 205, 126, 140, 245, 112, 116, 232, 227, 168, 172, 53, 123, 74, 50, 110, 50, 94, 124, 173, 53, 229, 103, 103, 247, 31, 77, 127, 193, 185, 223, 18, 60, 93, 241, 231, 254, 9, 211, 225, 93, 91, 196, 158, 56, 214, 47, 207, 132, 222, 111, 6, 38, 131, 253, 159, 105, 107, 14, 144, 154, 123, 249, 113, 36, 143, 229, 25, 228, 156, 64, 97, 86, 45, 32, 80, 20, 13, 155, 131, 59, 126, 128, 157, 46, 25, 161, 11, 42, 121, 203, 193, 196, 132, 176, 200, 239, 205, 126, 126, 127, 193, 1, 53, 237, 55, 194, 254, 0, 248, 147, 224, 219, 114, 209, 93, 93, 120, 135, 254, 18, 191, 45, 136, 3, 117, 197, 180, 22, 247, 11, 26, 129, 209, 101, 182, 89, 88, 146, 78, 251, 195, 219, 21, 250, 24, 14, 107, 186, 190, 33, 214, 155, 171, 100, 175, 209, 43, 91, 238, 63, 53, 197, 224, 103, 130, 170, 240, 149, 29, 220, 52, 191, 116, 182, 127, 52, 71, 111, 107, 29, 164, 65, 34, 141, 35, 69, 232, 170, 48, 7, 225, 82, 81, 69, 98, 114, 133, 20, 81, 64, 5, 20, 81, 64, 5, 20, 80, 78, 40, 1, 147, 182, 216, 207, 110, 15, 62, 149, 252, 200, 127, 193, 99, 127, 110, 57, 191, 104, 207, 218, 171, 199, 171, 225, 253, 106, 242, 251, 67, 214, 47, 252, 171, 105, 90, 71, 242, 237, 244, 200, 226, 130, 24, 225, 129, 91, 6, 37, 184, 251, 58, 92, 72, 48, 164, 151, 64, 195, 42, 115, 251, 11, 255, 0, 7, 0, 126, 220, 109, 251, 34, 126, 198, 163, 74, 210, 111, 154, 219, 197, 62, 62, 186, 254, 207, 180, 17, 77, 36, 51, 165, 172, 64, 73, 112, 232, 200, 58, 18, 98, 137, 148, 178, 229, 39, 144, 130, 74, 226, 191, 155, 157, 102, 246, 227, 204, 251, 76, 202, 110, 245, 109, 78, 98, 200, 174, 113, 231, 74, 217, 37, 152, 246, 81, 203, 18, 58, 5, 62, 152, 175, 190, 224, 252, 190, 16, 132, 243, 42, 218, 37, 116, 159, 110, 239, 215, 162, 249, 159, 33, 159, 99, 37, 95, 19, 12, 178, 150, 183, 105, 201, 46, 183, 126, 236, 127, 87, 242, 55, 252, 37, 36, 246, 233, 13, 142, 159, 26, 203, 171, 222, 97, 97, 1, 67, 125, 153, 73, 192, 144, 142, 153, 224, 133, 7, 130, 65, 36, 16, 172, 43, 239, 79, 217, 7, 225, 14, 155, 240, 63, 194, 9, 28, 74, 147, 106, 183, 195, 205, 190, 186, 46, 93, 229, 114, 119, 16, 88, 242, 220, 156, 146, 73, 44, 73, 99, 201, 175, 149, 191, 101, 207, 135, 163, 76, 184, 26, 165, 195, 52, 247, 76, 228, 137, 93, 112, 93, 250, 23, 3, 183, 0, 0, 58, 0, 0, 237, 154, 250, 223, 193, 58, 211, 69, 4, 105, 242, 182, 222, 8, 36, 255, 0, 42, 240, 115, 204, 210, 88, 234, 215, 218, 11, 101, 229, 223, 213, 255, 0, 192, 63, 163, 248, 23, 134, 225, 149, 225, 84, 230, 175, 82, 75, 87, 219, 201, 31, 72, 120, 71, 196, 59, 237, 185, 37, 60, 182, 94, 1, 218, 174, 75, 12, 103, 156, 100, 99, 63, 135, 106, 239, 60, 55, 124, 247, 62, 91, 67, 39, 202, 169, 198, 244, 41, 180, 28, 14, 7, 60, 16, 15, 35, 56, 61, 235, 192, 252, 51, 226, 209, 105, 101, 36, 211, 205, 21, 188, 48, 70, 207, 36, 174, 226, 49, 10, 99, 150, 44, 72, 0, 0, 9, 36, 240, 49, 159, 122, 233, 109, 126, 43, 199, 173, 218, 52, 205, 115, 38, 147, 164, 91, 169, 146, 91, 146, 254, 69, 197, 202, 0, 55, 16, 205, 131, 111, 24, 192, 204, 167, 108, 167, 44, 87, 201, 33, 100, 111, 39, 15, 128, 175, 138, 159, 179, 161, 27, 191, 193, 122, 158, 230, 123, 154, 96, 242, 186, 95, 88, 198, 78, 215, 217, 110, 223, 146, 95, 155, 217, 119, 61, 161, 188, 118, 211, 235, 19, 88, 218, 193, 253, 165, 168, 90, 34, 193, 42, 25, 4, 112, 90, 228, 100, 125, 166, 96, 10, 199, 128, 192, 236, 85, 121, 74, 184, 101, 137, 151, 44, 40, 120, 239, 227, 231, 129, 255, 0, 103, 253, 11, 251, 123, 226, 6, 183, 165, 220, 51, 63, 155, 111, 21, 212, 68, 89, 137, 20, 229, 69, 189, 158, 93, 238, 36, 4, 46, 29, 247, 149, 101, 12, 158, 78, 72, 175, 131, 127, 104, 31, 248, 43, 45, 150, 138, 91, 194, 191, 9, 236, 236, 245, 43, 139, 114, 209, 157, 77, 161, 255, 0, 137, 117, 155, 18, 75, 24, 99, 255, 0, 150, 204, 88, 146, 93, 248, 36, 147, 130, 78, 227, 243, 94, 189, 175, 92, 106, 183, 147, 120, 195, 226, 39, 136, 110, 47, 175, 174, 27, 105, 185, 191, 148, 200, 238, 221, 68, 113, 168, 201, 60, 116, 142, 48, 73, 199, 2, 191, 68, 202, 56, 34, 141, 40, 251, 124, 91, 245, 111, 244, 232, 151, 155, 212, 254, 120, 226, 143, 17, 49, 184, 215, 245, 124, 34, 229, 139, 209, 70, 58, 223, 213, 238, 223, 146, 178, 245, 62, 220, 253, 161, 255, 0, 224, 175, 30, 49, 248, 197, 37, 197, 191, 130, 173, 230, 240, 254, 154, 228, 131, 172, 106, 72, 147, 106, 18, 142, 237, 20, 92, 197, 14, 125, 91, 204, 110, 120, 42, 107, 225, 207, 139, 222, 55, 142, 247, 196, 254, 101, 253, 214, 165, 226, 63, 21, 107, 142, 118, 35, 51, 223, 234, 154, 155, 255, 0, 178, 57, 145, 241, 235, 194, 168, 234, 84, 87, 163, 252, 33, 253, 155, 254, 34, 126, 210, 240, 199, 121, 12, 50, 124, 55, 240, 76, 131, 43, 170, 234, 86, 225, 245, 59, 228, 245, 183, 182, 63, 36, 106, 113, 254, 178, 82, 195, 7, 59, 65, 24, 175, 173, 62, 13, 126, 206, 223, 15, 127, 101, 187, 25, 164, 240, 174, 143, 12, 154, 197, 204, 64, 94, 235, 90, 147, 253, 179, 84, 212, 8, 227, 50, 76, 249, 108, 16, 72, 216, 155, 80, 99, 129, 90, 99, 120, 179, 3, 129, 78, 134, 89, 5, 41, 127, 55, 79, 191, 119, 248, 47, 51, 175, 135, 124, 38, 205, 243, 103, 28, 78, 109, 47, 99, 79, 179, 248, 218, 242, 91, 71, 231, 247, 31, 34, 252, 0, 255, 0, 130, 100, 248, 139, 226, 110, 161, 111, 174, 252, 76, 255, 0, 138, 119, 67, 12, 37, 143, 195, 232, 194, 75, 155, 149, 237, 246, 150, 31, 40, 7, 188, 99, 43, 212, 49, 113, 95, 64, 124, 94, 210, 180, 255, 0, 135, 255, 0, 17, 52, 8, 116, 120, 254, 207, 109, 117, 166, 73, 103, 239, 44, 182, 140, 46, 99, 221, 142, 201, 98, 250, 206, 7, 172, 131, 24, 175, 78, 215, 188, 123, 246, 99, 43, 200, 222, 99, 54, 65, 44, 192, 54, 78, 115, 142, 248, 228, 251, 254, 149, 225, 31, 180, 47, 137, 18, 233, 124, 63, 117, 189, 99, 150, 29, 97, 99, 136, 129, 200, 251, 85, 189, 197, 147, 123, 114, 183, 76, 49, 254, 71, 231, 184, 236, 109, 124, 93, 79, 109, 137, 151, 51, 252, 189, 59, 31, 208, 121, 127, 14, 101, 249, 38, 94, 232, 229, 244, 249, 82, 179, 111, 118, 218, 119, 187, 125, 93, 147, 251, 244, 56, 47, 138, 126, 35, 219, 127, 42, 238, 11, 234, 51, 210, 188, 215, 81, 213, 190, 213, 58, 70, 127, 229, 164, 128, 226, 174, 120, 239, 197, 75, 170, 106, 83, 72, 174, 74, 51, 110, 229, 186, 250, 85, 239, 217, 231, 225, 220, 223, 23, 190, 48, 104, 218, 84, 32, 178, 220, 93, 47, 153, 143, 224, 140, 29, 206, 127, 239, 144, 107, 24, 196, 244, 43, 98, 28, 231, 203, 30, 166, 247, 196, 47, 17, 67, 224, 255, 0, 218, 215, 225, 238, 150, 210, 41, 155, 73, 240, 108, 83, 202, 7, 222, 141, 238, 238, 100, 59, 79, 208, 91, 169, 250, 48, 175, 183, 62, 15, 248, 172, 92, 105, 136, 55, 121, 89, 193, 4, 141, 223, 78, 245, 249, 97, 241, 19, 227, 53, 191, 196, 175, 219, 191, 199, 30, 38, 179, 147, 204, 210, 215, 83, 26, 102, 154, 202, 219, 149, 173, 109, 21, 109, 145, 151, 253, 150, 104, 221, 199, 253, 116, 175, 185, 254, 6, 124, 70, 223, 165, 219, 50, 200, 120, 25, 24, 252, 41, 250, 24, 229, 181, 22, 38, 149, 70, 191, 153, 219, 210, 246, 95, 130, 71, 217, 94, 31, 212, 230, 180, 117, 153, 73, 93, 168, 70, 208, 190, 249, 237, 252, 253, 171, 212, 52, 95, 141, 218, 165, 214, 143, 21, 136, 50, 8, 85, 240, 65, 115, 185, 139, 119, 235, 219, 0, 245, 192, 244, 239, 95, 59, 252, 56, 248, 131, 13, 210, 160, 102, 17, 157, 163, 112, 99, 157, 188, 143, 231, 128, 113, 252, 235, 211, 52, 253, 118, 214, 13, 54, 109, 66, 123, 171, 8, 109, 96, 141, 165, 150, 105, 37, 17, 199, 108, 138, 9, 44, 196, 240, 20, 12, 147, 219, 173, 115, 212, 134, 135, 37, 108, 36, 28, 173, 82, 55, 177, 249, 157, 241, 219, 227, 198, 167, 240, 67, 254, 10, 189, 241, 185, 111, 110, 47, 87, 70, 241, 93, 238, 156, 154, 135, 217, 228, 34, 107, 125, 150, 22, 55, 22, 87, 176, 144, 56, 184, 182, 109, 172, 142, 1, 32, 25, 20, 114, 217, 175, 176, 126, 2, 218, 73, 167, 124, 56, 241, 20, 122, 132, 214, 55, 26, 182, 175, 118, 111, 217, 237, 17, 146, 218, 91, 31, 38, 59, 77, 53, 161, 12, 204, 76, 105, 167, 218, 90, 193, 146, 204, 124, 203, 121, 70, 91, 1, 219, 225, 175, 219, 242, 107, 111, 23, 126, 223, 186, 247, 137, 44, 173, 231, 143, 73, 241, 101, 180, 45, 105, 36, 168, 201, 190, 226, 198, 56, 236, 110, 162, 249, 128, 249, 227, 242, 237, 203, 168, 201, 141, 166, 49, 190, 217, 82, 88, 227, 251, 127, 254, 9, 209, 225, 27, 143, 142, 191, 5, 181, 223, 1, 218, 179, 73, 227, 79, 5, 233, 237, 172, 120, 101, 11, 133, 146, 246, 220, 227, 206, 176, 201, 35, 247, 114, 97, 80, 2, 118, 171, 155, 119, 32, 136, 128, 175, 177, 204, 114, 152, 226, 242, 42, 88, 234, 59, 211, 86, 126, 137, 219, 240, 252, 143, 195, 114, 188, 250, 57, 55, 21, 98, 48, 181, 255, 0, 135, 82, 79, 229, 125, 84, 151, 202, 222, 168, 236, 127, 224, 153, 158, 52, 127, 135, 31, 183, 95, 135, 237, 237, 229, 88, 97, 215, 228, 155, 77, 191, 38, 50, 249, 183, 150, 218, 119, 8, 49, 208, 181, 220, 54, 95, 55, 64, 20, 131, 215, 35, 245, 237, 78, 84, 87, 225, 111, 236, 201, 241, 10, 203, 71, 253, 170, 244, 45, 90, 75, 139, 88, 180, 216, 165, 210, 111, 165, 158, 229, 252, 136, 161, 129, 53, 205, 54, 71, 149, 137, 35, 104, 88, 183, 183, 205, 192, 199, 60, 100, 31, 219, 111, 9, 120, 239, 79, 241, 126, 163, 171, 90, 217, 253, 163, 206, 208, 238, 141, 157, 208, 146, 6, 140, 44, 131, 251, 164, 140, 48, 35, 156, 140, 142, 107, 226, 40, 198, 78, 23, 236, 125, 39, 29, 97, 212, 51, 46, 120, 237, 40, 167, 249, 163, 114, 138, 40, 171, 62, 44, 40, 162, 138, 0, 40, 162, 138, 0, 40, 39, 2, 138, 71, 229, 77, 0, 126, 11, 127, 193, 195, 250, 149, 223, 196, 223, 219, 238, 246, 218, 246, 107, 196, 209, 252, 21, 162, 218, 88, 65, 4, 215, 5, 173, 227, 119, 136, 93, 75, 50, 38, 74, 166, 229, 154, 48, 72, 1, 143, 148, 51, 208, 99, 243, 51, 195, 177, 47, 137, 181, 249, 53, 69, 93, 176, 205, 251, 171, 32, 122, 172, 25, 31, 55, 214, 66, 1, 255, 0, 116, 39, 76, 154, 253, 40, 255, 0, 131, 144, 173, 174, 52, 127, 218, 255, 0, 92, 210, 100, 143, 108, 158, 54, 181, 178, 186, 133, 227, 99, 184, 216, 199, 107, 12, 51, 18, 123, 31, 50, 38, 78, 58, 111, 66, 120, 38, 191, 60, 52, 8, 188, 139, 248, 112, 170, 171, 212, 5, 28, 1, 232, 43, 238, 51, 60, 202, 17, 203, 240, 249, 126, 29, 253, 152, 202, 118, 238, 213, 210, 251, 245, 127, 35, 159, 128, 50, 25, 84, 204, 113, 25, 182, 37, 109, 57, 70, 23, 242, 118, 111, 228, 172, 151, 204, 250, 35, 225, 54, 140, 182, 154, 93, 186, 175, 42, 160, 12, 10, 244, 38, 241, 37, 191, 133, 236, 254, 209, 113, 35, 42, 179, 8, 226, 141, 6, 233, 38, 144, 242, 17, 20, 125, 230, 32, 19, 143, 64, 196, 224, 41, 35, 207, 60, 15, 226, 139, 31, 11, 248, 93, 181, 29, 65, 158, 59, 91, 117, 1, 130, 168, 103, 145, 137, 194, 170, 14, 236, 199, 10, 7, 169, 236, 50, 107, 136, 241, 255, 0, 237, 19, 111, 224, 226, 117, 205, 81, 18, 109, 82, 85, 104, 244, 221, 50, 23, 200, 129, 14, 62, 85, 62, 248, 93, 242, 224, 22, 32, 0, 0, 10, 171, 230, 100, 217, 29, 108, 194, 173, 151, 187, 8, 252, 82, 253, 23, 155, 63, 102, 226, 110, 50, 194, 228, 56, 36, 254, 42, 210, 94, 236, 127, 246, 233, 118, 75, 241, 217, 108, 218, 247, 63, 31, 252, 102, 211, 190, 29, 120, 69, 117, 175, 22, 94, 71, 97, 103, 110, 193, 173, 236, 34, 33, 203, 74, 62, 101, 27, 71, 250, 249, 178, 1, 7, 238, 33, 3, 110, 54, 153, 27, 228, 239, 138, 191, 180, 103, 139, 255, 0, 106, 139, 243, 166, 164, 147, 232, 62, 17, 243, 6, 205, 58, 23, 62, 101, 222, 15, 13, 59, 143, 188, 125, 20, 124, 163, 176, 39, 36, 249, 239, 141, 188, 109, 169, 252, 74, 215, 63, 183, 60, 81, 121, 230, 109, 249, 32, 128, 103, 202, 181, 82, 120, 72, 212, 100, 146, 120, 24, 0, 179, 28, 117, 53, 244, 119, 236, 213, 251, 7, 234, 223, 18, 180, 219, 125, 99, 198, 209, 221, 104, 62, 27, 149, 67, 197, 163, 3, 182, 243, 80, 66, 63, 229, 190, 62, 226, 48, 255, 0, 150, 96, 224, 140, 231, 112, 32, 15, 209, 42, 226, 50, 236, 142, 130, 77, 107, 210, 43, 118, 251, 190, 222, 175, 229, 126, 159, 136, 229, 89, 94, 117, 197, 216, 233, 87, 155, 114, 239, 39, 164, 98, 187, 121, 46, 209, 95, 240, 78, 27, 224, 199, 195, 171, 175, 20, 222, 54, 149, 224, 77, 42, 45, 102, 234, 223, 229, 186, 212, 230, 5, 116, 173, 56, 243, 157, 210, 47, 250, 214, 28, 252, 145, 158, 199, 44, 8, 42, 126, 179, 248, 25, 251, 27, 248, 119, 225, 78, 181, 31, 136, 124, 75, 36, 158, 56, 241, 100, 120, 255, 0, 79, 212, 32, 70, 183, 177, 207, 240, 218, 193, 130, 145, 168, 235, 156, 100, 145, 187, 0, 146, 107, 208, 180, 187, 45, 31, 192, 94, 29, 135, 73, 210, 108, 45, 116, 253, 62, 212, 4, 142, 24, 0, 84, 92, 96, 2, 64, 234, 120, 235, 212, 254, 21, 67, 83, 241, 89, 50, 15, 43, 230, 85, 193, 228, 15, 148, 215, 231, 25, 215, 16, 227, 51, 57, 90, 171, 180, 58, 69, 108, 191, 205, 249, 179, 250, 27, 134, 56, 7, 44, 201, 34, 170, 66, 42, 165, 110, 179, 107, 111, 240, 174, 139, 241, 238, 206, 190, 247, 198, 115, 202, 231, 230, 145, 87, 111, 32, 29, 189, 177, 215, 183, 167, 124, 10, 228, 188, 83, 227, 133, 181, 73, 49, 49, 141, 159, 134, 195, 100, 115, 255, 0, 234, 29, 253, 107, 152, 215, 60, 90, 233, 4, 153, 108, 122, 229, 126, 92, 122, 112, 43, 206, 252, 105, 227, 136, 236, 97, 118, 243, 100, 92, 130, 74, 147, 156, 231, 61, 254, 149, 225, 168, 165, 177, 246, 82, 169, 109, 89, 210, 248, 187, 226, 138, 192, 100, 115, 36, 137, 242, 149, 59, 155, 149, 254, 184, 250, 87, 135, 124, 75, 248, 160, 186, 239, 136, 60, 59, 29, 196, 255, 0, 232, 241, 120, 130, 194, 103, 219, 200, 85, 142, 225, 37, 111, 94, 209, 147, 210, 177, 124, 117, 241, 43, 237, 211, 72, 137, 36, 105, 201, 5, 148, 245, 227, 143, 106, 243, 63, 20, 106, 23, 26, 151, 137, 52, 59, 117, 220, 197, 154, 226, 230, 76, 2, 91, 104, 129, 225, 83, 255, 0, 127, 38, 83, 91, 123, 55, 107, 179, 230, 179, 124, 209, 74, 140, 169, 83, 214, 250, 125, 250, 29, 75, 92, 189, 223, 150, 191, 54, 245, 85, 13, 215, 158, 59, 215, 181, 167, 137, 87, 246, 49, 253, 143, 60, 73, 227, 251, 137, 69, 175, 140, 60, 105, 110, 218, 7, 132, 225, 63, 235, 86, 73, 148, 239, 185, 3, 210, 52, 13, 38, 125, 17, 127, 190, 51, 31, 194, 223, 131, 222, 23, 248, 69, 240, 178, 227, 226, 127, 197, 139, 232, 244, 127, 11, 233, 120, 149, 45, 220, 226, 109, 78, 65, 202, 91, 198, 189, 89, 152, 246, 28, 227, 35, 142, 72, 252, 254, 253, 177, 127, 110, 255, 0, 18, 126, 214, 127, 24, 219, 196, 23, 41, 30, 159, 163, 233, 145, 189, 166, 135, 164, 253, 232, 116, 203, 114, 65, 56, 3, 0, 200, 251, 84, 179, 119, 194, 175, 221, 85, 2, 167, 82, 48, 216, 241, 51, 172, 222, 150, 93, 71, 223, 127, 188, 154, 209, 45, 210, 123, 201, 246, 242, 243, 58, 95, 132, 201, 14, 141, 115, 10, 175, 200, 177, 128, 171, 147, 216, 112, 43, 235, 95, 133, 191, 26, 161, 240, 181, 173, 179, 92, 95, 90, 217, 68, 255, 0, 46, 251, 153, 132, 81, 255, 0, 223, 76, 64, 175, 133, 188, 1, 227, 191, 4, 222, 52, 41, 226, 13, 107, 226, 37, 196, 210, 99, 253, 31, 72, 211, 45, 97, 64, 123, 168, 97, 62, 246, 250, 240, 125, 171, 217, 188, 1, 241, 235, 224, 63, 134, 117, 200, 214, 31, 5, 248, 223, 196, 26, 149, 177, 200, 134, 241, 64, 154, 98, 63, 132, 145, 56, 144, 253, 55, 19, 142, 213, 156, 101, 19, 159, 32, 226, 10, 20, 162, 189, 248, 70, 62, 114, 215, 238, 73, 175, 196, 253, 7, 240, 207, 237, 53, 224, 253, 22, 205, 174, 46, 124, 123, 225, 56, 118, 171, 179, 4, 189, 19, 112, 163, 36, 124, 185, 235, 199, 183, 92, 144, 57, 173, 159, 12, 252, 99, 186, 253, 163, 46, 218, 214, 207, 196, 118, 54, 90, 5, 177, 1, 69, 150, 166, 139, 123, 113, 180, 228, 152, 54, 176, 59, 178, 6, 46, 122, 71, 201, 183, 5, 252, 187, 193, 241, 255, 0, 135, 191, 224, 161, 31, 13, 99, 241, 52, 63, 218, 191, 6, 109, 180, 101, 211, 114, 246, 218, 109, 207, 135, 230, 157, 33, 118, 219, 251, 249, 183, 23, 103, 144, 42, 133, 143, 118, 225, 31, 239, 29, 74, 52, 204, 169, 233, 190, 31, 253, 187, 126, 8, 124, 101, 158, 61, 62, 199, 67, 208, 244, 221, 96, 28, 1, 107, 20, 246, 172, 236, 127, 216, 153, 20, 3, 156, 125, 211, 138, 211, 247, 82, 91, 254, 103, 211, 81, 205, 176, 120, 218, 137, 123, 88, 37, 119, 101, 116, 155, 245, 187, 95, 114, 93, 117, 182, 168, 236, 127, 110, 75, 93, 54, 203, 192, 222, 9, 189, 182, 179, 183, 211, 108, 190, 30, 234, 208, 64, 32, 134, 49, 28, 118, 122, 116, 160, 65, 50, 5, 24, 219, 26, 2, 146, 17, 220, 194, 181, 233, 223, 7, 254, 55, 205, 251, 24, 254, 213, 127, 13, 252, 97, 28, 237, 22, 157, 111, 120, 150, 250, 151, 63, 43, 217, 76, 86, 57, 193, 29, 240, 140, 88, 123, 160, 175, 39, 241, 246, 165, 161, 252, 65, 248, 103, 171, 232, 178, 75, 39, 217, 245, 43, 71, 132, 199, 42, 238, 4, 21, 233, 199, 63, 254, 186, 242, 243, 241, 101, 190, 39, 252, 33, 240, 175, 246, 149, 199, 218, 53, 13, 62, 3, 167, 234, 14, 223, 121, 231, 128, 249, 18, 191, 209, 153, 11, 15, 102, 21, 247, 124, 15, 138, 141, 74, 85, 242, 218, 159, 12, 181, 94, 143, 221, 127, 163, 63, 22, 241, 203, 35, 246, 56, 204, 54, 105, 65, 91, 153, 114, 191, 88, 235, 23, 247, 105, 242, 62, 224, 253, 170, 254, 20, 203, 224, 175, 248, 40, 103, 196, 255, 0, 13, 232, 241, 172, 144, 235, 80, 155, 189, 33, 55, 172, 75, 49, 212, 238, 236, 164, 138, 53, 36, 133, 85, 23, 87, 15, 2, 244, 81, 229, 14, 70, 43, 247, 29, 32, 84, 145, 153, 85, 67, 57, 203, 16, 57, 111, 173, 126, 60, 124, 29, 178, 185, 253, 161, 63, 106, 63, 217, 235, 90, 138, 118, 185, 215, 60, 89, 165, 120, 122, 39, 148, 176, 204, 118, 250, 61, 240, 214, 175, 93, 178, 15, 5, 162, 242, 179, 140, 147, 42, 128, 65, 32, 143, 216, 96, 72, 132, 5, 219, 187, 28, 2, 113, 95, 157, 86, 195, 203, 15, 86, 116, 101, 246, 91, 95, 137, 207, 152, 102, 159, 94, 195, 225, 106, 222, 239, 217, 164, 253, 83, 107, 244, 36, 162, 171, 233, 203, 112, 176, 159, 181, 73, 12, 146, 100, 159, 221, 33, 85, 3, 176, 228, 156, 253, 120, 250, 85, 138, 204, 242, 130, 138, 40, 160, 2, 138, 40, 160, 2, 145, 254, 237, 45, 35, 114, 180, 1, 249, 87, 255, 0, 7, 34, 252, 50, 179, 241, 14, 143, 225, 223, 18, 53, 191, 250, 103, 135, 116, 107, 213, 137, 247, 103, 38, 226, 88, 1, 227, 182, 209, 110, 58, 117, 200, 244, 175, 197, 43, 22, 196, 214, 141, 184, 0, 208, 198, 217, 200, 24, 4, 102, 191, 119, 255, 0, 224, 224, 203, 86, 155, 225, 76, 61, 25, 102, 210, 167, 77, 185, 254, 235, 231, 255, 0, 102, 21, 248, 77, 101, 161, 91, 203, 167, 199, 113, 168, 79, 246, 93, 11, 72, 210, 224, 188, 213, 46, 49, 187, 229, 42, 2, 91, 168, 254, 39, 144, 149, 27]).concat([115, 200, 100, 4, 109, 147, 112, 238, 202, 48, 181, 113, 120, 191, 171, 82, 221, 253, 201, 117, 111, 201, 45, 79, 208, 158, 46, 134, 93, 144, 82, 199, 85, 209, 69, 61, 58, 201, 185, 89, 37, 230, 222, 129, 241, 7, 226, 212, 122, 55, 135, 161, 191, 152, 159, 177, 219, 146, 154, 117, 176, 59, 77, 212, 165, 72, 50, 30, 224, 237, 61, 79, 220, 70, 236, 210, 21, 62, 103, 224, 139, 29, 91, 226, 183, 141, 35, 101, 142, 109, 83, 90, 212, 36, 219, 12, 41, 216, 14, 112, 185, 225, 17, 64, 36, 147, 128, 160, 18, 79, 83, 92, 239, 142, 60, 77, 170, 124, 95, 241, 244, 95, 103, 179, 154, 73, 174, 164, 91, 77, 51, 79, 135, 50, 52, 97, 155, 228, 137, 127, 188, 204, 199, 37, 142, 55, 51, 18, 113, 219, 239, 207, 217, 107, 246, 102, 177, 253, 158, 60, 15, 24, 184, 242, 46, 252, 77, 169, 34, 182, 169, 118, 6, 228, 81, 212, 193, 17, 60, 249, 72, 118, 243, 193, 145, 134, 226, 0, 10, 169, 250, 118, 101, 154, 80, 201, 240, 209, 195, 97, 85, 222, 188, 171, 207, 172, 229, 250, 47, 145, 249, 159, 15, 240, 254, 55, 139, 179, 41, 98, 241, 114, 180, 19, 188, 229, 217, 116, 132, 126, 90, 121, 45, 95, 75, 209, 253, 152, 191, 100, 173, 31, 225, 246, 179, 109, 175, 120, 144, 219, 234, 222, 34, 136, 9, 45, 99, 145, 127, 209, 108, 63, 218, 141, 24, 114, 220, 227, 123, 12, 247, 194, 252, 170, 191, 68, 235, 158, 38, 125, 30, 206, 57, 174, 143, 147, 12, 159, 47, 156, 121, 141, 219, 251, 161, 189, 125, 171, 142, 191, 240, 245, 135, 139, 224, 54, 247, 208, 199, 36, 125, 22, 84, 38, 41, 33, 61, 50, 142, 164, 50, 159, 161, 174, 63, 85, 248, 39, 227, 31, 12, 188, 146, 120, 71, 226, 30, 169, 103, 230, 2, 173, 105, 171, 170, 223, 219, 76, 63, 186, 79, 203, 35, 15, 93, 196, 215, 229, 248, 138, 245, 113, 21, 93, 106, 207, 154, 79, 118, 127, 80, 101, 244, 112, 185, 110, 18, 56, 76, 13, 37, 24, 71, 162, 221, 249, 190, 239, 187, 110, 231, 75, 226, 175, 136, 235, 27, 179, 121, 155, 189, 112, 223, 165, 113, 122, 143, 197, 157, 141, 243, 72, 167, 111, 92, 87, 25, 226, 255, 0, 135, 255, 0, 16, 238, 55, 127, 105, 120, 71, 193, 186, 147, 99, 6, 231, 66, 191, 187, 208, 201, 199, 115, 29, 188, 155, 9, 239, 243, 33, 175, 57, 241, 55, 135, 124, 81, 167, 199, 205, 143, 138, 116, 179, 212, 150, 213, 108, 245, 8, 177, 244, 146, 218, 39, 238, 58, 190, 125, 234, 18, 48, 173, 155, 56, 237, 77, 253, 204, 244, 175, 22, 252, 107, 219, 11, 5, 144, 3, 211, 167, 53, 227, 254, 46, 248, 153, 54, 161, 35, 128, 253, 248, 53, 196, 248, 171, 196, 55, 150, 44, 235, 125, 226, 43, 123, 124, 117, 18, 89, 91, 228, 125, 118, 220, 17, 92, 79, 136, 254, 33, 233, 250, 13, 140, 151, 151, 183, 218, 206, 169, 10, 28, 109, 134, 21, 180, 141, 143, 166, 246, 198, 126, 136, 206, 125, 171, 120, 242, 71, 86, 124, 198, 101, 159, 73, 175, 123, 221, 94, 109, 126, 74, 236, 245, 77, 4, 127, 108, 106, 65, 99, 73, 174, 174, 115, 187, 98, 142, 7, 185, 236, 7, 185, 174, 111, 195, 159, 181, 79, 130, 190, 27, 120, 191, 86, 241, 54, 163, 99, 113, 226, 237, 74, 204, 13, 59, 195, 218, 77, 180, 187, 45, 230, 218, 73, 146, 226, 89, 118, 159, 148, 190, 66, 132, 12, 88, 32, 200, 80, 84, 215, 141, 235, 95, 29, 60, 83, 241, 75, 70, 155, 69, 209, 173, 224, 240, 207, 134, 166, 30, 84, 233, 109, 151, 154, 228, 119, 87, 148, 252, 206, 79, 66, 171, 180, 16, 112, 192, 215, 175, 254, 202, 159, 176, 150, 175, 241, 35, 81, 183, 146, 226, 214, 230, 199, 73, 147, 111, 153, 44, 199, 247, 215, 3, 183, 225, 250, 15, 74, 206, 165, 87, 47, 135, 99, 193, 163, 141, 197, 99, 106, 70, 56, 8, 232, 181, 230, 107, 175, 70, 151, 150, 247, 125, 125, 15, 63, 248, 159, 241, 7, 198, 127, 182, 167, 196, 91, 93, 75, 198, 26, 165, 236, 169, 106, 54, 88, 233, 122, 117, 131, 139, 45, 50, 34, 114, 82, 40, 220, 146, 51, 252, 76, 67, 179, 96, 100, 176, 2, 190, 150, 253, 156, 127, 99, 9, 124, 90, 214, 177, 104, 254, 32, 209, 244, 91, 236, 131, 12, 122, 191, 134, 34, 130, 71, 111, 246, 64, 88, 89, 249, 238, 13, 125, 185, 251, 60, 254, 199, 30, 18, 248, 91, 161, 67, 29, 182, 135, 98, 243, 43, 46, 249, 166, 143, 113, 39, 25, 57, 231, 63, 67, 210, 190, 167, 248, 99, 240, 226, 198, 222, 56, 82, 223, 77, 178, 88, 155, 0, 129, 26, 237, 192, 228, 246, 239, 143, 124, 3, 219, 165, 99, 203, 119, 115, 233, 176, 60, 61, 75, 8, 222, 35, 22, 249, 166, 247, 119, 146, 127, 122, 107, 242, 62, 25, 181, 253, 134, 126, 43, 223, 232, 173, 111, 171, 120, 119, 225, 239, 196, 59, 117, 80, 162, 19, 97, 246, 111, 49, 113, 255, 0, 77, 90, 227, 159, 162, 231, 62, 167, 138, 236, 62, 20, 254, 199, 31, 179, 174, 163, 175, 233, 158, 27, 241, 84, 122, 207, 192, 239, 21, 27, 132, 72, 116, 175, 28, 232, 209, 220, 120, 87, 88, 147, 140, 194, 183, 72, 82, 72, 26, 79, 149, 16, 121, 235, 128, 119, 125, 157, 176, 69, 126, 145, 120, 119, 192, 205, 99, 167, 36, 113, 71, 229, 249, 124, 143, 40, 227, 104, 250, 30, 132, 103, 168, 254, 181, 235, 158, 25, 183, 240, 196, 223, 179, 254, 165, 23, 143, 124, 51, 167, 248, 143, 195, 211, 92, 61, 164, 240, 106, 22, 113, 94, 71, 54, 245, 193, 141, 145, 193, 13, 144, 113, 211, 24, 56, 231, 140, 184, 207, 148, 227, 205, 115, 72, 194, 9, 209, 139, 114, 186, 73, 232, 229, 175, 156, 147, 191, 163, 118, 125, 81, 249, 157, 251, 119, 255, 0, 193, 27, 62, 29, 254, 205, 250, 21, 175, 139, 52, 136, 252, 77, 224, 255, 0, 9, 221, 127, 174, 189, 208, 102, 139, 196, 26, 14, 153, 39, 253, 52, 179, 184, 82, 60, 182, 249, 135, 156, 184, 110, 15, 200, 15, 79, 152, 62, 32, 254, 200, 43, 163, 248, 15, 254, 18, 45, 91, 65, 240, 143, 139, 60, 22, 171, 186, 63, 23, 248, 118, 216, 93, 232, 240, 31, 75, 219, 89, 55, 73, 99, 129, 252, 71, 228, 24, 36, 249, 107, 205, 125, 205, 227, 95, 8, 248, 135, 246, 82, 241, 125, 246, 165, 240, 43, 92, 212, 215, 225, 157, 201, 101, 190, 248, 107, 175, 78, 215, 250, 41, 137, 242, 175, 29, 178, 202, 72, 134, 50, 164, 129, 25, 202, 128, 48, 187, 73, 221, 95, 24, 107, 150, 122, 183, 193, 111, 136, 23, 30, 34, 248, 87, 173, 94, 120, 66, 234, 232, 25, 63, 179, 225, 144, 36, 45, 27, 127, 172, 180, 150, 55, 204, 50, 109, 60, 109, 153, 90, 25, 48, 3, 168, 36, 200, 55, 149, 106, 117, 31, 189, 27, 122, 127, 150, 223, 145, 239, 101, 52, 113, 19, 195, 115, 114, 174, 117, 174, 218, 75, 214, 59, 39, 107, 93, 173, 247, 73, 108, 112, 22, 31, 12, 103, 240, 115, 145, 109, 36, 177, 219, 169, 42, 246, 178, 150, 116, 31, 245, 205, 152, 150, 76, 127, 119, 37, 112, 0, 10, 156, 154, 249, 207, 197, 122, 196, 159, 14, 254, 45, 120, 167, 73, 39, 101, 188, 211, 71, 127, 18, 103, 229, 93, 224, 198, 216, 252, 97, 4, 251, 182, 123, 215, 215, 30, 15, 253, 165, 124, 55, 241, 175, 87, 125, 54, 227, 64, 177, 240, 127, 139, 161, 222, 151, 26, 93, 140, 109, 111, 99, 125, 229, 0, 93, 237, 96, 127, 154, 222, 68, 66, 165, 237, 79, 221, 82, 26, 50, 233, 187, 203, 249, 11, 246, 197, 123, 59, 143, 143, 159, 105, 211, 230, 18, 69, 53, 163, 171, 50, 228, 100, 6, 143, 29, 121, 235, 230, 117, 247, 175, 83, 134, 235, 56, 102, 112, 246, 111, 123, 175, 193, 159, 45, 226, 99, 195, 98, 56, 127, 218, 194, 214, 132, 211, 244, 123, 53, 229, 185, 251, 77, 255, 0, 6, 239, 223, 73, 241, 43, 197, 62, 13, 214, 154, 197, 46, 163, 240, 175, 128, 53, 189, 49, 239, 155, 37, 172, 228, 186, 215, 96, 100, 140, 28, 99, 247, 145, 218, 30, 224, 226, 14, 51, 206, 63, 78, 124, 95, 241, 159, 254, 16, 239, 141, 62, 18, 240, 140, 250, 93, 203, 67, 226, 232, 238, 141, 190, 162, 173, 251, 152, 37, 183, 77, 230, 55, 29, 139, 41, 27, 78, 78, 78, 70, 56, 175, 207, 191, 248, 53, 163, 192, 83, 104, 255, 0, 177, 13, 255, 0, 136, 167, 132, 15, 237, 219, 198, 134, 222, 82, 159, 51, 199, 13, 221, 234, 156, 55, 247, 119, 49, 224, 30, 163, 145, 210, 191, 77, 174, 180, 123, 93, 70, 226, 222, 123, 139, 120, 102, 154, 213, 183, 194, 238, 128, 180, 76, 122, 149, 61, 70, 125, 186, 214, 57, 212, 233, 255, 0, 105, 86, 114, 87, 87, 127, 123, 91, 252, 158, 167, 226, 217, 44, 163, 245, 88, 185, 106, 181, 183, 222, 237, 247, 18, 89, 218, 181, 177, 151, 116, 210, 77, 230, 57, 113, 187, 31, 32, 254, 232, 192, 232, 63, 58, 154, 138, 43, 195, 61, 0, 162, 138, 40, 0, 162, 138, 40, 0, 164, 127, 186, 105, 105, 27, 238, 208, 7, 230, 231, 252, 28, 13, 227, 77, 39, 69, 248, 100, 32, 154, 226, 222, 77, 74, 207, 70, 146, 67, 103, 230, 129, 36, 159, 104, 184, 72, 45, 129, 29, 85, 100, 153, 93, 67, 17, 129, 181, 143, 69, 53, 252, 253, 124, 82, 214, 94, 235, 76, 135, 195, 182, 211, 52, 154, 94, 142, 254, 109, 229, 199, 221, 251, 125, 224, 82, 165, 207, 95, 150, 48, 74, 168, 201, 11, 150, 193, 198, 49, 251, 7, 255, 0, 7, 66, 159, 176, 252, 127, 248, 79, 36, 63, 185, 146, 235, 64, 190, 243, 217, 62, 86, 155, 201, 105, 76, 91, 136, 251, 219, 12, 178, 149, 207, 221, 50, 190, 49, 184, 231, 241, 147, 198, 209, 170, 252, 52, 80, 21, 70, 244, 136, 54, 7, 222, 203, 174, 115, 245, 201, 207, 214, 191, 70, 224, 172, 29, 58, 120, 106, 216, 223, 180, 219, 95, 40, 164, 237, 243, 111, 95, 68, 124, 255, 0, 22, 102, 245, 177, 15, 11, 149, 61, 41, 193, 95, 214, 83, 156, 149, 223, 162, 86, 95, 62, 231, 171, 254, 194, 223, 14, 237, 116, 189, 99, 254, 18, 203, 200, 247, 94, 92, 41, 143, 77, 86, 235, 109, 11, 112, 210, 255, 0, 189, 32, 56, 30, 137, 223, 231, 96, 62, 192, 183, 190, 81, 6, 112, 173, 156, 0, 125, 63, 253, 89, 53, 243, 127, 194, 51, 229, 76, 138, 191, 42, 172, 132, 0, 56, 192, 205, 123, 166, 158, 236, 209, 156, 146, 126, 90, 248, 220, 94, 42, 166, 38, 171, 175, 83, 121, 126, 30, 71, 244, 159, 13, 229, 212, 114, 252, 4, 112, 116, 22, 145, 235, 213, 190, 173, 249, 179, 127, 78, 188, 205, 194, 238, 96, 219, 135, 32, 227, 31, 253, 106, 191, 168, 223, 121, 144, 0, 206, 216, 246, 57, 254, 95, 74, 231, 236, 216, 137, 127, 17, 255, 0, 160, 154, 118, 176, 229, 109, 95, 4, 142, 181, 132, 143, 111, 153, 156, 183, 196, 87, 179, 188, 146, 66, 200, 171, 181, 114, 88, 190, 197, 252, 243, 234, 15, 62, 245, 243, 215, 196, 173, 111, 193, 118, 119, 109, 111, 168, 106, 154, 108, 215, 13, 210, 214, 6, 146, 254, 234, 79, 164, 81, 238, 61, 190, 149, 235, 31, 20, 237, 34, 187, 176, 133, 102, 138, 57, 85, 219, 12, 174, 161, 131, 115, 223, 53, 197, 252, 77, 209, 237, 60, 41, 225, 75, 129, 165, 218, 219, 233, 161, 161, 44, 69, 172, 66, 28, 156, 117, 249, 64, 230, 145, 229, 227, 166, 210, 180, 82, 191, 154, 191, 249, 30, 7, 227, 111, 17, 88, 248, 87, 70, 154, 243, 74, 240, 140, 58, 85, 184, 4, 165, 255, 0, 136, 81, 109, 196, 132, 127, 207, 59, 88, 247, 75, 33, 244, 7, 111, 108, 215, 135, 217, 248, 99, 94, 248, 249, 227, 49, 61, 196, 215, 151, 214, 234, 219, 20, 152, 214, 32, 79, 247, 35, 141, 126, 88, 199, 78, 153, 198, 61, 120, 29, 23, 137, 238, 164, 213, 165, 212, 39, 186, 146, 75, 169, 149, 88, 137, 37, 98, 236, 14, 15, 115, 205, 125, 43, 251, 22, 232, 246, 130, 59, 15, 244, 91, 126, 34, 136, 143, 221, 14, 50, 6, 123, 86, 118, 187, 212, 248, 90, 120, 127, 237, 44, 116, 112, 213, 100, 212, 116, 118, 86, 183, 220, 173, 253, 117, 58, 127, 217, 67, 246, 19, 142, 218, 75, 61, 67, 92, 181, 87, 142, 17, 152, 237, 192, 249, 83, 208, 99, 252, 254, 181, 247, 79, 194, 143, 133, 82, 89, 65, 23, 151, 110, 145, 70, 184, 80, 35, 80, 66, 140, 247, 29, 121, 200, 170, 95, 15, 109, 98, 77, 58, 219, 108, 113, 174, 118, 231, 10, 57, 228, 87, 185, 248, 90, 53, 79, 35, 10, 163, 108, 110, 70, 7, 78, 41, 244, 63, 89, 167, 134, 165, 129, 165, 236, 232, 70, 194, 120, 107, 193, 115, 219, 93, 198, 176, 170, 179, 63, 202, 224, 199, 157, 190, 156, 247, 199, 231, 218, 189, 255, 0, 225, 71, 129, 22, 224, 196, 141, 110, 115, 27, 3, 185, 155, 1, 122, 231, 57, 198, 122, 227, 61, 242, 61, 43, 136, 240, 100, 17, 190, 171, 54, 232, 212, 236, 137, 74, 229, 126, 233, 193, 233, 95, 66, 252, 20, 64, 45, 32, 24, 24, 42, 51, 199, 251, 85, 133, 106, 142, 59, 31, 41, 158, 99, 170, 40, 59, 29, 175, 133, 126, 23, 92, 107, 80, 15, 220, 136, 85, 9, 249, 246, 245, 192, 24, 228, 99, 181, 121, 239, 199, 235, 29, 67, 194, 54, 49, 232, 243, 73, 51, 105, 170, 204, 222, 72, 98, 99, 141, 242, 14, 118, 244, 36, 156, 99, 211, 218, 190, 162, 240, 132, 41, 22, 152, 187, 81, 87, 231, 99, 192, 197, 124, 233, 251, 88, 162, 181, 197, 211, 21, 93, 194, 78, 14, 57, 31, 126, 177, 187, 62, 19, 37, 198, 206, 182, 59, 217, 203, 100, 124, 117, 227, 191, 19, 165, 136, 184, 183, 146, 225, 35, 112, 65, 1, 208, 228, 0, 216, 193, 193, 57, 195, 16, 57, 235, 215, 160, 175, 149, 126, 41, 88, 67, 253, 167, 116, 99, 86, 101, 118, 249, 203, 125, 230, 25, 231, 183, 249, 252, 107, 232, 207, 141, 35, 26, 140, 17, 255, 0, 6, 233, 14, 222, 220, 71, 199, 30, 213, 243, 255, 0, 137, 216, 205, 114, 219, 201, 111, 221, 1, 207, 53, 213, 31, 132, 253, 167, 47, 92, 177, 186, 234, 143, 132, 255, 0, 105, 239, 6, 235, 19, 106, 169, 121, 160, 93, 73, 101, 227, 15, 14, 75, 30, 165, 165, 92, 70, 50, 215, 194, 18, 204, 144, 48, 231, 115, 128, 88, 70, 127, 219, 116, 63, 44, 135, 28, 159, 140, 236, 181, 127, 218, 183, 227, 183, 131, 219, 193, 90, 61, 198, 177, 169, 252, 68, 210, 109, 27, 77, 211, 44, 163, 45, 36, 183, 77, 61, 194, 77, 8, 227, 25, 71, 82, 24, 244, 1, 73, 56, 28, 215, 181, 124, 114, 253, 223, 196, 27, 54, 95, 148, 170, 174, 8, 237, 243, 87, 213, 31, 240, 104, 103, 135, 52, 253, 87, 254, 10, 7, 251, 74, 93, 93, 88, 89, 220, 220, 248, 110, 208, 69, 164, 75, 44, 10, 242, 105, 105, 38, 163, 115, 230, 44, 12, 70, 98, 87, 254, 32, 152, 13, 223, 53, 182, 91, 140, 150, 27, 20, 171, 69, 106, 147, 252, 153, 249, 87, 137, 120, 88, 188, 52, 233, 69, 217, 86, 113, 191, 172, 100, 172, 253, 90, 109, 62, 250, 62, 135, 237, 63, 252, 19, 179, 246, 77, 95, 216, 115, 246, 49, 240, 15, 194, 239, 181, 91, 223, 93, 120, 95, 79, 217, 125, 117, 2, 149, 142, 234, 242, 87, 121, 238, 93, 119, 115, 180, 205, 44, 155, 115, 206, 220, 112, 58, 87, 181, 210, 39, 221, 165, 174, 106, 149, 37, 82, 78, 164, 245, 111, 87, 243, 63, 52, 167, 74, 52, 224, 169, 195, 101, 162, 10, 40, 162, 160, 208, 255, 217]), true, true);

  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      var evalled = eval('(function(' + args.join(',') + '){ ' + source + ' })'); // new Function does not allow upvars in node
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(29467);
/* global initializers */ __ATINIT__.push();


/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,72,68,0,0,22,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,115,115,101,116,115,47,116,101,115,116,79,117,116,46,106,112,103,0,0,0,0,0,0,97,115,115,101,116,115,47,116,101,115,116,46,112,110,103,0,67,111,117,108,100,110,39,116,32,108,111,97,100,32,97,115,115,101,116,115,47,116,101,115,116,79,117,116,46,106,112,103,0,0,0,0,0,0,0,0,67,111,117,108,100,110,39,116,32,108,111,97,100,32,97,115,115,101,116,115,47,116,101,115,116,46,112,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,71,75,32,91,69,82,82,79,82,93,58,32,73,110,105,116,68,114,97,119,84,111,73,109,97,103,101,66,117,102,102,101,114,32,71,76,95,70,82,65,77,69,66,85,70,70,69,82,95,85,78,83,85,80,80,79,82,84,69,68,95,69,88,84,0,0,0,0,0,0,0,0,71,75,32,91,73,78,70,79,93,58,32,70,66,79,32,105,110,105,116,105,97,108,105,122,97,116,105,111,110,32,102,97,105,108,101,100,0,0,0,0,71,75,32,91,69,82,82,79,82,93,58,32,73,110,105,116,68,114,97,119,84,111,73,109,97,103,101,66,117,102,102,101,114,32,71,76,95,70,82,65,77,69,66,85,70,70,69,82,95,73,78,67,79,77,80,76,69,84,69,95,77,73,83,83,73,78,71,95,65,84,84,65,67,72,77,69,78,84,95,69,88,84,0,0,0,0,0,0,71,75,32,91,69,82,82,79,82,93,58,32,73,110,105,116,68,114,97,119,84,111,73,109,97,103,101,66,117,102,102,101,114,32,71,76,95,70,82,65,77,69,66,85,70,70,69,82,95,73,78,67,79,77,80,76,69,84,69,95,65,84,84,65,67,72,77,69,78,84,95,69,88,84,0,0,0,0,0,0,71,75,32,91,73,78,70,79,93,58,32,85,115,105,110,103,32,70,66,79,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,104,3,0,0,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,0,136,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,0,254,152,126,63,199,18,214,61,232,103,122,63,226,230,84,62,121,120,115,63,122,55,158,62,22,222,105,63,213,63,208,62,208,179,93,63,0,0,0,63,189,27,79,63,20,121,22,63,192,62,62,63,43,76,43,63,43,76,43,63,192,62,62,63,20,121,22,63,189,27,79,63,0,0,0,63,208,179,93,63,213,63,208,62,22,222,105,63,122,55,158,62,121,120,115,63,226,230,84,62,232,103,122,63,199,18,214,61,254,152,126,63,0,0,0,128,0,0,128,63,77,19,214,189,254,152,126,63,226,230,84,190,232,103,122,63,122,55,158,190,104,120,115,63,213,63,208,190,22,222,105,63,0,0,0,191,208,179,93,63,20,121,22,191,189,27,79,63,43,76,43,191,192,62,62,63,192,62,62,191,43,76,43,63,189,27,79,191,37,121,22,63,208,179,93,191,0,0,0,63,22,222,105,191,213,63,208,62,104,120,115,191,155,55,158,62,215,103,122,191,37,231,84,62,254,152,126,191,77,19,214,61,0,0,128,191,189,55,134,53,254,152,126,191,64,18,214,189,232,103,122,191,92,230,84,190,121,120,115,191,88,55,158,190,39,222,105,191,146,63,208,190,225,179,93,191,222,255,255,190,206,27,79,191,3,121,22,191,209,62,62,191,10,76,43,191,60,76,43,191,159,62,62,191,53,121,22,191,172,27,79,191,34,0,0,191,192,179,93,191,24,64,208,190,5,222,105,191,189,55,158,190,104,120,115,191,104,231,84,190,215,103,122,191,89,20,214,189,254,152,126,191,156,83,73,182,0,0,128,191,186,17,214,61,254,152,126,191,25,230,84,62,232,103,122,191,21,55,158,62,121,120,115,191,112,63,208,62,55,222,105,191,155,255,255,62,242,179,93,191,226,120,22,63,223,27,79,191,249,75,43,63,226,62,62,191,142,62,62,63,77,76,43,191,155,27,79,63,70,121,22,191,175,179,93,63,50,0,0,191,5,222,105,63,58,64,208,190,87,120,115,63,0,56,158,190,215,103,122,63,239,231,84,190,238,152,126,63,102,21,214,189,0,0,128,63,172,197,167,182,0,0,0,0,0,0,0,0,0,0,128,63,0,0,0,0,0,0,128,63,0,0,128,63,0,0,0,0,0,0,128,63,114,98,0,0,0,0,0,0,49,46,54,46,49,48,0,0,80,78,71,32,87,97,114,110,105,110,103,58,32,37,115,10,0,0,0,0,0,0,0,0,80,78,71,32,69,114,114,111,114,58,32,37,115,10,0,0,112,110,103,95,99,114,101,97,116,101,95,114,101,97,100,95,115,116,114,117,99,116,32,102,97,105,108,101,100,33,0,0,112,110,103,95,99,114,101,97,116,101,95,105,110,102,111,95,115,116,114,117,99,116,32,102,97,105,108,101,100,33,0,0,115,101,116,106,109,112,32,101,110,116,101,114,101,100,33,0,74,70,73,70,0,0,0,0,69,120,105,102,0,0,0,0,137,80,78,71,13,10,26,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,108,102,119,79,112,101,110,87,105,110,100,111,119,40,41,32,102,97,105,108,101,100,0,103,108,102,119,73,110,105,116,40,41,32,102,97,105,108,101,100,0,0,0,0,0,0,0,103,101,116,65,112,112,68,105,114,0,0,0,0,0,0,0,115,101,116,86,83,121,110,99,0,0,0,0,0,0,0,0,114,101,115,105,122,101,83,99,114,101,101,110,0,0,0,0,103,101,116,83,117,112,112,111,114,116,101,100,83,105,122,101,115,0,0,0,0,0,0,0,115,101,116,87,105,110,100,111,119,84,105,116,108,101,0,0,103,101,116,87,105,110,100,111,119,84,105,116,108,101,0,0,115,101,116,87,105,110,100,111,119,82,101,115,105,122,97,98,108,101,0,0,0,0,0,0,103,111,87,105,110,100,111,119,101,100,0,0,0,0,0,0,103,111,70,117,108,108,115,99,114,101,101,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,1,29,90,14,2,134,37,16,3,20,17,18,4,11,8,20,5,216,3,23,6,218,1,25,7,229,0,28,8,111,0,30,9,54,0,33,10,26,0,35,11,13,0,9,12,6,0,10,13,3,0,12,13,1,0,143,15,127,90,36,16,37,63,38,17,242,44,39,18,124,32,40,19,185,23,42,20,130,17,43,21,239,12,45,22,161,9,46,23,47,7,48,24,92,5,49,25,6,4,51,26,3,3,52,27,64,2,54,28,177,1,56,29,68,1,57,30,245,0,59,31,183,0,60,32,138,0,62,33,104,0,63,34,78,0,32,35,59,0,33,9,44,0,165,37,225,90,64,38,76,72,65,39,13,58,67,40,241,46,68,41,31,38,69,42,51,31,70,43,168,25,72,44,24,21,73,45,119,17,74,46,116,14,75,47,251,11,77,48,248,9,78,49,97,8,79,50,6,7,48,51,205,5,50,52,222,4,50,53,15,4,51,54,99,3,52,55,212,2,53,56,92,2,54,57,248,1,55,58,164,1,56,59,96,1,57,60,37,1,58,61,246,0,59,62,203,0,61,63,171,0,61,32,143,0,193,65,18,91,80,66,4,77,81,67,44,65,82,68,216,55,83,69,232,47,84,70,60,41,86,71,121,35,87,72,223,30,87,73,169,26,72,74,78,23,72,75,36,20,74,76,156,17,74,77,107,15,75,78,81,13,77,79,182,11,77,48,64,10,208,81,50,88,88,82,28,77,89,83,142,67,90,84,221,59,91,85,238,52,92,86,174,46,93,87,154,41,86,71,22,37,216,89,112,85,95,90,169,76,96,91,217,68,97,92,34,62,99,93,36,56,99,94,180,50,93,86,23,46,223,96,168,86,101,97,70,79,102,98,229,71,103,99,207,65,104,100,61,60,99,93,94,55,105,102,49,82,106,103,15,76,107,104,57,70,103,99,94,65,233,106,39,86,108,107,231,80,109,103,133,75,110,109,151,85,111,107,79,80,238,111,16,90,112,109,34,85,240,111,235,89,113,113,29,90,255,217,0,0,0,0,0,0,0,64,197,88,159,83,66,75,0,64,73,50,163,34,168,17,197,88,33,123,252,115,98,104,197,88,191,69,11,48,126,24,159,83,252,115,65,109,84,98,159,83,179,65,65,45,18,23,66,75,98,104,84,98,126,88,66,75,33,59,186,40,195,20,0,64,197,88,159,83,66,75,0,64,73,50,163,34,168,17,73,50,191,69,179,65,33,59,73,50,130,39,55,27,224,13,163,34,11,48,65,45,186,40,163,34,55,27,191,18,142,9,168,17,126,24,18,23,195,20,168,17,224,13,142,9,223,4,0,0,0,0,0,0,240,63,239,97,72,177,80,49,246,63,202,111,77,145,174,231,244,63,170,17,108,239,98,208,242,63,0,0,0,0,0,0,240,63,59,191,167,192,105,36,233,63,187,32,199,123,122,81,225,63,93,171,114,222,85,168,209,63,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,2,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,6,0,0,0,2,0,0,0,4,0,0,0,7,0,0,0,12,0,0,0,3,0,0,0,8,0,0,0,11,0,0,0,13,0,0,0,9,0,0,0,10,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,6,0,0,0,14,0,0,0,2,0,0,0,4,0,0,0,7,0,0,0,13,0,0,0,15,0,0,0,3,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,21,0,0,0,9,0,0,0,11,0,0,0,17,0,0,0,20,0,0,0,22,0,0,0,10,0,0,0,18,0,0,0,19,0,0,0,23,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,6,0,0,0,14,0,0,0,15,0,0,0,2,0,0,0,4,0,0,0,7,0,0,0,13,0,0,0,16,0,0,0,25,0,0,0,3,0,0,0,8,0,0,0,12,0,0,0,17,0,0,0,24,0,0,0,26,0,0,0,9,0,0,0,11,0,0,0,18,0,0,0,23,0,0,0,27,0,0,0,32,0,0,0,10,0,0,0,19,0,0,0,22,0,0,0,28,0,0,0,31,0,0,0,33,0,0,0,20,0,0,0,21,0,0,0,29,0,0,0,30,0,0,0,34,0,0,0,35,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,6,0,0,0,14,0,0,0,15,0,0,0,27,0,0,0,2,0,0,0,4,0,0,0,7,0,0,0,13,0,0,0,16,0,0,0,26,0,0,0,28,0,0,0,3,0,0,0,8,0,0,0,12,0,0,0,17,0,0,0,25,0,0,0,29,0,0,0,38,0,0,0,9,0,0,0,11,0,0,0,18,0,0,0,24,0,0,0,30,0,0,0,37,0,0,0,39,0,0,0,10,0,0,0,19,0,0,0,23,0,0,0,31,0,0,0,36,0,0,0,40,0,0,0,45,0,0,0,20,0,0,0,22,0,0,0,32,0,0,0,35,0,0,0,41,0,0,0,44,0,0,0,46,0,0,0,21,0,0,0,33,0,0,0,34,0,0,0,42,0,0,0,43,0,0,0,47,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,6,0,0,0,14,0,0,0,15,0,0,0,27,0,0,0,28,0,0,0,2,0,0,0,4,0,0,0,7,0,0,0,13,0,0,0,16,0,0,0,26,0,0,0,29,0,0,0,42,0,0,0,3,0,0,0,8,0,0,0,12,0,0,0,17,0,0,0,25,0,0,0,30,0,0,0,41,0,0,0,43,0,0,0,9,0,0,0,11,0,0,0,18,0,0,0,24,0,0,0,31,0,0,0,40,0,0,0,44,0,0,0,53,0,0,0,10,0,0,0,19,0,0,0,23,0,0,0,32,0,0,0,39,0,0,0,45,0,0,0,52,0,0,0,54,0,0,0,20,0,0,0,22,0,0,0,33,0,0,0,38,0,0,0,46,0,0,0,51,0,0,0,55,0,0,0,60,0,0,0,21,0,0,0,34,0,0,0,37,0,0,0,47,0,0,0,50,0,0,0,56,0,0,0,59,0,0,0,61,0,0,0,35,0,0,0,36,0,0,0,48,0,0,0,49,0,0,0,57,0,0,0,58,0,0,0,62,0,0,0,63,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,7,0,0,0,15,0,0,0,31,0,0,0,63,0,0,0,127,0,0,0,255,0,0,0,255,1,0,0,255,3,0,0,255,7,0,0,255,15,0,0,255,31,0,0,255,63,0,0,255,127,0,0,76,83,69,0,0,0,0,0,83,79,83,0,0,0,0,0,66,111,103,117,115,32,109,101,115,115,97,103,101,32,99,111,100,101,32,37,100,0,0,0,65,76,73,71,78,95,84,89,80,69,32,105,115,32,119,114,111,110,103,44,32,112,108,101,97,115,101,32,102,105,120,0,77,65,88,95,65,76,76,79,67,95,67,72,85,78,75,32,105,115,32,119,114,111,110,103,44,32,112,108,101,97,115,101,32,102,105,120,0,0,0,0,66,111,103,117,115,32,98,117,102,102,101,114,32,99,111,110,116,114,111,108,32,109,111,100,101,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,99,111,109,112,111,110,101,110,116,32,73,68,32,37,100,32,105,110,32,83,79,83,0,0,73,110,118,97,108,105,100,32,99,114,111,112,32,114,101,113,117,101,115,116,0,0,0,0,68,67,84,32,99,111,101,102,102,105,99,105,101,110,116,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,68,67,84,32,115,99,97,108,101,100,32,98,108,111,99,107,32,115,105,122,101,32,37,100,120,37,100,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,0,67,111,109,112,111,110,101,110,116,32,105,110,100,101,120,32,37,100,58,32,109,105,115,109,97,116,99,104,105,110,103,32,115,97,109,112,108,105,110,103,32,114,97,116,105,111,32,37,100,58,37,100,44,32,37,100,58,37,100,44,32,37,99,0,66,111,103,117,115,32,72,117,102,102,109,97,110,32,116,97,98,108,101,32,100,101,102,105,110,105,116,105,111,110,0,0,66,111,103,117,115,32,105,110,112,117,116,32,99,111,108,111,114,115,112,97,99,101,0,0,66,111,103,117,115,32,74,80,69,71,32,99,111,108,111,114,115,112,97,99,101,0,0,0,66,111,103,117,115,32,109,97,114,107,101,114,32,108,101,110,103,116,104,0,0,0,0,0,87,114,111,110,103,32,74,80,69,71,32,108,105,98,114,97,114,121,32,118,101,114,115,105,111,110,58,32,108,105,98,114,97,114,121,32,105,115,32,37,100,44,32,99,97,108,108,101,114,32,101,120,112,101,99,116,115,32,37,100,0,0,0,0,83,97,109,112,108,105,110,103,32,102,97,99,116,111,114,115,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,105,110,116,101,114,108,101,97,118,101,100,32,115,99,97,110,0,73,110,118,97,108,105,100,32,109,101,109,111,114,121,32,112,111,111,108,32,99,111,100,101,32,37,100,0,0,0,0,0,85,110,115,117,112,112,111,114,116,101,100,32,74,80,69,71,32,100,97,116,97,32,112,114,101,99,105,115,105,111,110,32,37,100,0,0,0,0,0,0,73,110,118,97,108,105,100,32,112,114,111,103,114,101,115,115,105,118,101,32,112,97,114,97,109,101,116,101,114,115,32,83,115,61,37,100,32,83,101,61,37,100,32,65,104,61,37,100,32,65,108,61,37,100,0,0,73,110,118,97,108,105,100,32,112,114,111,103,114,101,115,115,105,118,101,32,112,97,114,97,109,101,116,101,114,115,32,97,116,32,115,99,97,110,32,115,99,114,105,112,116,32,101,110,116,114,121,32,37,100,0,0,66,111,103,117,115,32,115,97,109,112,108,105,110,103,32,102,97,99,116,111,114,115,0,0,73,110,118,97,108,105,100,32,115,99,97,110,32,115,99,114,105,112,116,32,97,116,32,101,110,116,114,121,32,37,100,0,73,109,112,114,111,112,101,114,32,99,97,108,108,32,116,111,32,74,80,69,71,32,108,105,98,114,97,114,121,32,105,110,32,115,116,97,116,101,32,37,100,0,0,0,0,0,0,0,74,80,69,71,32,112,97,114,97,109,101,116,101,114,32,115,116,114,117,99,116,32,109,105,115,109,97,116,99,104,58,32,108,105,98,114,97,114,121,32,116,104,105,110,107,115,32,115,105,122,101,32,105,115,32,37,117,44,32,99,97,108,108,101,114,32,101,120,112,101,99,116,115,32,37,117,0,0,0,0,66,111,103,117,115,32,118,105,114,116,117,97,108,32,97,114,114,97,121,32,97,99,99,101,115,115,0,0,0,0,0,0,66,117,102,102,101,114,32,112,97,115,115,101,100,32,116,111,32,74,80,69,71,32,108,105,98,114,97,114,121,32,105,115,32,116,111,111,32,115,109,97,108,108,0,0,0,0,0,0,83,117,115,112,101,110,115,105,111,110,32,110,111,116,32,97,108,108,111,119,101,100,32,104,101,114,101,0,0,0,0,0,67,67,73,82,54,48,49,32,115,97,109,112,108,105,110,103,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,121,101,116,0,0,0,0,84,111,111,32,109,97,110,121,32,99,111,108,111,114,32,99,111,109,112,111,110,101,110,116,115,58,32,37,100,44,32,109,97,120,32,37,100,0,0,0,85,110,115,117,112,112,111,114,116,101,100,32,99,111,108,111,114,32,99,111,110,118,101,114,115,105,111,110,32,114,101,113,117,101,115,116,0,0,0,0,66,111,103,117,115,32,68,65,67,32,105,110,100,101,120,32,37,100,0,0,0,0,0,0,66,111,103,117,115,32,68,65,67,32,118,97,108,117,101,32,48,120,37,120,0,0,0,0,66,111,103,117,115,32,68,72,84,32,105,110,100,101,120,32,37,100,0,0,0,0,0,0,66,111,103,117,115,32,68,81,84,32,105,110,100,101,120,32,37,100,0,0,0,0,0,0,69,109,112,116,121,32,74,80,69,71,32,105,109,97,103,101,32,40,68,78,76,32,110,111,116,32,115,117,112,112,111,114,116,101,100,41,0,0,0,0,82,101,97,100,32,102,114,111,109,32,69,77,83,32,102,97,105,108,101,100,0,0,0,0,87,114,105,116,101,32,116,111,32,69,77,83,32,102,97,105,108,101,100,0,0,0,0,0,68,105,100,110,39,116,32,101,120,112,101,99,116,32,109,111,114,101,32,116,104,97,110,32,111,110,101,32,115,99,97,110,0,0,0,0,0,0,0,0,73,110,112,117,116,32,102,105,108,101,32,114,101,97,100,32,101,114,114,111,114,0,0,0,79,117,116,112,117,116,32,102,105,108,101,32,119,114,105,116,101,32,101,114,114,111,114,32,45,45,45,32,111,117,116,32,111,102,32,100,105,115,107,32,115,112,97,99,101,63,0,0,70,114,97,99,116,105,111,110,97,108,32,115,97,109,112,108,105,110,103,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,121,101,116,0,72,117,102,102,109,97,110,32,99,111,100,101,32,115,105,122,101,32,116,97,98,108,101,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,0,77,105,115,115,105,110,103,32,72,117,102,102,109,97,110,32,99,111,100,101,32,116,97,98,108,101,32,101,110,116,114,121,0,0,0,0,0,0,0,0,77,97,120,105,109,117,109,32,115,117,112,112,111,114,116,101,100,32,105,109,97,103,101,32,100,105,109,101,110,115,105,111,110,32,105,115,32,37,117,32,112,105,120,101,108,115,0,0,69,109,112,116,121,32,105,110,112,117,116,32,102,105,108,101,0,0,0,0,0,0,0,0,80,114,101,109,97,116,117,114,101,32,101,110,100,32,111,102,32,105,110,112,117,116,32,102,105,108,101,0,0,0,0,0,67,97,110,110,111,116,32,116,114,97,110,115,99,111,100,101,32,100,117,101,32,116,111,32,109,117,108,116,105,112,108,101,32,117,115,101,32,111,102,32,113,117,97,110,116,105,122,97,116,105,111,110,32,116,97,98,108,101,32,37,100,0,0,0,83,99,97,110,32,115,99,114,105,112,116,32,100,111,101,115,32,110,111,116,32,116,114,97,110,115,109,105,116,32,97,108,108,32,100,97,116,97,0,0,73,110,118,97,108,105,100,32,99,111,108,111,114,32,113,117,97,110,116,105,122,97,116,105,111,110,32,109,111,100,101,32,99,104,97,110,103,101,0,0,78,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,121,101,116,0,0,0,0,0,82,101,113,117,101,115,116,101,100,32,102,101,97,116,117,114,101,32,119,97,115,32,111,109,105,116,116,101,100,32,97,116,32,99,111,109,112,105,108,101,32,116,105,109,101,0,0,0,65,114,105,116,104,109,101,116,105,99,32,116,97,98,108,101,32,48,120,37,48,50,120,32,119,97,115,32,110,111,116,32,100,101,102,105,110,101,100,0,66,97,99,107,105,110,103,32,115,116,111,114,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,72,117,102,102,109,97,110,32,116,97,98,108,101,32,48,120,37,48,50,120,32,119,97,115,32,110,111,116,32,100,101,102,105,110,101,100,0,0,0,0,74,80,69,71,32,100,97,116,97,115,116,114,101,97,109,32,99,111,110,116,97,105,110,115,32,110,111,32,105,109,97,103,101,0,0,0,0,0,0,0,81,117,97,110,116,105,122,97,116,105,111,110,32,116,97,98,108,101,32,48,120,37,48,50,120,32,119,97,115,32,110,111,116,32,100,101,102,105,110,101,100,0,0,0,0,0,0,0,78,111,116,32,97,32,74,80,69,71,32,102,105,108,101,58,32,115,116,97,114,116,115,32,119,105,116,104,32,48,120,37,48,50,120,32,48,120,37,48,50,120,0,0,0,0,0,0,73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,40,99,97,115,101,32,37,100,41,0,0,0,67,97,110,110,111,116,32,113,117,97,110,116,105,122,101,32,109,111,114,101,32,116,104,97,110,32,37,100,32,99,111,108,111,114,32,99,111,109,112,111,110,101,110,116,115,0,0,0,67,97,110,110,111,116,32,113,117,97,110,116,105,122,101,32,116,111,32,102,101,119,101,114,32,116,104,97,110,32,37,100,32,99,111,108,111,114,115,0,67,97,110,110,111,116,32,113,117,97,110,116,105,122,101,32,116,111,32,109,111,114,101,32,116,104,97,110,32,37,100,32,99,111,108,111,114,115,0,0,73,110,118,97,108,105,100,32,74,80,69,71,32,102,105,108,101,32,115,116,114,117,99,116,117,114,101,58,32,37,115,32,98,101,102,111,114,101,32,83,79,70,0,0,0,0,0,0,73,110,118,97,108,105,100,32,74,80,69,71,32,102,105,108,101,32,115,116,114,117,99,116,117,114,101,58,32,116,119,111,32,83,79,70,32,109,97,114,107,101,114,115,0,0,0,0,73,110,118,97,108,105,100,32,74,80,69,71,32,102,105,108,101,32,115,116,114,117,99,116,117,114,101,58,32,109,105,115,115,105,110,103,32,83,79,83,32,109,97,114,107,101,114,0,85,110,115,117,112,112,111,114,116,101,100,32,74,80,69,71,32,112,114,111,99,101,115,115,58,32,83,79,70,32,116,121,112,101,32,48,120,37,48,50,120,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,74,80,69,71,32,102,105,108,101,32,115,116,114,117,99,116,117,114,101,58,32,116,119,111,32,83,79,73,32,109,97,114,107,101,114,115,0,0,0,0,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,116,101,109,112,111,114,97,114,121,32,102,105,108,101,32,37,115,0,0,0,0,0,0,82,101,97,100,32,102,97,105,108,101,100,32,111,110,32,116,101,109,112,111,114,97,114,121,32,102,105,108,101,0,0,0,83,101,101,107,32,102,97,105,108,101,100,32,111,110,32,116,101,109,112,111,114,97,114,121,32,102,105,108,101,0,0,0,87,114,105,116,101,32,102,97,105,108,101,100,32,111,110,32,116,101,109,112,111,114,97,114,121,32,102,105,108,101,32,45,45,45,32,111,117,116,32,111,102,32,100,105,115,107,32,115,112,97,99,101,63,0,0,0,65,112,112,108,105,99,97,116,105,111,110,32,116,114,97,110,115,102,101,114,114,101,100,32,116,111,111,32,102,101,119,32,115,99,97,110,108,105,110,101,115,0,0,0,0,0,0,0,85,110,115,117,112,112,111,114,116,101,100,32,109,97,114,107,101,114,32,116,121,112,101,32,48,120,37,48,50,120,0,0,86,105,114,116,117,97,108,32,97,114,114,97,121,32,99,111,110,116,114,111,108,108,101,114,32,109,101,115,115,101,100,32,117,112,0,0,0,0,0,0,73,109,97,103,101,32,116,111,111,32,119,105,100,101,32,102,111,114,32,116,104,105,115,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,0,0,82,101,97,100,32,102,114,111,109,32,88,77,83,32,102,97,105,108,101,100,0,0,0,0,87,114,105,116,101,32,116,111,32,88,77,83,32,102,97,105,108,101,100,0,0,0,0,0,67,111,112,121,114,105,103,104,116,32,40,67,41,32,50,48,49,52,44,32,84,104,111,109,97,115,32,71,46,32,76,97,110,101,44,32,71,117,105,100,111,32,86,111,108,108,98,101,100,105,110,103,0,0,0,0,57,97,32,32,49,57,45,74,97,110,45,50,48,49,52,0,67,97,117,116,105,111,110,58,32,113,117,97,110,116,105,122,97,116,105,111,110,32,116,97,98,108,101,115,32,97,114,101,32,116,111,111,32,99,111,97,114,115,101,32,102,111,114,32,98,97,115,101,108,105,110,101,32,74,80,69,71,0,0,0,65,100,111,98,101,32,65,80,80,49,52,32,109,97,114,107,101,114,58,32,118,101,114,115,105,111,110,32,37,100,44,32,102,108,97,103,115,32,48,120,37,48,52,120,32,48,120,37,48,52,120,44,32,116,114,97,110,115,102,111,114,109,32,37,100,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,65,80,80,48,32,109,97,114,107,101,114,32,40,110,111,116,32,74,70,73,70,41,44,32,108,101,110,103,116,104,32,37,117,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,65,80,80,49,52,32,109,97,114,107,101,114,32,40,110,111,116,32,65,100,111,98,101,41,44,32,108,101,110,103,116,104,32,37,117,0,0,0,0,0,68,101,102,105,110,101,32,65,114,105,116,104,109,101,116,105,99,32,84,97,98,108,101,32,48,120,37,48,50,120,58,32,48,120,37,48,50,120,0,0,68,101,102,105,110,101,32,72,117,102,102,109,97,110,32,84,97,98,108,101,32,48,120,37,48,50,120,0,0,0,0,0,68,101,102,105,110,101,32,81,117,97,110,116,105,122,97,116,105,111,110,32,84,97,98,108,101,32,37,100,32,32,112,114,101,99,105,115,105,111,110,32,37,100,0,0,0,0,0,0,68,101,102,105,110,101,32,82,101,115,116,97,114,116,32,73,110,116,101,114,118,97,108,32,37,117,0,0,0,0,0,0,70,114,101,101,100,32,69,77,83,32,104,97,110,100,108,101,32,37,117,0,0,0,0,0,79,98,116,97,105,110,101,100,32,69,77,83,32,104,97,110,100,108,101,32,37,117,0,0,69,110,100,32,79,102,32,73,109,97,103,101,0,0,0,0,32,32,32,32,32,32,32,32,37,51,100,32,37,51,100,32,37,51,100,32,37,51,100,32,37,51,100,32,37,51,100,32,37,51,100,32,37,51,100,0,74,70,73,70,32,65,80,80,48,32,109,97,114,107,101,114,58,32,118,101,114,115,105,111,110,32,37,100,46,37,48,50,100,44,32,100,101,110,115,105,116,121,32,37,100,120,37,100,32,32,37,100,0,0,0,0,87,97,114,110,105,110,103,58,32,116,104,117,109,98,110,97,105,108,32,105,109,97,103,101,32,115,105,122,101,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,100,97,116,97,32,108,101,110,103,116,104,32,37,117,0,0,0,0,0,74,70,73,70,32,101,120,116,101,110,115,105,111,110,32,109,97,114,107,101,114,58,32,116,121,112,101,32,48,120,37,48,50,120,44,32,108,101,110,103,116,104,32,37,117,0,0,0,32,32,32,32,119,105,116,104,32,37,100,32,120,32,37,100,32,116,104,117,109,98,110,97,105,108,32,105,109,97,103,101,0,0,0,0,0,0,0,0,77,105,115,99,101,108,108,97,110,101,111,117,115,32,109,97,114,107,101,114,32,48,120,37,48,50,120,44,32,108,101,110,103,116,104,32,37,117,0,0,85,110,101,120,112,101,99,116,101,100,32,109,97,114,107,101,114,32,48,120,37,48,50,120,0,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,37,52,117,32,37,52,117,32,37,52,117,32,37,52,117,32,37,52,117,32,37,52,117,32,37,52,117,32,37,52,117,0,81,117,97,110,116,105,122,105,110,103,32,116,111,32,37,100,32,61,32,37,100,42,37,100,42,37,100,32,99,111,108,111,114,115,0,0,0,0,0,0,81,117,97,110,116,105,122,105,110,103,32,116,111,32,37,100,32,99,111,108,111,114,115,0,83,101,108,101,99,116,101,100,32,37,100,32,99,111,108,111,114,115,32,102,111,114,32,113,117,97,110,116,105,122,97,116,105,111,110,0,0,0,0,0,65,116,32,109,97,114,107,101,114,32,48,120,37,48,50,120,44,32,114,101,99,111,118,101,114,121,32,97,99,116,105,111,110,32,37,100,0,0,0,0,82,83,84,37,100,0,0,0,83,109,111,111,116,104,105,110,103,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,119,105,116,104,32,110,111,110,115,116,97,110,100,97,114,100,32,115,97,109,112,108,105,110,103,32,114,97,116,105,111,115,0,0,0,0,0,0,0,0,83,116,97,114,116,32,79,102,32,70,114,97,109,101,32,48,120,37,48,50,120,58,32,119,105,100,116,104,61,37,117,44,32,104,101,105,103,104,116,61,37,117,44,32,99,111,109,112,111,110,101,110,116,115,61,37,100,0,0,0,0,0,0,0,32,32,32,32,67,111,109,112,111,110,101,110,116,32,37,100,58,32,37,100,104,120,37,100,118,32,113,61,37,100,0,0,83,116,97,114,116,32,111,102,32,73,109,97,103,101,0,0,83,116,97,114,116,32,79,102,32,83,99,97,110,58,32,37,100,32,99,111,109,112,111,110,101,110,116,115,0,0,0,0,32,32,32,32,67,111,109,112,111,110,101,110,116,32,37,100,58,32,100,99,61,37,100,32,97,99,61,37,100,0,0,0,32,32,83,115,61,37,100,44,32,83,101,61,37,100,44,32,65,104,61,37,100,44,32,65,108,61,37,100,0,0,0,0,67,108,111,115,101,100,32,116,101,109,112,111,114,97,114,121,32,102,105,108,101,32,37,115,0,0,0,0,0,0,0,0,79,112,101,110,101,100,32,116,101,109,112,111,114,97,114,121,32,102,105,108,101,32,37,115,0,0,0,0,0,0,0,0,74,70,73,70,32,101,120,116,101,110,115,105,111,110,32,109,97,114,107,101,114,58,32,74,80,69,71,45,99,111,109,112,114,101,115,115,101,100,32,116,104,117,109,98,110,97,105,108,32,105,109,97,103,101,44,32,108,101,110,103,116,104,32,37,117,0,0,0,0,0,0,0,74,70,73,70,32,101,120,116,101,110,115,105,111,110,32,109,97,114,107,101,114,58,32,112,97,108,101,116,116,101,32,116,104,117,109,98,110,97,105,108,32,105,109,97,103,101,44,32,108,101,110,103,116,104,32,37,117,0,0,0,0,0,0,0,74,70,73,70,32,101,120,116,101,110,115,105,111,110,32,109,97,114,107,101,114,58,32,82,71,66,32,116,104,117,109,98,110,97,105,108,32,105,109,97,103,101,44,32,108,101,110,103,116,104,32,37,117,0,0,0,85,110,114,101,99,111,103,110,105,122,101,100,32,99,111,109,112,111,110,101,110,116,32,73,68,115,32,37,100,32,37,100,32,37,100,44,32,97,115,115,117,109,105,110,103,32,89,67,98,67,114,0,0,0,0,0,70,114,101,101,100,32,88,77,83,32,104,97,110,100,108,101,32,37,117,0,0,0,0,0,79,98,116,97,105,110,101,100,32,88,77,83,32,104,97,110,100,108,101,32,37,117,0,0,85,110,107,110,111,119,110,32,65,100,111,98,101,32,99,111,108,111,114,32,116,114,97,110,115,102,111,114,109,32,99,111,100,101,32,37,100,0,0,0,67,111,114,114,117,112,116,32,74,80,69,71,32,100,97,116,97,58,32,98,97,100,32,97,114,105,116,104,109,101,116,105,99,32,99,111,100,101,0,0,73,110,99,111,110,115,105,115,116,101,110,116,32,112,114,111,103,114,101,115,115,105,111,110,32,115,101,113,117,101,110,99,101,32,102,111,114,32,99,111,109,112,111,110,101,110,116,32,37,100,32,99,111,101,102,102,105,99,105,101,110,116,32,37,100,0,0,0,0,0,0,0,67,111,114,114,117,112,116,32,74,80,69,71,32,100,97,116,97,58,32,37,117,32,101,120,116,114,97,110,101,111,117,115,32,98,121,116,101,115,32,98,101,102,111,114,101,32,109,97,114,107,101,114,32,48,120,37,48,50,120,0,0,0,0,0,67,111,114,114,117,112,116,32,74,80,69,71,32,100,97,116,97,58,32,112,114,101,109,97,116,117,114,101,32,101,110,100,32,111,102,32,100,97,116,97,32,115,101,103,109,101,110,116,0,0,0,0,0,0,0,0,67,111,114,114,117,112,116,32,74,80,69,71,32,100,97,116,97,58,32,98,97,100,32,72,117,102,102,109,97,110,32,99,111,100,101,0,0,0,0,0,87,97,114,110,105,110,103,58,32,117,110,107,110,111,119,110,32,74,70,73,70,32,114,101,118,105,115,105,111,110,32,110,117,109,98,101,114,32,37,100,46,37,48,50,100,0,0,0,80,114,101,109,97,116,117,114,101,32,101,110,100,32,111,102,32,74,80,69,71,32,102,105,108,101,0,0,0,0,0,0,67,111,114,114,117,112,116,32,74,80,69,71,32,100,97,116,97,58,32,102,111,117,110,100,32,109,97,114,107,101,114,32,48,120,37,48,50,120,32,105,110,115,116,101,97,100,32,111,102,32,82,83,84,37,100,0,73,110,118,97,108,105,100,32,83,79,83,32,112,97,114,97,109,101,116,101,114,115,32,102,111,114,32,115,101,113,117,101,110,116,105,97,108,32,74,80,69,71,0,0,0,0,0,0,65,112,112,108,105,99,97,116,105,111,110,32,116,114,97,110,115,102,101,114,114,101,100,32,116,111,111,32,109,97,110,121,32,115,99,97,110,108,105,110,101,115,0,0,0,0,0,0,248,13,0,0,16,14,0,0,48,14,0,0,88,14,0,0,120,14,0,0,152,14,0,0,176,14,0,0,208,14,0,0,0,15,0,0,64,15,0,0,96,15,0,0,120,15,0,0,144,15,0,0,168,15,0,0,232,15,0,0,24,16,0,0,56,16,0,0,96,16,0,0,152,16,0,0,208,16,0,0,232,16,0,0,8,17,0,0,56,17,0,0,136,17,0,0,168,17,0,0,216,17,0,0,248,17,0,0,32,18,0,0,72,18,0,0,112,18,0,0,136,18,0,0,160,18,0,0,184,18,0,0,208,18,0,0,248,18,0,0,16,19,0,0,40,19,0,0,80,19,0,0,104,19,0,0,152,19,0,0,192,19,0,0,232,19,0,0,16,20,0,0,64,20,0,0,88,20,0,0,120,20,0,0,184,20,0,0,224,20,0,0,8,21,0,0,32,21,0,0,80,21,0,0,120,21,0,0,152,21,0,0,192,21,0,0,232,21,0,0,24,22,0,0,72,22,0,0,104,22,0,0,152,22,0,0,192,22,0,0,232,22,0,0,24,23,0,0,72,23,0,0,120,23,0,0,168,23,0,0,216,23,0,0,0,24,0,0,32,24,0,0,64,24,0,0,120,24,0,0,168,24,0,0,200,24,0,0,240,24,0,0,24,25,0,0,48,25,0,0,72,25,0,0,128,25,0,0,144,25,0,0,208,25,0,0,24,26,0,0,72,26,0,0,120,26,0,0,160,26,0,0,192,26,0,0,240,26,0,0,16,27,0,0,40,27,0,0,64,27,0,0,80,27,0,0,120,27,0,0,176,27,0,0,240,27,0,0,32,28,0,0,72,28,0,0,112,28,0,0,144,28,0,0,184,28,0,0,224,28,0,0,248,28,0,0,32,29,0,0,72,29,0,0,80,29,0,0,144,29,0,0,208,29,0,0,240,29,0,0,0,30,0,0,32,30,0,0,64,30,0,0,96,30,0,0,128,30,0,0,160,30,0,0,232,30,0,0,40,31,0,0,96,31,0,0,152,31,0,0,176,31,0,0,200,31,0,0,240,31,0,0,24,32,0,0,96,32,0,0,160,32,0,0,216,32,0,0,0,33,0,0,48,33,0,0,80,33,0,0,136,33,0,0,184,33,0,0,0,0,0,0,37,115,10,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,192,48,240,12,204,60,252,3,195,51,243,15,207,63,255,128,64,176,112,140,76,188,124,131,67,179,115,143,79,191,127,32,224,16,208,44,236,28,220,35,227,19,211,47,239,31,223,160,96,144,80,172,108,156,92,163,99,147,83,175,111,159,95,8,200,56,248,4,196,52,244,11,203,59,251,7,199,55,247,136,72,184,120,132,68,180,116,139,75,187,123,135,71,183,119,40,232,24,216,36,228,20,212,43,235,27,219,39,231,23,215,168,104,152,88,164,100,148,84,171,107,155,91,167,103,151,87,2,194,50,242,14,206,62,254,1,193,49,241,13,205,61,253,130,66,178,114,142,78,190,126,129,65,177,113,141,77,189,125,34,226,18,210,46,238,30,222,33,225,17,209,45,237,29,221,162,98,146,82,174,110,158,94,161,97,145,81,173,109,157,93,10,202,58,250,6,198,54,246,9,201,57,249,5,197,53,245,138,74,186,122,134,70,182,118,137,73,185,121,133,69,181,117,42,234,26,218,38,230,22,214,41,233,25,217,37,229,21,213,170,106,154,90,166,102,150,86,169,105,153,89,165,101,149,85,0,0,0,0,1,0,0,0,8,0,0,0,16,0,0,0,9,0,0,0,2,0,0,0,3,0,0,0,10,0,0,0,17,0,0,0,24,0,0,0,32,0,0,0,25,0,0,0,18,0,0,0,11,0,0,0,4,0,0,0,5,0,0,0,12,0,0,0,19,0,0,0,26,0,0,0,33,0,0,0,40,0,0,0,48,0,0,0,41,0,0,0,34,0,0,0,27,0,0,0,20,0,0,0,13,0,0,0,6,0,0,0,7,0,0,0,14,0,0,0,21,0,0,0,28,0,0,0,35,0,0,0,42,0,0,0,49,0,0,0,56,0,0,0,57,0,0,0,50,0,0,0,43,0,0,0,36,0,0,0,29,0,0,0,22,0,0,0,15,0,0,0,23,0,0,0,30,0,0,0,37,0,0,0,44,0,0,0,51,0,0,0,58,0,0,0,59,0,0,0,52,0,0,0,45,0,0,0,38,0,0,0,31,0,0,0,39,0,0,0,46,0,0,0,53,0,0,0,60,0,0,0,61,0,0,0,54,0,0,0,47,0,0,0,55,0,0,0,62,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,16,0,0,0,9,0,0,0,2,0,0,0,3,0,0,0,10,0,0,0,17,0,0,0,24,0,0,0,32,0,0,0,25,0,0,0,18,0,0,0,11,0,0,0,4,0,0,0,5,0,0,0,12,0,0,0,19,0,0,0,26,0,0,0,33,0,0,0,40,0,0,0,48,0,0,0,41,0,0,0,34,0,0,0,27,0,0,0,20,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,21,0,0,0,28,0,0,0,35,0,0,0,42,0,0,0,49,0,0,0,50,0,0,0,43,0,0,0,36,0,0,0,29,0,0,0,22,0,0,0,30,0,0,0,37,0,0,0,44,0,0,0,51,0,0,0,52,0,0,0,45,0,0,0,38,0,0,0,46,0,0,0,53,0,0,0,54,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,16,0,0,0,9,0,0,0,2,0,0,0,3,0,0,0,10,0,0,0,17,0,0,0,24,0,0,0,32,0,0,0,25,0,0,0,18,0,0,0,11,0,0,0,4,0,0,0,5,0,0,0,12,0,0,0,19,0,0,0,26,0,0,0,33,0,0,0,40,0,0,0,41,0,0,0,34,0,0,0,27,0,0,0,20,0,0,0,13,0,0,0,21,0,0,0,28,0,0,0,35,0,0,0,42,0,0,0,43,0,0,0,36,0,0,0,29,0,0,0,37,0,0,0,44,0,0,0,45,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,16,0,0,0,9,0,0,0,2,0,0,0,3,0,0,0,10,0,0,0,17,0,0,0,24,0,0,0,32,0,0,0,25,0,0,0,18,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,19,0,0,0,26,0,0,0,33,0,0,0,34,0,0,0,27,0,0,0,20,0,0,0,28,0,0,0,35,0,0,0,36,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,16,0,0,0,9,0,0,0,2,0,0,0,3,0,0,0,10,0,0,0,17,0,0,0,24,0,0,0,25,0,0,0,18,0,0,0,11,0,0,0,19,0,0,0,26,0,0,0,27,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,16,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,17,0,0,0,18,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,9,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,74,80,69,71,77,69,77,0,37,108,100,37,99,0,0,0,64,6,0,0,128,62,0,0,0,0,0,0,136,19,0,0,80,111,116,101,110,116,105,97,108,32,111,118,101,114,102,108,111,119,32,105,110,32,112,110,103,95,122,97,108,108,111,99,40,41,0,0,0,0,0,0,65,112,112,108,105,99,97,116,105,111,110,32,98,117,105,108,116,32,119,105,116,104,32,108,105,98,112,110,103,45,0,0,32,98,117,116,32,114,117,110,110,105,110,103,32,119,105,116,104,32,0,0,0,0,0,0,49,46,54,46,49,48,0,0,117,110,101,120,112,101,99,116,101,100,32,122,108,105,98,32,114,101,116,117,114,110,32,99,111,100,101,0,0,0,0,0,117,110,101,120,112,101,99,116,101,100,32,101,110,100,32,111,102,32,76,90,32,115,116,114,101,97,109,0,0,0,0,0,109,105,115,115,105,110,103,32,76,90,32,100,105,99,116,105,111,110,97,114,121,0,0,0,122,108,105,98,32,73,79,32,101,114,114,111,114,0,0,0,98,97,100,32,112,97,114,97,109,101,116,101,114,115,32,116,111,32,122,108,105,98,0,0,100,97,109,97,103,101,100,32,76,90,32,115,116,114,101,97,109,0,0,0,0,0,0,0,105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,0,0,0,0,0,116,114,117,110,99,97,116,101,100,0,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,122,108,105,98,32,118,101,114,115,105,111,110,0,0,0,0,0,0,0,0,117,110,101,120,112,101,99,116,101,100,32,122,108,105,98,32,114,101,116,117,114,110,0,0,103,97,109,109,97,32,118,97,108,117,101,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,0,0,0,0,100,117,112,108,105,99,97,116,101,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,99,104,114,111,109,97,116,105,99,105,116,105,101,115,0,0,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,99,104,101,99,107,105,110,103,32,99,104,114,111,109,97,116,105,99,105,116,105,101,115,0,0,23,161,0,0,16,83,0,0,141,7,0,0,174,139,0,0,93,23,1,0,143,46,0,0,128,70,0,0,51,28,0,0,77,115,1,0,0,0,0,0,115,82,71,66,0,0,0,0,105,110,118,97,108,105,100,32,115,82,71,66,32,114,101,110,100,101,114,105,110,103,32,105,110,116,101,110,116,0,0,0,105,110,99,111,110,115,105,115,116,101,110,116,32,114,101,110,100,101,114,105,110,103,32,105,110,116,101,110,116,115,0,0,100,117,112,108,105,99,97,116,101,32,115,82,71,66,32,105,110,102,111,114,109,97,116,105,111,110,32,105,103,110,111,114,101,100,0,0,0,0,0,0,0,250,0,0,232,128,0,0,48,117,0,0,96,234,0,0,152,58,0,0,112,23,0,0,38,122,0,0,132,128,0,0,99,72,82,77,32,99,104,117,110,107,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,115,82,71,66,0,0,116,111,111,32,115,104,111,114,116,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,108,101,110,103,116,104,0,0,108,101,110,103,116,104,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,112,114,111,102,105,108,101,0,0,0,116,97,103,32,99,111,117,110,116,32,116,111,111,32,108,97,114,103,101,0,0,0,0,0,105,110,118,97,108,105,100,32,114,101,110,100,101,114,105,110,103,32,105,110,116,101,110,116,0,0,0,0,0,0,0,0,105,110,116,101,110,116,32,111,117,116,115,105,100,101,32,100,101,102,105,110,101,100,32,114,97,110,103,101,0,0,0,0,105,110,118,97,108,105,100,32,115,105,103,110,97,116,117,114,101,0,0,0,0,0,0,0,0,0,246,214,0,1,0,0,0,0,211,45,0,0,0,0,80,67,83,32,105,108,108,117,109,105,110,97,110,116,32,105,115,32,110,111,116,32,68,53,48,0,0,0,0,0,0,0,82,71,66,32,99,111,108,111,114,32,115,112,97,99,101,32,110,111,116,32,112,101,114,109,105,116,116,101,100,32,111,110,32,103,114,97,121,115,99,97,108,101,32,80,78,71,0,0,71,114,97,121,32,99,111,108,111,114,32,115,112,97,99,101,32,110,111,116,32,112,101,114,109,105,116,116,101,100,32,111,110,32,82,71,66,32,80,78,71,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,73,67,67,32,112,114,111,102,105,108,101,32,99,111,108,111,114,32,115,112,97,99,101,0,105,110,118,97,108,105,100,32,101,109,98,101,100,100,101,100,32,65,98,115,116,114,97,99,116,32,73,67,67,32,112,114,111,102,105,108,101,0,0,0,117,110,101,120,112,101,99,116,101,100,32,68,101,118,105,99,101,76,105,110,107,32,73,67,67,32,112,114,111,102,105,108,101,32,99,108,97,115,115,0,117,110,101,120,112,101,99,116,101,100,32,78,97,109,101,100,67,111,108,111,114,32,73,67,67,32,112,114,111,102,105,108,101,32,99,108,97,115,115,0,117,110,114,101,99,111,103,110,105,122,101,100,32,73,67,67,32,112,114,111,102,105,108,101,32,99,108,97,115,115,0,0,117,110,101,120,112,101,99,116,101,100,32,73,67,67,32,80,67,83,32,101,110,99,111,100,105,110,103,0,0,0,0,0,73,67,67,32,112,114,111,102,105,108,101,32,116,97,103,32,115,116,97,114,116,32,110,111,116,32,97,32,109,117,108,116,105,112,108,101,32,111,102,32,52,0,0,0,0,0,0,0,73,67,67,32,112,114,111,102,105,108,101,32,116,97,103,32,111,117,116,115,105,100,101,32,112,114,111,102,105,108,101,0,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,104,97,110,100,108,105,110,103,32,99,72,82,77,32,99,111,101,102,102,105,99,105,101,110,116,115,0,0,0,0,0,0,0,105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,104,97,110,100,108,105,110,103,32,99,72,82,77,45,62,88,89,90,0,0,0,0,0,0,0,73,109,97,103,101,32,119,105,100,116,104,32,105,115,32,122,101,114,111,32,105,110,32,73,72,68,82,0,0,0,0,0,73,109,97,103,101,32,104,101,105,103,104,116,32,105,115,32,122,101,114,111,32,105,110,32,73,72,68,82,0,0,0,0,73,109,97,103,101,32,119,105,100,116,104,32,101,120,99,101,101,100,115,32,117,115,101,114,32,108,105,109,105,116,32,105,110,32,73,72,68,82,0,0,73,109,97,103,101,32,104,101,105,103,104,116,32,101,120,99,101,101,100,115,32,117,115,101,114,32,108,105,109,105,116,32,105,110,32,73,72,68,82,0,73,110,118,97,108,105,100,32,105,109,97,103,101,32,119,105,100,116,104,32,105,110,32,73,72,68,82,0,0,0,0,0,73,110,118,97,108,105,100,32,105,109,97,103,101,32,104,101,105,103,104,116,32,105,110,32,73,72,68,82,0,0,0,0,73,110,118,97,108,105,100,32,98,105,116,32,100,101,112,116,104,32,105,110,32,73,72,68,82,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,99,111,108,111,114,32,116,121,112,101,32,105,110,32,73,72,68,82,0,0,0,0,0,0,73,110,118,97,108,105,100,32,99,111,108,111,114,32,116,121,112,101,47,98,105,116,32,100,101,112,116,104,32,99,111,109,98,105,110,97,116,105,111,110,32,105,110,32,73,72,68,82,0,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,105,110,116,101,114,108,97,99,101,32,109,101,116,104,111,100,32,105,110,32,73,72,68,82,0,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,109,101,116,104,111,100,32,105,110,32,73,72,68,82,0,0,0,0,0,0,77,78,71,32,102,101,97,116,117,114,101,115,32,97,114,101,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,97,32,80,78,71,32,100,97,116,97,115,116,114,101,97,109,0,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,102,105,108,116,101,114,32,109,101,116,104,111,100,32,105,110,32,73,72,68,82,0,0,0,73,110,118,97,108,105,100,32,102,105,108,116,101,114,32,109,101,116,104,111,100,32,105,110,32,73,72,68,82,0,0,0,73,110,118,97,108,105,100,32,73,72,68,82,32,100,97,116,97,0,0,0,0,0,0,0,103,97,109,109,97,32,116,97,98,108,101,32,98,101,105,110,103,32,114,101,98,117,105,108,116,0,0,0,0,0,0,0,246,217,63,10,185,114,135,59,232,11,0,0,222,61,248,41,174,85,242,175,228,250,66,120,13,57,131,202,1,0,0,0,225,229,9,73,33,187,126,66,236,11,0,0,55,214,91,201,59,138,93,233,153,143,243,13,137,3,50,193,1,0,1,0,161,68,33,253,174,216,111,48,60,238,0,0,120,51,102,252,107,136,226,55,131,233,114,253,184,241,40,130,1,0,0,0,210,53,156,32,18,120,239,187,32,238,0,0,191,42,86,52,6,205,76,153,33,87,44,109,93,140,214,208,1,0,0,0,98,215,84,160,206,41,81,93,208,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,251,243,132,247,82,165,46,24,72,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,252,243,152,3,109,82,158,242,72,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,107,110,111,119,110,32,105,110,99,111,114,114,101,99,116,32,115,82,71,66,32,112,114,111,102,105,108,101,0,0,0,0,111,117,116,45,111,102,45,100,97,116,101,32,115,82,71,66,32,112,114,111,102,105,108,101,32,119,105,116,104,32,110,111,32,115,105,103,110,97,116,117,114,101,0,0,0,0,0,0,78,111,116,32,114,101,99,111,103,110,105,122,105,110,103,32,107,110,111,119,110,32,115,82,71,66,32,112,114,111,102,105,108,101,32,116,104,97,116,32,104,97,115,32,98,101,101,110,32,101,100,105,116,101,100,0,112,114,111,102,105,108,101,32,39,0,0,0,0,0,0,0,39,58,32,0,0,0,0,0,104,58,32,0,0,0,0,0,105,110,99,111,110,115,105,115,116,101,110,116,32,99,104,114,111,109,97,116,105,99,105,116,105,101,115,0,0,0,0,0,103,97,109,109,97,32,118,97,108,117,101,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,115,82,71,66,0,103,97,109,109,97,32,118,97,108,117,101,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,108,105,98,112,110,103,32,101,115,116,105,109,97,116,101,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,0,0,0,0,0,0,0,0,76,105,98,112,110,103,32,106,109,112,95,98,117,102,32,115,116,105,108,108,32,97,108,108,111,99,97,116,101,100,0,0,65,112,112,108,105,99,97,116,105,111,110,32,106,109,112,95,98,117,102,32,115,105,122,101,32,99,104,97,110,103,101,100,0,0,0,0,0,0,0,0,108,105,98,112,110,103,32,119,97,114,110,105,110,103,58,32,37,115,0,0,0,0,0,0,108,105,98,112,110,103,32,101,114,114,111,114,58,32,37,115,0,0,0,0,0,0,0,0,117,110,100,101,102,105,110,101,100,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,97,114,114,97,121,32,97,108,108,111,99,0,0,0,0,0,105,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,97,114,114,97,121,32,114,101,97,108,108,111,99,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,73,68,65,84,0,0,0,0,0,0,0,0,77,105,115,115,105,110,103,32,80,76,84,69,32,98,101,102,111,114,101,32,73,68,65,84,0,0,0,0,0,0,0,0,84,111,111,32,109,97,110,121,32,73,68,65,84,115,32,102,111,117,110,100,0,0,0,0,73,110,118,97,108,105,100,32,97,116,116,101,109,112,116,32,116,111,32,114,101,97,100,32,114,111,119,32,100,97,116,97,0,0,0,0,0,0,0,0,98,97,100,32,97,100,97,112,116,105,118,101,32,102,105,108,116,101,114,32,118,97,108,117,101,0,0,0,0,0,0,0,115,101,113,117,101,110,116,105,97,108,32,114,111,119,32,111,118,101,114,102,108,111,119,0,105,110,116,101,114,110,97,108,32,115,101,113,117,101,110,116,105,97,108,32,114,111,119,32,115,105,122,101,32,99,97,108,99,117,108,97,116,105,111,110,32,101,114,114,111,114,0,0,67,97,108,108,32,116,111,32,78,85,76,76,32,114,101,97,100,32,102,117,110,99,116,105,111,110,0,0,0,0,0,0,82,101,97,100,32,69,114,114,111,114,0,0,0,0,0,0,67,97,110,39,116,32,115,101,116,32,98,111,116,104,32,114,101,97,100,95,100,97,116,97,95,102,110,32,97,110,100,32,119,114,105,116,101,95,100,97,116,97,95,102,110,32,105,110,32,116,104,101,32,115,97,109,101,32,115,116,114,117,99,116,117,114,101,0,0,0,0,0,108,105,98,112,110,103,32,100,111,101,115,32,110,111,116,32,115,117,112,112,111,114,116,32,103,97,109,109,97,43,98,97,99,107,103,114,111,117,110,100,43,114,103,98,95,116,111,95,103,114,97,121,0,0,0,0,105,110,118,97,108,105,100,32,98,97,99,107,103,114,111,117,110,100,32,103,97,109,109,97,32,116,121,112,101,0,0,0,78,85,76,76,32,114,111,119,32,98,117,102,102,101,114,0,85,110,105,110,105,116,105,97,108,105,122,101,100,32,114,111,119,0,0,0,0,0,0,0,112,110,103,95,100,111,95,114,103,98,95,116,111,95,103,114,97,121,32,102,111,117,110,100,32,110,111,110,103,114,97,121,32,112,105,120,101,108,0,0,112,110,103,95,100,111,95,113,117,97,110,116,105,122,101,32,114,101,116,117,114,110,101,100,32,114,111,119,98,121,116,101,115,61,48,0,0,0,0,0,112,110,103,95,100,111,95,101,110,99,111,100,101,95,97,108,112,104,97,58,32,117,110,101,120,112,101,99,116,101,100,32,99,97,108,108,0,0,0,0,105,110,118,97,108,105,100,32,97,102,116,101,114,32,112,110,103,95,115,116,97,114,116,95,114,101,97,100,95,105,109,97,103,101,32,111,114,32,112,110,103,95,114,101,97,100,95,117,112,100,97,116,101,95,105,110,102,111,0,0,0,0,0,0,80,78,71,32,117,110,115,105,103,110,101,100,32,105,110,116,101,103,101,114,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,0,0,0,78,111,116,32,97,32,80,78,71,32,102,105,108,101,0,0,80,78,71,32,102,105,108,101,32,99,111,114,114,117,112,116,101,100,32,98,121,32,65,83,67,73,73,32,99,111,110,118,101,114,115,105,111,110,0,0,67,82,67,32,101,114,114,111,114,0,0,0,0,0,0,0,111,117,116,32,111,102,32,112,108,97,99,101,0,0,0,0,105,110,118,97,108,105,100,0,109,105,115,115,105,110,103,32,73,72,68,82,0,0,0,0,100,117,112,108,105,99,97,116,101,0,0,0,0,0,0,0,105,103,110,111,114,101,100,32,105,110,32,103,114,97,121,115,99,97,108,101,32,80,78,71,0,0,0,0,0,0,0,0,116,82,78,83,32,109,117,115,116,32,98,101,32,97,102,116,101,114,0,0,0,0,0,0,104,73,83,84,32,109,117,115,116,32,98,101,32,97,102,116,101,114,0,0,0,0,0,0,98,75,71,68,32,109,117,115,116,32,98,101,32,97,102,116,101,114,0,0,0,0,0,0,105,110,118,97,108,105,100,32,118,97,108,117,101,115,0,0,116,111,111,32,109,97,110,121,32,112,114,111,102,105,108,101,115,0,0,0,0,0,0,0,116,111,111,32,115,104,111,114,116,0,0,0,0,0,0,0,101,120,116,114,97,32,99,111,109,112,114,101,115,115,101,100,32,100,97,116,97,0,0,0,111,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,116,114,117,110,99,97,116,101,100,0,0,0,0,0,0,0,98,97,100,32,99,111,109,112,114,101,115,115,105,111,110,32,109,101,116,104,111,100,0,0,98,97,100,32,107,101,121,119,111,114,100,0,0,0,0,0,78,111,32,115,112,97,99,101,32,105,110,32,99,104,117,110,107,32,99,97,99,104,101,32,102,111,114,32,115,80,76,84,0,0,0,0,0,0,0,0,109,97,108,102,111,114,109,101,100,32,115,80,76,84,32,99,104,117,110,107,0,0,0,0,115,80,76,84,32,99,104,117,110,107,32,104,97,115,32,98,97,100,32,108,101,110,103,116,104,0,0,0,0,0,0,0,115,80,76,84,32,99,104,117,110,107,32,116,111,111,32,108,111,110,103,0,0,0,0,0,115,80,76,84,32,99,104,117,110,107,32,114,101,113,117,105,114,101,115,32,116,111,111,32,109,117,99,104,32,109,101,109,111,114,121,0,0,0,0,0,105,110,118,97,108,105,100,32,119,105,116,104,32,97,108,112,104,97,32,99,104,97,110,110,101,108,0,0,0,0,0,0,105,110,118,97,108,105,100,32,105,110,100,101,120,0,0,0,105,110,118,97,108,105,100,32,112,97,114,97,109,101,116,101,114,32,99,111,117,110,116,0,117,110,114,101,99,111,103,110,105,122,101,100,32,101,113,117,97,116,105,111,110,32,116,121,112,101,0,0,0,0,0,0,105,110,118,97,108,105,100,32,100,97,116,97,0,0,0,0,105,110,118,97,108,105,100,32,117,110,105,116,0,0,0,0,98,97,100,32,119,105,100,116,104,32,102,111,114,109,97,116,0,0,0,0,0,0,0,0,110,111,110,45,112,111,115,105,116,105,118,101,32,119,105,100,116,104,0,0,0,0,0,0,98,97,100,32,104,101,105,103,104,116,32,102,111,114,109,97,116,0,0,0,0,0,0,0,110,111,110,45,112,111,115,105,116,105,118,101,32,104,101,105,103,104,116,0,0,0,0,0,110,111,32,115,112,97,99,101,32,105,110,32,99,104,117,110,107,32,99,97,99,104,101,0,73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,112,114,111,99,101,115,115,32,116,101,120,116,32,99,104,117,110,107,0,0,0,0,0,0,0,117,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,116,121,112,101,0,0,0,0,0,0,0,0,105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,0,0,0,0,0,98,97,100,32,99,111,109,112,114,101,115,115,105,111,110,32,105,110,102,111,0,0,0,0,101,114,114,111,114,32,105,110,32,117,115,101,114,32,99,104,117,110,107,0,0,0,0,0,83,97,118,105,110,103,32,117,110,107,110,111,119,110,32,99,104,117,110,107,58,0,0,0,102,111,114,99,105,110,103,32,115,97,118,101,32,111,102,32,97,110,32,117,110,104,97,110,100,108,101,100,32,99,104,117,110,107,59,32,112,108,101,97,115,101,32,99,97,108,108,32,112,110,103,95,115,101,116,95,107,101,101,112,95,117,110,107,110,111,119,110,95,99,104,117,110,107,115,0,0,0,0,0,117,110,104,97,110,100,108,101,100,32,99,114,105,116,105,99,97,108,32,99,104,117,110,107,0,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,99,104,117,110,107,32,116,121,112,101,0,0,0,0,0,0,105,110,116,101,114,110,97,108,32,114,111,119,32,108,111,103,105,99,32,101,114,114,111,114,0,0,0,0,0,0,0,0,105,110,116,101,114,110,97,108,32,114,111,119,32,115,105,122,101,32,99,97,108,99,117,108,97,116,105,111,110,32,101,114,114,111,114,0,0,0,0,0,105,110,116,101,114,110,97,108,32,114,111,119,32,119,105,100,116,104,32,101,114,114,111,114,0,0,0,0,0,0,0,0,1,1,1,1,16,16,16,16,17,17,17,17,68,68,68,68,85,85,85,85,170,170,170,170,3,0,3,0,0,3,0,3,3,3,3,3,48,48,48,48,51,51,51,51,204,204,204,204,15,0,0,0,0,0,15,0,15,0,15,0,0,15,0,15,15,15,15,15,240,240,240,240,128,128,128,128,8,8,8,8,136,136,136,136,34,34,34,34,170,170,170,170,85,85,85,85,192,0,192,0,0,192,0,192,192,192,192,192,12,12,12,12,204,204,204,204,51,51,51,51,240,0,0,0,0,0,240,0,240,0,240,0,0,240,0,240,240,240,240,240,15,15,15,15,240,240,240,240,68,68,68,68,170,170,170,170,0,255,0,255,48,48,48,48,204,204,204,204,0,0,255,255,0,15,0,15,240,240,240,240,15,15,15,15,34,34,34,34,85,85,85,85,0,255,0,255,12,12,12,12,51,51,51,51,0,0,255,255,0,240,0,240,15,15,15,15,105,110,118,97,108,105,100,32,117,115,101,114,32,116,114,97,110,115,102,111,114,109,32,112,105,120,101,108,32,100,101,112,116,104,0,0,0,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,78,111,116,32,101,110,111,117,103,104,32,105,109,97,103,101,32,100,97,116,97,0,0,0,69,120,116,114,97,32,99,111,109,112,114,101,115,115,101,100,32,100,97,116,97,0,0,0,84,111,111,32,109,117,99,104,32,105,109,97,103,101,32,100,97,116,97,0,0,0,0,0,0,0,4,0,2,0,1,0,8,8,8,4,4,2,2,0,0,4,0,2,0,1,0,0,8,8,4,4,2,2,1,0,82,111,119,32,104,97,115,32,116,111,111,32,109,97,110,121,32,98,121,116,101,115,32,116,111,32,97,108,108,111,99,97,116,101,32,105,110,32,109,101,109,111,114,121,0,0,0,0,117,110,107,110,111,119,110,32,99,104,117,110,107,32,101,120,99,101,101,100,115,32,109,101,109,111,114,121,32,108,105,109,105,116,115,0,0,0,0,0,122,115,116,114,101,97,109,32,117,110,99,108,97,105,109,101,100,0,0,0,0,0,0,0,105,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,114,101,97,100,32,99,104,117,110,107,0,0,0,0,0,0,0,32,117,115,105,110,103,32,122,115,116,114,101,97,109,0,0,49,46,50,46,53,0,0,0,73,110,118,97,108,105,100,32,112,97,108,101,116,116,101,32,115,105,122,101,44,32,104,73,83,84,32,97,108,108,111,99,97,116,105,111,110,32,115,107,105,112,112,101,100,0,0,0,73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,102,111,114,32,104,73,83,84,32,99,104,117,110,107,32,100,97,116,97,0,73,110,118,97,108,105,100,32,112,67,65,76,32,101,113,117,97,116,105,111,110,32,116,121,112,101,0,0,0,0,0,0,73,110,118,97,108,105,100,32,112,67,65,76,32,112,97,114,97,109,101,116,101,114,32,99,111,117,110,116,0,0,0,0,73,110,118,97,108,105,100,32,102,111,114,109,97,116,32,102,111,114,32,112,67,65,76,32,112,97,114,97,109,101,116,101,114,0,0,0,0,0,0,0,73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,102,111,114,32,112,67,65,76,32,112,117,114,112,111,115,101,0,0,0,0,73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,102,111,114,32,112,67,65,76,32,117,110,105,116,115,0,0,0,0,0,0,73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,102,111,114,32,112,67,65,76,32,112,97,114,97,109,115,0,0,0,0,0,73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,102,111,114,32,112,67,65,76,32,112,97,114,97,109,101,116,101,114,0,0,73,110,118,97,108,105,100,32,115,67,65,76,32,117,110,105,116,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,115,67,65,76,32,119,105,100,116,104,0,0,0,0,0,0,73,110,118,97,108,105,100,32,115,67,65,76,32,104,101,105,103,104,116,0,0,0,0,0,77,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,102,97,105,108,101,100,32,119,104,105,108,101,32,112,114,111,99,101,115,115,105,110,103,32,115,67,65,76,0,0,73,110,118,97,108,105,100,32,112,97,108,101,116,116,101,32,108,101,110,103,116,104,0,0,73,110,118,97,108,105,100,32,112,97,108,101,116,116,101,0,116,111,111,32,109,97,110,121,32,116,101,120,116,32,99,104,117,110,107,115,0,0,0,0,116,101,120,116,32,99,111,109,112,114,101,115,115,105,111,110,32,109,111,100,101,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,116,101,120,116,32,99,104,117,110,107,58,32,111,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,0,0,0,0,73,103,110,111,114,105,110,103,32,105,110,118,97,108,105,100,32,116,105,109,101,32,118,97,108,117,101,0,0,0,0,0,116,82,78,83,32,99,104,117,110,107,32,104,97,115,32,111,117,116,45,111,102,45,114,97,110,103,101,32,115,97,109,112,108,101,115,32,102,111,114,32,98,105,116,95,100,101,112,116,104,0,0,0,0,0,0,0,116,111,111,32,109,97,110,121,32,115,80,76,84,32,99,104,117,110,107,115,0,0,0,0,112,110,103,95,115,101,116,95,115,80,76,84,58,32,105,110,118,97,108,105,100,32,115,80,76,84,0,0,0,0,0,0,115,80,76,84,32,111,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,0,0,0,116,111,111,32,109,97,110,121,32,117,110,107,110,111,119,110,32,99,104,117,110,107,115,0,117,110,107,110,111,119,110,32,99,104,117,110,107,58,32,111,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,0,112,110,103,95,115,101,116,95,117,110,107,110,111,119,110,95,99,104,117,110,107,115,32,110,111,119,32,101,120,112,101,99,116,115,32,97,32,118,97,108,105,100,32,108,111,99,97,116,105,111,110,0,0,0,0,0,105,110,118,97,108,105,100,32,108,111,99,97,116,105,111,110,32,105,110,32,112,110,103,95,115,101,116,95,117,110,107,110,111,119,110,95,99,104,117,110,107,115,0,0,0,0,0,0,0,128,64,192,32,160,96,224,16,144,80,208,48,176,112,240,8,136,72,200,40,168,104,232,24,152,88,216,56,184,120,248,4,132,68,196,36,164,100,228,20,148,84,212,52,180,116,244,12,140,76,204,44,172,108,236,28,156,92,220,60,188,124,252,2,130,66,194,34,162,98,226,18,146,82,210,50,178,114,242,10,138,74,202,42,170,106,234,26,154,90,218,58,186,122,250,6,134,70,198,38,166,102,230,22,150,86,214,54,182,118,246,14,142,78,206,46,174,110,238,30,158,94,222,62,190,126,254,1,129,65,193,33,161,97,225,17,145,81,209,49,177,113,241,9,137,73,201,41,169,105,233,25,153,89,217,57,185,121,249,5,133,69,197,37,165,101,229,21,149,85,213,53,181,117,245,13,141,77,205,45,173,109,237,29,157,93,221,61,189,125,253,3,131,67,195,35,163,99,227,19,147,83,211,51,179,115,243,11,139,75,203,43,171,107,235,27,155,91,219,59,187,123,251,7,135,71,199,39,167,103,231,23,151,87,215,55,183,119,247,15,143,79,207,47,175,111,239,31,159,95,223,63,191,127,255,0,64,128,192,16,80,144,208,32,96,160,224,48,112,176,240,4,68,132,196,20,84,148,212,36,100,164,228,52,116,180,244,8,72,136,200,24,88,152,216,40,104,168,232,56,120,184,248,12,76,140,204,28,92,156,220,44,108,172,236,60,124,188,252,1,65,129,193,17,81,145,209,33,97,161,225,49,113,177,241,5,69,133,197,21,85,149,213,37,101,165,229,53,117,181,245,9,73,137,201,25,89,153,217,41,105,169,233,57,121,185,249,13,77,141,205,29,93,157,221,45,109,173,237,61,125,189,253,2,66,130,194,18,82,146,210,34,98,162,226,50,114,178,242,6,70,134,198,22,86,150,214,38,102,166,230,54,118,182,246,10,74,138,202,26,90,154,218,42,106,170,234,58,122,186,250,14,78,142,206,30,94,158,222,46,110,174,238,62,126,190,254,3,67,131,195,19,83,147,211,35,99,163,227,51,115,179,243,7,71,135,199,23,87,151,215,39,103,167,231,55,119,183,247,11,75,139,203,27,91,155,219,43,107,171,235,59,123,187,251,15,79,143,207,31,95,159,223,47,111,175,239,63,127,191,255,0,16,32,48,64,80,96,112,128,144,160,176,192,208,224,240,1,17,33,49,65,81,97,113,129,145,161,177,193,209,225,241,2,18,34,50,66,82,98,114,130,146,162,178,194,210,226,242,3,19,35,51,67,83,99,115,131,147,163,179,195,211,227,243,4,20,36,52,68,84,100,116,132,148,164,180,196,212,228,244,5,21,37,53,69,85,101,117,133,149,165,181,197,213,229,245,6,22,38,54,70,86,102,118,134,150,166,182,198,214,230,246,7,23,39,55,71,87,103,119,135,151,167,183,199,215,231,247,8,24,40,56,72,88,104,120,136,152,168,184,200,216,232,248,9,25,41,57,73,89,105,121,137,153,169,185,201,217,233,249,10,26,42,58,74,90,106,122,138,154,170,186,202,218,234,250,11,27,43,59,75,91,107,123,139,155,171,187,203,219,235,251,12,28,44,60,76,92,108,124,140,156,172,188,204,220,236,252,13,29,45,61,77,93,109,125,141,157,173,189,205,221,237,253,14,30,46,62,78,94,110,126,142,158,174,190,206,222,238,254,15,31,47,63,79,95,111,127,143,159,175,191,207,223,239,255,0,0,0,0,150,48,7,119,44,97,14,238,186,81,9,153,25,196,109,7,143,244,106,112,53,165,99,233,163,149,100,158,50,136,219,14,164,184,220,121,30,233,213,224,136,217,210,151,43,76,182,9,189,124,177,126,7,45,184,231,145,29,191,144,100,16,183,29,242,32,176,106,72,113,185,243,222,65,190,132,125,212,218,26,235,228,221,109,81,181,212,244,199,133,211,131,86,152,108,19,192,168,107,100,122,249,98,253,236,201,101,138,79,92,1,20,217,108,6,99,99,61,15,250,245,13,8,141,200,32,110,59,94,16,105,76,228,65,96,213,114,113,103,162,209,228,3,60,71,212,4,75,253,133,13,210,107,181,10,165,250,168,181,53,108,152,178,66,214,201,187,219,64,249,188,172,227,108,216,50,117,92,223,69,207,13,214,220,89,61,209,171,172,48,217,38,58,0,222,81,128,81,215,200,22,97,208,191,181,244,180,33,35,196,179,86,153,149,186,207,15,165,189,184,158,184,2,40,8,136,5,95,178,217,12,198,36,233,11,177,135,124,111,47,17,76,104,88,171,29,97,193,61,45,102,182,144,65,220,118,6,113,219,1,188,32,210,152,42,16,213,239,137,133,177,113,31,181,182,6,165,228,191,159,51,212,184,232,162,201,7,120,52,249,0,15,142,168,9,150,24,152,14,225,187,13,106,127,45,61,109,8,151,108,100,145,1,92,99,230,244,81,107,107,98,97,108,28,216,48,101,133,78,0,98,242,237,149,6,108,123,165,1,27,193,244,8,130,87,196,15,245,198,217,176,101,80,233,183,18,234,184,190,139,124,136,185,252,223,29,221,98,73,45,218,21,243,124,211,140,101,76,212,251,88,97,178,77,206,81,181,58,116,0,188,163,226,48,187,212,65,165,223,74,215,149,216,61,109,196,209,164,251,244,214,211,106,233,105,67,252,217,110,52,70,136,103,173,208,184,96,218,115,45,4,68,229,29,3,51,95,76,10,170,201,124,13,221,60,113,5,80,170,65,2,39,16,16,11,190,134,32,12,201,37,181,104,87,179,133,111,32,9,212,102,185,159,228,97,206,14,249,222,94,152,201,217,41,34,152,208,176,180,168,215,199,23,61,179,89,129,13,180,46,59,92,189,183,173,108,186,192,32,131,184,237,182,179,191,154,12,226,182,3,154,210,177,116,57,71,213,234,175,119,210,157,21,38,219,4,131,22,220,115,18,11,99,227,132,59,100,148,62,106,109,13,168,90,106,122,11,207,14,228,157,255,9,147,39,174,0,10,177,158,7,125,68,147,15,240,210,163,8,135,104,242,1,30,254,194,6,105,93,87,98,247,203,103,101,128,113,54,108,25,231,6,107,110,118,27,212,254,224,43,211,137,90,122,218,16,204,74,221,103,111,223,185,249,249,239,190,142,67,190,183,23,213,142,176,96,232,163,214,214,126,147,209,161,196,194,216,56,82,242,223,79,241,103,187,209,103,87,188,166,221,6,181,63,75,54,178,72,218,43,13,216,76,27,10,175,246,74,3,54,96,122,4,65,195,239,96,223,85,223,103,168,239,142,110,49,121,190,105,70,140,179,97,203,26,131,102,188,160,210,111,37,54,226,104,82,149,119,12,204,3,71,11,187,185,22,2,34,47,38,5,85,190,59,186,197,40,11,189,178,146,90,180,43,4,106,179,92,167,255,215,194,49,207,208,181,139,158,217,44,29,174,222,91,176,194,100,155,38,242,99,236,156,163,106,117,10,147,109,2,169,6,9,156,63,54,14,235,133,103,7,114,19,87,0,5,130,74,191,149,20,122,184,226,174,43,177,123,56,27,182,12,155,142,210,146,13,190,213,229,183,239,220,124,33,223,219,11,212,210,211,134,66,226,212,241,248,179,221,104,110,131,218,31,205,22,190,129,91,38,185,246,225,119,176,111,119,71,183,24,230,90,8,136,112,106,15,255,202,59,6,102,92,11,1,17,255,158,101,143,105,174,98,248,211,255,107,97,69,207,108,22,120,226,10,160,238,210,13,215,84,131,4,78,194,179,3,57,97,38,103,167,247,22,96,208,77,71,105,73,219,119,110,62,74,106,209,174,220,90,214,217,102,11,223,64,240,59,216,55,83,174,188,169,197,158,187,222,127,207,178,71,233,255,181,48,28,242,189,189,138,194,186,202,48,147,179,83,166,163,180,36,5,54,208,186,147,6,215,205,41,87,222,84,191,103,217,35,46,122,102,179,184,74,97,196,2,27,104,93,148,43,111,42,55,190,11,180,161,142,12,195,27,223,5,90,141,239,2,45,0,0,0,0,65,49,27,25,130,98,54,50,195,83,45,43,4,197,108,100,69,244,119,125,134,167,90,86,199,150,65,79,8,138,217,200,73,187,194,209,138,232,239,250,203,217,244,227,12,79,181,172,77,126,174,181,142,45,131,158,207,28,152,135,81,18,194,74,16,35,217,83,211,112,244,120,146,65,239,97,85,215,174,46,20,230,181,55,215,181,152,28,150,132,131,5,89,152,27,130,24,169,0,155,219,250,45,176,154,203,54,169,93,93,119,230,28,108,108,255,223,63,65,212,158,14,90,205,162,36,132,149,227,21,159,140,32,70,178,167,97,119,169,190,166,225,232,241,231,208,243,232,36,131,222,195,101,178,197,218,170,174,93,93,235,159,70,68,40,204,107,111,105,253,112,118,174,107,49,57,239,90,42,32,44,9,7,11,109,56,28,18,243,54,70,223,178,7,93,198,113,84,112,237,48,101,107,244,247,243,42,187,182,194,49,162,117,145,28,137,52,160,7,144,251,188,159,23,186,141,132,14,121,222,169,37,56,239,178,60,255,121,243,115,190,72,232,106,125,27,197,65,60,42,222,88,5,79,121,240,68,126,98,233,135,45,79,194,198,28,84,219,1,138,21,148,64,187,14,141,131,232,35,166,194,217,56,191,13,197,160,56,76,244,187,33,143,167,150,10,206,150,141,19,9,0,204,92,72,49,215,69,139,98,250,110,202,83,225,119,84,93,187,186,21,108,160,163,214,63,141,136,151,14,150,145,80,152,215,222,17,169,204,199,210,250,225,236,147,203,250,245,92,215,98,114,29,230,121,107,222,181,84,64,159,132,79,89,88,18,14,22,25,35,21,15,218,112,56,36,155,65,35,61,167,107,253,101,230,90,230,124,37,9,203,87,100,56,208,78,163,174,145,1,226,159,138,24,33,204,167,51,96,253,188,42,175,225,36,173,238,208,63,180,45,131,18,159,108,178,9,134,171,36,72,201,234,21,83,208,41,70,126,251,104,119,101,226,246,121,63,47,183,72,36,54,116,27,9,29,53,42,18,4,242,188,83,75,179,141,72,82,112,222,101,121,49,239,126,96,254,243,230,231,191,194,253,254,124,145,208,213,61,160,203,204,250,54,138,131,187,7,145,154,120,84,188,177,57,101,167,168,75,152,131,59,10,169,152,34,201,250,181,9,136,203,174,16,79,93,239,95,14,108,244,70,205,63,217,109,140,14,194,116,67,18,90,243,2,35,65,234,193,112,108,193,128,65,119,216,71,215,54,151,6,230,45,142,197,181,0,165,132,132,27,188,26,138,65,113,91,187,90,104,152,232,119,67,217,217,108,90,30,79,45,21,95,126,54,12,156,45,27,39,221,28,0,62,18,0,152,185,83,49,131,160,144,98,174,139,209,83,181,146,22,197,244,221,87,244,239,196,148,167,194,239,213,150,217,246,233,188,7,174,168,141,28,183,107,222,49,156,42,239,42,133,237,121,107,202,172,72,112,211,111,27,93,248,46,42,70,225,225,54,222,102,160,7,197,127,99,84,232,84,34,101,243,77,229,243,178,2,164,194,169,27,103,145,132,48,38,160,159,41,184,174,197,228,249,159,222,253,58,204,243,214,123,253,232,207,188,107,169,128,253,90,178,153,62,9,159,178,127,56,132,171,176,36,28,44,241,21,7,53,50,70,42,30,115,119,49,7,180,225,112,72,245,208,107,81,54,131,70,122,119,178,93,99,78,215,250,203,15,230,225,210,204,181,204,249,141,132,215,224,74,18,150,175,11,35,141,182,200,112,160,157,137,65,187,132,70,93,35,3,7,108,56,26,196,63,21,49,133,14,14,40,66,152,79,103,3,169,84,126,192,250,121,85,129,203,98,76,31,197,56,129,94,244,35,152,157,167,14,179,220,150,21,170,27,0,84,229,90,49,79,252,153,98,98,215,216,83,121,206,23,79,225,73,86,126,250,80,149,45,215,123,212,28,204,98,19,138,141,45,82,187,150,52,145,232,187,31,208,217,160,6,236,243,126,94,173,194,101,71,110,145,72,108,47,160,83,117,232,54,18,58,169,7,9,35,106,84,36,8,43,101,63,17,228,121,167,150,165,72,188,143,102,27,145,164,39,42,138,189,224,188,203,242,161,141,208,235,98,222,253,192,35,239,230,217,189,225,188,20,252,208,167,13,63,131,138,38,126,178,145,63,185,36,208,112,248,21,203,105,59,70,230,66,122,119,253,91,181,107,101,220,244,90,126,197,55,9,83,238,118,56,72,247,177,174,9,184,240,159,18,161,51,204,63,138,114,253,36,147,0,0,0,0,55,106,194,1,110,212,132,3,89,190,70,2,220,168,9,7,235,194,203,6,178,124,141,4,133,22,79,5,184,81,19,14,143,59,209,15,214,133,151,13,225,239,85,12,100,249,26,9,83,147,216,8,10,45,158,10,61,71,92,11,112,163,38,28,71,201,228,29,30,119,162,31,41,29,96,30,172,11,47,27,155,97,237,26,194,223,171,24,245,181,105,25,200,242,53,18,255,152,247,19,166,38,177,17,145,76,115,16,20,90,60,21,35,48,254,20,122,142,184,22,77,228,122,23,224,70,77,56,215,44,143,57,142,146,201,59,185,248,11,58,60,238,68,63,11,132,134,62,82,58,192,60,101,80,2,61,88,23,94,54,111,125,156,55,54,195,218,53,1,169,24,52,132,191,87,49,179,213,149,48,234,107,211,50,221,1,17,51,144,229,107,36,167,143,169,37,254,49,239,39,201,91,45,38,76,77,98,35,123,39,160,34,34,153,230,32,21,243,36,33,40,180,120,42,31,222,186,43,70,96,252,41,113,10,62,40,244,28,113,45,195,118,179,44,154,200,245,46,173,162,55,47,192,141,154,112,247,231,88,113,174,89,30,115,153,51,220,114,28,37,147,119,43,79,81,118,114,241,23,116,69,155,213,117,120,220,137,126,79,182,75,127,22,8,13,125,33,98,207,124,164,116,128,121,147,30,66,120,202,160,4,122,253,202,198,123,176,46,188,108,135,68,126,109,222,250,56,111,233,144,250,110,108,134,181,107,91,236,119,106,2,82,49,104,53,56,243,105,8,127,175,98,63,21,109,99,102,171,43,97,81,193,233,96,212,215,166,101,227,189,100,100,186,3,34,102,141,105,224,103,32,203,215,72,23,161,21,73,78,31,83,75,121,117,145,74,252,99,222,79,203,9,28,78,146,183,90,76,165,221,152,77,152,154,196,70,175,240,6,71,246,78,64,69,193,36,130,68,68,50,205,65,115,88,15,64,42,230,73,66,29,140,139,67,80,104,241,84,103,2,51,85,62,188,117,87,9,214,183,86,140,192,248,83,187,170,58,82,226,20,124,80,213,126,190,81,232,57,226,90,223,83,32,91,134,237,102,89,177,135,164,88,52,145,235,93,3,251,41,92,90,69,111,94,109,47,173,95,128,27,53,225,183,113,247,224,238,207,177,226,217,165,115,227,92,179,60,230,107,217,254,231,50,103,184,229,5,13,122,228,56,74,38,239,15,32,228,238,86,158,162,236,97,244,96,237,228,226,47,232,211,136,237,233,138,54,171,235,189,92,105,234,240,184,19,253,199,210,209,252,158,108,151,254,169,6,85,255,44,16,26,250,27,122,216,251,66,196,158,249,117,174,92,248,72,233,0,243,127,131,194,242,38,61,132,240,17,87,70,241,148,65,9,244,163,43,203,245,250,149,141,247,205,255,79,246,96,93,120,217,87,55,186,216,14,137,252,218,57,227,62,219,188,245,113,222,139,159,179,223,210,33,245,221,229,75,55,220,216,12,107,215,239,102,169,214,182,216,239,212,129,178,45,213,4,164,98,208,51,206,160,209,106,112,230,211,93,26,36,210,16,254,94,197,39,148,156,196,126,42,218,198,73,64,24,199,204,86,87,194,251,60,149,195,162,130,211,193,149,232,17,192,168,175,77,203,159,197,143,202], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([198,123,201,200,241,17,11,201,116,7,68,204,67,109,134,205,26,211,192,207,45,185,2,206,64,150,175,145,119,252,109,144,46,66,43,146,25,40,233,147,156,62,166,150,171,84,100,151,242,234,34,149,197,128,224,148,248,199,188,159,207,173,126,158,150,19,56,156,161,121,250,157,36,111,181,152,19,5,119,153,74,187,49,155,125,209,243,154,48,53,137,141,7,95,75,140,94,225,13,142,105,139,207,143,236,157,128,138,219,247,66,139,130,73,4,137,181,35,198,136,136,100,154,131,191,14,88,130,230,176,30,128,209,218,220,129,84,204,147,132,99,166,81,133,58,24,23,135,13,114,213,134,160,208,226,169,151,186,32,168,206,4,102,170,249,110,164,171,124,120,235,174,75,18,41,175,18,172,111,173,37,198,173,172,24,129,241,167,47,235,51,166,118,85,117,164,65,63,183,165,196,41,248,160,243,67,58,161,170,253,124,163,157,151,190,162,208,115,196,181,231,25,6,180,190,167,64,182,137,205,130,183,12,219,205,178,59,177,15,179,98,15,73,177,85,101,139,176,104,34,215,187,95,72,21,186,6,246,83,184,49,156,145,185,180,138,222,188,131,224,28,189,218,94,90,191,237,52,152,190,0,0,0,0,101,103,188,184,139,200,9,170,238,175,181,18,87,151,98,143,50,240,222,55,220,95,107,37,185,56,215,157,239,40,180,197,138,79,8,125,100,224,189,111,1,135,1,215,184,191,214,74,221,216,106,242,51,119,223,224,86,16,99,88,159,87,25,80,250,48,165,232,20,159,16,250,113,248,172,66,200,192,123,223,173,167,199,103,67,8,114,117,38,111,206,205,112,127,173,149,21,24,17,45,251,183,164,63,158,208,24,135,39,232,207,26,66,143,115,162,172,32,198,176,201,71,122,8,62,175,50,160,91,200,142,24,181,103,59,10,208,0,135,178,105,56,80,47,12,95,236,151,226,240,89,133,135,151,229,61,209,135,134,101,180,224,58,221,90,79,143,207,63,40,51,119,134,16,228,234,227,119,88,82,13,216,237,64,104,191,81,248,161,248,43,240,196,159,151,72,42,48,34,90,79,87,158,226,246,111,73,127,147,8,245,199,125,167,64,213,24,192,252,109,78,208,159,53,43,183,35,141,197,24,150,159,160,127,42,39,25,71,253,186,124,32,65,2,146,143,244,16,247,232,72,168,61,88,20,155,88,63,168,35,182,144,29,49,211,247,161,137,106,207,118,20,15,168,202,172,225,7,127,190,132,96,195,6,210,112,160,94,183,23,28,230,89,184,169,244,60,223,21,76,133,231,194,209,224,128,126,105,14,47,203,123,107,72,119,195,162,15,13,203,199,104,177,115,41,199,4,97,76,160,184,217,245,152,111,68,144,255,211,252,126,80,102,238,27,55,218,86,77,39,185,14,40,64,5,182,198,239,176,164,163,136,12,28,26,176,219,129,127,215,103,57,145,120,210,43,244,31,110,147,3,247,38,59,102,144,154,131,136,63,47,145,237,88,147,41,84,96,68,180,49,7,248,12,223,168,77,30,186,207,241,166,236,223,146,254,137,184,46,70,103,23,155,84,2,112,39,236,187,72,240,113,222,47,76,201,48,128,249,219,85,231,69,99,156,160,63,107,249,199,131,211,23,104,54,193,114,15,138,121,203,55,93,228,174,80,225,92,64,255,84,78,37,152,232,246,115,136,139,174,22,239,55,22,248,64,130,4,157,39,62,188,36,31,233,33,65,120,85,153,175,215,224,139,202,176,92,51,59,182,89,237,94,209,229,85,176,126,80,71,213,25,236,255,108,33,59,98,9,70,135,218,231,233,50,200,130,142,142,112,212,158,237,40,177,249,81,144,95,86,228,130,58,49,88,58,131,9,143,167,230,110,51,31,8,193,134,13,109,166,58,181,164,225,64,189,193,134,252,5,47,41,73,23,74,78,245,175,243,118,34,50,150,17,158,138,120,190,43,152,29,217,151,32,75,201,244,120,46,174,72,192,192,1,253,210,165,102,65,106,28,94,150,247,121,57,42,79,151,150,159,93,242,241,35,229,5,25,107,77,96,126,215,245,142,209,98,231,235,182,222,95,82,142,9,194,55,233,181,122,217,70,0,104,188,33,188,208,234,49,223,136,143,86,99,48,97,249,214,34,4,158,106,154,189,166,189,7,216,193,1,191,54,110,180,173,83,9,8,21,154,78,114,29,255,41,206,165,17,134,123,183,116,225,199,15,205,217,16,146,168,190,172,42,70,17,25,56,35,118,165,128,117,102,198,216,16,1,122,96,254,174,207,114,155,201,115,202,34,241,164,87,71,150,24,239,169,57,173,253,204,94,17,69,6,238,77,118,99,137,241,206,141,38,68,220,232,65,248,100,81,121,47,249,52,30,147,65,218,177,38,83,191,214,154,235,233,198,249,179,140,161,69,11,98,14,240,25,7,105,76,161,190,81,155,60,219,54,39,132,53,153,146,150,80,254,46,46,153,185,84,38,252,222,232,158,18,113,93,140,119,22,225,52,206,46,54,169,171,73,138,17,69,230,63,3,32,129,131,187,118,145,224,227,19,246,92,91,253,89,233,73,152,62,85,241,33,6,130,108,68,97,62,212,170,206,139,198,207,169,55,126,56,65,127,214,93,38,195,110,179,137,118,124,214,238,202,196,111,214,29,89,10,177,161,225,228,30,20,243,129,121,168,75,215,105,203,19,178,14,119,171,92,161,194,185,57,198,126,1,128,254,169,156,229,153,21,36,11,54,160,54,110,81,28,142,167,22,102,134,194,113,218,62,44,222,111,44,73,185,211,148,240,129,4,9,149,230,184,177,123,73,13,163,30,46,177,27,72,62,210,67,45,89,110,251,195,246,219,233,166,145,103,81,31,169,176,204,122,206,12,116,148,97,185,102,241,6,5,222,0,0,0,0,119,7,48,150,238,14,97,44,153,9,81,186,7,109,196,25,112,106,244,143,233,99,165,53,158,100,149,163,14,219,136,50,121,220,184,164,224,213,233,30,151,210,217,136,9,182,76,43,126,177,124,189,231,184,45,7,144,191,29,145,29,183,16,100,106,176,32,242,243,185,113,72,132,190,65,222,26,218,212,125,109,221,228,235,244,212,181,81,131,211,133,199,19,108,152,86,100,107,168,192,253,98,249,122,138,101,201,236,20,1,92,79,99,6,108,217,250,15,61,99,141,8,13,245,59,110,32,200,76,105,16,94,213,96,65,228,162,103,113,114,60,3,228,209,75,4,212,71,210,13,133,253,165,10,181,107,53,181,168,250,66,178,152,108,219,187,201,214,172,188,249,64,50,216,108,227,69,223,92,117,220,214,13,207,171,209,61,89,38,217,48,172,81,222,0,58,200,215,81,128,191,208,97,22,33,180,244,181,86,179,196,35,207,186,149,153,184,189,165,15,40,2,184,158,95,5,136,8,198,12,217,178,177,11,233,36,47,111,124,135,88,104,76,17,193,97,29,171,182,102,45,61,118,220,65,144,1,219,113,6,152,210,32,188,239,213,16,42,113,177,133,137,6,182,181,31,159,191,228,165,232,184,212,51,120,7,201,162,15,0,249,52,150,9,168,142,225,14,152,24,127,106,13,187,8,109,61,45,145,100,108,151,230,99,92,1,107,107,81,244,28,108,97,98,133,101,48,216,242,98,0,78,108,6,149,237,27,1,165,123,130,8,244,193,245,15,196,87,101,176,217,198,18,183,233,80,139,190,184,234,252,185,136,124,98,221,29,223,21,218,45,73,140,211,124,243,251,212,76,101,77,178,97,88,58,181,81,206,163,188,0,116,212,187,48,226,74,223,165,65,61,216,149,215,164,209,196,109,211,214,244,251,67,105,233,106,52,110,217,252,173,103,136,70,218,96,184,208,68,4,45,115,51,3,29,229,170,10,76,95,221,13,124,201,80,5,113,60,39,2,65,170,190,11,16,16,201,12,32,134,87,104,181,37,32,111,133,179,185,102,212,9,206,97,228,159,94,222,249,14,41,217,201,152,176,208,152,34,199,215,168,180,89,179,61,23,46,180,13,129,183,189,92,59,192,186,108,173,237,184,131,32,154,191,179,182,3,182,226,12,116,177,210,154,234,213,71,57,157,210,119,175,4,219,38,21,115,220,22,131,227,99,11,18,148,100,59,132,13,109,106,62,122,106,90,168,228,14,207,11,147,9,255,157,10,0,174,39,125,7,158,177,240,15,147,68,135,8,163,210,30,1,242,104,105,6,194,254,247,98,87,93,128,101,103,203,25,108,54,113,110,107,6,231,254,212,27,118,137,211,43,224,16,218,122,90,103,221,74,204,249,185,223,111,142,190,239,249,23,183,190,67,96,176,142,213,214,214,163,232,161,209,147,126,56,216,194,196,79,223,242,82,209,187,103,241,166,188,87,103,63,181,6,221,72,178,54,75,216,13,43,218,175,10,27,76,54,3,74,246,65,4,122,96,223,96,239,195,168,103,223,85,49,110,142,239,70,105,190,121,203,97,179,140,188,102,131,26,37,111,210,160,82,104,226,54,204,12,119,149,187,11,71,3,34,2,22,185,85,5,38,47,197,186,59,190,178,189,11,40,43,180,90,146,92,179,106,4,194,215,255,167,181,208,207,49,44,217,158,139,91,222,174,29,155,100,194,176,236,99,242,38,117,106,163,156,2,109,147,10,156,9,6,169,235,14,54,63,114,7,103,133,5,0,87,19,149,191,74,130,226,184,122,20,123,177,43,174,12,182,27,56,146,210,142,155,229,213,190,13,124,220,239,183,11,219,223,33,134,211,210,212,241,212,226,66,104,221,179,248,31,218,131,110,129,190,22,205,246,185,38,91,111,176,119,225,24,183,71,119,136,8,90,230,255,15,106,112,102,6,59,202,17,1,11,92,143,101,158,255,248,98,174,105,97,107,255,211,22,108,207,69,160,10,226,120,215,13,210,238,78,4,131,84,57,3,179,194,167,103,38,97,208,96,22,247,73,105,71,77,62,110,119,219,174,209,106,74,217,214,90,220,64,223,11,102,55,216,59,240,169,188,174,83,222,187,158,197,71,178,207,127,48,181,255,233,189,189,242,28,202,186,194,138,83,179,147,48,36,180,163,166,186,208,54,5,205,215,6,147,84,222,87,41,35,217,103,191,179,102,122,46,196,97,74,184,93,104,27,2,42,111,43,148,180,11,190,55,195,12,142,161,90,5,223,27,45,2,239,141,0,0,0,0,25,27,49,65,50,54,98,130,43,45,83,195,100,108,197,4,125,119,244,69,86,90,167,134,79,65,150,199,200,217,138,8,209,194,187,73,250,239,232,138,227,244,217,203,172,181,79,12,181,174,126,77,158,131,45,142,135,152,28,207,74,194,18,81,83,217,35,16,120,244,112,211,97,239,65,146,46,174,215,85,55,181,230,20,28,152,181,215,5,131,132,150,130,27,152,89,155,0,169,24,176,45,250,219,169,54,203,154,230,119,93,93,255,108,108,28,212,65,63,223,205,90,14,158,149,132,36,162,140,159,21,227,167,178,70,32,190,169,119,97,241,232,225,166,232,243,208,231,195,222,131,36,218,197,178,101,93,93,174,170,68,70,159,235,111,107,204,40,118,112,253,105,57,49,107,174,32,42,90,239,11,7,9,44,18,28,56,109,223,70,54,243,198,93,7,178,237,112,84,113,244,107,101,48,187,42,243,247,162,49,194,182,137,28,145,117,144,7,160,52,23,159,188,251,14,132,141,186,37,169,222,121,60,178,239,56,115,243,121,255,106,232,72,190,65,197,27,125,88,222,42,60,240,121,79,5,233,98,126,68,194,79,45,135,219,84,28,198,148,21,138,1,141,14,187,64,166,35,232,131,191,56,217,194,56,160,197,13,33,187,244,76,10,150,167,143,19,141,150,206,92,204,0,9,69,215,49,72,110,250,98,139,119,225,83,202,186,187,93,84,163,160,108,21,136,141,63,214,145,150,14,151,222,215,152,80,199,204,169,17,236,225,250,210,245,250,203,147,114,98,215,92,107,121,230,29,64,84,181,222,89,79,132,159,22,14,18,88,15,21,35,25,36,56,112,218,61,35,65,155,101,253,107,167,124,230,90,230,87,203,9,37,78,208,56,100,1,145,174,163,24,138,159,226,51,167,204,33,42,188,253,96,173,36,225,175,180,63,208,238,159,18,131,45,134,9,178,108,201,72,36,171,208,83,21,234,251,126,70,41,226,101,119,104,47,63,121,246,54,36,72,183,29,9,27,116,4,18,42,53,75,83,188,242,82,72,141,179,121,101,222,112,96,126,239,49,231,230,243,254,254,253,194,191,213,208,145,124,204,203,160,61,131,138,54,250,154,145,7,187,177,188,84,120,168,167,101,57,59,131,152,75,34,152,169,10,9,181,250,201,16,174,203,136,95,239,93,79,70,244,108,14,109,217,63,205,116,194,14,140,243,90,18,67,234,65,35,2,193,108,112,193,216,119,65,128,151,54,215,71,142,45,230,6,165,0,181,197,188,27,132,132,113,65,138,26,104,90,187,91,67,119,232,152,90,108,217,217,21,45,79,30,12,54,126,95,39,27,45,156,62,0,28,221,185,152,0,18,160,131,49,83,139,174,98,144,146,181,83,209,221,244,197,22,196,239,244,87,239,194,167,148,246,217,150,213,174,7,188,233,183,28,141,168,156,49,222,107,133,42,239,42,202,107,121,237,211,112,72,172,248,93,27,111,225,70,42,46,102,222,54,225,127,197,7,160,84,232,84,99,77,243,101,34,2,178,243,229,27,169,194,164,48,132,145,103,41,159,160,38,228,197,174,184,253,222,159,249,214,243,204,58,207,232,253,123,128,169,107,188,153,178,90,253,178,159,9,62,171,132,56,127,44,28,36,176,53,7,21,241,30,42,70,50,7,49,119,115,72,112,225,180,81,107,208,245,122,70,131,54,99,93,178,119,203,250,215,78,210,225,230,15,249,204,181,204,224,215,132,141,175,150,18,74,182,141,35,11,157,160,112,200,132,187,65,137,3,35,93,70,26,56,108,7,49,21,63,196,40,14,14,133,103,79,152,66,126,84,169,3,85,121,250,192,76,98,203,129,129,56,197,31,152,35,244,94,179,14,167,157,170,21,150,220,229,84,0,27,252,79,49,90,215,98,98,153,206,121,83,216,73,225,79,23,80,250,126,86,123,215,45,149,98,204,28,212,45,141,138,19,52,150,187,82,31,187,232,145,6,160,217,208,94,126,243,236,71,101,194,173,108,72,145,110,117,83,160,47,58,18,54,232,35,9,7,169,8,36,84,106,17,63,101,43,150,167,121,228,143,188,72,165,164,145,27,102,189,138,42,39,242,203,188,224,235,208,141,161,192,253,222,98,217,230,239,35,20,188,225,189,13,167,208,252,38,138,131,63,63,145,178,126,112,208,36,185,105,203,21,248,66,230,70,59,91,253,119,122,220,101,107,181,197,126,90,244,238,83,9,55,247,72,56,118,184,9,174,177,161,18,159,240,138,63,204,51,147,36,253,114,0,0,0,0,1,194,106,55,3,132,212,110,2,70,190,89,7,9,168,220,6,203,194,235,4,141,124,178,5,79,22,133,14,19,81,184,15,209,59,143,13,151,133,214,12,85,239,225,9,26,249,100,8,216,147,83,10,158,45,10,11,92,71,61,28,38,163,112,29,228,201,71,31,162,119,30,30,96,29,41,27,47,11,172,26,237,97,155,24,171,223,194,25,105,181,245,18,53,242,200,19,247,152,255,17,177,38,166,16,115,76,145,21,60,90,20,20,254,48,35,22,184,142,122,23,122,228,77,56,77,70,224,57,143,44,215,59,201,146,142,58,11,248,185,63,68,238,60,62,134,132,11,60,192,58,82,61,2,80,101,54,94,23,88,55,156,125,111,53,218,195,54,52,24,169,1,49,87,191,132,48,149,213,179,50,211,107,234,51,17,1,221,36,107,229,144,37,169,143,167,39,239,49,254,38,45,91,201,35,98,77,76,34,160,39,123,32,230,153,34,33,36,243,21,42,120,180,40,43,186,222,31,41,252,96,70,40,62,10,113,45,113,28,244,44,179,118,195,46,245,200,154,47,55,162,173,112,154,141,192,113,88,231,247,115,30,89,174,114,220,51,153,119,147,37,28,118,81,79,43,116,23,241,114,117,213,155,69,126,137,220,120,127,75,182,79,125,13,8,22,124,207,98,33,121,128,116,164,120,66,30,147,122,4,160,202,123,198,202,253,108,188,46,176,109,126,68,135,111,56,250,222,110,250,144,233,107,181,134,108,106,119,236,91,104,49,82,2,105,243,56,53,98,175,127,8,99,109,21,63,97,43,171,102,96,233,193,81,101,166,215,212,100,100,189,227,102,34,3,186,103,224,105,141,72,215,203,32,73,21,161,23,75,83,31,78,74,145,117,121,79,222,99,252,78,28,9,203,76,90,183,146,77,152,221,165,70,196,154,152,71,6,240,175,69,64,78,246,68,130,36,193,65,205,50,68,64,15,88,115,66,73,230,42,67,139,140,29,84,241,104,80,85,51,2,103,87,117,188,62,86,183,214,9,83,248,192,140,82,58,170,187,80,124,20,226,81,190,126,213,90,226,57,232,91,32,83,223,89,102,237,134,88,164,135,177,93,235,145,52,92,41,251,3,94,111,69,90,95,173,47,109,225,53,27,128,224,247,113,183,226,177,207,238,227,115,165,217,230,60,179,92,231,254,217,107,229,184,103,50,228,122,13,5,239,38,74,56,238,228,32,15,236,162,158,86,237,96,244,97,232,47,226,228,233,237,136,211,235,171,54,138,234,105,92,189,253,19,184,240,252,209,210,199,254,151,108,158,255,85,6,169,250,26,16,44,251,216,122,27,249,158,196,66,248,92,174,117,243,0,233,72,242,194,131,127,240,132,61,38,241,70,87,17,244,9,65,148,245,203,43,163,247,141,149,250,246,79,255,205,217,120,93,96,216,186,55,87,218,252,137,14,219,62,227,57,222,113,245,188,223,179,159,139,221,245,33,210,220,55,75,229,215,107,12,216,214,169,102,239,212,239,216,182,213,45,178,129,208,98,164,4,209,160,206,51,211,230,112,106,210,36,26,93,197,94,254,16,196,156,148,39,198,218,42,126,199,24,64,73,194,87,86,204,195,149,60,251,193,211,130,162,192,17,232,149,203,77,175,168,202,143,197,159,200,201,123,198,201,11,17,241,204,68,7,116,205,134,109,67,207,192,211,26,206,2,185,45,145,175,150,64,144,109,252,119,146,43,66,46,147,233,40,25,150,166,62,156,151,100,84,171,149,34,234,242,148,224,128,197,159,188,199,248,158,126,173,207,156,56,19,150,157,250,121,161,152,181,111,36,153,119,5,19,155,49,187,74,154,243,209,125,141,137,53,48,140,75,95,7,142,13,225,94,143,207,139,105,138,128,157,236,139,66,247,219,137,4,73,130,136,198,35,181,131,154,100,136,130,88,14,191,128,30,176,230,129,220,218,209,132,147,204,84,133,81,166,99,135,23,24,58,134,213,114,13,169,226,208,160,168,32,186,151,170,102,4,206,171,164,110,249,174,235,120,124,175,41,18,75,173,111,172,18,172,173,198,37,167,241,129,24,166,51,235,47,164,117,85,118,165,183,63,65,160,248,41,196,161,58,67,243,163,124,253,170,162,190,151,157,181,196,115,208,180,6,25,231,182,64,167,190,183,130,205,137,178,205,219,12,179,15,177,59,177,73,15,98,176,139,101,85,187,215,34,104,186,21,72,95,184,83,246,6,185,145,156,49,188,222,138,180,189,28,224,131,191,90,94,218,190,152,52,237,0,0,0,0,184,188,103,101,170,9,200,139,18,181,175,238,143,98,151,87,55,222,240,50,37,107,95,220,157,215,56,185,197,180,40,239,125,8,79,138,111,189,224,100,215,1,135,1,74,214,191,184,242,106,216,221,224,223,119,51,88,99,16,86,80,25,87,159,232,165,48,250,250,16,159,20,66,172,248,113,223,123,192,200,103,199,167,173,117,114,8,67,205,206,111,38,149,173,127,112,45,17,24,21,63,164,183,251,135,24,208,158,26,207,232,39,162,115,143,66,176,198,32,172,8,122,71,201,160,50,175,62,24,142,200,91,10,59,103,181,178,135,0,208,47,80,56,105,151,236,95,12,133,89,240,226,61,229,151,135,101,134,135,209,221,58,224,180,207,143,79,90,119,51,40,63,234,228,16,134,82,88,119,227,64,237,216,13,248,81,191,104,240,43,248,161,72,151,159,196,90,34,48,42,226,158,87,79,127,73,111,246,199,245,8,147,213,64,167,125,109,252,192,24,53,159,208,78,141,35,183,43,159,150,24,197,39,42,127,160,186,253,71,25,2,65,32,124,16,244,143,146,168,72,232,247,155,20,88,61,35,168,63,88,49,29,144,182,137,161,247,211,20,118,207,106,172,202,168,15,190,127,7,225,6,195,96,132,94,160,112,210,230,28,23,183,244,169,184,89,76,21,223,60,209,194,231,133,105,126,128,224,123,203,47,14,195,119,72,107,203,13,15,162,115,177,104,199,97,4,199,41,217,184,160,76,68,111,152,245,252,211,255,144,238,102,80,126,86,218,55,27,14,185,39,77,182,5,64,40,164,176,239,198,28,12,136,163,129,219,176,26,57,103,215,127,43,210,120,145,147,110,31,244,59,38,247,3,131,154,144,102,145,47,63,136,41,147,88,237,180,68,96,84,12,248,7,49,30,77,168,223,166,241,207,186,254,146,223,236,70,46,184,137,84,155,23,103,236,39,112,2,113,240,72,187,201,76,47,222,219,249,128,48,99,69,231,85,107,63,160,156,211,131,199,249,193,54,104,23,121,138,15,114,228,93,55,203,92,225,80,174,78,84,255,64,246,232,152,37,174,139,136,115,22,55,239,22,4,130,64,248,188,62,39,157,33,233,31,36,153,85,120,65,139,224,215,175,51,92,176,202,237,89,182,59,85,229,209,94,71,80,126,176,255,236,25,213,98,59,33,108,218,135,70,9,200,50,233,231,112,142,142,130,40,237,158,212,144,81,249,177,130,228,86,95,58,88,49,58,167,143,9,131,31,51,110,230,13,134,193,8,181,58,166,109,189,64,225,164,5,252,134,193,23,73,41,47,175,245,78,74,50,34,118,243,138,158,17,150,152,43,190,120,32,151,217,29,120,244,201,75,192,72,174,46,210,253,1,192,106,65,102,165,247,150,94,28,79,42,57,121,93,159,150,151,229,35,241,242,77,107,25,5,245,215,126,96,231,98,209,142,95,222,182,235,194,9,142,82,122,181,233,55,104,0,70,217,208,188,33,188,136,223,49,234,48,99,86,143,34,214,249,97,154,106,158,4,7,189,166,189,191,1,193,216,173,180,110,54,21,8,9,83,29,114,78,154,165,206,41,255,183,123,134,17,15,199,225,116,146,16,217,205,42,172,190,168,56,25,17,70,128,165,118,35,216,198,102,117,96,122,1,16,114,207,174,254,202,115,201,155,87,164,241,34,239,24,150,71,253,173,57,169,69,17,94,204,118,77,238,6,206,241,137,99,220,68,38,141,100,248,65,232,249,47,121,81,65,147,30,52,83,38,177,218,235,154,214,191,179,249,198,233,11,69,161,140,25,240,14,98,161,76,105,7,60,155,81,190,132,39,54,219,150,146,153,53,46,46,254,80,38,84,185,153,158,232,222,252,140,93,113,18,52,225,22,119,169,54,46,206,17,138,73,171,3,63,230,69,187,131,129,32,227,224,145,118,91,92,246,19,73,233,89,253,241,85,62,152,108,130,6,33,212,62,97,68,198,139,206,170,126,55,169,207,214,127,65,56,110,195,38,93,124,118,137,179,196,202,238,214,89,29,214,111,225,161,177,10,243,20,30,228,75,168,121,129,19,203,105,215,171,119,14,178,185,194,161,92,1,126,198,57,156,169,254,128,36,21,153,229,54,160,54,11,142,28,81,110,134,102,22,167,62,218,113,194,44,111,222,44,148,211,185,73,9,4,129,240,177,184,230,149,163,13,73,123,27,177,46,30,67,210,62,72,251,110,89,45,233,219,246,195,81,103,145,166,204,176,169,31,116,12,206,122,102,185,97,148,222,5,6,241,16,0,17,0,18,0,0,0,8,0,7,0,9,0,6,0,10,0,5,0,11,0,4,0,12,0,3,0,13,0,2,0,14,0,1,0,15,0,0,0,105,110,99,111,114,114,101,99,116,32,104,101,97,100,101,114,32,99,104,101,99,107,0,0,117,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,109,101,116,104,111,100,0,0,0,0,0,0,105,110,118,97,108,105,100,32,119,105,110,100,111,119,32,115,105,122,101,0,0,0,0,0,117,110,107,110,111,119,110,32,104,101,97,100,101,114,32,102,108,97,103,115,32,115,101,116,0,0,0,0,0,0,0,0,104,101,97,100,101,114,32,99,114,99,32,109,105,115,109,97,116,99,104,0,0,0,0,0,105,110,118,97,108,105,100,32,98,108,111,99,107,32,116,121,112,101,0,0,0,0,0,0,105,110,118,97,108,105,100,32,115,116,111,114,101,100,32,98,108,111,99,107,32,108,101,110,103,116,104,115,0,0,0,0,116,111,111,32,109,97,110,121,32,108,101,110,103,116,104,32,111,114,32,100,105,115,116,97,110,99,101,32,115,121,109,98,111,108,115,0,0,0,0,0,105,110,118,97,108,105,100,32,99,111,100,101,32,108,101,110,103,116,104,115,32,115,101,116,0,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,98,105,116,32,108,101,110,103,116,104,32,114,101,112,101,97,116,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,99,111,100,101,32,45,45,32,109,105,115,115,105,110,103,32,101,110,100,45,111,102,45,98,108,111,99,107,0,0,0,0,105,110,118,97,108,105,100,32,108,105,116,101,114,97,108,47,108,101,110,103,116,104,115,32,115,101,116,0,0,0,0,0,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,115,32,115,101,116,0,0,0,105,110,118,97,108,105,100,32,108,105,116,101,114,97,108,47,108,101,110,103,116,104,32,99,111,100,101,0,0,0,0,0,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,99,111,100,101,0,0,0,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,116,111,111,32,102,97,114,32,98,97,99,107,0,0,0,105,110,99,111,114,114,101,99,116,32,100,97,116,97,32,99,104,101,99,107,0,0,0,0,105,110,99,111,114,114,101,99,116,32,108,101,110,103,116,104,32,99,104,101,99,107,0,0,96,7,0,0,0,8,80,0,0,8,16,0,20,8,115,0,18,7,31,0,0,8,112,0,0,8,48,0,0,9,192,0,16,7,10,0,0,8,96,0,0,8,32,0,0,9,160,0,0,8,0,0,0,8,128,0,0,8,64,0,0,9,224,0,16,7,6,0,0,8,88,0,0,8,24,0,0,9,144,0,19,7,59,0,0,8,120,0,0,8,56,0,0,9,208,0,17,7,17,0,0,8,104,0,0,8,40,0,0,9,176,0,0,8,8,0,0,8,136,0,0,8,72,0,0,9,240,0,16,7,4,0,0,8,84,0,0,8,20,0,21,8,227,0,19,7,43,0,0,8,116,0,0,8,52,0,0,9,200,0,17,7,13,0,0,8,100,0,0,8,36,0,0,9,168,0,0,8,4,0,0,8,132,0,0,8,68,0,0,9,232,0,16,7,8,0,0,8,92,0,0,8,28,0,0,9,152,0,20,7,83,0,0,8,124,0,0,8,60,0,0,9,216,0,18,7,23,0,0,8,108,0,0,8,44,0,0,9,184,0,0,8,12,0,0,8,140,0,0,8,76,0,0,9,248,0,16,7,3,0,0,8,82,0,0,8,18,0,21,8,163,0,19,7,35,0,0,8,114,0,0,8,50,0,0,9,196,0,17,7,11,0,0,8,98,0,0,8,34,0,0,9,164,0,0,8,2,0,0,8,130,0,0,8,66,0,0,9,228,0,16,7,7,0,0,8,90,0,0,8,26,0,0,9,148,0,20,7,67,0,0,8,122,0,0,8,58,0,0,9,212,0,18,7,19,0,0,8,106,0,0,8,42,0,0,9,180,0,0,8,10,0,0,8,138,0,0,8,74,0,0,9,244,0,16,7,5,0,0,8,86,0,0,8,22,0,64,8,0,0,19,7,51,0,0,8,118,0,0,8,54,0,0,9,204,0,17,7,15,0,0,8,102,0,0,8,38,0,0,9,172,0,0,8,6,0,0,8,134,0,0,8,70,0,0,9,236,0,16,7,9,0,0,8,94,0,0,8,30,0,0,9,156,0,20,7,99,0,0,8,126,0,0,8,62,0,0,9,220,0,18,7,27,0,0,8,110,0,0,8,46,0,0,9,188,0,0,8,14,0,0,8,142,0,0,8,78,0,0,9,252,0,96,7,0,0,0,8,81,0,0,8,17,0,21,8,131,0,18,7,31,0,0,8,113,0,0,8,49,0,0,9,194,0,16,7,10,0,0,8,97,0,0,8,33,0,0,9,162,0,0,8,1,0,0,8,129,0,0,8,65,0,0,9,226,0,16,7,6,0,0,8,89,0,0,8,25,0,0,9,146,0,19,7,59,0,0,8,121,0,0,8,57,0,0,9,210,0,17,7,17,0,0,8,105,0,0,8,41,0,0,9,178,0,0,8,9,0,0,8,137,0,0,8,73,0,0,9,242,0,16,7,4,0,0,8,85,0,0,8,21,0,16,8,2,1,19,7,43,0,0,8,117,0,0,8,53,0,0,9,202,0,17,7,13,0,0,8,101,0,0,8,37,0,0,9,170,0,0,8,5,0,0,8,133,0,0,8,69,0,0,9,234,0,16,7,8,0,0,8,93,0,0,8,29,0,0,9,154,0,20,7,83,0,0,8,125,0,0,8,61,0,0,9,218,0,18,7,23,0,0,8,109,0,0,8,45,0,0,9,186,0,0,8,13,0,0,8,141,0,0,8,77,0,0,9,250,0,16,7,3,0,0,8,83,0,0,8,19,0,21,8,195,0,19,7,35,0,0,8,115,0,0,8,51,0,0,9,198,0,17,7,11,0,0,8,99,0,0,8,35,0,0,9,166,0,0,8,3,0,0,8,131,0,0,8,67,0,0,9,230,0,16,7,7,0,0,8,91,0,0,8,27,0,0,9,150,0,20,7,67,0,0,8,123,0,0,8,59,0,0,9,214,0,18,7,19,0,0,8,107,0,0,8,43,0,0,9,182,0,0,8,11,0,0,8,139,0,0,8,75,0,0,9,246,0,16,7,5,0,0,8,87,0,0,8,23,0,64,8,0,0,19,7,51,0,0,8,119,0,0,8,55,0,0,9,206,0,17,7,15,0,0,8,103,0,0,8,39,0,0,9,174,0,0,8,7,0,0,8,135,0,0,8,71,0,0,9,238,0,16,7,9,0,0,8,95,0,0,8,31,0,0,9,158,0,20,7,99,0,0,8,127,0,0,8,63,0,0,9,222,0,18,7,27,0,0,8,111,0,0,8,47,0,0,9,190,0,0,8,15,0,0,8,143,0,0,8,79,0,0,9,254,0,96,7,0,0,0,8,80,0,0,8,16,0,20,8,115,0,18,7,31,0,0,8,112,0,0,8,48,0,0,9,193,0,16,7,10,0,0,8,96,0,0,8,32,0,0,9,161,0,0,8,0,0,0,8,128,0,0,8,64,0,0,9,225,0,16,7,6,0,0,8,88,0,0,8,24,0,0,9,145,0,19,7,59,0,0,8,120,0,0,8,56,0,0,9,209,0,17,7,17,0,0,8,104,0,0,8,40,0,0,9,177,0,0,8,8,0,0,8,136,0,0,8,72,0,0,9,241,0,16,7,4,0,0,8,84,0,0,8,20,0,21,8,227,0,19,7,43,0,0,8,116,0,0,8,52,0,0,9,201,0,17,7,13,0,0,8,100,0,0,8,36,0,0,9,169,0,0,8,4,0,0,8,132,0,0,8,68,0,0,9,233,0,16,7,8,0,0,8,92,0,0,8,28,0,0,9,153,0,20,7,83,0,0,8,124,0,0,8,60,0,0,9,217,0,18,7,23,0,0,8,108,0,0,8,44,0,0,9,185,0,0,8,12,0,0,8,140,0,0,8,76,0,0,9,249,0,16,7,3,0,0,8,82,0,0,8,18,0,21,8,163,0,19,7,35,0,0,8,114,0,0,8,50,0,0,9,197,0,17,7,11,0,0,8,98,0,0,8,34,0,0,9,165,0,0,8,2,0,0,8,130,0,0,8,66,0,0,9,229,0,16,7,7,0,0,8,90,0,0,8,26,0,0,9,149,0,20,7,67,0,0,8,122,0,0,8,58,0,0,9,213,0,18,7,19,0,0,8,106,0,0,8,42,0,0,9,181,0,0,8,10,0,0,8,138,0,0,8,74,0,0,9,245,0,16,7,5,0,0,8,86,0,0,8,22,0,64,8,0,0,19,7,51,0,0,8,118,0,0,8,54,0,0,9,205,0,17,7,15,0,0,8,102,0,0,8,38,0,0,9,173,0,0,8,6,0,0,8,134,0,0,8,70,0,0,9,237,0,16,7,9,0,0,8,94,0,0,8,30,0,0,9,157,0,20,7,99,0,0,8,126,0,0,8,62,0,0,9,221,0,18,7,27,0,0,8,110,0,0,8,46,0,0,9,189,0,0,8,14,0,0,8,142,0,0,8,78,0,0,9,253,0,96,7,0,0,0,8,81,0,0,8,17,0,21,8,131,0,18,7,31,0,0,8,113,0,0,8,49,0,0,9,195,0,16,7,10,0,0,8,97,0,0,8,33,0,0,9,163,0,0,8,1,0,0,8,129,0,0,8,65,0,0,9,227,0,16,7,6,0,0,8,89,0,0,8,25,0,0,9,147,0,19,7,59,0,0,8,121,0,0,8,57,0,0,9,211,0,17,7,17,0,0,8,105,0,0,8,41,0,0,9,179,0,0,8,9,0,0,8,137,0,0,8,73,0,0,9,243,0,16,7,4,0,0,8,85,0,0,8,21,0,16,8,2,1,19,7,43,0,0,8,117,0,0,8,53,0,0,9,203,0,17,7,13,0,0,8,101,0,0,8,37,0,0,9,171,0,0,8,5,0,0,8,133,0,0,8,69,0,0,9,235,0,16,7,8,0,0,8,93,0,0,8,29,0,0,9,155,0,20,7,83,0,0,8,125,0,0,8,61,0,0,9,219,0,18,7,23,0,0,8,109,0,0,8,45,0,0,9,187,0,0,8,13,0,0,8,141,0,0,8,77,0,0,9,251,0,16,7,3,0,0,8,83,0,0,8,19,0,21,8,195,0,19,7,35,0,0,8,115,0,0,8,51,0,0,9,199,0,17,7,11,0,0,8,99,0,0,8,35,0,0,9,167,0,0,8,3,0,0,8,131,0,0,8,67,0,0,9,231,0,16,7,7,0,0,8,91,0,0,8,27,0,0,9,151,0,20,7,67,0,0,8,123,0,0,8,59,0,0,9,215,0,18,7,19,0,0,8,107,0,0,8,43,0,0,9,183,0,0,8,11,0,0,8,139,0,0,8,75,0,0,9,247,0,16,7,5,0,0,8,87,0,0,8,23,0,64,8,0,0,19,7,51,0,0,8,119,0,0,8,55,0,0,9,207,0,17,7,15,0,0,8,103,0,0,8,39,0,0,9,175,0,0,8,7,0,0,8,135,0,0,8,71,0,0,9,239,0,16,7,9,0,0,8,95,0,0,8,31,0,0,9,159,0,20,7,99,0,0,8,127,0,0,8,63,0,0,9,223,0,18,7,27,0,0,8,111,0,0,8,47,0,0,9,191,0,0,8,15,0,0,8,143,0,0,8,79,0,0,9,255,0,16,5,1,0,23,5,1,1,19,5,17,0,27,5,1,16,17,5,5,0,25,5,1,4,21,5,65,0,29,5,1,64,16,5,3,0,24,5,1,2,20,5,33,0,28,5,1,32,18,5,9,0,26,5,1,8,22,5,129,0,64,5,0,0,16,5,2,0,23,5,129,1,19,5,25,0,27,5,1,24,17,5,7,0,25,5,1,6,21,5,97,0,29,5,1,96,16,5,4,0,24,5,1,3,20,5,49,0,28,5,1,48,18,5,13,0,26,5,1,12,22,5,193,0,64,5,0,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,13,0,15,0,17,0,19,0,23,0,27,0,31,0,35,0,43,0,51,0,59,0,67,0,83,0,99,0,115,0,131,0,163,0,195,0,227,0,2,1,0,0,0,0,0,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,17,0,17,0,17,0,17,0,18,0,18,0,18,0,18,0,19,0,19,0,19,0,19,0,20,0,20,0,20,0,20,0,21,0,21,0,21,0,21,0,16,0,73,0,195,0,0,0,1,0,2,0,3,0,4,0,5,0,7,0,9,0,13,0,17,0,25,0,33,0,49,0,65,0,97,0,129,0,193,0,1,1,129,1,1,2,1,3,1,4,1,6,1,8,1,12,1,16,1,24,1,32,1,48,1,64,1,96,0,0,0,0,16,0,16,0,16,0,16,0,17,0,17,0,18,0,18,0,19,0,19,0,20,0,20,0,21,0,21,0,22,0,22,0,23,0,23,0,24,0,24,0,25,0,25,0,26,0,26,0,27,0,27,0,28,0,28,0,29,0,29,0,64,0,64,0,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,116,111,111,32,102,97,114,32,98,97,99,107,0,0,0,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,99,111,100,101,0,0,0,105,110,118,97,108,105,100,32,108,105,116,101,114,97,108,47,108,101,110,103,116,104,32,99,111,100,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  var GL={counter:1,lastError:0,buffers:[],programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],currArrayBuffer:0,currElementArrayBuffer:0,byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.createLog2ceilLookup(GL.MAX_TEMP_BUFFER_SIZE);
        Browser.moduleContextCreatedCallbacks.push(GL.initExtensions);
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:16,miniTempBuffer:null,miniTempBufferViews:[0],MAX_TEMP_BUFFER_SIZE:2097152,tempVertexBuffers1:[],tempVertexBufferCounters1:[],tempVertexBuffers2:[],tempVertexBufferCounters2:[],numTempVertexBuffersPerSize:64,tempIndexBuffers:[],tempQuadIndexBuffer:null,log2ceilLookup:null,createLog2ceilLookup:function (maxValue) {
        GL.log2ceilLookup = new Uint8Array(maxValue+1);
        var log2 = 0;
        var pow2 = 1;
        GL.log2ceilLookup[0] = 0;
        for(var i = 1; i <= maxValue; ++i) {
          if (i > pow2) {
            pow2 <<= 1;
            ++log2;
          }
          GL.log2ceilLookup[i] = log2;
        }
      },generateTempBuffers:function (quads) {
        var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
        GL.tempVertexBufferCounters1.length = GL.tempVertexBufferCounters2.length = largestIndex+1;
        GL.tempVertexBuffers1.length = GL.tempVertexBuffers2.length = largestIndex+1;
        GL.tempIndexBuffers.length = largestIndex+1;
        for(var i = 0; i <= largestIndex; ++i) {
          GL.tempIndexBuffers[i] = null; // Created on-demand
          GL.tempVertexBufferCounters1[i] = GL.tempVertexBufferCounters2[i] = 0;
          var ringbufferLength = GL.numTempVertexBuffersPerSize;
          GL.tempVertexBuffers1[i] = [];
          GL.tempVertexBuffers2[i] = [];
          var ringbuffer1 = GL.tempVertexBuffers1[i];
          var ringbuffer2 = GL.tempVertexBuffers2[i];
          ringbuffer1.length = ringbuffer2.length = ringbufferLength;
          for(var j = 0; j < ringbufferLength; ++j) {
            ringbuffer1[j] = ringbuffer2[j] = null; // Created on-demand
          }
        }
  
        if (quads) {
          // GL_QUAD indexes can be precalculated
          GL.tempQuadIndexBuffer = GLctx.createBuffer();
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.tempQuadIndexBuffer);
          var numIndexes = GL.MAX_TEMP_BUFFER_SIZE >> 1;
          var quadIndexes = new Uint16Array(numIndexes);
          var i = 0, v = 0;
          while (1) {
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+1;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+3;
            if (i >= numIndexes) break;
            v += 4;
          }
          GLctx.bufferData(GLctx.ELEMENT_ARRAY_BUFFER, quadIndexes, GLctx.STATIC_DRAW);
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, null);
        }
      },getTempVertexBuffer:function getTempVertexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup[sizeBytes];
        var ringbuffer = GL.tempVertexBuffers1[idx];
        var nextFreeBufferIndex = GL.tempVertexBufferCounters1[idx];
        GL.tempVertexBufferCounters1[idx] = (GL.tempVertexBufferCounters1[idx]+1) & (GL.numTempVertexBuffersPerSize-1);
        var vbo = ringbuffer[nextFreeBufferIndex];
        if (vbo) {
          return vbo;
        }
        var prevVBO = GLctx.getParameter(GLctx.ARRAY_BUFFER_BINDING);
        ringbuffer[nextFreeBufferIndex] = GLctx.createBuffer();
        GLctx.bindBuffer(GLctx.ARRAY_BUFFER, ringbuffer[nextFreeBufferIndex]);
        GLctx.bufferData(GLctx.ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
        GLctx.bindBuffer(GLctx.ARRAY_BUFFER, prevVBO);
        return ringbuffer[nextFreeBufferIndex];
      },getTempIndexBuffer:function getTempIndexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup[sizeBytes];
        var ibo = GL.tempIndexBuffers[idx];
        if (ibo) {
          return ibo;
        }
        var prevIBO = GLctx.getParameter(GLctx.ELEMENT_ARRAY_BUFFER_BINDING);
        GL.tempIndexBuffers[idx] = GLctx.createBuffer();
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.tempIndexBuffers[idx]);
        GLctx.bufferData(GLctx.ELEMENT_ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, prevIBO);
        return GL.tempIndexBuffers[idx];
      },newRenderingFrameStarted:function newRenderingFrameStarted() {
        var vb = GL.tempVertexBuffers1;
        GL.tempVertexBuffers1 = GL.tempVertexBuffers2;
        GL.tempVertexBuffers2 = vb;
        vb = GL.tempVertexBufferCounters1;
        GL.tempVertexBufferCounters1 = GL.tempVertexBufferCounters2;
        GL.tempVertexBufferCounters2 = vb;
        var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
        for(var i = 0; i <= largestIndex; ++i) {
          GL.tempVertexBufferCounters1[i] = 0;
        }
      },findToken:function (source, token) {
        function isIdentChar(ch) {
          if (ch >= 48 && ch <= 57) // 0-9
            return true;
          if (ch >= 65 && ch <= 90) // A-Z
            return true;
          if (ch >= 97 && ch <= 122) // a-z
            return true;
          return false;
        }
        var i = -1;
        do {
          i = source.indexOf(token, i + 1);
          if (i < 0) {
            break;
          }
          if (i > 0 && isIdentChar(source[i - 1])) {
            continue;
          }
          i += token.length;
          if (i < source.length - 1 && isIdentChar(source[i + 1])) {
            continue;
          }
          return true;
        } while (true);
        return false;
      },getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        // Let's see if we need to enable the standard derivatives extension
        type = GLctx.getShaderParameter(GL.shaders[shader], 0x8B4F /* GL_SHADER_TYPE */);
        if (type == 0x8B30 /* GL_FRAGMENT_SHADER */) {
          if (GL.findToken(source, "dFdx") ||
              GL.findToken(source, "dFdy") ||
              GL.findToken(source, "fwidth")) {
            source = "#extension GL_OES_standard_derivatives : enable\n" + source;
            var extension = GLctx.getExtension("OES_standard_derivatives");
          }
        }
        return source;
      },computeImageSize:function (width, height, sizePerPixel, alignment) {
        function roundedToNextMultipleOf(x, y) {
          return Math.floor((x + y - 1) / y) * y
        }
        var plainRowSize = width * sizePerPixel;
        var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
        return (height <= 0) ? 0 :
                 ((height - 1) * alignedRowSize + plainRowSize);
      },get:function (name_, p, type) {
        // Guard against user passing a null pointer.
        // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
        // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
        // better to report an error instead of doing anything random.
        if (!p) {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
          return;
        }
        var ret = undefined;
        switch(name_) { // Handle a few trivial GLES values
          case 0x8DFA: // GL_SHADER_COMPILER
            ret = 1;
            break;
          case 0x8DF8: // GL_SHADER_BINARY_FORMATS
            if (type !== 'Integer') {
              GL.recordError(0x0500); // GL_INVALID_ENUM
            }
            return; // Do not write anything to the out pointer, since no binary formats are supported.
          case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
            ret = 0;
            break;
          case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
            // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
            // so implement it ourselves to allow C++ GLES2 code get the length.
            var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
            ret = formats.length;
            break;
          case 0x8B9A: // GL_IMPLEMENTATION_COLOR_READ_TYPE
            ret = 0x1401; // GL_UNSIGNED_BYTE
            break;
          case 0x8B9B: // GL_IMPLEMENTATION_COLOR_READ_FORMAT
            ret = 0x1908; // GL_RGBA
            break;
        }
  
        if (ret === undefined) {
          var result = GLctx.getParameter(name_);
          switch (typeof(result)) {
            case "number":
              ret = result;
              break;
            case "boolean":
              ret = result ? 1 : 0;
              break;
            case "string":
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            case "object":
              if (result === null) {
                // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
                // can mean an invalid name_, which we need to report as an error
                switch(name_) {
                  case 0x8894: // ARRAY_BUFFER_BINDING
                  case 0x8B8D: // CURRENT_PROGRAM
                  case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                  case 0x8CA6: // FRAMEBUFFER_BINDING
                  case 0x8CA7: // RENDERBUFFER_BINDING
                  case 0x8069: // TEXTURE_BINDING_2D
                  case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                    ret = 0;
                    break;
                  }
                  default: {
                    GL.recordError(0x0500); // GL_INVALID_ENUM
                    return;
                  }
                }
              } else if (result instanceof Float32Array ||
                         result instanceof Uint32Array ||
                         result instanceof Int32Array ||
                         result instanceof Array) {
                for (var i = 0; i < result.length; ++i) {
                  switch (type) {
                    case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                    case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                    case 'Boolean': HEAP8[(((p)+(i))|0)]=result[i] ? 1 : 0;    break;
                    default: throw 'internal glGet error, bad type: ' + type;
                  }
                }
                return;
              } else if (result instanceof WebGLBuffer ||
                         result instanceof WebGLProgram ||
                         result instanceof WebGLFramebuffer ||
                         result instanceof WebGLRenderbuffer ||
                         result instanceof WebGLTexture) {
                ret = result.name | 0;
              } else {
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return;
              }
              break;
            default:
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
          }
        }
  
        switch (type) {
          case 'Integer': HEAP32[((p)>>2)]=ret;    break;
          case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
          case 'Boolean': HEAP8[(p)]=ret ? 1 : 0; break;
          default: throw 'internal glGet error, bad type: ' + type;
        }
      },getTexPixelData:function (type, format, width, height, pixels, internalFormat) {
        var sizePerPixel;
        switch (type) {
          case 0x1401 /* GL_UNSIGNED_BYTE */:
            switch (format) {
              case 0x1906 /* GL_ALPHA */:
              case 0x1909 /* GL_LUMINANCE */:
                sizePerPixel = 1;
                break;
              case 0x1907 /* GL_RGB */:
                sizePerPixel = 3;
                break;
              case 0x1908 /* GL_RGBA */:
                sizePerPixel = 4;
                break;
              case 0x190A /* GL_LUMINANCE_ALPHA */:
                sizePerPixel = 2;
                break;
              default:
                throw 'Invalid format (' + format + ')';
            }
            break;
          case 0x1403 /* GL_UNSIGNED_SHORT */:
            if (format == 0x1902 /* GL_DEPTH_COMPONENT */) {
              sizePerPixel = 2;
            } else {
              throw 'Invalid format (' + format + ')';
            }
            break;
          case 0x1405 /* GL_UNSIGNED_INT */:
            if (format == 0x1902 /* GL_DEPTH_COMPONENT */) {
              sizePerPixel = 4;
            } else {
              throw 'Invalid format (' + format + ')';
            }
            break;
          case 0x84FA /* UNSIGNED_INT_24_8_WEBGL */:
            sizePerPixel = 4;
            break;
          case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
          case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
          case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
            sizePerPixel = 2;
            break;
          case 0x1406 /* GL_FLOAT */:
            switch (format) {
              case 0x1907 /* GL_RGB */:
                sizePerPixel = 3*4;
                break;
              case 0x1908 /* GL_RGBA */:
                sizePerPixel = 4*4;
                break;
              default:
                throw 'Invalid format (' + format + ')';
            }
            internalFormat = GLctx.RGBA;
            break;
          default:
            throw 'Invalid type (' + type + ')';
        }
        var bytes = GL.computeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
        if (type == 0x1401 /* GL_UNSIGNED_BYTE */) {
          pixels = HEAPU8.subarray((pixels),(pixels+bytes));
        } else if (type == 0x1406 /* GL_FLOAT */) {
          pixels = HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else if (type == 0x1405 /* GL_UNSIGNED_INT */ || type == 0x84FA /* UNSIGNED_INT_24_8_WEBGL */) {
          pixels = HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else {
          pixels = HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        }
        return {
          pixels: pixels,
          internalFormat: internalFormat
        }
      },initExtensions:function () {
        if (GL.initExtensions.done) return;
        GL.initExtensions.done = true;
  
        if (!Module.useWebGL) return; // an app might link both gl and 2d backends
  
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
  
        GL.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
        GL.compressionExt = GLctx.getExtension('WEBGL_compressed_texture_s3tc') ||
                            GLctx.getExtension('MOZ_WEBGL_compressed_texture_s3tc') ||
                            GLctx.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');
  
        GL.anisotropicExt = GLctx.getExtension('EXT_texture_filter_anisotropic') ||
                            GLctx.getExtension('MOZ_EXT_texture_filter_anisotropic') ||
                            GLctx.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
  
        GL.floatExt = GLctx.getExtension('OES_texture_float');
  
        // Extension available from Firefox 26 and Google Chrome 30
        GL.instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
        
        // Extension available from Firefox 25 and WebKit
        GL.vaoExt = Module.ctx.getExtension('OES_vertex_array_object');
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod" ];
  
        function shouldEnableAutomatically(extension) {
          for(var i in automaticallyEnabledExtensions) {
            var include = automaticallyEnabledExtensions[i];
            if (ext.indexOf(include) != -1) {
              return true;
            }
          }
          return false;
        }
  
        var extensions = GLctx.getSupportedExtensions();
        for(var e in extensions) {
          var ext = extensions[e].replace('MOZ_', '').replace('WEBKIT_', '');
          if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
            GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
          }
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};function _glPopMatrix() {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrix[GLImmediate.currentMatrix] = GLImmediate.matrixStack[GLImmediate.currentMatrix].pop();
    }

  var _UItoF=true;

  function _glClearColor(x0, x1, x2, x3) { GLctx.clearColor(x0, x1, x2, x3) }

   
  Module["_i64Add"] = _i64Add;

  function _setlocale(category, locale) {
      if (!_setlocale.ret) _setlocale.ret = allocate([0], 'i8', ALLOC_NORMAL);
      return _setlocale.ret;
    }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = Math.floor(idx / this.chunkSize);
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var chunkSize = 1024*1024; // Chunk size in bytes
  
            if (!hasByteServing) chunkSize = datalength;
  
            // Function to get a range from the remote URL.
            var doXHR = (function(from, to) {
              if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
              // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, false);
              if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
              // Some hints to the browser that we want binary data.
              if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType('text/plain; charset=x-user-defined');
              }
  
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              if (xhr.response !== undefined) {
                return new Uint8Array(xhr.response || []);
              } else {
                return intArrayFromString(xhr.responseText || '', true);
              }
            });
            var lazyArray = this;
            lazyArray.setDataGetter(function(chunkNum) {
              var start = chunkNum * chunkSize;
              var end = (chunkNum+1) * chunkSize - 1; // including this byte
              end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
              return lazyArray.chunks[chunkNum];
            });
  
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  var _FtoIHigh=true;

  
  var GLFW={keyFunc:null,charFunc:null,mouseButtonFunc:null,mousePosFunc:null,mouseWheelFunc:null,resizeFunc:null,closeFunc:null,refreshFunc:null,params:null,initTime:null,wheelPos:0,buttons:0,keys:0,initWindowWidth:640,initWindowHeight:480,windowX:0,windowY:0,windowWidth:0,windowHeight:0,DOMToGLFWKeyCode:function (keycode) {
        switch (keycode) {
          case 0x08: return 295 ; // DOM_VK_BACKSPACE -> GLFW_KEY_BACKSPACE
          case 0x09: return 293 ; // DOM_VK_TAB -> GLFW_KEY_TAB
          case 0x0D: return 294 ; // DOM_VK_ENTER -> GLFW_KEY_ENTER
          case 0x1B: return 257 ; // DOM_VK_ESCAPE -> GLFW_KEY_ESC
          case 0x6A: return 313 ; // DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
          case 0x6B: return 315 ; // DOM_VK_ADD -> GLFW_KEY_KP_ADD
          case 0x6D: return 314 ; // DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
          case 0x6E: return 316 ; // DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
          case 0x6F: return 312 ; // DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
          case 0x70: return 258 ; // DOM_VK_F1 -> GLFW_KEY_F1
          case 0x71: return 259 ; // DOM_VK_F2 -> GLFW_KEY_F2
          case 0x72: return 260 ; // DOM_VK_F3 -> GLFW_KEY_F3
          case 0x73: return 261 ; // DOM_VK_F4 -> GLFW_KEY_F4
          case 0x74: return 262 ; // DOM_VK_F5 -> GLFW_KEY_F5
          case 0x75: return 263 ; // DOM_VK_F6 -> GLFW_KEY_F6
          case 0x76: return 264 ; // DOM_VK_F7 -> GLFW_KEY_F7
          case 0x77: return 265 ; // DOM_VK_F8 -> GLFW_KEY_F8
          case 0x78: return 266 ; // DOM_VK_F9 -> GLFW_KEY_F9
          case 0x79: return 267 ; // DOM_VK_F10 -> GLFW_KEY_F10
          case 0x7a: return 268 ; // DOM_VK_F11 -> GLFW_KEY_F11
          case 0x7b: return 269 ; // DOM_VK_F12 -> GLFW_KEY_F12
          case 0x25: return 285 ; // DOM_VK_LEFT -> GLFW_KEY_LEFT
          case 0x26: return 283 ; // DOM_VK_UP -> GLFW_KEY_UP
          case 0x27: return 286 ; // DOM_VK_RIGHT -> GLFW_KEY_RIGHT
          case 0x28: return 284 ; // DOM_VK_DOWN -> GLFW_KEY_DOWN
          case 0x21: return 298 ; // DOM_VK_PAGE_UP -> GLFW_KEY_PAGEUP
          case 0x22: return 299 ; // DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGEDOWN
          case 0x24: return 300 ; // DOM_VK_HOME -> GLFW_KEY_HOME
          case 0x23: return 301 ; // DOM_VK_END -> GLFW_KEY_END
          case 0x2d: return 296 ; // DOM_VK_INSERT -> GLFW_KEY_INSERT
          case 16  : return 287 ; // DOM_VK_SHIFT -> GLFW_KEY_LSHIFT
          case 0x05: return 287 ; // DOM_VK_LEFT_SHIFT -> GLFW_KEY_LSHIFT
          case 0x06: return 288 ; // DOM_VK_RIGHT_SHIFT -> GLFW_KEY_RSHIFT
          case 17  : return 289 ; // DOM_VK_CONTROL -> GLFW_KEY_LCTRL
          case 0x03: return 289 ; // DOM_VK_LEFT_CONTROL -> GLFW_KEY_LCTRL
          case 0x04: return 290 ; // DOM_VK_RIGHT_CONTROL -> GLFW_KEY_RCTRL
          case 18  : return 291 ; // DOM_VK_ALT -> GLFW_KEY_LALT
          case 0x02: return 291 ; // DOM_VK_LEFT_ALT -> GLFW_KEY_LALT
          case 0x01: return 292 ; // DOM_VK_RIGHT_ALT -> GLFW_KEY_RALT
          case 96  : return 302 ; // GLFW_KEY_KP_0
          case 97  : return 303 ; // GLFW_KEY_KP_1
          case 98  : return 304 ; // GLFW_KEY_KP_2
          case 99  : return 305 ; // GLFW_KEY_KP_3
          case 100 : return 306 ; // GLFW_KEY_KP_4
          case 101 : return 307 ; // GLFW_KEY_KP_5
          case 102 : return 308 ; // GLFW_KEY_KP_6
          case 103 : return 309 ; // GLFW_KEY_KP_7
          case 104 : return 310 ; // GLFW_KEY_KP_8
          case 105 : return 311 ; // GLFW_KEY_KP_9
          default  : return keycode;
        };
      },getUnicodeChar:function (value) {
        var output = '';
        if (value > 0xFFFF) {
          value -= 0x10000;
          output += String.fromCharCode(value >>> 10 & 0x3FF | 0xD800);
          value = 0xDC00 | value & 0x3FF;
        }
        output += String.fromCharCode(value);
        return output;
      },onKeyPress:function (event) {
        // charCode is only available whith onKeyPress event
        var char = GLFW.getUnicodeChar(event.charCode);
  
        if (event.charCode) {
          var char = GLFW.getUnicodeChar(event.charCode);
          if (char !== null && GLFW.charFunc) {
            Runtime.dynCall('vii', GLFW.charFunc, [event.charCode, 1]);
          }
        }
      },onKeyChanged:function (event, status) {
        var key = GLFW.DOMToGLFWKeyCode(event.keyCode);
        if (key && GLFW.keyFunc) {
          GLFW.keys[key] = status;
          Runtime.dynCall('vii', GLFW.keyFunc, [key, status]);
        }
      },onKeydown:function (event) {
        GLFW.onKeyChanged(event, 1);// GLFW_PRESS
        // This logic comes directly from the sdl implementation. We cannot
        // call preventDefault on all keydown events otherwise onKeyPress will
        // not get called
        if (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */) {
          event.preventDefault();
        }
      },onKeyup:function (event) {
        GLFW.onKeyChanged(event, 0);// GLFW_RELEASE
      },onMousemove:function (event) {
        /* Send motion event only if the motion changed, prevents
         * spamming our app with uncessary callback call. It does happen in
         * Chrome on Windows.
         */
        var lastX = Browser.mouseX;
        var lastY = Browser.mouseY;
        Browser.calculateMouseEvent(event);
        var newX = Browser.mouseX;
        var newY = Browser.mouseY;
  
        if (event.target == Module["canvas"] && GLFW.mousePosFunc) {
          event.preventDefault();
          Runtime.dynCall('vii', GLFW.mousePosFunc, [lastX, lastY]);
        }
      },onMouseButtonChanged:function (event, status) {
        if (GLFW.mouseButtonFunc == null) {
          return;
        }
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"]) {
          return;
        }
  
        if (status == 1) {// GLFW_PRESS
          try {
            event.target.setCapture();
          } catch (e) {}
        }
  
        event.preventDefault();
  
        // DOM and glfw have different button codes
        var eventButton = event['button'];
        if (eventButton > 0) {
          if (eventButton == 1) {
            eventButton = 2;
          } else {
            eventButton = 1;
          }
        }
        Runtime.dynCall('vii', GLFW.mouseButtonFunc, [eventButton, status]);
      },onMouseButtonDown:function (event) {
        GLFW.buttons |= (1 << event['button']);
        GLFW.onMouseButtonChanged(event, 1);// GLFW_PRESS
      },onMouseButtonUp:function (event) {
        GLFW.buttons &= ~(1 << event['button']);
        GLFW.onMouseButtonChanged(event, 0);// GLFW_RELEASE
      },onMouseWheel:function (event) {
        GLFW.wheelPos += Browser.getMouseWheelDelta(event);
  
        if (GLFW.mouseWheelFunc && event.target == Module["canvas"]) {
          Runtime.dynCall('vi', GLFW.mouseWheelFunc, [GLFW.wheelPos]);
          event.preventDefault();
        }
      },onFullScreenEventChange:function (event) {
        var width;
        var height;
        if (document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          width = screen["width"];
          height = screen["height"];
        } else {
          width = GLFW.windowWidth;
          height = GLFW.windowHeight;
          // TODO set position
          document.removeEventListener('fullscreenchange', GLFW.onFullScreenEventChange, true);
          document.removeEventListener('mozfullscreenchange', GLFW.onFullScreenEventChange, true);
          document.removeEventListener('webkitfullscreenchange', GLFW.onFullScreenEventChange, true);
        }
        Browser.setCanvasSize(width, height);
  
        if (GLFW.resizeFunc) {
          Runtime.dynCall('vii', GLFW.resizeFunc, [width, height]);
        }
      },requestFullScreen:function () {
        var RFS = Module["canvas"]['requestFullscreen'] ||
                  Module["canvas"]['requestFullScreen'] ||
                  Module["canvas"]['mozRequestFullScreen'] ||
                  Module["canvas"]['webkitRequestFullScreen'] ||
                  (function() {});
        RFS.apply(Module["canvas"], []);
      },cancelFullScreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
      }};function _glfwTerminate() {}

  
  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces "//" comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the "#" for "//" again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                url = url + addr + ':' + port;
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

   
  Module["_i64Subtract"] = _i64Subtract;

  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  function _glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }

  var _emscripten_check_longjmp=true;

   
  Module["_strncpy"] = _strncpy;

  function _glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
      GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget,
                                         GL.renderbuffers[renderbuffer]);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  var _emscripten_postinvoke=true;

  
  
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)|0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }function _putchar(c) {
      // int putchar(int c);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/putchar.html
      return _fputc(c, HEAP32[((_stdout)>>2)]);
    } 
  Module["_saveSetjmp"] = _saveSetjmp;


  function _glClear(x0) { GLctx.clear(x0) }

  var _llvm_pow_f32=Math_pow;

  function _glLineWidth(x0) { GLctx.lineWidth(x0) }

  
  
  function __getFloat(text) {
      return /^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?/.exec(text);
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function get() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function unget() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
  
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
  
        if (format[formatIndex] === '%') {
          var nextC = format.indexOf('c', formatIndex+1);
          if (nextC > 0) {
            var maxx = 1;
            if (nextC > formatIndex+1) {
              var sub = format.substring(formatIndex+1, nextC);
              maxx = parseInt(sub);
              if (maxx != sub) maxx = 0;
            }
            if (maxx) {
              var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;
              for (var i = 0; i < maxx; i++) {
                next = get();
                HEAP8[((argPtr++)|0)]=next;
                if (next === 0) return i > 0 ? fields : fields-1; // we failed to read the full length of this field
              }
              formatIndex += nextC - formatIndex + 1;
              continue;
            }
          }
        }
  
        // handle %[...]
        if (format[formatIndex] === '%' && format.indexOf('[', formatIndex+1) > 0) {
          var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(format.substring(formatIndex));
          if (match) {
            var maxNumCharacters = parseInt(match[1]) || Infinity;
            var negateScanList = (match[2] === '^');
            var scanList = match[3];
  
            // expand "middle" dashs into character sets
            var middleDashMatch;
            while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
              var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
              var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
              for (var expanded = ''; rangeStartCharCode <= rangeEndCharCode; expanded += String.fromCharCode(rangeStartCharCode++));
              scanList = scanList.replace(middleDashMatch[1] + '-' + middleDashMatch[2], expanded);
            }
  
            var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
            argIndex += Runtime.getAlignSize('void*', null, true);
            fields++;
  
            for (var i = 0; i < maxNumCharacters; i++) {
              next = get();
              if (negateScanList) {
                if (scanList.indexOf(String.fromCharCode(next)) < 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              } else {
                if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              }
            }
  
            // write out null-terminating character
            HEAP8[((argPtr++)|0)]=0;
            formatIndex += match[0].length;
            
            continue;
          }
        }      
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
  
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            next = get();
            while (next > 0 && (!(next in __scanString.whiteSpace)))  {
              buffer.push(String.fromCharCode(next));
              next = get();
            }
            var m = __getFloat(buffer.join(''));
            var last = m ? m[0].length : 0;
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            
            // Strip the optional 0x prefix for %x.
            if ((type == 'x' || type == 'X') && (next == 48)) {
              var peek = get();
              if (peek == 120 || peek == 88) {
                next = get();
              } else {
                unget();
              }
            }
            
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          if (suppressAssignment) continue;
  
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if (longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,(tempDouble=parseInt(text, 10),(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'X':
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16);
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text);
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text);
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))|0)]=array[j];
              }
              break;
          }
          fields++;
        } else if (format[formatIndex].charCodeAt(0) in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      function get() { return HEAP8[(((s)+(index++))|0)]; };
      function unget() { index--; };
      return __scanString(format, get, unget, varargs);
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _emscripten_cancel_main_loop() {
      Browser.mainLoop.scheduler = null;
      Browser.mainLoop.shouldPause = true;
    }

  function _glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _glTranslatef(x, y, z) {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.translate(GLImmediate.matrix[GLImmediate.currentMatrix], [x, y, z]);
    }

  
  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        
        // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
        // Module['forcedAspectRatio'] = 4 / 3;
        
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'] ||
                                    canvas['msRequestPointerLock'] ||
                                    function(){};
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 document['msExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        return Math.max(-1, Math.min(1, event.type === 'DOMMouseScroll' ? event.detail : -event.wheelDelta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      }};function _glfwOpenWindow(width, height, redbits, greenbits, bluebits, alphabits, depthbits, stencilbits, mode) {
      if (width == 0 && height > 0) {
        width = 4 * height / 3;
      }
      if (width > 0 && height == 0) {
        height = 3 * width / 4;
      }
      GLFW.params[0x00020005] = redbits; // GLFW_RED_BITS
      GLFW.params[0x00020006] = greenbits; // GLFW_GREEN_BITS
      GLFW.params[0x00020007] = bluebits; // GLFW_BLUE_BITS
      GLFW.params[0x00020008] = alphabits; // GLFW_ALPHA_BITS
      GLFW.params[0x00020009] = depthbits; // GLFW_DEPTH_BITS
      GLFW.params[0x0002000A] = stencilbits; // GLFW_STENCIL_BITS
  
      if (mode == 0x00010001) {// GLFW_WINDOW
        Browser.setCanvasSize(GLFW.initWindowWidth = width,
                              GLFW.initWindowHeight = height);
        GLFW.params[0x00030003] = true; // GLFW_STICKY_MOUSE_BUTTONS
      } else if (mode == 0x00010002) {// GLFW_FULLSCREEN
        GLFW.requestFullScreen();
        GLFW.params[0x00030003] = false; // GLFW_STICKY_MOUSE_BUTTONS
      } else {
        throw "Invalid glfwOpenWindow mode.";
      }
  
      var contextAttributes = {
        antialias: (GLFW.params[0x00020013] > 1), // GLFW_FSAA_SAMPLES
        depth: (GLFW.params[0x00020009] > 0), // GLFW_DEPTH_BITS
        stencil: (GLFW.params[0x0002000A] > 0) // GLFW_STENCIL_BITS
      }
      Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
      return 1; // GL_TRUE
    }

  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }

  var _emscripten_prep_setjmp=true;

  function _glDisableClientState(cap) {
      var attrib = GLEmulation.getAttributeFromCapability(cap);
      if (attrib === null) {
        return;
      }
      if (GLImmediate.enabledClientAttributes[attrib]) {
        GLImmediate.enabledClientAttributes[attrib] = false;
        GLImmediate.totalEnabledClientAttributes--;
        GLImmediate.currentRenderer = null; // Will need to change current renderer, since the set of active vertex pointers changed.
        if (GLEmulation.currentVao) delete GLEmulation.currentVao.enabledClientStates[cap];
        GLImmediate.modifiedClientAttributes = true;
      }
    }

  
  
   
  Module["_testSetjmp"] = _testSetjmp;function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }

  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'root';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/emscripten';
        ENV['LANG'] = 'en_US.UTF-8';
        ENV['_'] = './this.program';
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _glGenFramebuffers(n, ids) {
      for (var i = 0; i < n; ++i) {
        var id = GL.getNewId(GL.framebuffers);
        var framebuffer = GLctx.createFramebuffer();
        framebuffer.name = id;
        GL.framebuffers[id] = framebuffer;
        HEAP32[(((ids)+(i*4))>>2)]=id;
      }
    }

  var _llvm_pow_f64=Math_pow;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  function _glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = GL.getNewId(GL.textures);
        var texture = GLctx.createTexture();
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  var _emscripten_preinvoke=true;

  function _glGetIntegerv(name_, p) {
      return GL.get(name_, p, 'Integer');
    }

  function _llvm_bswap_i32(x) {
      return ((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24);
    }

  
  function _emscripten_get_now() {
      if (!_emscripten_get_now.actual) {
        if (ENVIRONMENT_IS_NODE) {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() {
            var t = process['hrtime']();
            return t[0] * 1e3 + t[1] / 1e6;
          }
        } else if (typeof dateNow !== 'undefined') {
          _emscripten_get_now.actual = dateNow;
        } else if (ENVIRONMENT_IS_WEB && window['performance'] && window['performance']['now']) {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() { return window['performance']['now'](); };
        } else {
          _emscripten_get_now.actual = Date.now;
        }
      }
      return _emscripten_get_now.actual();
    }function _clock_gettime(clk_id, tp) {
      // int clock_gettime(clockid_t clk_id, struct timespec *tp);
      var now;
      if (clk_id === 0) {
        now = Date.now();
      } else {
        now = _emscripten_get_now();
      }
      HEAP32[((tp)>>2)]=Math.floor(now/1000); // seconds
      HEAP32[(((tp)+(4))>>2)]=Math.floor((now % 1000)*1000*1000); // nanoseconds
      return 0;
    }

  function _glfwGetMousePos(xpos, ypos) {
      setValue(xpos, Browser.mouseX, 'i32');
      setValue(ypos, Browser.mouseY, 'i32');
    }

  function _glTexCoordPointer(size, type, stride, pointer) {
      GLImmediate.setClientAttribute(GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture, size, type, stride, pointer);
    }

  function _glLoadMatrixf(matrix) {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.set(HEAPF32.subarray((matrix)>>2,(matrix+64)>>2), GLImmediate.matrix[GLImmediate.currentMatrix]);
    }

  function _glGenRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = GL.getNewId(GL.renderbuffers);
        var renderbuffer = GLctx.createRenderbuffer();
        renderbuffer.name = id;
        GL.renderbuffers[id] = renderbuffer;
        HEAP32[(((renderbuffers)+(i*4))>>2)]=id;
      }
    }

  var _cosf=Math_cos;

  
  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function _tmpnam(s, dir, prefix) {
      // char *tmpnam(char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpnam.html
      // NOTE: The dir and prefix arguments are for internal use only.
      var folder = FS.findObject(dir || '/tmp');
      if (!folder || !folder.isFolder) {
        dir = '/tmp';
        folder = FS.findObject(dir);
        if (!folder || !folder.isFolder) return 0;
      }
      var name = prefix || 'file';
      do {
        name += String.fromCharCode(65 + Math.floor(Math.random() * 25));
      } while (name in folder.contents);
      var result = dir + '/' + name;
      if (!_tmpnam.buffer) _tmpnam.buffer = _malloc(256);
      if (!s) s = _tmpnam.buffer;
      writeAsciiToMemory(result, s);
      return s;
    }function _tmpfile() {
      // FILE *tmpfile(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpfile.html
      // TODO: Delete the created file on closing.
      if (_tmpfile.mode) {
        _tmpfile.mode = allocate(intArrayFromString('w+'), 'i8', ALLOC_NORMAL);
      }
      return _fopen(_tmpnam(0), _tmpfile.mode);
    }

  function _glDeleteRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((renderbuffers)+(i*4))>>2)];
        var renderbuffer = GL.renderbuffers[id];
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    }

  function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      if (pixels) {
        var data = GL.getTexPixelData(type, format, width, height, pixels, internalFormat);
        pixels = data.pixels;
        internalFormat = data.internalFormat;
      } else {
        pixels = null;
      }
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
    }

  function _glDisable(x0) { GLctx.disable(x0) }

  function ___errno_location() {
      return ___errno_state;
    }

   
  Module["_memset"] = _memset;

  function _glfwPollEvents() {}

  function _glBindRenderbuffer(target, renderbuffer) {
      GLctx.bindRenderbuffer(target, renderbuffer ? GL.renderbuffers[renderbuffer] : null);
    }

  function _abort() {
      Module['abort']();
    }


  function _glfwInit() {
      GLFW.initTime = Date.now() / 1000;
  
      window.addEventListener("keydown", GLFW.onKeydown, true);
      window.addEventListener("keypress", GLFW.onKeyPress, true);
      window.addEventListener("keyup", GLFW.onKeyup, true);
      window.addEventListener("mousemove", GLFW.onMousemove, true);
      window.addEventListener("mousedown", GLFW.onMouseButtonDown, true);
      window.addEventListener("mouseup", GLFW.onMouseButtonUp, true);
      window.addEventListener('DOMMouseScroll', GLFW.onMouseWheel, true);
      window.addEventListener('mousewheel', GLFW.onMouseWheel, true);
  
      __ATEXIT__.push({ func: function() {
        window.removeEventListener("keydown", GLFW.onKeydown, true);
        window.removeEventListener("keypress", GLFW.onKeyPress, true);
        window.removeEventListener("keyup", GLFW.onKeyup, true);
        window.removeEventListener("mousemove", GLFW.onMousemove, true);
        window.removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
        window.removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
        window.removeEventListener('DOMMouseScroll', GLFW.onMouseWheel, true);
        window.removeEventListener('mousewheel', GLFW.onMouseWheel, true);
        Module["canvas"].width = Module["canvas"].height = 1;
      }});
  
      //TODO: Init with correct values
      GLFW.params = new Array();
      GLFW.params[0x00030001] = true; // GLFW_MOUSE_CURSOR
      GLFW.params[0x00030002] = false; // GLFW_STICKY_KEYS
      GLFW.params[0x00030003] = true; // GLFW_STICKY_MOUSE_BUTTONS
      GLFW.params[0x00030004] = false; // GLFW_SYSTEM_KEYS
      GLFW.params[0x00030005] = false; // GLFW_KEY_REPEAT
      GLFW.params[0x00030006] = true; // GLFW_AUTO_POLL_EVENTS
      GLFW.params[0x00020001] = true; // GLFW_OPENED
      GLFW.params[0x00020002] = true; // GLFW_ACTIVE
      GLFW.params[0x00020003] = false; // GLFW_ICONIFIED
      GLFW.params[0x00020004] = true; // GLFW_ACCELERATED
      GLFW.params[0x00020005] = 0; // GLFW_RED_BITS
      GLFW.params[0x00020006] = 0; // GLFW_GREEN_BITS
      GLFW.params[0x00020007] = 0; // GLFW_BLUE_BITS
      GLFW.params[0x00020008] = 0; // GLFW_ALPHA_BITS
      GLFW.params[0x00020009] = 0; // GLFW_DEPTH_BITS
      GLFW.params[0x0002000A] = 0; // GLFW_STENCIL_BITS
      GLFW.params[0x0002000B] = 0; // GLFW_REFRESH_RATE
      GLFW.params[0x0002000C] = 0; // GLFW_ACCUM_RED_BITS
      GLFW.params[0x0002000D] = 0; // GLFW_ACCUM_GREEN_BITS
      GLFW.params[0x0002000E] = 0; // GLFW_ACCUM_BLUE_BITS
      GLFW.params[0x0002000F] = 0; // GLFW_ACCUM_ALPHA_BITS
      GLFW.params[0x00020010] = 0; // GLFW_AUX_BUFFERS
      GLFW.params[0x00020011] = 0; // GLFW_STEREO
      GLFW.params[0x00020012] = 0; // GLFW_WINDOW_NO_RESIZE
      GLFW.params[0x00020013] = 0; // GLFW_FSAA_SAMPLES
      GLFW.params[0x00020014] = 0; // GLFW_OPENGL_VERSION_MAJOR
      GLFW.params[0x00020015] = 0; // GLFW_OPENGL_VERSION_MINOR
      GLFW.params[0x00020016] = 0; // GLFW_OPENGL_FORWARD_COMPAT
      GLFW.params[0x00020017] = 0; // GLFW_OPENGL_DEBUG_CONTEXT
      GLFW.params[0x00020018] = 0; // GLFW_OPENGL_PROFILE
  
      GLFW.keys = new Array();
  
      return 1; // GL_TRUE
    }

  
  
  
  var GLImmediate={MapTreeLib:null,spawnMapTreeLib:function () {
        /* A naive implementation of a map backed by an array, and accessed by
         * naive iteration along the array. (hashmap with only one bucket)
         */
        function CNaiveListMap() {
          var list = [];
  
          this.insert = function CNaiveListMap_insert(key, val) {
            if (this.contains(key|0)) return false;
            list.push([key, val]);
            return true;
          };
  
          var __contains_i;
          this.contains = function CNaiveListMap_contains(key) {
            for (__contains_i = 0; __contains_i < list.length; ++__contains_i) {
              if (list[__contains_i][0] === key) return true;
            }
            return false;
          };
  
          var __get_i;
          this.get = function CNaiveListMap_get(key) {
            for (__get_i = 0; __get_i < list.length; ++__get_i) {
              if (list[__get_i][0] === key) return list[__get_i][1];
            }
            return undefined;
          };
        };
  
        /* A tree of map nodes.
          Uses `KeyView`s to allow descending the tree without garbage.
          Example: {
            // Create our map object.
            var map = new ObjTreeMap();
  
            // Grab the static keyView for the map.
            var keyView = map.GetStaticKeyView();
  
            // Let's make a map for:
            // root: <undefined>
            //   1: <undefined>
            //     2: <undefined>
            //       5: "Three, sir!"
            //       3: "Three!"
  
            // Note how we can chain together `Reset` and `Next` to
            // easily descend based on multiple key fragments.
            keyView.Reset().Next(1).Next(2).Next(5).Set("Three, sir!");
            keyView.Reset().Next(1).Next(2).Next(3).Set("Three!");
          }
        */
        function CMapTree() {
          function CNLNode() {
            var map = new CNaiveListMap();
  
            this.child = function CNLNode_child(keyFrag) {
              if (!map.contains(keyFrag|0)) {
                map.insert(keyFrag|0, new CNLNode());
              }
              return map.get(keyFrag|0);
            };
  
            this.value = undefined;
            this.get = function CNLNode_get() {
              return this.value;
            };
  
            this.set = function CNLNode_set(val) {
              this.value = val;
            };
          }
  
          function CKeyView(root) {
            var cur;
  
            this.reset = function CKeyView_reset() {
              cur = root;
              return this;
            };
            this.reset();
  
            this.next = function CKeyView_next(keyFrag) {
              cur = cur.child(keyFrag);
              return this;
            };
  
            this.get = function CKeyView_get() {
              return cur.get();
            };
  
            this.set = function CKeyView_set(val) {
              cur.set(val);
            };
          };
  
          var root;
          var staticKeyView;
  
          this.createKeyView = function CNLNode_createKeyView() {
            return new CKeyView(root);
          }
  
          this.clear = function CNLNode_clear() {
            root = new CNLNode();
            staticKeyView = this.createKeyView();
          };
          this.clear();
  
          this.getStaticKeyView = function CNLNode_getStaticKeyView() {
            staticKeyView.reset();
            return staticKeyView;
          };
        };
  
        // Exports:
        return {
          create: function() {
            return new CMapTree();
          },
        };
      },TexEnvJIT:null,spawnTexEnvJIT:function () {
        // GL defs:
        var GL_TEXTURE0 = 0x84C0;
        var GL_TEXTURE_1D = 0x0DE0;
        var GL_TEXTURE_2D = 0x0DE1;
        var GL_TEXTURE_3D = 0x806f;
        var GL_TEXTURE_CUBE_MAP = 0x8513;
        var GL_TEXTURE_ENV = 0x2300;
        var GL_TEXTURE_ENV_MODE = 0x2200;
        var GL_TEXTURE_ENV_COLOR = 0x2201;
        var GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
        var GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
        var GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
        var GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
        var GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
        var GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
  
        var GL_SRC0_RGB = 0x8580;
        var GL_SRC1_RGB = 0x8581;
        var GL_SRC2_RGB = 0x8582;
  
        var GL_SRC0_ALPHA = 0x8588;
        var GL_SRC1_ALPHA = 0x8589;
        var GL_SRC2_ALPHA = 0x858A;
  
        var GL_OPERAND0_RGB = 0x8590;
        var GL_OPERAND1_RGB = 0x8591;
        var GL_OPERAND2_RGB = 0x8592;
  
        var GL_OPERAND0_ALPHA = 0x8598;
        var GL_OPERAND1_ALPHA = 0x8599;
        var GL_OPERAND2_ALPHA = 0x859A;
  
        var GL_COMBINE_RGB = 0x8571;
        var GL_COMBINE_ALPHA = 0x8572;
  
        var GL_RGB_SCALE = 0x8573;
        var GL_ALPHA_SCALE = 0x0D1C;
  
        // env.mode
        var GL_ADD      = 0x0104;
        var GL_BLEND    = 0x0BE2;
        var GL_REPLACE  = 0x1E01;
        var GL_MODULATE = 0x2100;
        var GL_DECAL    = 0x2101;
        var GL_COMBINE  = 0x8570;
  
        // env.color/alphaCombiner
        //var GL_ADD         = 0x0104;
        //var GL_REPLACE     = 0x1E01;
        //var GL_MODULATE    = 0x2100;
        var GL_SUBTRACT    = 0x84E7;
        var GL_INTERPOLATE = 0x8575;
  
        // env.color/alphaSrc
        var GL_TEXTURE       = 0x1702;
        var GL_CONSTANT      = 0x8576;
        var GL_PRIMARY_COLOR = 0x8577;
        var GL_PREVIOUS      = 0x8578;
  
        // env.color/alphaOp
        var GL_SRC_COLOR           = 0x0300;
        var GL_ONE_MINUS_SRC_COLOR = 0x0301;
        var GL_SRC_ALPHA           = 0x0302;
        var GL_ONE_MINUS_SRC_ALPHA = 0x0303;
  
        var GL_RGB  = 0x1907;
        var GL_RGBA = 0x1908;
  
        // Our defs:
        var TEXENVJIT_NAMESPACE_PREFIX = "tej_";
        // Not actually constant, as they can be changed between JIT passes:
        var TEX_UNIT_UNIFORM_PREFIX = "uTexUnit";
        var TEX_COORD_VARYING_PREFIX = "vTexCoord";
        var PRIM_COLOR_VARYING = "vPrimColor";
        var TEX_MATRIX_UNIFORM_PREFIX = "uTexMatrix";
  
        // Static vars:
        var s_texUnits = null; //[];
        var s_activeTexture = 0;
  
        var s_requiredTexUnitsForPass = [];
  
        // Static funcs:
        function abort(info) {
          assert(false, "[TexEnvJIT] ABORT: " + info);
        }
  
        function abort_noSupport(info) {
          abort("No support: " + info);
        }
  
        function abort_sanity(info) {
          abort("Sanity failure: " + info);
        }
  
        function genTexUnitSampleExpr(texUnitID) {
          var texUnit = s_texUnits[texUnitID];
          var texType = texUnit.getTexType();
  
          var func = null;
          switch (texType) {
            case GL_TEXTURE_1D:
              func = "texture2D";
              break;
            case GL_TEXTURE_2D:
              func = "texture2D";
              break;
            case GL_TEXTURE_3D:
              return abort_noSupport("No support for 3D textures.");
            case GL_TEXTURE_CUBE_MAP:
              func = "textureCube";
              break;
            default:
              return abort_sanity("Unknown texType: 0x" + texType.toString(16));
          }
  
          var texCoordExpr = TEX_COORD_VARYING_PREFIX + texUnitID;
          if (TEX_MATRIX_UNIFORM_PREFIX != null) {
            texCoordExpr = "(" + TEX_MATRIX_UNIFORM_PREFIX + texUnitID + " * " + texCoordExpr + ")";
          }
          return func + "(" + TEX_UNIT_UNIFORM_PREFIX + texUnitID + ", " + texCoordExpr + ".xy)";
        }
  
        function getTypeFromCombineOp(op) {
          switch (op) {
            case GL_SRC_COLOR:
            case GL_ONE_MINUS_SRC_COLOR:
              return "vec3";
            case GL_SRC_ALPHA:
            case GL_ONE_MINUS_SRC_ALPHA:
              return "float";
          }
  
          return abort_noSupport("Unsupported combiner op: 0x" + op.toString(16));
        }
  
        function getCurTexUnit() {
          return s_texUnits[s_activeTexture];
        }
  
        function genCombinerSourceExpr(texUnitID, constantExpr, previousVar,
                                       src, op)
        {
          var srcExpr = null;
          switch (src) {
            case GL_TEXTURE:
              srcExpr = genTexUnitSampleExpr(texUnitID);
              break;
            case GL_CONSTANT:
              srcExpr = constantExpr;
              break;
            case GL_PRIMARY_COLOR:
              srcExpr = PRIM_COLOR_VARYING;
              break;
            case GL_PREVIOUS:
              srcExpr = previousVar;
              break;
            default:
                return abort_noSupport("Unsupported combiner src: 0x" + src.toString(16));
          }
  
          var expr = null;
          switch (op) {
            case GL_SRC_COLOR:
              expr = srcExpr + ".rgb";
              break;
            case GL_ONE_MINUS_SRC_COLOR:
              expr = "(vec3(1.0) - " + srcExpr + ".rgb)";
              break;
            case GL_SRC_ALPHA:
              expr = srcExpr + ".a";
              break;
            case GL_ONE_MINUS_SRC_ALPHA:
              expr = "(1.0 - " + srcExpr + ".a)";
              break;
            default:
              return abort_noSupport("Unsupported combiner op: 0x" + op.toString(16));
          }
  
          return expr;
        }
  
        function valToFloatLiteral(val) {
          if (val == Math.round(val)) return val + '.0';
          return val;
        }
  
  
        // Classes:
        function CTexEnv() {
          this.mode = GL_MODULATE;
          this.colorCombiner = GL_MODULATE;
          this.alphaCombiner = GL_MODULATE;
          this.colorScale = 1;
          this.alphaScale = 1;
          this.envColor = [0, 0, 0, 0];
  
          this.colorSrc = [
            GL_TEXTURE,
            GL_PREVIOUS,
            GL_CONSTANT
          ];
          this.alphaSrc = [
            GL_TEXTURE,
            GL_PREVIOUS,
            GL_CONSTANT
          ];
          this.colorOp = [
            GL_SRC_COLOR,
            GL_SRC_COLOR,
            GL_SRC_ALPHA
          ];
          this.alphaOp = [
            GL_SRC_ALPHA,
            GL_SRC_ALPHA,
            GL_SRC_ALPHA
          ];
  
          // Map GLenums to small values to efficiently pack the enums to bits for tighter access.
          this.traverseKey = {
            // mode
            0x1E01 /* GL_REPLACE */: 0,
            0x2100 /* GL_MODULATE */: 1,
            0x0104 /* GL_ADD */: 2,
            0x0BE2 /* GL_BLEND */: 3,
            0x2101 /* GL_DECAL */: 4,
            0x8570 /* GL_COMBINE */: 5,
  
            // additional color and alpha combiners
            0x84E7 /* GL_SUBTRACT */: 3,
            0x8575 /* GL_INTERPOLATE */: 4,
  
            // color and alpha src
            0x1702 /* GL_TEXTURE */: 0,
            0x8576 /* GL_CONSTANT */: 1,
            0x8577 /* GL_PRIMARY_COLOR */: 2,
            0x8578 /* GL_PREVIOUS */: 3,
  
            // color and alpha op
            0x0300 /* GL_SRC_COLOR */: 0,
            0x0301 /* GL_ONE_MINUS_SRC_COLOR */: 1,
            0x0302 /* GL_SRC_ALPHA */: 2,
            0x0300 /* GL_ONE_MINUS_SRC_ALPHA */: 3
          };
  
          // The tuple (key0,key1,key2) uniquely identifies the state of the variables in CTexEnv.
          // -1 on key0 denotes 'the whole cached key is dirty'
          this.key0 = -1;
          this.key1 = 0;
          this.key2 = 0;
  
          this.computeKey0 = function() {
            var k = this.traverseKey;
            var key = k[this.mode] * 1638400; // 6 distinct values.
            key += k[this.colorCombiner] * 327680; // 5 distinct values.
            key += k[this.alphaCombiner] * 65536; // 5 distinct values.
            // The above three fields have 6*5*5=150 distinct values -> 8 bits.
            key += (this.colorScale-1) * 16384; // 10 bits used.
            key += (this.alphaScale-1) * 4096; // 12 bits used.
            key += k[this.colorSrc[0]] * 1024; // 14
            key += k[this.colorSrc[1]] * 256; // 16
            key += k[this.colorSrc[2]] * 64; // 18
            key += k[this.alphaSrc[0]] * 16; // 20
            key += k[this.alphaSrc[1]] * 4; // 22
            key += k[this.alphaSrc[2]]; // 24 bits used total.
            return key;
          }
          this.computeKey1 = function() {
            var k = this.traverseKey;
            key = k[this.colorOp[0]] * 4096;
            key += k[this.colorOp[1]] * 1024;             
            key += k[this.colorOp[2]] * 256;
            key += k[this.alphaOp[0]] * 16;
            key += k[this.alphaOp[1]] * 4;
            key += k[this.alphaOp[2]];
            return key;            
          }
          // TODO: remove this. The color should not be part of the key!
          this.computeKey2 = function() {
            return this.envColor[0] * 16777216 + this.envColor[1] * 65536 + this.envColor[2] * 256 + 1 + this.envColor[3];
          }
          this.recomputeKey = function() {
            this.key0 = this.computeKey0();
            this.key1 = this.computeKey1();
            this.key2 = this.computeKey2();
          }
          this.invalidateKey = function() {
            this.key0 = -1; // The key of this texture unit must be recomputed when rendering the next time.
            GLImmediate.currentRenderer = null; // The currently used renderer must be re-evaluated at next render.
          }
        }
  
        function CTexUnit() {
          this.env = new CTexEnv();
          this.enabled_tex1D   = false;
          this.enabled_tex2D   = false;
          this.enabled_tex3D   = false;
          this.enabled_texCube = false;
          this.texTypesEnabled = 0; // A bitfield combination of the four flags above, used for fast access to operations.
  
          this.traverseState = function CTexUnit_traverseState(keyView) {
            if (this.texTypesEnabled) {
              if (this.env.key0 == -1) {
                this.env.recomputeKey();
              }
              keyView.next(this.texTypesEnabled | (this.env.key0 << 4));
              keyView.next(this.env.key1);
              keyView.next(this.env.key2);
            } else {
              // For correctness, must traverse a zero value, theoretically a subsequent integer key could collide with this value otherwise.
              keyView.next(0);
            }
          };
        };
  
        // Class impls:
        CTexUnit.prototype.enabled = function CTexUnit_enabled() {
          return this.texTypesEnabled;
        }
  
        CTexUnit.prototype.genPassLines = function CTexUnit_genPassLines(passOutputVar, passInputVar, texUnitID) {
          if (!this.enabled()) {
            return ["vec4 " + passOutputVar + " = " + passInputVar + ";"];
          }
          var lines = this.env.genPassLines(passOutputVar, passInputVar, texUnitID).join('\n');
  
          var texLoadLines = '';
          var texLoadRegex = /(texture.*?\(.*?\))/g;
          var loadCounter = 0;
          var load;
  
          // As an optimization, merge duplicate identical texture loads to one var.
          while(load = texLoadRegex.exec(lines)) {
            var texLoadExpr = load[1];
            var secondOccurrence = lines.slice(load.index+1).indexOf(texLoadExpr);
            if (secondOccurrence != -1) { // And also has a second occurrence of same load expression..
              // Create new var to store the common load.
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texLoadVar = prefix + 'texload' + loadCounter++;
              var texLoadLine = 'vec4 ' + texLoadVar + ' = ' + texLoadExpr + ';\n';
              texLoadLines += texLoadLine + '\n'; // Store the generated texture load statements in a temp string to not confuse regex search in progress.
              lines = lines.split(texLoadExpr).join(texLoadVar);
              // Reset regex search, since we modified the string.
              texLoadRegex = /(texture.*\(.*\))/g;
            }
          }
          return [texLoadLines + lines];
        }
  
        CTexUnit.prototype.getTexType = function CTexUnit_getTexType() {
          if (this.enabled_texCube) {
            return GL_TEXTURE_CUBE_MAP;
          } else if (this.enabled_tex3D) {
            return GL_TEXTURE_3D;
          } else if (this.enabled_tex2D) {
            return GL_TEXTURE_2D;
          } else if (this.enabled_tex1D) {
            return GL_TEXTURE_1D;
          }
          return 0;
        }
  
        CTexEnv.prototype.genPassLines = function CTexEnv_genPassLines(passOutputVar, passInputVar, texUnitID) {
          switch (this.mode) {
            case GL_REPLACE: {
              /* RGB:
               * Cv = Cs
               * Av = Ap // Note how this is different, and that we'll
               *            need to track the bound texture internalFormat
               *            to get this right.
               *
               * RGBA:
               * Cv = Cs
               * Av = As
               */
              return [
                "vec4 " + passOutputVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
              ];
            }
            case GL_ADD: {
              /* RGBA:
               * Cv = Cp + Cs
               * Av = ApAs
               */
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texVar = prefix + "tex";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
  
              return [
                "vec4 " + texVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
                "vec3 " + colorVar + " = " + passInputVar + ".rgb + " + texVar + ".rgb;",
                "float " + alphaVar + " = " + passInputVar + ".a * " + texVar + ".a;",
                "vec4 " + passOutputVar + " = vec4(" + colorVar + ", " + alphaVar + ");",
              ];
            }
            case GL_MODULATE: {
              /* RGBA:
               * Cv = CpCs
               * Av = ApAs
               */
              var line = [
                "vec4 " + passOutputVar,
                " = ",
                  passInputVar,
                  " * ",
                  genTexUnitSampleExpr(texUnitID),
                ";",
              ];
              return [line.join("")];
            }
            case GL_DECAL: {
              /* RGBA:
               * Cv = Cp(1 - As) + CsAs
               * Av = Ap
               */
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texVar = prefix + "tex";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
  
              return [
                "vec4 " + texVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
                [
                  "vec3 " + colorVar + " = ",
                    passInputVar + ".rgb * (1.0 - " + texVar + ".a)",
                      " + ",
                    texVar + ".rgb * " + texVar + ".a",
                  ";"
                ].join(""),
                "float " + alphaVar + " = " + passInputVar + ".a;",
                "vec4 " + passOutputVar + " = vec4(" + colorVar + ", " + alphaVar + ");",
              ];
            }
            case GL_BLEND: {
              /* RGBA:
               * Cv = Cp(1 - Cs) + CcCs
               * Av = As
               */
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texVar = prefix + "tex";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
  
              return [
                "vec4 " + texVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
                [
                  "vec3 " + colorVar + " = ",
                    passInputVar + ".rgb * (1.0 - " + texVar + ".rgb)",
                      " + ",
                    PRIM_COLOR_VARYING + ".rgb * " + texVar + ".rgb",
                  ";"
                ].join(""),
                "float " + alphaVar + " = " + texVar + ".a;",
                "vec4 " + passOutputVar + " = vec4(" + colorVar + ", " + alphaVar + ");",
              ];
            }
            case GL_COMBINE: {
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
              var colorLines = this.genCombinerLines(true, colorVar,
                                                     passInputVar, texUnitID,
                                                     this.colorCombiner, this.colorSrc, this.colorOp);
              var alphaLines = this.genCombinerLines(false, alphaVar,
                                                     passInputVar, texUnitID,
                                                     this.alphaCombiner, this.alphaSrc, this.alphaOp);
  
              // Generate scale, but avoid generating an identity op that multiplies by one.
              var scaledColor = (this.colorScale == 1) ? colorVar : (colorVar + " * " + valToFloatLiteral(this.colorScale));
              var scaledAlpha = (this.alphaScale == 1) ? alphaVar : (alphaVar + " * " + valToFloatLiteral(this.alphaScale));
  
              var line = [
                "vec4 " + passOutputVar,
                " = ",
                  "vec4(",
                      scaledColor,
                      ", ",
                      scaledAlpha,
                  ")",
                ";",
              ].join("");
              return [].concat(colorLines, alphaLines, [line]);
            }
          }
  
          return abort_noSupport("Unsupported TexEnv mode: 0x" + this.mode.toString(16));
        }
  
        CTexEnv.prototype.genCombinerLines = function CTexEnv_getCombinerLines(isColor, outputVar,
                                                                               passInputVar, texUnitID,
                                                                               combiner, srcArr, opArr)
        {
          var argsNeeded = null;
          switch (combiner) {
            case GL_REPLACE:
              argsNeeded = 1;
              break;
  
            case GL_MODULATE:
            case GL_ADD:
            case GL_SUBTRACT:
              argsNeeded = 2;
              break;
  
            case GL_INTERPOLATE:
              argsNeeded = 3;
              break;
  
            default:
              return abort_noSupport("Unsupported combiner: 0x" + combiner.toString(16));
          }
  
          var constantExpr = [
            "vec4(",
              valToFloatLiteral(this.envColor[0]),
              ", ",
              valToFloatLiteral(this.envColor[1]),
              ", ",
              valToFloatLiteral(this.envColor[2]),
              ", ",
              valToFloatLiteral(this.envColor[3]),
            ")",
          ].join("");
          var src0Expr = (argsNeeded >= 1) ? genCombinerSourceExpr(texUnitID, constantExpr, passInputVar, srcArr[0], opArr[0])
                                           : null;
          var src1Expr = (argsNeeded >= 2) ? genCombinerSourceExpr(texUnitID, constantExpr, passInputVar, srcArr[1], opArr[1])
                                           : null;
          var src2Expr = (argsNeeded >= 3) ? genCombinerSourceExpr(texUnitID, constantExpr, passInputVar, srcArr[2], opArr[2])
                                           : null;
  
          var outputType = isColor ? "vec3" : "float";
          var lines = null;
          switch (combiner) {
            case GL_REPLACE: {
              var line = [
                outputType + " " + outputVar,
                " = ",
                  src0Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_MODULATE: {
              var line = [
                outputType + " " + outputVar + " = ",
                  src0Expr + " * " + src1Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_ADD: {
              var line = [
                outputType + " " + outputVar + " = ",
                  src0Expr + " + " + src1Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_SUBTRACT: {
              var line = [
                outputType + " " + outputVar + " = ",
                  src0Expr + " - " + src1Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_INTERPOLATE: {
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var arg2Var = prefix + "colorSrc2";
              var arg2Line = getTypeFromCombineOp(this.colorOp[2]) + " " + arg2Var + " = " + src2Expr + ";";
  
              var line = [
                outputType + " " + outputVar,
                " = ",
                  src0Expr + " * " + arg2Var,
                  " + ",
                  src1Expr + " * (1.0 - " + arg2Var + ")",
                ";",
              ];
              lines = [
                arg2Line,
                line.join(""),
              ];
              break;
            }
  
            default:
              return abort_sanity("Unmatched TexEnv.colorCombiner?");
          }
  
          return lines;
        }
  
        return {
          // Exports:
          init: function(gl, specifiedMaxTextureImageUnits) {
            var maxTexUnits = 0;
            if (specifiedMaxTextureImageUnits) {
              maxTexUnits = specifiedMaxTextureImageUnits;
            } else if (gl) {
              maxTexUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
            }
            s_texUnits = [];
            for (var i = 0; i < maxTexUnits; i++) {
              s_texUnits.push(new CTexUnit());
            }
          },
  
          setGLSLVars: function(uTexUnitPrefix, vTexCoordPrefix, vPrimColor, uTexMatrixPrefix) {
            TEX_UNIT_UNIFORM_PREFIX   = uTexUnitPrefix;
            TEX_COORD_VARYING_PREFIX  = vTexCoordPrefix;
            PRIM_COLOR_VARYING        = vPrimColor;
            TEX_MATRIX_UNIFORM_PREFIX = uTexMatrixPrefix;
          },
  
          genAllPassLines: function(resultDest, indentSize) {
            indentSize = indentSize || 0;
  
            s_requiredTexUnitsForPass.length = 0; // Clear the list.
            var lines = [];
            var lastPassVar = PRIM_COLOR_VARYING;
            for (var i = 0; i < s_texUnits.length; i++) {
              if (!s_texUnits[i].enabled()) continue;
  
              s_requiredTexUnitsForPass.push(i);
  
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + i + "_";
              var passOutputVar = prefix + "result";
  
              var newLines = s_texUnits[i].genPassLines(passOutputVar, lastPassVar, i);
              lines = lines.concat(newLines, [""]);
  
              lastPassVar = passOutputVar;
            }
            lines.push(resultDest + " = " + lastPassVar + ";");
  
            var indent = "";
            for (var i = 0; i < indentSize; i++) indent += " ";
  
            var output = indent + lines.join("\n" + indent);
  
            return output;
          },
  
          getUsedTexUnitList: function() {
            return s_requiredTexUnitsForPass;
          },
  
          traverseState: function(keyView) {
            for (var i = 0; i < s_texUnits.length; i++) {
              s_texUnits[i].traverseState(keyView);
            }
          },
  
          getTexUnitType: function(texUnitID) {
            return s_texUnits[texUnitID].getTexType();
          },
  
          // Hooks:
          hook_activeTexture: function(texture) {
            s_activeTexture = texture - GL_TEXTURE0;
          },
  
          hook_enable: function(cap) {
            var cur = getCurTexUnit();
            switch (cap) {
              case GL_TEXTURE_1D:
                if (!cur.enabled_tex1D) {
                  GLImmediate.currentRenderer = null; // Renderer state changed, and must be recreated or looked up again.
                  cur.enabled_tex1D = true;
                  cur.texTypesEnabled |= 1;
                }
                break;
              case GL_TEXTURE_2D:
                if (!cur.enabled_tex2D) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_tex2D = true;
                  cur.texTypesEnabled |= 2;
                }
                break;
              case GL_TEXTURE_3D:
                if (!cur.enabled_tex3D) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_tex3D = true;
                  cur.texTypesEnabled |= 4;
                }
                break;
              case GL_TEXTURE_CUBE_MAP:
                if (!cur.enabled_texCube) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_texCube = true;
                  cur.texTypesEnabled |= 8;
                }
                break;
            }
          },
  
          hook_disable: function(cap) {
            var cur = getCurTexUnit();
            switch (cap) {
              case GL_TEXTURE_1D:
                if (cur.enabled_tex1D) {
                  GLImmediate.currentRenderer = null; // Renderer state changed, and must be recreated or looked up again.
                  cur.enabled_tex1D = false;
                  cur.texTypesEnabled &= ~1;
                }
                break;
              case GL_TEXTURE_2D:
                if (cur.enabled_tex2D) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_tex2D = false;
                  cur.texTypesEnabled &= ~2;
                }
                break;
              case GL_TEXTURE_3D:
                if (cur.enabled_tex3D) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_tex3D = false;
                  cur.texTypesEnabled &= ~4;
                }
                break;
              case GL_TEXTURE_CUBE_MAP:
                if (cur.enabled_texCube) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_texCube = false;
                  cur.texTypesEnabled &= ~8;
                }
                break;
            }
          },
  
          hook_texEnvf: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_RGB_SCALE:
                if (env.colorScale != param) {
                  env.invalidateKey(); // We changed FFP emulation renderer state.
                  env.colorScale = param;
                }
                break;
              case GL_ALPHA_SCALE:
                if (env.alphaScale != param) {
                  env.invalidateKey();
                  env.alphaScale = param;
                }
                break;
  
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glTexEnvf`.');
            }
          },
  
          hook_texEnvi: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_MODE:
                if (env.mode != param) {
                  env.invalidateKey(); // We changed FFP emulation renderer state.
                  env.mode = param;
                }
                break;
  
              case GL_COMBINE_RGB:
                if (env.colorCombiner != param) {
                  env.invalidateKey();
                  env.colorCombiner = param;
                }
                break;
              case GL_COMBINE_ALPHA:
                if (env.alphaCombiner != param) {
                  env.invalidateKey();
                  env.alphaCombiner = param;
                }
                break;
  
              case GL_SRC0_RGB:
                if (env.colorSrc[0] != param) {
                  env.invalidateKey();
                  env.colorSrc[0] = param;
                }
                break;
              case GL_SRC1_RGB:
                if (env.colorSrc[1] != param) {
                  env.invalidateKey();
                  env.colorSrc[1] = param;
                }
                break;
              case GL_SRC2_RGB:
                if (env.colorSrc[2] != param) {
                  env.invalidateKey();
                  env.colorSrc[2] = param;
                }
                break;
  
              case GL_SRC0_ALPHA:
                if (env.alphaSrc[0] != param) {
                  env.invalidateKey();
                  env.alphaSrc[0] = param;
                }
                break;
              case GL_SRC1_ALPHA:
                if (env.alphaSrc[1] != param) {
                  env.invalidateKey();
                  env.alphaSrc[1] = param;
                }
                break;
              case GL_SRC2_ALPHA:
                if (env.alphaSrc[2] != param) {
                  env.invalidateKey();
                  env.alphaSrc[2] = param;
                }
                break;
  
              case GL_OPERAND0_RGB:
                if (env.colorOp[0] != param) {
                  env.invalidateKey();
                  env.colorOp[0] = param;
                }
                break;
              case GL_OPERAND1_RGB:
                if (env.colorOp[1] != param) {
                  env.invalidateKey();
                  env.colorOp[1] = param;
                }
                break;
              case GL_OPERAND2_RGB:
                if (env.colorOp[2] != param) {
                  env.invalidateKey();
                  env.colorOp[2] = param;
                }
                break;
  
              case GL_OPERAND0_ALPHA:
                if (env.alphaOp[0] != param) {
                  env.invalidateKey();
                  env.alphaOp[0] = param;
                }
                break;
              case GL_OPERAND1_ALPHA:
                if (env.alphaOp[1] != param) {
                  env.invalidateKey();
                  env.alphaOp[1] = param;
                }
                break;
              case GL_OPERAND2_ALPHA:
                if (env.alphaOp[2] != param) {
                  env.invalidateKey();
                  env.alphaOp[2] = param;
                }
                break;
  
              case GL_RGB_SCALE:
                if (env.colorScale != param) {
                  env.invalidateKey();
                  env.colorScale = param;
                }
                break;
              case GL_ALPHA_SCALE:
                if (env.alphaScale != param) {
                  env.invalidateKey();
                  env.alphaScale = param;
                }
                break;
  
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glTexEnvi`.');
            }
          },
  
          hook_texEnvfv: function(target, pname, params) {
            if (target != GL_TEXTURE_ENV) return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_COLOR: {
                for (var i = 0; i < 4; i++) {
                  var param = HEAPF32[(((params)+(i*4))>>2)];
                  if (env.envColor[i] != param) {
                    env.invalidateKey(); // We changed FFP emulation renderer state.
                    env.envColor[i] = param;
                  }
                }
                break
              }
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glTexEnvfv`.');
            }
          },
  
          hook_getTexEnviv: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_MODE:
                HEAP32[((param)>>2)]=env.mode;
                return;
  
              case GL_TEXTURE_ENV_COLOR:
                HEAP32[((param)>>2)]=Math.max(Math.min(env.envColor[0]*255, 255, -255));
                HEAP32[(((param)+(1))>>2)]=Math.max(Math.min(env.envColor[1]*255, 255, -255));
                HEAP32[(((param)+(2))>>2)]=Math.max(Math.min(env.envColor[2]*255, 255, -255));
                HEAP32[(((param)+(3))>>2)]=Math.max(Math.min(env.envColor[3]*255, 255, -255));
                return;
  
              case GL_COMBINE_RGB:
                HEAP32[((param)>>2)]=env.colorCombiner;
                return;
  
              case GL_COMBINE_ALPHA:
                HEAP32[((param)>>2)]=env.alphaCombiner;
                return;
  
              case GL_SRC0_RGB:
                HEAP32[((param)>>2)]=env.colorSrc[0];
                return;
  
              case GL_SRC1_RGB:
                HEAP32[((param)>>2)]=env.colorSrc[1];
                return;
  
              case GL_SRC2_RGB:
                HEAP32[((param)>>2)]=env.colorSrc[2];
                return;
  
              case GL_SRC0_ALPHA:
                HEAP32[((param)>>2)]=env.alphaSrc[0];
                return;
  
              case GL_SRC1_ALPHA:
                HEAP32[((param)>>2)]=env.alphaSrc[1];
                return;
  
              case GL_SRC2_ALPHA:
                HEAP32[((param)>>2)]=env.alphaSrc[2];
                return;
  
              case GL_OPERAND0_RGB:
                HEAP32[((param)>>2)]=env.colorOp[0];
                return;
  
              case GL_OPERAND1_RGB:
                HEAP32[((param)>>2)]=env.colorOp[1];
                return;
  
              case GL_OPERAND2_RGB:
                HEAP32[((param)>>2)]=env.colorOp[2];
                return;
  
              case GL_OPERAND0_ALPHA:
                HEAP32[((param)>>2)]=env.alphaOp[0];
                return;
  
              case GL_OPERAND1_ALPHA:
                HEAP32[((param)>>2)]=env.alphaOp[1];
                return;
  
              case GL_OPERAND2_ALPHA:
                HEAP32[((param)>>2)]=env.alphaOp[2];
                return;
  
              case GL_RGB_SCALE:
                HEAP32[((param)>>2)]=env.colorScale;
                return;
  
              case GL_ALPHA_SCALE:
                HEAP32[((param)>>2)]=env.alphaScale;
                return;
  
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glGetTexEnvi`.');
            }
          },
  
          hook_getTexEnvfv: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_COLOR:
                HEAPF32[((param)>>2)]=env.envColor[0];
                HEAPF32[(((param)+(4))>>2)]=env.envColor[1];
                HEAPF32[(((param)+(8))>>2)]=env.envColor[2];
                HEAPF32[(((param)+(12))>>2)]=env.envColor[3];
                return;
            }
          }
        };
      },vertexData:null,vertexDataU8:null,tempData:null,indexData:null,vertexCounter:0,mode:-1,rendererCache:null,rendererComponents:[],rendererComponentPointer:0,lastRenderer:null,lastArrayBuffer:null,lastProgram:null,lastStride:-1,matrix:[],matrixStack:[],currentMatrix:0,tempMatrix:null,matricesModified:false,useTextureMatrix:false,VERTEX:0,NORMAL:1,COLOR:2,TEXTURE0:3,NUM_ATTRIBUTES:-1,MAX_TEXTURES:-1,totalEnabledClientAttributes:0,enabledClientAttributes:[0,0],clientAttributes:[],liveClientAttributes:[],currentRenderer:null,modifiedClientAttributes:false,clientActiveTexture:0,clientColor:null,usedTexUnitList:[],fixedFunctionProgram:null,setClientAttribute:function setClientAttribute(name, size, type, stride, pointer) {
        var attrib = GLImmediate.clientAttributes[name];
        if (!attrib) {
          for (var i = 0; i <= name; i++) { // keep flat
            if (!GLImmediate.clientAttributes[i]) {
              GLImmediate.clientAttributes[i] = {
                name: name,
                size: size,
                type: type,
                stride: stride,
                pointer: pointer,
                offset: 0
              };
            }
          }
        } else {
          attrib.name = name;
          attrib.size = size;
          attrib.type = type;
          attrib.stride = stride;
          attrib.pointer = pointer;
          attrib.offset = 0;
        }
        GLImmediate.modifiedClientAttributes = true;
      },addRendererComponent:function addRendererComponent(name, size, type) {
        if (!GLImmediate.rendererComponents[name]) {
          GLImmediate.rendererComponents[name] = 1;
          GLImmediate.enabledClientAttributes[name] = true;
          GLImmediate.setClientAttribute(name, size, type, 0, GLImmediate.rendererComponentPointer);
          GLImmediate.rendererComponentPointer += size * GL.byteSizeByType[type - GL.byteSizeByTypeRoot];
        } else {
          GLImmediate.rendererComponents[name]++;
        }
      },disableBeginEndClientAttributes:function disableBeginEndClientAttributes() {
        for (var i = 0; i < GLImmediate.NUM_ATTRIBUTES; i++) {
          if (GLImmediate.rendererComponents[i]) GLImmediate.enabledClientAttributes[i] = false;
        }
      },getRenderer:function getRenderer() {
        // If no FFP state has changed that would have forced to re-evaluate which FFP emulation shader to use,
        // we have the currently used renderer in cache, and can immediately return that.
        if (GLImmediate.currentRenderer) {
          return GLImmediate.currentRenderer;
        }
        // return a renderer object given the liveClientAttributes
        // we maintain a cache of renderers, optimized to not generate garbage
        var attributes = GLImmediate.liveClientAttributes;
        var cacheMap = GLImmediate.rendererCache;
        var keyView = cacheMap.getStaticKeyView().reset();
  
        // By attrib state:
        var enabledAttributesKey = 0;
        for (var i = 0; i < attributes.length; i++) {
          enabledAttributesKey |= 1 << attributes[i].name;
        }
  
        // By fog state:
        var fogParam = 0;
        if (GLEmulation.fogEnabled) {
          switch (GLEmulation.fogMode) {
            case 0x0801: // GL_EXP2
              fogParam = 1;
              break;
            case 0x2601: // GL_LINEAR
              fogParam = 2;
              break;
            default: // default to GL_EXP
              fogParam = 3;
              break;
          }
        }
        keyView.next((enabledAttributesKey << 2) | fogParam);
  
        // By cur program:
        keyView.next(GL.currProgram);
        if (!GL.currProgram) {
          GLImmediate.TexEnvJIT.traverseState(keyView);
        }
  
        // If we don't already have it, create it.
        var renderer = keyView.get();
        if (!renderer) {
          renderer = GLImmediate.createRenderer();
          GLImmediate.currentRenderer = renderer;
          keyView.set(renderer);
          return renderer;
        }
        GLImmediate.currentRenderer = renderer; // Cache the currently used renderer, so later lookups without state changes can get this fast.
        return renderer;
      },createRenderer:function createRenderer(renderer) {
        var useCurrProgram = !!GL.currProgram;
        var hasTextures = false;
        for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
          var texAttribName = GLImmediate.TEXTURE0 + i;
          if (!GLImmediate.enabledClientAttributes[texAttribName])
            continue;
  
  
          hasTextures = true;
        }
  
        var ret = {
          init: function init() {
            // For fixed-function shader generation.
            var uTexUnitPrefix = 'u_texUnit';
            var aTexCoordPrefix = 'a_texCoord';
            var vTexCoordPrefix = 'v_texCoord';
            var vPrimColor = 'v_color';
            var uTexMatrixPrefix = GLImmediate.useTextureMatrix ? 'u_textureMatrix' : null;
  
            if (useCurrProgram) {
              if (GL.shaderInfos[GL.programShaders[GL.currProgram][0]].type == GLctx.VERTEX_SHADER) {
                this.vertexShader = GL.shaders[GL.programShaders[GL.currProgram][0]];
                this.fragmentShader = GL.shaders[GL.programShaders[GL.currProgram][1]];
              } else {
                this.vertexShader = GL.shaders[GL.programShaders[GL.currProgram][1]];
                this.fragmentShader = GL.shaders[GL.programShaders[GL.currProgram][0]];
              }
              this.program = GL.programs[GL.currProgram];
              this.usedTexUnitList = [];
            } else {
              // IMPORTANT NOTE: If you parameterize the shader source based on any runtime values
              // in order to create the least expensive shader possible based on the features being
              // used, you should also update the code in the beginning of getRenderer to make sure
              // that you cache the renderer based on the said parameters.
              if (GLEmulation.fogEnabled) {
                switch (GLEmulation.fogMode) {
                  case 0x0801: // GL_EXP2
                    // fog = exp(-(gl_Fog.density * gl_FogFragCoord)^2)
                    var fogFormula = '  float fog = exp(-u_fogDensity * u_fogDensity * ecDistance * ecDistance); \n';
                    break;
                  case 0x2601: // GL_LINEAR
                    // fog = (gl_Fog.end - gl_FogFragCoord) * gl_fog.scale
                    var fogFormula = '  float fog = (u_fogEnd - ecDistance) * u_fogScale; \n';
                    break;
                  default: // default to GL_EXP
                    // fog = exp(-gl_Fog.density * gl_FogFragCoord)
                    var fogFormula = '  float fog = exp(-u_fogDensity * ecDistance); \n';
                    break;
                }
              }
  
              GLImmediate.TexEnvJIT.setGLSLVars(uTexUnitPrefix, vTexCoordPrefix, vPrimColor, uTexMatrixPrefix);
              var fsTexEnvPass = GLImmediate.TexEnvJIT.genAllPassLines('gl_FragColor', 2);
  
              var texUnitAttribList = '';
              var texUnitVaryingList = '';
              var texUnitUniformList = '';
              var vsTexCoordInits = '';
              this.usedTexUnitList = GLImmediate.TexEnvJIT.getUsedTexUnitList();
              for (var i = 0; i < this.usedTexUnitList.length; i++) {
                var texUnit = this.usedTexUnitList[i];
                texUnitAttribList += 'attribute vec4 ' + aTexCoordPrefix + texUnit + ';\n';
                texUnitVaryingList += 'varying vec4 ' + vTexCoordPrefix + texUnit + ';\n';
                texUnitUniformList += 'uniform sampler2D ' + uTexUnitPrefix + texUnit + ';\n';
                vsTexCoordInits += '  ' + vTexCoordPrefix + texUnit + ' = ' + aTexCoordPrefix + texUnit + ';\n';
  
                if (GLImmediate.useTextureMatrix) {
                  texUnitUniformList += 'uniform mat4 ' + uTexMatrixPrefix + texUnit + ';\n';
                }
              }
  
              var vsFogVaryingInit = null;
              if (GLEmulation.fogEnabled) {
                vsFogVaryingInit = '  v_fogFragCoord = abs(ecPosition.z);\n';
              }
  
              var vsSource = [
                'attribute vec4 a_position;',
                'attribute vec4 a_color;',
                'varying vec4 v_color;',
                texUnitAttribList,
                texUnitVaryingList,
                (GLEmulation.fogEnabled ? 'varying float v_fogFragCoord;' : null),
                'uniform mat4 u_modelView;',
                'uniform mat4 u_projection;',
                'void main()',
                '{',
                '  vec4 ecPosition = u_modelView * a_position;', // eye-coordinate position
                '  gl_Position = u_projection * ecPosition;',
                '  v_color = a_color;',
                vsTexCoordInits,
                vsFogVaryingInit,
                '}',
                ''
              ].join('\n').replace(/\n\n+/g, '\n');
  
              this.vertexShader = GLctx.createShader(GLctx.VERTEX_SHADER);
              GLctx.shaderSource(this.vertexShader, vsSource);
              GLctx.compileShader(this.vertexShader);
  
              var fogHeaderIfNeeded = null;
              if (GLEmulation.fogEnabled) {
                fogHeaderIfNeeded = [
                  '',
                  'varying float v_fogFragCoord; ',
                  'uniform vec4 u_fogColor;      ',
                  'uniform float u_fogEnd;       ',
                  'uniform float u_fogScale;     ',
                  'uniform float u_fogDensity;   ',
                  'float ffog(in float ecDistance) { ',
                  fogFormula,
                  '  fog = clamp(fog, 0.0, 1.0); ',
                  '  return fog;                 ',
                  '}',
                  '',
                ].join("\n");
              }
  
              var fogPass = null;
              if (GLEmulation.fogEnabled) {
                fogPass = 'gl_FragColor = vec4(mix(u_fogColor.rgb, gl_FragColor.rgb, ffog(v_fogFragCoord)), gl_FragColor.a);\n';
              }
  
              var fsSource = [
                'precision mediump float;',
                texUnitVaryingList,
                texUnitUniformList,
                'varying vec4 v_color;',
                fogHeaderIfNeeded,
                'void main()',
                '{',
                fsTexEnvPass,
                fogPass,
                '}',
                ''
              ].join("\n").replace(/\n\n+/g, '\n');
  
              this.fragmentShader = GLctx.createShader(GLctx.FRAGMENT_SHADER);
              GLctx.shaderSource(this.fragmentShader, fsSource);
              GLctx.compileShader(this.fragmentShader);
  
              this.program = GLctx.createProgram();
              GLctx.attachShader(this.program, this.vertexShader);
              GLctx.attachShader(this.program, this.fragmentShader);
  
              // As optimization, bind all attributes to prespecified locations, so that the FFP emulation
              // code can submit attributes to any generated FFP shader without having to examine each shader in turn.
              // These prespecified locations are only assumed if GL_FFP_ONLY is specified, since user could also create their
              // own shaders that didn't have attributes in the same locations.
              GLctx.bindAttribLocation(this.program, GLImmediate.VERTEX, 'a_position');
              GLctx.bindAttribLocation(this.program, GLImmediate.COLOR, 'a_color');
              GLctx.bindAttribLocation(this.program, GLImmediate.NORMAL, 'a_normal');
              var maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
              for (var i = 0; i < GLImmediate.MAX_TEXTURES && GLImmediate.TEXTURE0 + i < maxVertexAttribs; i++) {
                GLctx.bindAttribLocation(this.program, GLImmediate.TEXTURE0 + i, 'a_texCoord'+i);
                GLctx.bindAttribLocation(this.program, GLImmediate.TEXTURE0 + i, aTexCoordPrefix+i);
              }
              GLctx.linkProgram(this.program);
            }
  
            // Stores an array that remembers which matrix uniforms are up-to-date in this FFP renderer, so they don't need to be resubmitted
            // each time we render with this program.
            this.textureMatrixVersion = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
  
            this.positionLocation = GLctx.getAttribLocation(this.program, 'a_position');
  
            this.texCoordLocations = [];
  
            for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
              if (!GLImmediate.enabledClientAttributes[GLImmediate.TEXTURE0 + i]) {
                this.texCoordLocations[i] = -1;
                continue;
              }
  
              if (useCurrProgram) {
                this.texCoordLocations[i] = GLctx.getAttribLocation(this.program, 'a_texCoord' + i);
              } else {
                this.texCoordLocations[i] = GLctx.getAttribLocation(this.program, aTexCoordPrefix + i);
              }
            }
            this.colorLocation = GLctx.getAttribLocation(this.program, 'a_color');
            if (!useCurrProgram) {
              // Temporarily switch to the program so we can set our sampler uniforms early.
              var prevBoundProg = GLctx.getParameter(GLctx.CURRENT_PROGRAM);
              GLctx.useProgram(this.program);
              {
                for (var i = 0; i < this.usedTexUnitList.length; i++) {
                  var texUnitID = this.usedTexUnitList[i];
                  var texSamplerLoc = GLctx.getUniformLocation(this.program, uTexUnitPrefix + texUnitID);
                  GLctx.uniform1i(texSamplerLoc, texUnitID);
                }
              }
              // The default color attribute value is not the same as the default for all other attribute streams (0,0,0,1) but (1,1,1,1),
              // so explicitly set it right at start.
              GLctx.vertexAttrib4fv(this.colorLocation, [1,1,1,1]);
              GLctx.useProgram(prevBoundProg);
            }
  
            this.textureMatrixLocations = [];
            for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
              this.textureMatrixLocations[i] = GLctx.getUniformLocation(this.program, 'u_textureMatrix' + i);
            }
            this.normalLocation = GLctx.getAttribLocation(this.program, 'a_normal');
  
            this.modelViewLocation = GLctx.getUniformLocation(this.program, 'u_modelView');
            this.projectionLocation = GLctx.getUniformLocation(this.program, 'u_projection');
  
            this.hasTextures = hasTextures;
            this.hasNormal = GLImmediate.enabledClientAttributes[GLImmediate.NORMAL] &&
                             GLImmediate.clientAttributes[GLImmediate.NORMAL].size > 0 &&
                             this.normalLocation >= 0;
            this.hasColor = (this.colorLocation === 0) || this.colorLocation > 0;
  
            this.floatType = GLctx.FLOAT; // minor optimization
  
            this.fogColorLocation = GLctx.getUniformLocation(this.program, 'u_fogColor');
            this.fogEndLocation = GLctx.getUniformLocation(this.program, 'u_fogEnd');
            this.fogScaleLocation = GLctx.getUniformLocation(this.program, 'u_fogScale');
            this.fogDensityLocation = GLctx.getUniformLocation(this.program, 'u_fogDensity');
            this.hasFog = !!(this.fogColorLocation || this.fogEndLocation ||
                             this.fogScaleLocation || this.fogDensityLocation);
          },
  
          prepare: function prepare() {
            // Calculate the array buffer
            var arrayBuffer;
            if (!GL.currArrayBuffer) {
              var start = GLImmediate.firstVertex*GLImmediate.stride;
              var end = GLImmediate.lastVertex*GLImmediate.stride;
              arrayBuffer = GL.getTempVertexBuffer(end);
              // TODO: consider using the last buffer we bound, if it was larger. downside is larger buffer, but we might avoid rebinding and preparing
            } else {
              arrayBuffer = GL.currArrayBuffer;
            }
  
            // If the array buffer is unchanged and the renderer as well, then we can avoid all the work here
            // XXX We use some heuristics here, and this may not work in all cases. Try disabling GL_UNSAFE_OPTS if you
            // have odd glitches
            var lastRenderer = GLImmediate.lastRenderer;
            var canSkip = this == lastRenderer &&
                          arrayBuffer == GLImmediate.lastArrayBuffer &&
                          (GL.currProgram || this.program) == GLImmediate.lastProgram &&
                          GLImmediate.stride == GLImmediate.lastStride &&
                          !GLImmediate.matricesModified;
            if (!canSkip && lastRenderer) lastRenderer.cleanup();
            if (!GL.currArrayBuffer) {
              // Bind the array buffer and upload data after cleaning up the previous renderer
  
              if (arrayBuffer != GLImmediate.lastArrayBuffer) {
                GLctx.bindBuffer(GLctx.ARRAY_BUFFER, arrayBuffer);
                GLImmediate.lastArrayBuffer = arrayBuffer;
              }
  
              GLctx.bufferSubData(GLctx.ARRAY_BUFFER, start, GLImmediate.vertexData.subarray(start >> 2, end >> 2));
            }
            if (canSkip) return;
            GLImmediate.lastRenderer = this;
            GLImmediate.lastProgram = GL.currProgram || this.program;
            GLImmediate.lastStride == GLImmediate.stride;
            GLImmediate.matricesModified = false;
  
            if (!GL.currProgram) {
              if (GLImmediate.fixedFunctionProgram != this.program) {
                GLctx.useProgram(this.program);
                GLImmediate.fixedFunctionProgram = this.program;
              }
            }
  
            if (this.modelViewLocation && this.modelViewMatrixVersion != GLImmediate.matrixVersion[0/*m*/]) {
              this.modelViewMatrixVersion = GLImmediate.matrixVersion[0/*m*/];
              GLctx.uniformMatrix4fv(this.modelViewLocation, false, GLImmediate.matrix[0/*m*/]);
            }
            if (this.projectionLocation && this.projectionMatrixVersion != GLImmediate.matrixVersion[1/*p*/]) {
              this.projectionMatrixVersion = GLImmediate.matrixVersion[1/*p*/];
              GLctx.uniformMatrix4fv(this.projectionLocation, false, GLImmediate.matrix[1/*p*/]);
            }
  
            var clientAttributes = GLImmediate.clientAttributes;
            var posAttr = clientAttributes[GLImmediate.VERTEX];
  
  
            GLctx.vertexAttribPointer(this.positionLocation, posAttr.size, posAttr.type, false, GLImmediate.stride, posAttr.offset);
            GLctx.enableVertexAttribArray(this.positionLocation);
            if (this.hasNormal) {
              var normalAttr = clientAttributes[GLImmediate.NORMAL];
              GLctx.vertexAttribPointer(this.normalLocation, normalAttr.size, normalAttr.type, true, GLImmediate.stride, normalAttr.offset);
              GLctx.enableVertexAttribArray(this.normalLocation);
            }
            if (this.hasTextures) {
              for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
                var attribLoc = this.texCoordLocations[i];
                if (attribLoc === undefined || attribLoc < 0) continue;
                var texAttr = clientAttributes[GLImmediate.TEXTURE0+i];
  
                if (texAttr.size) {
                  GLctx.vertexAttribPointer(attribLoc, texAttr.size, texAttr.type, false, GLImmediate.stride, texAttr.offset);
                  GLctx.enableVertexAttribArray(attribLoc);
                } else {
                  // These two might be dangerous, but let's try them.
                  GLctx.vertexAttrib4f(attribLoc, 0, 0, 0, 1);
                  GLctx.disableVertexAttribArray(attribLoc);
                }
                var t = 2/*t*/+i;
                if (this.textureMatrixLocations[i] && this.textureMatrixVersion[t] != GLImmediate.matrixVersion[t]) { // XXX might we need this even without the condition we are currently in?
                  this.textureMatrixVersion[t] = GLImmediate.matrixVersion[t];
                  GLctx.uniformMatrix4fv(this.textureMatrixLocations[i], false, GLImmediate.matrix[t]);
                }
              }
            }
            if (GLImmediate.enabledClientAttributes[GLImmediate.COLOR]) {
              var colorAttr = clientAttributes[GLImmediate.COLOR];
              GLctx.vertexAttribPointer(this.colorLocation, colorAttr.size, colorAttr.type, true, GLImmediate.stride, colorAttr.offset);
              GLctx.enableVertexAttribArray(this.colorLocation);
            }
            else if (this.hasColor) {
              GLctx.disableVertexAttribArray(this.colorLocation);
              GLctx.vertexAttrib4fv(this.colorLocation, GLImmediate.clientColor);
            }
            if (this.hasFog) {
              if (this.fogColorLocation) GLctx.uniform4fv(this.fogColorLocation, GLEmulation.fogColor);
              if (this.fogEndLocation) GLctx.uniform1f(this.fogEndLocation, GLEmulation.fogEnd);
              if (this.fogScaleLocation) GLctx.uniform1f(this.fogScaleLocation, 1/(GLEmulation.fogEnd - GLEmulation.fogStart));
              if (this.fogDensityLocation) GLctx.uniform1f(this.fogDensityLocation, GLEmulation.fogDensity);
            }
          },
  
          cleanup: function cleanup() {
            GLctx.disableVertexAttribArray(this.positionLocation);
            if (this.hasTextures) {
              for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
                if (GLImmediate.enabledClientAttributes[GLImmediate.TEXTURE0+i] && this.texCoordLocations[i] >= 0) {
                  GLctx.disableVertexAttribArray(this.texCoordLocations[i]);
                }
              }
            }
            if (this.hasColor) {
              GLctx.disableVertexAttribArray(this.colorLocation);
            }
            if (this.hasNormal) {
              GLctx.disableVertexAttribArray(this.normalLocation);
            }
            if (!GL.currProgram) {
              GLctx.useProgram(null);
              GLImmediate.fixedFunctionProgram = 0;
            }
            if (!GL.currArrayBuffer) {
              GLctx.bindBuffer(GLctx.ARRAY_BUFFER, null);
              GLImmediate.lastArrayBuffer = null;
            }
  
            GLImmediate.lastRenderer = null;
            GLImmediate.lastProgram = null;
            GLImmediate.matricesModified = true;
          }
        };
        ret.init();
        return ret;
      },setupFuncs:function () {
        // Replace some functions with immediate-mode aware versions. If there are no client
        // attributes enabled, and we use webgl-friendly modes (no GL_QUADS), then no need
        // for emulation
        _glDrawArrays = _emscripten_glDrawArrays = function _glDrawArrays(mode, first, count) {
          if (GLImmediate.totalEnabledClientAttributes == 0 && mode <= 6) {
            GLctx.drawArrays(mode, first, count);
            return;
          }
          GLImmediate.prepareClientAttributes(count, false);
          GLImmediate.mode = mode;
          if (!GL.currArrayBuffer) {
            GLImmediate.vertexData = HEAPF32.subarray((GLImmediate.vertexPointer)>>2,(GLImmediate.vertexPointer + (first+count)*GLImmediate.stride)>>2); // XXX assuming float
            GLImmediate.firstVertex = first;
            GLImmediate.lastVertex = first + count;
          }
          GLImmediate.flush(null, first);
          GLImmediate.mode = -1;
        };
  
        _glDrawElements = _emscripten_glDrawElements = function _glDrawElements(mode, count, type, indices, start, end) { // start, end are given if we come from glDrawRangeElements
          if (GLImmediate.totalEnabledClientAttributes == 0 && mode <= 6 && GL.currElementArrayBuffer) {
            GLctx.drawElements(mode, count, type, indices);
            return;
          }
          GLImmediate.prepareClientAttributes(count, false);
          GLImmediate.mode = mode;
          if (!GL.currArrayBuffer) {
            GLImmediate.firstVertex = end ? start : TOTAL_MEMORY; // if we don't know the start, set an invalid value and we will calculate it later from the indices
            GLImmediate.lastVertex = end ? end+1 : 0;
            GLImmediate.vertexData = HEAPF32.subarray((GLImmediate.vertexPointer)>>2,((end ? GLImmediate.vertexPointer + (end+1)*GLImmediate.stride : TOTAL_MEMORY))>>2); // XXX assuming float
          }
          GLImmediate.flush(count, 0, indices);
          GLImmediate.mode = -1;
        };
  
        // TexEnv stuff needs to be prepared early, so do it here.
        // init() is too late for -O2, since it freezes the GL functions
        // by that point.
        GLImmediate.MapTreeLib = GLImmediate.spawnMapTreeLib();
        GLImmediate.spawnMapTreeLib = null;
  
        GLImmediate.TexEnvJIT = GLImmediate.spawnTexEnvJIT();
        GLImmediate.spawnTexEnvJIT = null;
  
        GLImmediate.setupHooks();
      },setupHooks:function () {
        if (!GLEmulation.hasRunInit) {
          GLEmulation.init();
        }
  
        var glActiveTexture = _glActiveTexture;
        _glActiveTexture = _emscripten_glActiveTexture = function _glActiveTexture(texture) {
          GLImmediate.TexEnvJIT.hook_activeTexture(texture);
          glActiveTexture(texture);
        };
  
        var glEnable = _glEnable;
        _glEnable = _emscripten_glEnable = function _glEnable(cap) {
          GLImmediate.TexEnvJIT.hook_enable(cap);
          glEnable(cap);
        };
        var glDisable = _glDisable;
        _glDisable = _emscripten_glDisable = function _glDisable(cap) {
          GLImmediate.TexEnvJIT.hook_disable(cap);
          glDisable(cap);
        };
  
        var glTexEnvf = (typeof(_glTexEnvf) != 'undefined') ? _glTexEnvf : function(){};
        _glTexEnvf = _emscripten_glTexEnvf = function _glTexEnvf(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_texEnvf(target, pname, param);
          // Don't call old func, since we are the implementor.
          //glTexEnvf(target, pname, param);
        };
        var glTexEnvi = (typeof(_glTexEnvi) != 'undefined') ? _glTexEnvi : function(){};
        _glTexEnvi = _emscripten_glTexEnvi = function _glTexEnvi(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_texEnvi(target, pname, param);
          // Don't call old func, since we are the implementor.
          //glTexEnvi(target, pname, param);
        };
        var glTexEnvfv = (typeof(_glTexEnvfv) != 'undefined') ? _glTexEnvfv : function(){};
        _glTexEnvfv = _emscripten_glTexEnvfv = function _glTexEnvfv(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_texEnvfv(target, pname, param);
          // Don't call old func, since we are the implementor.
          //glTexEnvfv(target, pname, param);
        };
  
        _glGetTexEnviv = function _glGetTexEnviv(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_getTexEnviv(target, pname, param);
        };
  
        _glGetTexEnvfv = function _glGetTexEnvfv(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_getTexEnvfv(target, pname, param);
        };
  
        var glGetIntegerv = _glGetIntegerv;
        _glGetIntegerv = _emscripten_glGetIntegerv = function _glGetIntegerv(pname, params) {
          switch (pname) {
            case 0x8B8D: { // GL_CURRENT_PROGRAM
              // Just query directly so we're working with WebGL objects.
              var cur = GLctx.getParameter(GLctx.CURRENT_PROGRAM);
              if (cur == GLImmediate.fixedFunctionProgram) {
                // Pretend we're not using a program.
                HEAP32[((params)>>2)]=0;
                return;
              }
              break;
            }
          }
          glGetIntegerv(pname, params);
        };
      },initted:false,init:function () {
        Module.printErr('WARNING: using emscripten GL immediate mode emulation. This is very limited in what it supports');
        GLImmediate.initted = true;
  
        if (!Module.useWebGL) return; // a 2D canvas may be currently used TODO: make sure we are actually called in that case
  
        // User can override the maximum number of texture units that we emulate. Using fewer texture units increases runtime performance
        // slightly, so it is advantageous to choose as small value as needed.
        GLImmediate.MAX_TEXTURES = Module['GL_MAX_TEXTURE_IMAGE_UNITS'] || GLctx.getParameter(GLctx.MAX_TEXTURE_IMAGE_UNITS);
  
        GLImmediate.TexEnvJIT.init(GLctx, GLImmediate.MAX_TEXTURES);
  
        GLImmediate.NUM_ATTRIBUTES = 3 /*pos+normal+color attributes*/ + GLImmediate.MAX_TEXTURES;
        GLImmediate.clientAttributes = [];
        GLEmulation.enabledClientAttribIndices = [];
        for (var i = 0; i < GLImmediate.NUM_ATTRIBUTES; i++) {
          GLImmediate.clientAttributes.push({});
          GLEmulation.enabledClientAttribIndices.push(false);
        }
  
        // Initialize matrix library
        // When user sets a matrix, increment a 'version number' on the new data, and when rendering, submit
        // the matrices to the shader program only if they have an old version of the data.
        GLImmediate.matrix = [];
        GLImmediate.matrixStack = [];
        GLImmediate.matrixVersion = [];
        for (var i = 0; i < 2 + GLImmediate.MAX_TEXTURES; i++) { // Modelview, Projection, plus one matrix for each texture coordinate.
          GLImmediate.matrixStack.push([]);
          GLImmediate.matrixVersion.push(0);
          GLImmediate.matrix.push(GLImmediate.matrixLib.mat4.create());
          GLImmediate.matrixLib.mat4.identity(GLImmediate.matrix[i]);
        }
  
        // Renderer cache
        GLImmediate.rendererCache = GLImmediate.MapTreeLib.create();
  
        // Buffers for data
        GLImmediate.tempData = new Float32Array(GL.MAX_TEMP_BUFFER_SIZE >> 2);
        GLImmediate.indexData = new Uint16Array(GL.MAX_TEMP_BUFFER_SIZE >> 1);
  
        GLImmediate.vertexDataU8 = new Uint8Array(GLImmediate.tempData.buffer);
  
        GL.generateTempBuffers(true);
  
        GLImmediate.clientColor = new Float32Array([1, 1, 1, 1]);
      },prepareClientAttributes:function prepareClientAttributes(count, beginEnd) {
        // If no client attributes were modified since we were last called, do nothing. Note that this
        // does not work for glBegin/End, where we generate renderer components dynamically and then
        // disable them ourselves, but it does help with glDrawElements/Arrays.
        if (!GLImmediate.modifiedClientAttributes) {
          GLImmediate.vertexCounter = (GLImmediate.stride * count) / 4; // XXX assuming float
          return;
        }
        GLImmediate.modifiedClientAttributes = false;
  
        // The role of prepareClientAttributes is to examine the set of client-side vertex attribute buffers
        // that user code has submitted, and to prepare them to be uploaded to a VBO in GPU memory
        // (since WebGL does not support client-side rendering, i.e. rendering from vertex data in CPU memory)
        // User can submit vertex data generally in three different configurations:
        // 1. Fully planar: all attributes are in their own separate tightly-packed arrays in CPU memory.
        // 2. Fully interleaved: all attributes share a single array where data is interleaved something like (pos,uv,normal), (pos,uv,normal), ...
        // 3. Complex hybrid: Multiple separate arrays that either are sparsely strided, and/or partially interleave vertex attributes.
  
        // For simplicity, we support the case (2) as the fast case. For (1) and (3), we do a memory copy of the
        // vertex data here to prepare a relayouted buffer that is of the structure in case (2). The reason
        // for this is that it allows the emulation code to get away with using just one VBO buffer for rendering,
        // and not have to maintain multiple ones. Therefore cases (1) and (3) will be very slow, and case (2) is fast.
  
        // Detect which case we are in by using a quick heuristic by examining the strides of the buffers. If all the buffers have identical 
        // stride, we assume we have case (2), otherwise we have something more complex.
        var clientStartPointer = 0x7FFFFFFF;
        var bytes = 0; // Total number of bytes taken up by a single vertex.
        var minStride = 0x7FFFFFFF;
        var maxStride = 0;
        var attributes = GLImmediate.liveClientAttributes;
        attributes.length = 0;
        for (var i = 0; i < 3+GLImmediate.MAX_TEXTURES; i++) {
          if (GLImmediate.enabledClientAttributes[i]) {
            var attr = GLImmediate.clientAttributes[i];
            attributes.push(attr);
            clientStartPointer = Math.min(clientStartPointer, attr.pointer);
            attr.sizeBytes = attr.size * GL.byteSizeByType[attr.type - GL.byteSizeByTypeRoot];
            bytes += attr.sizeBytes;
            minStride = Math.min(minStride, attr.stride);
            maxStride = Math.max(maxStride, attr.stride);
          }
        }
  
        if ((minStride != maxStride || maxStride < bytes) && !beginEnd) {
          // We are in cases (1) or (3): slow path, shuffle the data around into a single interleaved vertex buffer.
          // The immediate-mode glBegin()/glEnd() vertex submission gets automatically generated in appropriate layout,
          // so never need to come down this path if that was used.
          if (!GLImmediate.restrideBuffer) GLImmediate.restrideBuffer = _malloc(GL.MAX_TEMP_BUFFER_SIZE);
          var start = GLImmediate.restrideBuffer;
          bytes = 0;
          // calculate restrided offsets and total size
          for (var i = 0; i < attributes.length; i++) {
            var attr = attributes[i];
            var size = attr.sizeBytes;
            if (size % 4 != 0) size += 4 - (size % 4); // align everything
            attr.offset = bytes;
            bytes += size;
          }
          // copy out the data (we need to know the stride for that, and define attr.pointer)
          for (var i = 0; i < attributes.length; i++) {
            var attr = attributes[i];
            var srcStride = Math.max(attr.sizeBytes, attr.stride);
            if ((srcStride & 3) == 0 && (attr.sizeBytes & 3) == 0) {
              var size4 = attr.sizeBytes>>2;
              var srcStride4 = Math.max(attr.sizeBytes, attr.stride)>>2;
              for (var j = 0; j < count; j++) {
                for (var k = 0; k < size4; k++) { // copy in chunks of 4 bytes, our alignment makes this possible
                  HEAP32[((start + attr.offset + bytes*j)>>2) + k] = HEAP32[(attr.pointer>>2) + j*srcStride4 + k];
                }
              }
            } else {
              for (var j = 0; j < count; j++) {
                for (var k = 0; k < attr.sizeBytes; k++) { // source data was not aligned to multiples of 4, must copy byte by byte.
                  HEAP8[start + attr.offset + bytes*j + k] = HEAP8[attr.pointer + j*srcStride + k];
                }
              }
            }
            attr.pointer = start + attr.offset;
          }
          GLImmediate.stride = bytes;
          GLImmediate.vertexPointer = start;
        } else {
          // case (2): fast path, all data is interleaved to a single vertex array so we can get away with a single VBO upload.
          if (GL.currArrayBuffer) {
            GLImmediate.vertexPointer = 0;
          } else {
            GLImmediate.vertexPointer = clientStartPointer;
          }
          for (var i = 0; i < attributes.length; i++) {
            var attr = attributes[i];
            attr.offset = attr.pointer - GLImmediate.vertexPointer; // Compute what will be the offset of this attribute in the VBO after we upload.
          }
          GLImmediate.stride = Math.max(maxStride, bytes);
        }
        if (!beginEnd) {
          GLImmediate.vertexCounter = (GLImmediate.stride * count) / 4; // XXX assuming float
        }
      },flush:function flush(numProvidedIndexes, startIndex, ptr) {
        startIndex = startIndex || 0;
        ptr = ptr || 0;
  
        var renderer = GLImmediate.getRenderer();
  
        // Generate index data in a format suitable for GLES 2.0/WebGL
        var numVertexes = 4 * GLImmediate.vertexCounter / GLImmediate.stride;
        var emulatedElementArrayBuffer = false;
        var numIndexes = 0;
        if (numProvidedIndexes) {
          numIndexes = numProvidedIndexes;
          if (!GL.currArrayBuffer && GLImmediate.firstVertex > GLImmediate.lastVertex) {
            // Figure out the first and last vertex from the index data
            for (var i = 0; i < numProvidedIndexes; i++) {
              var currIndex = HEAPU16[(((ptr)+(i*2))>>1)];
              GLImmediate.firstVertex = Math.min(GLImmediate.firstVertex, currIndex);
              GLImmediate.lastVertex = Math.max(GLImmediate.lastVertex, currIndex+1);
            }
          }
          if (!GL.currElementArrayBuffer) {
            // If no element array buffer is bound, then indices is a literal pointer to clientside data
            var indexBuffer = GL.getTempIndexBuffer(numProvidedIndexes << 1);
            GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, indexBuffer);
            GLctx.bufferSubData(GLctx.ELEMENT_ARRAY_BUFFER, 0, HEAPU16.subarray((ptr)>>1,(ptr + (numProvidedIndexes << 1))>>1));
            ptr = 0;
            emulatedElementArrayBuffer = true;
          }
        } else if (GLImmediate.mode > 6) { // above GL_TRIANGLE_FAN are the non-GL ES modes
          if (GLImmediate.mode != 7) throw 'unsupported immediate mode ' + GLImmediate.mode; // GL_QUADS
          // GLImmediate.firstVertex is the first vertex we want. Quad indexes are in the pattern
          // 0 1 2, 0 2 3, 4 5 6, 4 6 7, so we need to look at index firstVertex * 1.5 to see it.
          // Then since indexes are 2 bytes each, that means 3
          ptr = GLImmediate.firstVertex*3;
          var numQuads = numVertexes / 4;
          numIndexes = numQuads * 6; // 0 1 2, 0 2 3 pattern
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.tempQuadIndexBuffer);
          emulatedElementArrayBuffer = true;
        }
  
        renderer.prepare();
  
        if (numIndexes) {
          GLctx.drawElements(GLctx.TRIANGLES, numIndexes, GLctx.UNSIGNED_SHORT, ptr);
        } else {
          GLctx.drawArrays(GLImmediate.mode, startIndex, numVertexes);
        }
  
        if (emulatedElementArrayBuffer) {
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.buffers[GL.currElementArrayBuffer] || null);
        }
  
      }};
  GLImmediate.matrixLib = (function() {
  
  /**
   * @fileoverview gl-matrix - High performance matrix and vector operations for WebGL
   * @author Brandon Jones
   * @version 1.2.4
   */
  
  // Modifed for emscripten: Global scoping etc.
  
  /*
   * Copyright (c) 2011 Brandon Jones
   *
   * This software is provided 'as-is', without any express or implied
   * warranty. In no event will the authors be held liable for any damages
   * arising from the use of this software.
   *
   * Permission is granted to anyone to use this software for any purpose,
   * including commercial applications, and to alter it and redistribute it
   * freely, subject to the following restrictions:
   *
   *    1. The origin of this software must not be misrepresented; you must not
   *    claim that you wrote the original software. If you use this software
   *    in a product, an acknowledgment in the product documentation would be
   *    appreciated but is not required.
   *
   *    2. Altered source versions must be plainly marked as such, and must not
   *    be misrepresented as being the original software.
   *
   *    3. This notice may not be removed or altered from any source
   *    distribution.
   */
  
  
  /**
   * @class 3 Dimensional Vector
   * @name vec3
   */
  var vec3 = {};
  
  /**
   * @class 3x3 Matrix
   * @name mat3
   */
  var mat3 = {};
  
  /**
   * @class 4x4 Matrix
   * @name mat4
   */
  var mat4 = {};
  
  /**
   * @class Quaternion
   * @name quat4
   */
  var quat4 = {};
  
  var MatrixArray = Float32Array;
  
  /*
   * vec3
   */
   
  /**
   * Creates a new instance of a vec3 using the default array type
   * Any javascript array-like objects containing at least 3 numeric elements can serve as a vec3
   *
   * @param {vec3} [vec] vec3 containing values to initialize with
   *
   * @returns {vec3} New vec3
   */
  vec3.create = function (vec) {
      var dest = new MatrixArray(3);
  
      if (vec) {
          dest[0] = vec[0];
          dest[1] = vec[1];
          dest[2] = vec[2];
      } else {
          dest[0] = dest[1] = dest[2] = 0;
      }
  
      return dest;
  };
  
  /**
   * Copies the values of one vec3 to another
   *
   * @param {vec3} vec vec3 containing values to copy
   * @param {vec3} dest vec3 receiving copied values
   *
   * @returns {vec3} dest
   */
  vec3.set = function (vec, dest) {
      dest[0] = vec[0];
      dest[1] = vec[1];
      dest[2] = vec[2];
  
      return dest;
  };
  
  /**
   * Performs a vector addition
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.add = function (vec, vec2, dest) {
      if (!dest || vec === dest) {
          vec[0] += vec2[0];
          vec[1] += vec2[1];
          vec[2] += vec2[2];
          return vec;
      }
  
      dest[0] = vec[0] + vec2[0];
      dest[1] = vec[1] + vec2[1];
      dest[2] = vec[2] + vec2[2];
      return dest;
  };
  
  /**
   * Performs a vector subtraction
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.subtract = function (vec, vec2, dest) {
      if (!dest || vec === dest) {
          vec[0] -= vec2[0];
          vec[1] -= vec2[1];
          vec[2] -= vec2[2];
          return vec;
      }
  
      dest[0] = vec[0] - vec2[0];
      dest[1] = vec[1] - vec2[1];
      dest[2] = vec[2] - vec2[2];
      return dest;
  };
  
  /**
   * Performs a vector multiplication
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.multiply = function (vec, vec2, dest) {
      if (!dest || vec === dest) {
          vec[0] *= vec2[0];
          vec[1] *= vec2[1];
          vec[2] *= vec2[2];
          return vec;
      }
  
      dest[0] = vec[0] * vec2[0];
      dest[1] = vec[1] * vec2[1];
      dest[2] = vec[2] * vec2[2];
      return dest;
  };
  
  /**
   * Negates the components of a vec3
   *
   * @param {vec3} vec vec3 to negate
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.negate = function (vec, dest) {
      if (!dest) { dest = vec; }
  
      dest[0] = -vec[0];
      dest[1] = -vec[1];
      dest[2] = -vec[2];
      return dest;
  };
  
  /**
   * Multiplies the components of a vec3 by a scalar value
   *
   * @param {vec3} vec vec3 to scale
   * @param {number} val Value to scale by
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.scale = function (vec, val, dest) {
      if (!dest || vec === dest) {
          vec[0] *= val;
          vec[1] *= val;
          vec[2] *= val;
          return vec;
      }
  
      dest[0] = vec[0] * val;
      dest[1] = vec[1] * val;
      dest[2] = vec[2] * val;
      return dest;
  };
  
  /**
   * Generates a unit vector of the same direction as the provided vec3
   * If vector length is 0, returns [0, 0, 0]
   *
   * @param {vec3} vec vec3 to normalize
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.normalize = function (vec, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2],
          len = Math.sqrt(x * x + y * y + z * z);
  
      if (!len) {
          dest[0] = 0;
          dest[1] = 0;
          dest[2] = 0;
          return dest;
      } else if (len === 1) {
          dest[0] = x;
          dest[1] = y;
          dest[2] = z;
          return dest;
      }
  
      len = 1 / len;
      dest[0] = x * len;
      dest[1] = y * len;
      dest[2] = z * len;
      return dest;
  };
  
  /**
   * Generates the cross product of two vec3s
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.cross = function (vec, vec2, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2],
          x2 = vec2[0], y2 = vec2[1], z2 = vec2[2];
  
      dest[0] = y * z2 - z * y2;
      dest[1] = z * x2 - x * z2;
      dest[2] = x * y2 - y * x2;
      return dest;
  };
  
  /**
   * Caclulates the length of a vec3
   *
   * @param {vec3} vec vec3 to calculate length of
   *
   * @returns {number} Length of vec
   */
  vec3.length = function (vec) {
      var x = vec[0], y = vec[1], z = vec[2];
      return Math.sqrt(x * x + y * y + z * z);
  };
  
  /**
   * Caclulates the dot product of two vec3s
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   *
   * @returns {number} Dot product of vec and vec2
   */
  vec3.dot = function (vec, vec2) {
      return vec[0] * vec2[0] + vec[1] * vec2[1] + vec[2] * vec2[2];
  };
  
  /**
   * Generates a unit vector pointing from one vector to another
   *
   * @param {vec3} vec Origin vec3
   * @param {vec3} vec2 vec3 to point to
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.direction = function (vec, vec2, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0] - vec2[0],
          y = vec[1] - vec2[1],
          z = vec[2] - vec2[2],
          len = Math.sqrt(x * x + y * y + z * z);
  
      if (!len) {
          dest[0] = 0;
          dest[1] = 0;
          dest[2] = 0;
          return dest;
      }
  
      len = 1 / len;
      dest[0] = x * len;
      dest[1] = y * len;
      dest[2] = z * len;
      return dest;
  };
  
  /**
   * Performs a linear interpolation between two vec3
   *
   * @param {vec3} vec First vector
   * @param {vec3} vec2 Second vector
   * @param {number} lerp Interpolation amount between the two inputs
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.lerp = function (vec, vec2, lerp, dest) {
      if (!dest) { dest = vec; }
  
      dest[0] = vec[0] + lerp * (vec2[0] - vec[0]);
      dest[1] = vec[1] + lerp * (vec2[1] - vec[1]);
      dest[2] = vec[2] + lerp * (vec2[2] - vec[2]);
  
      return dest;
  };
  
  /**
   * Calculates the euclidian distance between two vec3
   *
   * Params:
   * @param {vec3} vec First vector
   * @param {vec3} vec2 Second vector
   *
   * @returns {number} Distance between vec and vec2
   */
  vec3.dist = function (vec, vec2) {
      var x = vec2[0] - vec[0],
          y = vec2[1] - vec[1],
          z = vec2[2] - vec[2];
          
      return Math.sqrt(x*x + y*y + z*z);
  };
  
  /**
   * Projects the specified vec3 from screen space into object space
   * Based on the <a href="http://webcvs.freedesktop.org/mesa/Mesa/src/glu/mesa/project.c?revision=1.4&view=markup">Mesa gluUnProject implementation</a>
   *
   * @param {vec3} vec Screen-space vector to project
   * @param {mat4} view View matrix
   * @param {mat4} proj Projection matrix
   * @param {vec4} viewport Viewport as given to gl.viewport [x, y, width, height]
   * @param {vec3} [dest] vec3 receiving unprojected result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.unproject = function (vec, view, proj, viewport, dest) {
      if (!dest) { dest = vec; }
  
      var m = mat4.create();
      var v = new MatrixArray(4);
      
      v[0] = (vec[0] - viewport[0]) * 2.0 / viewport[2] - 1.0;
      v[1] = (vec[1] - viewport[1]) * 2.0 / viewport[3] - 1.0;
      v[2] = 2.0 * vec[2] - 1.0;
      v[3] = 1.0;
      
      mat4.multiply(proj, view, m);
      if(!mat4.inverse(m)) { return null; }
      
      mat4.multiplyVec4(m, v);
      if(v[3] === 0.0) { return null; }
  
      dest[0] = v[0] / v[3];
      dest[1] = v[1] / v[3];
      dest[2] = v[2] / v[3];
      
      return dest;
  };
  
  /**
   * Returns a string representation of a vector
   *
   * @param {vec3} vec Vector to represent as a string
   *
   * @returns {string} String representation of vec
   */
  vec3.str = function (vec) {
      return '[' + vec[0] + ', ' + vec[1] + ', ' + vec[2] + ']';
  };
  
  /*
   * mat3
   */
  
  /**
   * Creates a new instance of a mat3 using the default array type
   * Any javascript array-like object containing at least 9 numeric elements can serve as a mat3
   *
   * @param {mat3} [mat] mat3 containing values to initialize with
   *
   * @returns {mat3} New mat3
   */
  mat3.create = function (mat) {
      var dest = new MatrixArray(9);
  
      if (mat) {
          dest[0] = mat[0];
          dest[1] = mat[1];
          dest[2] = mat[2];
          dest[3] = mat[3];
          dest[4] = mat[4];
          dest[5] = mat[5];
          dest[6] = mat[6];
          dest[7] = mat[7];
          dest[8] = mat[8];
      }
  
      return dest;
  };
  
  /**
   * Copies the values of one mat3 to another
   *
   * @param {mat3} mat mat3 containing values to copy
   * @param {mat3} dest mat3 receiving copied values
   *
   * @returns {mat3} dest
   */
  mat3.set = function (mat, dest) {
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[8] = mat[8];
      return dest;
  };
  
  /**
   * Sets a mat3 to an identity matrix
   *
   * @param {mat3} dest mat3 to set
   *
   * @returns dest if specified, otherwise a new mat3
   */
  mat3.identity = function (dest) {
      if (!dest) { dest = mat3.create(); }
      dest[0] = 1;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 1;
      dest[5] = 0;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = 1;
      return dest;
  };
  
  /**
   * Transposes a mat3 (flips the values over the diagonal)
   *
   * Params:
   * @param {mat3} mat mat3 to transpose
   * @param {mat3} [dest] mat3 receiving transposed values. If not specified result is written to mat
   *
   * @returns {mat3} dest is specified, mat otherwise
   */
  mat3.transpose = function (mat, dest) {
      // If we are transposing ourselves we can skip a few steps but have to cache some values
      if (!dest || mat === dest) {
          var a01 = mat[1], a02 = mat[2],
              a12 = mat[5];
  
          mat[1] = mat[3];
          mat[2] = mat[6];
          mat[3] = a01;
          mat[5] = mat[7];
          mat[6] = a02;
          mat[7] = a12;
          return mat;
      }
  
      dest[0] = mat[0];
      dest[1] = mat[3];
      dest[2] = mat[6];
      dest[3] = mat[1];
      dest[4] = mat[4];
      dest[5] = mat[7];
      dest[6] = mat[2];
      dest[7] = mat[5];
      dest[8] = mat[8];
      return dest;
  };
  
  /**
   * Copies the elements of a mat3 into the upper 3x3 elements of a mat4
   *
   * @param {mat3} mat mat3 containing values to copy
   * @param {mat4} [dest] mat4 receiving copied values
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat3.toMat4 = function (mat, dest) {
      if (!dest) { dest = mat4.create(); }
  
      dest[15] = 1;
      dest[14] = 0;
      dest[13] = 0;
      dest[12] = 0;
  
      dest[11] = 0;
      dest[10] = mat[8];
      dest[9] = mat[7];
      dest[8] = mat[6];
  
      dest[7] = 0;
      dest[6] = mat[5];
      dest[5] = mat[4];
      dest[4] = mat[3];
  
      dest[3] = 0;
      dest[2] = mat[2];
      dest[1] = mat[1];
      dest[0] = mat[0];
  
      return dest;
  };
  
  /**
   * Returns a string representation of a mat3
   *
   * @param {mat3} mat mat3 to represent as a string
   *
   * @param {string} String representation of mat
   */
  mat3.str = function (mat) {
      return '[' + mat[0] + ', ' + mat[1] + ', ' + mat[2] +
          ', ' + mat[3] + ', ' + mat[4] + ', ' + mat[5] +
          ', ' + mat[6] + ', ' + mat[7] + ', ' + mat[8] + ']';
  };
  
  /*
   * mat4
   */
  
  /**
   * Creates a new instance of a mat4 using the default array type
   * Any javascript array-like object containing at least 16 numeric elements can serve as a mat4
   *
   * @param {mat4} [mat] mat4 containing values to initialize with
   *
   * @returns {mat4} New mat4
   */
  mat4.create = function (mat) {
      var dest = new MatrixArray(16);
  
      if (mat) {
          dest[0] = mat[0];
          dest[1] = mat[1];
          dest[2] = mat[2];
          dest[3] = mat[3];
          dest[4] = mat[4];
          dest[5] = mat[5];
          dest[6] = mat[6];
          dest[7] = mat[7];
          dest[8] = mat[8];
          dest[9] = mat[9];
          dest[10] = mat[10];
          dest[11] = mat[11];
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      return dest;
  };
  
  /**
   * Copies the values of one mat4 to another
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat4} dest mat4 receiving copied values
   *
   * @returns {mat4} dest
   */
  mat4.set = function (mat, dest) {
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[8] = mat[8];
      dest[9] = mat[9];
      dest[10] = mat[10];
      dest[11] = mat[11];
      dest[12] = mat[12];
      dest[13] = mat[13];
      dest[14] = mat[14];
      dest[15] = mat[15];
      return dest;
  };
  
  /**
   * Sets a mat4 to an identity matrix
   *
   * @param {mat4} dest mat4 to set
   *
   * @returns {mat4} dest
   */
  mat4.identity = function (dest) {
      if (!dest) { dest = mat4.create(); }
      dest[0] = 1;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 0;
      dest[5] = 1;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = 0;
      dest[9] = 0;
      dest[10] = 1;
      dest[11] = 0;
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = 0;
      dest[15] = 1;
      return dest;
  };
  
  /**
   * Transposes a mat4 (flips the values over the diagonal)
   *
   * @param {mat4} mat mat4 to transpose
   * @param {mat4} [dest] mat4 receiving transposed values. If not specified result is written to mat
   *
   * @param {mat4} dest is specified, mat otherwise
   */
  mat4.transpose = function (mat, dest) {
      // If we are transposing ourselves we can skip a few steps but have to cache some values
      if (!dest || mat === dest) {
          var a01 = mat[1], a02 = mat[2], a03 = mat[3],
              a12 = mat[6], a13 = mat[7],
              a23 = mat[11];
  
          mat[1] = mat[4];
          mat[2] = mat[8];
          mat[3] = mat[12];
          mat[4] = a01;
          mat[6] = mat[9];
          mat[7] = mat[13];
          mat[8] = a02;
          mat[9] = a12;
          mat[11] = mat[14];
          mat[12] = a03;
          mat[13] = a13;
          mat[14] = a23;
          return mat;
      }
  
      dest[0] = mat[0];
      dest[1] = mat[4];
      dest[2] = mat[8];
      dest[3] = mat[12];
      dest[4] = mat[1];
      dest[5] = mat[5];
      dest[6] = mat[9];
      dest[7] = mat[13];
      dest[8] = mat[2];
      dest[9] = mat[6];
      dest[10] = mat[10];
      dest[11] = mat[14];
      dest[12] = mat[3];
      dest[13] = mat[7];
      dest[14] = mat[11];
      dest[15] = mat[15];
      return dest;
  };
  
  /**
   * Calculates the determinant of a mat4
   *
   * @param {mat4} mat mat4 to calculate determinant of
   *
   * @returns {number} determinant of mat
   */
  mat4.determinant = function (mat) {
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],
          a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],
          a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],
          a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15];
  
      return (a30 * a21 * a12 * a03 - a20 * a31 * a12 * a03 - a30 * a11 * a22 * a03 + a10 * a31 * a22 * a03 +
              a20 * a11 * a32 * a03 - a10 * a21 * a32 * a03 - a30 * a21 * a02 * a13 + a20 * a31 * a02 * a13 +
              a30 * a01 * a22 * a13 - a00 * a31 * a22 * a13 - a20 * a01 * a32 * a13 + a00 * a21 * a32 * a13 +
              a30 * a11 * a02 * a23 - a10 * a31 * a02 * a23 - a30 * a01 * a12 * a23 + a00 * a31 * a12 * a23 +
              a10 * a01 * a32 * a23 - a00 * a11 * a32 * a23 - a20 * a11 * a02 * a33 + a10 * a21 * a02 * a33 +
              a20 * a01 * a12 * a33 - a00 * a21 * a12 * a33 - a10 * a01 * a22 * a33 + a00 * a11 * a22 * a33);
  };
  
  /**
   * Calculates the inverse matrix of a mat4
   *
   * @param {mat4} mat mat4 to calculate inverse of
   * @param {mat4} [dest] mat4 receiving inverse matrix. If not specified result is written to mat
   *
   * @param {mat4} dest is specified, mat otherwise, null if matrix cannot be inverted
   */
  mat4.inverse = function (mat, dest) {
      if (!dest) { dest = mat; }
  
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],
          a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],
          a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],
          a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15],
  
          b00 = a00 * a11 - a01 * a10,
          b01 = a00 * a12 - a02 * a10,
          b02 = a00 * a13 - a03 * a10,
          b03 = a01 * a12 - a02 * a11,
          b04 = a01 * a13 - a03 * a11,
          b05 = a02 * a13 - a03 * a12,
          b06 = a20 * a31 - a21 * a30,
          b07 = a20 * a32 - a22 * a30,
          b08 = a20 * a33 - a23 * a30,
          b09 = a21 * a32 - a22 * a31,
          b10 = a21 * a33 - a23 * a31,
          b11 = a22 * a33 - a23 * a32,
  
          d = (b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06),
          invDet;
  
          // Calculate the determinant
          if (!d) { return null; }
          invDet = 1 / d;
  
      dest[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;
      dest[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;
      dest[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;
      dest[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;
      dest[4] = (-a10 * b11 + a12 * b08 - a13 * b07) * invDet;
      dest[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;
      dest[6] = (-a30 * b05 + a32 * b02 - a33 * b01) * invDet;
      dest[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;
      dest[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;
      dest[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;
      dest[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;
      dest[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;
      dest[12] = (-a10 * b09 + a11 * b07 - a12 * b06) * invDet;
      dest[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;
      dest[14] = (-a30 * b03 + a31 * b01 - a32 * b00) * invDet;
      dest[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;
  
      return dest;
  };
  
  /**
   * Copies the upper 3x3 elements of a mat4 into another mat4
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat4} [dest] mat4 receiving copied values
   *
   * @returns {mat4} dest is specified, a new mat4 otherwise
   */
  mat4.toRotationMat = function (mat, dest) {
      if (!dest) { dest = mat4.create(); }
  
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[8] = mat[8];
      dest[9] = mat[9];
      dest[10] = mat[10];
      dest[11] = mat[11];
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = 0;
      dest[15] = 1;
  
      return dest;
  };
  
  /**
   * Copies the upper 3x3 elements of a mat4 into a mat3
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat3} [dest] mat3 receiving copied values
   *
   * @returns {mat3} dest is specified, a new mat3 otherwise
   */
  mat4.toMat3 = function (mat, dest) {
      if (!dest) { dest = mat3.create(); }
  
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[4];
      dest[4] = mat[5];
      dest[5] = mat[6];
      dest[6] = mat[8];
      dest[7] = mat[9];
      dest[8] = mat[10];
  
      return dest;
  };
  
  /**
   * Calculates the inverse of the upper 3x3 elements of a mat4 and copies the result into a mat3
   * The resulting matrix is useful for calculating transformed normals
   *
   * Params:
   * @param {mat4} mat mat4 containing values to invert and copy
   * @param {mat3} [dest] mat3 receiving values
   *
   * @returns {mat3} dest is specified, a new mat3 otherwise, null if the matrix cannot be inverted
   */
  mat4.toInverseMat3 = function (mat, dest) {
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2],
          a10 = mat[4], a11 = mat[5], a12 = mat[6],
          a20 = mat[8], a21 = mat[9], a22 = mat[10],
  
          b01 = a22 * a11 - a12 * a21,
          b11 = -a22 * a10 + a12 * a20,
          b21 = a21 * a10 - a11 * a20,
  
          d = a00 * b01 + a01 * b11 + a02 * b21,
          id;
  
      if (!d) { return null; }
      id = 1 / d;
  
      if (!dest) { dest = mat3.create(); }
  
      dest[0] = b01 * id;
      dest[1] = (-a22 * a01 + a02 * a21) * id;
      dest[2] = (a12 * a01 - a02 * a11) * id;
      dest[3] = b11 * id;
      dest[4] = (a22 * a00 - a02 * a20) * id;
      dest[5] = (-a12 * a00 + a02 * a10) * id;
      dest[6] = b21 * id;
      dest[7] = (-a21 * a00 + a01 * a20) * id;
      dest[8] = (a11 * a00 - a01 * a10) * id;
  
      return dest;
  };
  
  /**
   * Performs a matrix multiplication
   *
   * @param {mat4} mat First operand
   * @param {mat4} mat2 Second operand
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.multiply = function (mat, mat2, dest) {
      if (!dest) { dest = mat; }
  
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],
          a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],
          a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],
          a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15],
  
          b00 = mat2[0], b01 = mat2[1], b02 = mat2[2], b03 = mat2[3],
          b10 = mat2[4], b11 = mat2[5], b12 = mat2[6], b13 = mat2[7],
          b20 = mat2[8], b21 = mat2[9], b22 = mat2[10], b23 = mat2[11],
          b30 = mat2[12], b31 = mat2[13], b32 = mat2[14], b33 = mat2[15];
  
      dest[0] = b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30;
      dest[1] = b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31;
      dest[2] = b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32;
      dest[3] = b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33;
      dest[4] = b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30;
      dest[5] = b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31;
      dest[6] = b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32;
      dest[7] = b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33;
      dest[8] = b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30;
      dest[9] = b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31;
      dest[10] = b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32;
      dest[11] = b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33;
      dest[12] = b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30;
      dest[13] = b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31;
      dest[14] = b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32;
      dest[15] = b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33;
  
      return dest;
  };
  
  /**
   * Transforms a vec3 with the given matrix
   * 4th vector component is implicitly '1'
   *
   * @param {mat4} mat mat4 to transform the vector with
   * @param {vec3} vec vec3 to transform
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  mat4.multiplyVec3 = function (mat, vec, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2];
  
      dest[0] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12];
      dest[1] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13];
      dest[2] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14];
  
      return dest;
  };
  
  /**
   * Transforms a vec4 with the given matrix
   *
   * @param {mat4} mat mat4 to transform the vector with
   * @param {vec4} vec vec4 to transform
   * @param {vec4} [dest] vec4 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec4} dest if specified, vec otherwise
   */
  mat4.multiplyVec4 = function (mat, vec, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2], w = vec[3];
  
      dest[0] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12] * w;
      dest[1] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13] * w;
      dest[2] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14] * w;
      dest[3] = mat[3] * x + mat[7] * y + mat[11] * z + mat[15] * w;
  
      return dest;
  };
  
  /**
   * Translates a matrix by the given vector
   *
   * @param {mat4} mat mat4 to translate
   * @param {vec3} vec vec3 specifying the translation
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.translate = function (mat, vec, dest) {
      var x = vec[0], y = vec[1], z = vec[2],
          a00, a01, a02, a03,
          a10, a11, a12, a13,
          a20, a21, a22, a23;
  
      if (!dest || mat === dest) {
          mat[12] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12];
          mat[13] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13];
          mat[14] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14];
          mat[15] = mat[3] * x + mat[7] * y + mat[11] * z + mat[15];
          return mat;
      }
  
      a00 = mat[0]; a01 = mat[1]; a02 = mat[2]; a03 = mat[3];
      a10 = mat[4]; a11 = mat[5]; a12 = mat[6]; a13 = mat[7];
      a20 = mat[8]; a21 = mat[9]; a22 = mat[10]; a23 = mat[11];
  
      dest[0] = a00; dest[1] = a01; dest[2] = a02; dest[3] = a03;
      dest[4] = a10; dest[5] = a11; dest[6] = a12; dest[7] = a13;
      dest[8] = a20; dest[9] = a21; dest[10] = a22; dest[11] = a23;
  
      dest[12] = a00 * x + a10 * y + a20 * z + mat[12];
      dest[13] = a01 * x + a11 * y + a21 * z + mat[13];
      dest[14] = a02 * x + a12 * y + a22 * z + mat[14];
      dest[15] = a03 * x + a13 * y + a23 * z + mat[15];
      return dest;
  };
  
  /**
   * Scales a matrix by the given vector
   *
   * @param {mat4} mat mat4 to scale
   * @param {vec3} vec vec3 specifying the scale for each axis
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @param {mat4} dest if specified, mat otherwise
   */
  mat4.scale = function (mat, vec, dest) {
      var x = vec[0], y = vec[1], z = vec[2];
  
      if (!dest || mat === dest) {
          mat[0] *= x;
          mat[1] *= x;
          mat[2] *= x;
          mat[3] *= x;
          mat[4] *= y;
          mat[5] *= y;
          mat[6] *= y;
          mat[7] *= y;
          mat[8] *= z;
          mat[9] *= z;
          mat[10] *= z;
          mat[11] *= z;
          return mat;
      }
  
      dest[0] = mat[0] * x;
      dest[1] = mat[1] * x;
      dest[2] = mat[2] * x;
      dest[3] = mat[3] * x;
      dest[4] = mat[4] * y;
      dest[5] = mat[5] * y;
      dest[6] = mat[6] * y;
      dest[7] = mat[7] * y;
      dest[8] = mat[8] * z;
      dest[9] = mat[9] * z;
      dest[10] = mat[10] * z;
      dest[11] = mat[11] * z;
      dest[12] = mat[12];
      dest[13] = mat[13];
      dest[14] = mat[14];
      dest[15] = mat[15];
      return dest;
  };
  
  /**
   * Rotates a matrix by the given angle around the specified axis
   * If rotating around a primary axis (X,Y,Z) one of the specialized rotation functions should be used instead for performance
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {vec3} axis vec3 representing the axis to rotate around 
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotate = function (mat, angle, axis, dest) {
      var x = axis[0], y = axis[1], z = axis[2],
          len = Math.sqrt(x * x + y * y + z * z),
          s, c, t,
          a00, a01, a02, a03,
          a10, a11, a12, a13,
          a20, a21, a22, a23,
          b00, b01, b02,
          b10, b11, b12,
          b20, b21, b22;
  
      if (!len) { return null; }
      if (len !== 1) {
          len = 1 / len;
          x *= len;
          y *= len;
          z *= len;
      }
  
      s = Math.sin(angle);
      c = Math.cos(angle);
      t = 1 - c;
  
      a00 = mat[0]; a01 = mat[1]; a02 = mat[2]; a03 = mat[3];
      a10 = mat[4]; a11 = mat[5]; a12 = mat[6]; a13 = mat[7];
      a20 = mat[8]; a21 = mat[9]; a22 = mat[10]; a23 = mat[11];
  
      // Construct the elements of the rotation matrix
      b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;
      b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;
      b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;
  
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged last row
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      // Perform rotation-specific matrix multiplication
      dest[0] = a00 * b00 + a10 * b01 + a20 * b02;
      dest[1] = a01 * b00 + a11 * b01 + a21 * b02;
      dest[2] = a02 * b00 + a12 * b01 + a22 * b02;
      dest[3] = a03 * b00 + a13 * b01 + a23 * b02;
  
      dest[4] = a00 * b10 + a10 * b11 + a20 * b12;
      dest[5] = a01 * b10 + a11 * b11 + a21 * b12;
      dest[6] = a02 * b10 + a12 * b11 + a22 * b12;
      dest[7] = a03 * b10 + a13 * b11 + a23 * b12;
  
      dest[8] = a00 * b20 + a10 * b21 + a20 * b22;
      dest[9] = a01 * b20 + a11 * b21 + a21 * b22;
      dest[10] = a02 * b20 + a12 * b21 + a22 * b22;
      dest[11] = a03 * b20 + a13 * b21 + a23 * b22;
      return dest;
  };
  
  /**
   * Rotates a matrix by the given angle around the X axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotateX = function (mat, angle, dest) {
      var s = Math.sin(angle),
          c = Math.cos(angle),
          a10 = mat[4],
          a11 = mat[5],
          a12 = mat[6],
          a13 = mat[7],
          a20 = mat[8],
          a21 = mat[9],
          a22 = mat[10],
          a23 = mat[11];
  
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged rows
          dest[0] = mat[0];
          dest[1] = mat[1];
          dest[2] = mat[2];
          dest[3] = mat[3];
  
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      // Perform axis-specific matrix multiplication
      dest[4] = a10 * c + a20 * s;
      dest[5] = a11 * c + a21 * s;
      dest[6] = a12 * c + a22 * s;
      dest[7] = a13 * c + a23 * s;
  
      dest[8] = a10 * -s + a20 * c;
      dest[9] = a11 * -s + a21 * c;
      dest[10] = a12 * -s + a22 * c;
      dest[11] = a13 * -s + a23 * c;
      return dest;
  };
  
  /**
   * Rotates a matrix by the given angle around the Y axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotateY = function (mat, angle, dest) {
      var s = Math.sin(angle),
          c = Math.cos(angle),
          a00 = mat[0],
          a01 = mat[1],
          a02 = mat[2],
          a03 = mat[3],
          a20 = mat[8],
          a21 = mat[9],
          a22 = mat[10],
          a23 = mat[11];
  
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged rows
          dest[4] = mat[4];
          dest[5] = mat[5];
          dest[6] = mat[6];
          dest[7] = mat[7];
  
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      // Perform axis-specific matrix multiplication
      dest[0] = a00 * c + a20 * -s;
      dest[1] = a01 * c + a21 * -s;
      dest[2] = a02 * c + a22 * -s;
      dest[3] = a03 * c + a23 * -s;
  
      dest[8] = a00 * s + a20 * c;
      dest[9] = a01 * s + a21 * c;
      dest[10] = a02 * s + a22 * c;
      dest[11] = a03 * s + a23 * c;
      return dest;
  };
  
  /**
   * Rotates a matrix by the given angle around the Z axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotateZ = function (mat, angle, dest) {
      var s = Math.sin(angle),
          c = Math.cos(angle),
          a00 = mat[0],
          a01 = mat[1],
          a02 = mat[2],
          a03 = mat[3],
          a10 = mat[4],
          a11 = mat[5],
          a12 = mat[6],
          a13 = mat[7];
  
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged last row
          dest[8] = mat[8];
          dest[9] = mat[9];
          dest[10] = mat[10];
          dest[11] = mat[11];
  
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      // Perform axis-specific matrix multiplication
      dest[0] = a00 * c + a10 * s;
      dest[1] = a01 * c + a11 * s;
      dest[2] = a02 * c + a12 * s;
      dest[3] = a03 * c + a13 * s;
  
      dest[4] = a00 * -s + a10 * c;
      dest[5] = a01 * -s + a11 * c;
      dest[6] = a02 * -s + a12 * c;
      dest[7] = a03 * -s + a13 * c;
  
      return dest;
  };
  
  /**
   * Generates a frustum matrix with the given bounds
   *
   * @param {number} left Left bound of the frustum
   * @param {number} right Right bound of the frustum
   * @param {number} bottom Bottom bound of the frustum
   * @param {number} top Top bound of the frustum
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.frustum = function (left, right, bottom, top, near, far, dest) {
      if (!dest) { dest = mat4.create(); }
      var rl = (right - left),
          tb = (top - bottom),
          fn = (far - near);
      dest[0] = (near * 2) / rl;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 0;
      dest[5] = (near * 2) / tb;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = (right + left) / rl;
      dest[9] = (top + bottom) / tb;
      dest[10] = -(far + near) / fn;
      dest[11] = -1;
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = -(far * near * 2) / fn;
      dest[15] = 0;
      return dest;
  };
  
  /**
   * Generates a perspective projection matrix with the given bounds
   *
   * @param {number} fovy Vertical field of view
   * @param {number} aspect Aspect ratio. typically viewport width/height
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.perspective = function (fovy, aspect, near, far, dest) {
      var top = near * Math.tan(fovy * Math.PI / 360.0),
          right = top * aspect;
      return mat4.frustum(-right, right, -top, top, near, far, dest);
  };
  
  /**
   * Generates a orthogonal projection matrix with the given bounds
   *
   * @param {number} left Left bound of the frustum
   * @param {number} right Right bound of the frustum
   * @param {number} bottom Bottom bound of the frustum
   * @param {number} top Top bound of the frustum
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.ortho = function (left, right, bottom, top, near, far, dest) {
      if (!dest) { dest = mat4.create(); }
      var rl = (right - left),
          tb = (top - bottom),
          fn = (far - near);
      dest[0] = 2 / rl;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 0;
      dest[5] = 2 / tb;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = 0;
      dest[9] = 0;
      dest[10] = -2 / fn;
      dest[11] = 0;
      dest[12] = -(left + right) / rl;
      dest[13] = -(top + bottom) / tb;
      dest[14] = -(far + near) / fn;
      dest[15] = 1;
      return dest;
  };
  
  /**
   * Generates a look-at matrix with the given eye position, focal point, and up axis
   *
   * @param {vec3} eye Position of the viewer
   * @param {vec3} center Point the viewer is looking at
   * @param {vec3} up vec3 pointing "up"
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.lookAt = function (eye, center, up, dest) {
      if (!dest) { dest = mat4.create(); }
  
      var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,
          eyex = eye[0],
          eyey = eye[1],
          eyez = eye[2],
          upx = up[0],
          upy = up[1],
          upz = up[2],
          centerx = center[0],
          centery = center[1],
          centerz = center[2];
  
      if (eyex === centerx && eyey === centery && eyez === centerz) {
          return mat4.identity(dest);
      }
  
      //vec3.direction(eye, center, z);
      z0 = eyex - centerx;
      z1 = eyey - centery;
      z2 = eyez - centerz;
  
      // normalize (no check needed for 0 because of early return)
      len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
      z0 *= len;
      z1 *= len;
      z2 *= len;
  
      //vec3.normalize(vec3.cross(up, z, x));
      x0 = upy * z2 - upz * z1;
      x1 = upz * z0 - upx * z2;
      x2 = upx * z1 - upy * z0;
      len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
      if (!len) {
          x0 = 0;
          x1 = 0;
          x2 = 0;
      } else {
          len = 1 / len;
          x0 *= len;
          x1 *= len;
          x2 *= len;
      }
  
      //vec3.normalize(vec3.cross(z, x, y));
      y0 = z1 * x2 - z2 * x1;
      y1 = z2 * x0 - z0 * x2;
      y2 = z0 * x1 - z1 * x0;
  
      len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
      if (!len) {
          y0 = 0;
          y1 = 0;
          y2 = 0;
      } else {
          len = 1 / len;
          y0 *= len;
          y1 *= len;
          y2 *= len;
      }
  
      dest[0] = x0;
      dest[1] = y0;
      dest[2] = z0;
      dest[3] = 0;
      dest[4] = x1;
      dest[5] = y1;
      dest[6] = z1;
      dest[7] = 0;
      dest[8] = x2;
      dest[9] = y2;
      dest[10] = z2;
      dest[11] = 0;
      dest[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
      dest[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
      dest[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
      dest[15] = 1;
  
      return dest;
  };
  
  /**
   * Creates a matrix from a quaternion rotation and vector translation
   * This is equivalent to (but much faster than):
   *
   *     mat4.identity(dest);
   *     mat4.translate(dest, vec);
   *     var quatMat = mat4.create();
   *     quat4.toMat4(quat, quatMat);
   *     mat4.multiply(dest, quatMat);
   *
   * @param {quat4} quat Rotation quaternion
   * @param {vec3} vec Translation vector
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to a new mat4
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.fromRotationTranslation = function (quat, vec, dest) {
      if (!dest) { dest = mat4.create(); }
  
      // Quaternion math
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          x2 = x + x,
          y2 = y + y,
          z2 = z + z,
  
          xx = x * x2,
          xy = x * y2,
          xz = x * z2,
          yy = y * y2,
          yz = y * z2,
          zz = z * z2,
          wx = w * x2,
          wy = w * y2,
          wz = w * z2;
  
      dest[0] = 1 - (yy + zz);
      dest[1] = xy + wz;
      dest[2] = xz - wy;
      dest[3] = 0;
      dest[4] = xy - wz;
      dest[5] = 1 - (xx + zz);
      dest[6] = yz + wx;
      dest[7] = 0;
      dest[8] = xz + wy;
      dest[9] = yz - wx;
      dest[10] = 1 - (xx + yy);
      dest[11] = 0;
      dest[12] = vec[0];
      dest[13] = vec[1];
      dest[14] = vec[2];
      dest[15] = 1;
      
      return dest;
  };
  
  /**
   * Returns a string representation of a mat4
   *
   * @param {mat4} mat mat4 to represent as a string
   *
   * @returns {string} String representation of mat
   */
  mat4.str = function (mat) {
      return '[' + mat[0] + ', ' + mat[1] + ', ' + mat[2] + ', ' + mat[3] +
          ', ' + mat[4] + ', ' + mat[5] + ', ' + mat[6] + ', ' + mat[7] +
          ', ' + mat[8] + ', ' + mat[9] + ', ' + mat[10] + ', ' + mat[11] +
          ', ' + mat[12] + ', ' + mat[13] + ', ' + mat[14] + ', ' + mat[15] + ']';
  };
  
  /*
   * quat4
   */
  
  /**
   * Creates a new instance of a quat4 using the default array type
   * Any javascript array containing at least 4 numeric elements can serve as a quat4
   *
   * @param {quat4} [quat] quat4 containing values to initialize with
   *
   * @returns {quat4} New quat4
   */
  quat4.create = function (quat) {
      var dest = new MatrixArray(4);
  
      if (quat) {
          dest[0] = quat[0];
          dest[1] = quat[1];
          dest[2] = quat[2];
          dest[3] = quat[3];
      }
  
      return dest;
  };
  
  /**
   * Copies the values of one quat4 to another
   *
   * @param {quat4} quat quat4 containing values to copy
   * @param {quat4} dest quat4 receiving copied values
   *
   * @returns {quat4} dest
   */
  quat4.set = function (quat, dest) {
      dest[0] = quat[0];
      dest[1] = quat[1];
      dest[2] = quat[2];
      dest[3] = quat[3];
  
      return dest;
  };
  
  /**
   * Calculates the W component of a quat4 from the X, Y, and Z components.
   * Assumes that quaternion is 1 unit in length. 
   * Any existing W component will be ignored. 
   *
   * @param {quat4} quat quat4 to calculate W component of
   * @param {quat4} [dest] quat4 receiving calculated values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.calculateW = function (quat, dest) {
      var x = quat[0], y = quat[1], z = quat[2];
  
      if (!dest || quat === dest) {
          quat[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
          return quat;
      }
      dest[0] = x;
      dest[1] = y;
      dest[2] = z;
      dest[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
      return dest;
  };
  
  /**
   * Calculates the dot product of two quaternions
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   *
   * @return {number} Dot product of quat and quat2
   */
  quat4.dot = function(quat, quat2){
      return quat[0]*quat2[0] + quat[1]*quat2[1] + quat[2]*quat2[2] + quat[3]*quat2[3];
  };
  
  /**
   * Calculates the inverse of a quat4
   *
   * @param {quat4} quat quat4 to calculate inverse of
   * @param {quat4} [dest] quat4 receiving inverse values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.inverse = function(quat, dest) {
      var q0 = quat[0], q1 = quat[1], q2 = quat[2], q3 = quat[3],
          dot = q0*q0 + q1*q1 + q2*q2 + q3*q3,
          invDot = dot ? 1.0/dot : 0;
      
      // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0
      
      if(!dest || quat === dest) {
          quat[0] *= -invDot;
          quat[1] *= -invDot;
          quat[2] *= -invDot;
          quat[3] *= invDot;
          return quat;
      }
      dest[0] = -quat[0]*invDot;
      dest[1] = -quat[1]*invDot;
      dest[2] = -quat[2]*invDot;
      dest[3] = quat[3]*invDot;
      return dest;
  };
  
  
  /**
   * Calculates the conjugate of a quat4
   * If the quaternion is normalized, this function is faster than quat4.inverse and produces the same result.
   *
   * @param {quat4} quat quat4 to calculate conjugate of
   * @param {quat4} [dest] quat4 receiving conjugate values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.conjugate = function (quat, dest) {
      if (!dest || quat === dest) {
          quat[0] *= -1;
          quat[1] *= -1;
          quat[2] *= -1;
          return quat;
      }
      dest[0] = -quat[0];
      dest[1] = -quat[1];
      dest[2] = -quat[2];
      dest[3] = quat[3];
      return dest;
  };
  
  /**
   * Calculates the length of a quat4
   *
   * Params:
   * @param {quat4} quat quat4 to calculate length of
   *
   * @returns Length of quat
   */
  quat4.length = function (quat) {
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3];
      return Math.sqrt(x * x + y * y + z * z + w * w);
  };
  
  /**
   * Generates a unit quaternion of the same direction as the provided quat4
   * If quaternion length is 0, returns [0, 0, 0, 0]
   *
   * @param {quat4} quat quat4 to normalize
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.normalize = function (quat, dest) {
      if (!dest) { dest = quat; }
  
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          len = Math.sqrt(x * x + y * y + z * z + w * w);
      if (len === 0) {
          dest[0] = 0;
          dest[1] = 0;
          dest[2] = 0;
          dest[3] = 0;
          return dest;
      }
      len = 1 / len;
      dest[0] = x * len;
      dest[1] = y * len;
      dest[2] = z * len;
      dest[3] = w * len;
  
      return dest;
  };
  
  /**
   * Performs quaternion addition
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.add = function (quat, quat2, dest) {
      if(!dest || quat === dest) {
          quat[0] += quat2[0];
          quat[1] += quat2[1];
          quat[2] += quat2[2];
          quat[3] += quat2[3];
          return quat;
      }
      dest[0] = quat[0]+quat2[0];
      dest[1] = quat[1]+quat2[1];
      dest[2] = quat[2]+quat2[2];
      dest[3] = quat[3]+quat2[3];
      return dest;
  };
  
  /**
   * Performs a quaternion multiplication
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.multiply = function (quat, quat2, dest) {
      if (!dest) { dest = quat; }
  
      var qax = quat[0], qay = quat[1], qaz = quat[2], qaw = quat[3],
          qbx = quat2[0], qby = quat2[1], qbz = quat2[2], qbw = quat2[3];
  
      dest[0] = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
      dest[1] = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
      dest[2] = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
      dest[3] = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
  
      return dest;
  };
  
  /**
   * Transforms a vec3 with the given quaternion
   *
   * @param {quat4} quat quat4 to transform the vector with
   * @param {vec3} vec vec3 to transform
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns dest if specified, vec otherwise
   */
  quat4.multiplyVec3 = function (quat, vec, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2],
          qx = quat[0], qy = quat[1], qz = quat[2], qw = quat[3],
  
          // calculate quat * vec
          ix = qw * x + qy * z - qz * y,
          iy = qw * y + qz * x - qx * z,
          iz = qw * z + qx * y - qy * x,
          iw = -qx * x - qy * y - qz * z;
  
      // calculate result * inverse quat
      dest[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
      dest[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
      dest[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
  
      return dest;
  };
  
  /**
   * Multiplies the components of a quaternion by a scalar value
   *
   * @param {quat4} quat to scale
   * @param {number} val Value to scale by
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.scale = function (quat, val, dest) {
      if(!dest || quat === dest) {
          quat[0] *= val;
          quat[1] *= val;
          quat[2] *= val;
          quat[3] *= val;
          return quat;
      }
      dest[0] = quat[0]*val;
      dest[1] = quat[1]*val;
      dest[2] = quat[2]*val;
      dest[3] = quat[3]*val;
      return dest;
  };
  
  /**
   * Calculates a 3x3 matrix from the given quat4
   *
   * @param {quat4} quat quat4 to create matrix from
   * @param {mat3} [dest] mat3 receiving operation result
   *
   * @returns {mat3} dest if specified, a new mat3 otherwise
   */
  quat4.toMat3 = function (quat, dest) {
      if (!dest) { dest = mat3.create(); }
  
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          x2 = x + x,
          y2 = y + y,
          z2 = z + z,
  
          xx = x * x2,
          xy = x * y2,
          xz = x * z2,
          yy = y * y2,
          yz = y * z2,
          zz = z * z2,
          wx = w * x2,
          wy = w * y2,
          wz = w * z2;
  
      dest[0] = 1 - (yy + zz);
      dest[1] = xy + wz;
      dest[2] = xz - wy;
  
      dest[3] = xy - wz;
      dest[4] = 1 - (xx + zz);
      dest[5] = yz + wx;
  
      dest[6] = xz + wy;
      dest[7] = yz - wx;
      dest[8] = 1 - (xx + yy);
  
      return dest;
  };
  
  /**
   * Calculates a 4x4 matrix from the given quat4
   *
   * @param {quat4} quat quat4 to create matrix from
   * @param {mat4} [dest] mat4 receiving operation result
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  quat4.toMat4 = function (quat, dest) {
      if (!dest) { dest = mat4.create(); }
  
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          x2 = x + x,
          y2 = y + y,
          z2 = z + z,
  
          xx = x * x2,
          xy = x * y2,
          xz = x * z2,
          yy = y * y2,
          yz = y * z2,
          zz = z * z2,
          wx = w * x2,
          wy = w * y2,
          wz = w * z2;
  
      dest[0] = 1 - (yy + zz);
      dest[1] = xy + wz;
      dest[2] = xz - wy;
      dest[3] = 0;
  
      dest[4] = xy - wz;
      dest[5] = 1 - (xx + zz);
      dest[6] = yz + wx;
      dest[7] = 0;
  
      dest[8] = xz + wy;
      dest[9] = yz - wx;
      dest[10] = 1 - (xx + yy);
      dest[11] = 0;
  
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = 0;
      dest[15] = 1;
  
      return dest;
  };
  
  /**
   * Performs a spherical linear interpolation between two quat4
   *
   * @param {quat4} quat First quaternion
   * @param {quat4} quat2 Second quaternion
   * @param {number} slerp Interpolation amount between the two inputs
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.slerp = function (quat, quat2, slerp, dest) {
      if (!dest) { dest = quat; }
  
      var cosHalfTheta = quat[0] * quat2[0] + quat[1] * quat2[1] + quat[2] * quat2[2] + quat[3] * quat2[3],
          halfTheta,
          sinHalfTheta,
          ratioA,
          ratioB;
  
      if (Math.abs(cosHalfTheta) >= 1.0) {
          if (dest !== quat) {
              dest[0] = quat[0];
              dest[1] = quat[1];
              dest[2] = quat[2];
              dest[3] = quat[3];
          }
          return dest;
      }
  
      halfTheta = Math.acos(cosHalfTheta);
      sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);
  
      if (Math.abs(sinHalfTheta) < 0.001) {
          dest[0] = (quat[0] * 0.5 + quat2[0] * 0.5);
          dest[1] = (quat[1] * 0.5 + quat2[1] * 0.5);
          dest[2] = (quat[2] * 0.5 + quat2[2] * 0.5);
          dest[3] = (quat[3] * 0.5 + quat2[3] * 0.5);
          return dest;
      }
  
      ratioA = Math.sin((1 - slerp) * halfTheta) / sinHalfTheta;
      ratioB = Math.sin(slerp * halfTheta) / sinHalfTheta;
  
      dest[0] = (quat[0] * ratioA + quat2[0] * ratioB);
      dest[1] = (quat[1] * ratioA + quat2[1] * ratioB);
      dest[2] = (quat[2] * ratioA + quat2[2] * ratioB);
      dest[3] = (quat[3] * ratioA + quat2[3] * ratioB);
  
      return dest;
  };
  
  /**
   * Returns a string representation of a quaternion
   *
   * @param {quat4} quat quat4 to represent as a string
   *
   * @returns {string} String representation of quat
   */
  quat4.str = function (quat) {
      return '[' + quat[0] + ', ' + quat[1] + ', ' + quat[2] + ', ' + quat[3] + ']';
  };
  
  
  return {
    vec3: vec3,
    mat3: mat3,
    mat4: mat4,
    quat4: quat4
  };
  
  })();
  
  ;
  var GLImmediateSetup={};
  
  function _glEnable(x0) { GLctx.enable(x0) }
  
  function _glIsEnabled(x0) { return GLctx.isEnabled(x0) }
  
  function _glGetBooleanv(name_, p) {
      return GL.get(name_, p, 'Boolean');
    }
  
  function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x1F02 /* GL_VERSION */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (i in exts) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          ret = allocate(intArrayFromString('OpenGL ES GLSL 1.00 (WebGL)'), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }
  
  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }
  
  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }
  
  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }
  
  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }
  
  function _glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }
  
  function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }
  
  function _glDeleteProgram(program) {
      var program = GL.programs[program];
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[program] = null;
      GL.programInfos[program] = null;
    }
  
  function _glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }
  
  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }
  
  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
      if (target == GLctx.ARRAY_BUFFER) {
        GLImmediate.lastArrayBuffer = GL.currArrayBuffer = buffer;
      } else if (target == GLctx.ELEMENT_ARRAY_BUFFER) {
        GL.currElementArrayBuffer = buffer;
      }
  
      GLctx.bindBuffer(target, bufferObj);
    }
  
  function _glGetFloatv(name_, p) {
      return GL.get(name_, p, 'Float');
    }
  
  function _glHint(x0, x1) { GLctx.hint(x0, x1) }
  
  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }
  
  function _glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }
  
  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
    }
  
  function _glActiveTexture(x0) { GLctx.activeTexture(x0) }var GLEmulation={fogStart:0,fogEnd:1,fogDensity:1,fogColor:null,fogMode:2048,fogEnabled:false,vaos:[],currentVao:null,enabledVertexAttribArrays:{},hasRunInit:false,init:function () {
        // Do not activate immediate/emulation code (e.g. replace glDrawElements) when in FULL_ES2 mode.
        // We do not need full emulation, we instead emulate client-side arrays etc. in FULL_ES2 code in
        // a straightforward manner, and avoid not having a bound buffer be ambiguous between es2 emulation
        // code and legacy gl emulation code.
  
        if (GLEmulation.hasRunInit) {
          return;
        }
        GLEmulation.hasRunInit = true;
  
        GLEmulation.fogColor = new Float32Array(4);
  
        // Add some emulation workarounds
        Module.printErr('WARNING: using emscripten GL emulation. This is a collection of limited workarounds, do not expect it to work.');
        Module.printErr('WARNING: using emscripten GL emulation unsafe opts. If weirdness happens, try -s GL_UNSAFE_OPTS=0');
  
        // XXX some of the capabilities we don't support may lead to incorrect rendering, if we do not emulate them in shaders
        var validCapabilities = {
          0x0B44: 1, // GL_CULL_FACE
          0x0BE2: 1, // GL_BLEND
          0x0BD0: 1, // GL_DITHER,
          0x0B90: 1, // GL_STENCIL_TEST
          0x0B71: 1, // GL_DEPTH_TEST
          0x0C11: 1, // GL_SCISSOR_TEST
          0x8037: 1, // GL_POLYGON_OFFSET_FILL
          0x809E: 1, // GL_SAMPLE_ALPHA_TO_COVERAGE
          0x80A0: 1  // GL_SAMPLE_COVERAGE
        };
  
        var glEnable = _glEnable;
        _glEnable = _emscripten_glEnable = function _glEnable(cap) {
          // Clean up the renderer on any change to the rendering state. The optimization of
          // skipping renderer setup is aimed at the case of multiple glDraw* right after each other
          if (GLImmediate.lastRenderer) GLImmediate.lastRenderer.cleanup();
          if (cap == 0x0B60 /* GL_FOG */) {
            if (GLEmulation.fogEnabled != true) {
              GLImmediate.currentRenderer = null; // Fog parameter is part of the FFP shader state, we must re-lookup the renderer to use.
              GLEmulation.fogEnabled = true;
            }
            return;
          } else if (cap == 0x0de1 /* GL_TEXTURE_2D */) {
            // XXX not according to spec, and not in desktop GL, but works in some GLES1.x apparently, so support
            // it by forwarding to glEnableClientState
            /* Actually, let's not, for now. (This sounds exceedingly broken)
             * This is in gl_ps_workaround2.c.
            _glEnableClientState(cap);
            */
            return;
          } else if (!(cap in validCapabilities)) {
            return;
          }
          glEnable(cap);
        };
  
        var glDisable = _glDisable;
        _glDisable = _emscripten_glDisable = function _glDisable(cap) {
          if (GLImmediate.lastRenderer) GLImmediate.lastRenderer.cleanup();
          if (cap == 0x0B60 /* GL_FOG */) {
            if (GLEmulation.fogEnabled != false) {
              GLImmediate.currentRenderer = null; // Fog parameter is part of the FFP shader state, we must re-lookup the renderer to use.
              GLEmulation.fogEnabled = false;
            }
            return;
          } else if (cap == 0x0de1 /* GL_TEXTURE_2D */) {
            // XXX not according to spec, and not in desktop GL, but works in some GLES1.x apparently, so support
            // it by forwarding to glDisableClientState
            /* Actually, let's not, for now. (This sounds exceedingly broken)
             * This is in gl_ps_workaround2.c.
            _glDisableClientState(cap);
            */
            return;
          } else if (!(cap in validCapabilities)) {
            return;
          }
          glDisable(cap);
        };
        _glIsEnabled = _emscripten_glIsEnabled = function _glIsEnabled(cap) {
          if (cap == 0x0B60 /* GL_FOG */) {
            return GLEmulation.fogEnabled ? 1 : 0;
          } else if (!(cap in validCapabilities)) {
            return 0;
          }
          return GLctx.isEnabled(cap);
        };
  
        var glGetBooleanv = _glGetBooleanv;
        _glGetBooleanv = _emscripten_glGetBooleanv = function _glGetBooleanv(pname, p) {
          var attrib = GLEmulation.getAttributeFromCapability(pname);
          if (attrib !== null) {
            var result = GLImmediate.enabledClientAttributes[attrib];
            HEAP8[(p)]=result === true ? 1 : 0;
            return;
          }
          glGetBooleanv(pname, p);
        };
  
        var glGetIntegerv = _glGetIntegerv;
        _glGetIntegerv = _emscripten_glGetIntegerv = function _glGetIntegerv(pname, params) {
          switch (pname) {
            case 0x84E2: pname = GLctx.MAX_TEXTURE_IMAGE_UNITS /* fake it */; break; // GL_MAX_TEXTURE_UNITS
            case 0x8B4A: { // GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
              var result = GLctx.getParameter(GLctx.MAX_VERTEX_UNIFORM_VECTORS);
              HEAP32[((params)>>2)]=result*4; // GLES gives num of 4-element vectors, GL wants individual components, so multiply
              return;
            }
            case 0x8B49: { // GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
              var result = GLctx.getParameter(GLctx.MAX_FRAGMENT_UNIFORM_VECTORS);
              HEAP32[((params)>>2)]=result*4; // GLES gives num of 4-element vectors, GL wants individual components, so multiply
              return;
            }
            case 0x8B4B: { // GL_MAX_VARYING_FLOATS_ARB
              var result = GLctx.getParameter(GLctx.MAX_VARYING_VECTORS);
              HEAP32[((params)>>2)]=result*4; // GLES gives num of 4-element vectors, GL wants individual components, so multiply
              return;
            }
            case 0x8871: pname = GLctx.MAX_COMBINED_TEXTURE_IMAGE_UNITS /* close enough */; break; // GL_MAX_TEXTURE_COORDS
            case 0x807A: { // GL_VERTEX_ARRAY_SIZE
              var attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX];
              HEAP32[((params)>>2)]=attribute ? attribute.size : 0;
              return;
            }
            case 0x807B: { // GL_VERTEX_ARRAY_TYPE
              var attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX];
              HEAP32[((params)>>2)]=attribute ? attribute.type : 0;
              return;
            }
            case 0x807C: { // GL_VERTEX_ARRAY_STRIDE
              var attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX];
              HEAP32[((params)>>2)]=attribute ? attribute.stride : 0;
              return;
            }
            case 0x8081: { // GL_COLOR_ARRAY_SIZE
              var attribute = GLImmediate.clientAttributes[GLImmediate.COLOR];
              HEAP32[((params)>>2)]=attribute ? attribute.size : 0;
              return;
            }
            case 0x8082: { // GL_COLOR_ARRAY_TYPE
              var attribute = GLImmediate.clientAttributes[GLImmediate.COLOR];
              HEAP32[((params)>>2)]=attribute ? attribute.type : 0;
              return;
            }
            case 0x8083: { // GL_COLOR_ARRAY_STRIDE
              var attribute = GLImmediate.clientAttributes[GLImmediate.COLOR];
              HEAP32[((params)>>2)]=attribute ? attribute.stride : 0;
              return;
            }
            case 0x8088: { // GL_TEXTURE_COORD_ARRAY_SIZE
              var attribute = GLImmediate.clientAttributes[GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture];
              HEAP32[((params)>>2)]=attribute ? attribute.size : 0;
              return;
            }
            case 0x8089: { // GL_TEXTURE_COORD_ARRAY_TYPE
              var attribute = GLImmediate.clientAttributes[GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture];
              HEAP32[((params)>>2)]=attribute ? attribute.type : 0;
              return;
            }
            case 0x808A: { // GL_TEXTURE_COORD_ARRAY_STRIDE
              var attribute = GLImmediate.clientAttributes[GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture];
              HEAP32[((params)>>2)]=attribute ? attribute.stride : 0;
              return;
            }
          }
          glGetIntegerv(pname, params);
        };
  
        var glGetString = _glGetString;
        _glGetString = _emscripten_glGetString = function _glGetString(name_) {
          if (GL.stringCache[name_]) return GL.stringCache[name_];
          switch(name_) {
            case 0x1F03 /* GL_EXTENSIONS */: // Add various extensions that we can support
              var ret = allocate(intArrayFromString(GLctx.getSupportedExtensions().join(' ') +
                     ' GL_EXT_texture_env_combine GL_ARB_texture_env_crossbar GL_ATI_texture_env_combine3 GL_NV_texture_env_combine4 GL_EXT_texture_env_dot3 GL_ARB_multitexture GL_ARB_vertex_buffer_object GL_EXT_framebuffer_object GL_ARB_vertex_program GL_ARB_fragment_program GL_ARB_shading_language_100 GL_ARB_shader_objects GL_ARB_vertex_shader GL_ARB_fragment_shader GL_ARB_texture_cube_map GL_EXT_draw_range_elements' +
                     (GL.compressionExt ? ' GL_ARB_texture_compression GL_EXT_texture_compression_s3tc' : '') +
                     (GL.anisotropicExt ? ' GL_EXT_texture_filter_anisotropic' : '')
              ), 'i8', ALLOC_NORMAL);
              GL.stringCache[name_] = ret;
              return ret;
          }
          return glGetString(name_);
        };
  
        // Do some automatic rewriting to work around GLSL differences. Note that this must be done in
        // tandem with the rest of the program, by itself it cannot suffice.
        // Note that we need to remember shader types for this rewriting, saving sources makes it easier to debug.
        GL.shaderInfos = {};
        var glCreateShader = _glCreateShader;
        _glCreateShader = _emscripten_glCreateShader = function _glCreateShader(shaderType) {
          var id = glCreateShader(shaderType);
          GL.shaderInfos[id] = {
            type: shaderType,
            ftransform: false
          };
          return id;
        };
  
        function ensurePrecision(source) {
          if (!/precision +(low|medium|high)p +float *;/.test(source)) {
            source = 'precision mediump float;\n' + source;
          }
          return source;
        }
  
        var glShaderSource = _glShaderSource;
        _glShaderSource = _emscripten_glShaderSource = function _glShaderSource(shader, count, string, length) {
          var source = GL.getSource(shader, count, string, length);
          // XXX We add attributes and uniforms to shaders. The program can ask for the # of them, and see the
          // ones we generated, potentially confusing it? Perhaps we should hide them.
          if (GL.shaderInfos[shader].type == GLctx.VERTEX_SHADER) {
            // Replace ftransform() with explicit project/modelview transforms, and add position and matrix info.
            var has_pm = source.search(/u_projection/) >= 0;
            var has_mm = source.search(/u_modelView/) >= 0;
            var has_pv = source.search(/a_position/) >= 0;
            var need_pm = 0, need_mm = 0, need_pv = 0;
            var old = source;
            source = source.replace(/ftransform\(\)/g, '(u_projection * u_modelView * a_position)');
            if (old != source) need_pm = need_mm = need_pv = 1;
            old = source;
            source = source.replace(/gl_ProjectionMatrix/g, 'u_projection');
            if (old != source) need_pm = 1;
            old = source;
            source = source.replace(/gl_ModelViewMatrixTranspose\[2\]/g, 'vec4(u_modelView[0][2], u_modelView[1][2], u_modelView[2][2], u_modelView[3][2])'); // XXX extremely inefficient
            if (old != source) need_mm = 1;
            old = source;
            source = source.replace(/gl_ModelViewMatrix/g, 'u_modelView');
            if (old != source) need_mm = 1;
            old = source;
            source = source.replace(/gl_Vertex/g, 'a_position');
            if (old != source) need_pv = 1;
            old = source;
            source = source.replace(/gl_ModelViewProjectionMatrix/g, '(u_projection * u_modelView)');
            if (old != source) need_pm = need_mm = 1;
            if (need_pv && !has_pv) source = 'attribute vec4 a_position; \n' + source;
            if (need_mm && !has_mm) source = 'uniform mat4 u_modelView; \n' + source;
            if (need_pm && !has_pm) source = 'uniform mat4 u_projection; \n' + source;
            GL.shaderInfos[shader].ftransform = need_pm || need_mm || need_pv; // we will need to provide the fixed function stuff as attributes and uniforms
            for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
              // XXX To handle both regular texture mapping and cube mapping, we use vec4 for tex coordinates.
              var old = source;
              var need_vtc = source.search('v_texCoord' + i) == -1;
              source = source.replace(new RegExp('gl_TexCoord\\[' + i + '\\]', 'g'), 'v_texCoord' + i)
                             .replace(new RegExp('gl_MultiTexCoord' + i, 'g'), 'a_texCoord' + i);
              if (source != old) {
                source = 'attribute vec4 a_texCoord' + i + '; \n' + source;
                if (need_vtc) {
                  source = 'varying vec4 v_texCoord' + i + ';   \n' + source;
                }
              }
  
              old = source;
              source = source.replace(new RegExp('gl_TextureMatrix\\[' + i + '\\]', 'g'), 'u_textureMatrix' + i);
              if (source != old) {
                source = 'uniform mat4 u_textureMatrix' + i + '; \n' + source;
              }
            }
            if (source.indexOf('gl_FrontColor') >= 0) {
              source = 'varying vec4 v_color; \n' +
                       source.replace(/gl_FrontColor/g, 'v_color');
            }
            if (source.indexOf('gl_Color') >= 0) {
              source = 'attribute vec4 a_color; \n' +
                       source.replace(/gl_Color/g, 'a_color');
            }
            if (source.indexOf('gl_Normal') >= 0) {
              source = 'attribute vec3 a_normal; \n' +
                       source.replace(/gl_Normal/g, 'a_normal');
            }
            // fog
            if (source.indexOf('gl_FogFragCoord') >= 0) {
              source = 'varying float v_fogFragCoord;   \n' +
                       source.replace(/gl_FogFragCoord/g, 'v_fogFragCoord');
            }
            source = ensurePrecision(source);
          } else { // Fragment shader
            for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
              var old = source;
              source = source.replace(new RegExp('gl_TexCoord\\[' + i + '\\]', 'g'), 'v_texCoord' + i);
              if (source != old) {
                source = 'varying vec4 v_texCoord' + i + ';   \n' + source;
              }
            }
            if (source.indexOf('gl_Color') >= 0) {
              source = 'varying vec4 v_color; \n' + source.replace(/gl_Color/g, 'v_color');
            }
            if (source.indexOf('gl_Fog.color') >= 0) {
              source = 'uniform vec4 u_fogColor;   \n' +
                       source.replace(/gl_Fog.color/g, 'u_fogColor');
            }
            if (source.indexOf('gl_Fog.end') >= 0) {
              source = 'uniform float u_fogEnd;   \n' +
                       source.replace(/gl_Fog.end/g, 'u_fogEnd');
            }
            if (source.indexOf('gl_Fog.scale') >= 0) {
              source = 'uniform float u_fogScale;   \n' +
                       source.replace(/gl_Fog.scale/g, 'u_fogScale');
            }
            if (source.indexOf('gl_Fog.density') >= 0) {
              source = 'uniform float u_fogDensity;   \n' +
                       source.replace(/gl_Fog.density/g, 'u_fogDensity');
            }
            if (source.indexOf('gl_FogFragCoord') >= 0) {
              source = 'varying float v_fogFragCoord;   \n' +
                       source.replace(/gl_FogFragCoord/g, 'v_fogFragCoord');
            }
            source = ensurePrecision(source);
          }
          GLctx.shaderSource(GL.shaders[shader], source);
        };
  
        var glCompileShader = _glCompileShader;
        _glCompileShader = _emscripten_glCompileShader = function _glCompileShader(shader) {
          GLctx.compileShader(GL.shaders[shader]);
        };
  
        GL.programShaders = {};
        var glAttachShader = _glAttachShader;
        _glAttachShader = _emscripten_glAttachShader = function _glAttachShader(program, shader) {
          if (!GL.programShaders[program]) GL.programShaders[program] = [];
          GL.programShaders[program].push(shader);
          glAttachShader(program, shader);
        };
  
        var glDetachShader = _glDetachShader;
        _glDetachShader = _emscripten_glDetachShader = function _glDetachShader(program, shader) {
          var programShader = GL.programShaders[program];
          if (!programShader) {
            Module.printErr('WARNING: _glDetachShader received invalid program: ' + program);
            return;
          }
          var index = programShader.indexOf(shader);
          programShader.splice(index, 1);
          glDetachShader(program, shader);
        };
  
        var glUseProgram = _glUseProgram;
        _glUseProgram = _emscripten_glUseProgram = function _glUseProgram(program) {
          if (GL.currProgram != program) {
            GLImmediate.currentRenderer = null; // This changes the FFP emulation shader program, need to recompute that.
            GL.currProgram = program;
            GLImmediate.fixedFunctionProgram = 0;
            glUseProgram(program);
          }
        }
  
        var glDeleteProgram = _glDeleteProgram;
        _glDeleteProgram = _emscripten_glDeleteProgram = function _glDeleteProgram(program) {
          glDeleteProgram(program);
          if (program == GL.currProgram) {
            GLImmediate.currentRenderer = null; // This changes the FFP emulation shader program, need to recompute that.
            GL.currProgram = 0;
          }
        };
  
        // If attribute 0 was not bound, bind it to 0 for WebGL performance reasons. Track if 0 is free for that.
        var zeroUsedPrograms = {};
        var glBindAttribLocation = _glBindAttribLocation;
        _glBindAttribLocation = _emscripten_glBindAttribLocation = function _glBindAttribLocation(program, index, name) {
          if (index == 0) zeroUsedPrograms[program] = true;
          glBindAttribLocation(program, index, name);
        };
        var glLinkProgram = _glLinkProgram;
        _glLinkProgram = _emscripten_glLinkProgram = function _glLinkProgram(program) {
          if (!(program in zeroUsedPrograms)) {
            GLctx.bindAttribLocation(GL.programs[program], 0, 'a_position');
          }
          glLinkProgram(program);
        };
  
        var glBindBuffer = _glBindBuffer;
        _glBindBuffer = _emscripten_glBindBuffer = function _glBindBuffer(target, buffer) {
          glBindBuffer(target, buffer);
          if (target == GLctx.ARRAY_BUFFER) {
            if (GLEmulation.currentVao) {
              GLEmulation.currentVao.arrayBuffer = buffer;
            }
          } else if (target == GLctx.ELEMENT_ARRAY_BUFFER) {
            if (GLEmulation.currentVao) GLEmulation.currentVao.elementArrayBuffer = buffer;
          }
        };
  
        var glGetFloatv = _glGetFloatv;
        _glGetFloatv = _emscripten_glGetFloatv = function _glGetFloatv(pname, params) {
          if (pname == 0x0BA6) { // GL_MODELVIEW_MATRIX
            HEAPF32.set(GLImmediate.matrix[0/*m*/], params >> 2);
          } else if (pname == 0x0BA7) { // GL_PROJECTION_MATRIX
            HEAPF32.set(GLImmediate.matrix[1/*p*/], params >> 2);
          } else if (pname == 0x0BA8) { // GL_TEXTURE_MATRIX
            HEAPF32.set(GLImmediate.matrix[2/*t*/ + GLImmediate.clientActiveTexture], params >> 2);
          } else if (pname == 0x0B66) { // GL_FOG_COLOR
            HEAPF32.set(GLEmulation.fogColor, params >> 2);
          } else if (pname == 0x0B63) { // GL_FOG_START
            HEAPF32[((params)>>2)]=GLEmulation.fogStart;
          } else if (pname == 0x0B64) { // GL_FOG_END
            HEAPF32[((params)>>2)]=GLEmulation.fogEnd;
          } else if (pname == 0x0B62) { // GL_FOG_DENSITY
            HEAPF32[((params)>>2)]=GLEmulation.fogDensity;
          } else if (pname == 0x0B65) { // GL_FOG_MODE
            HEAPF32[((params)>>2)]=GLEmulation.fogMode;
          } else {
            glGetFloatv(pname, params);
          }
        };
  
        var glHint = _glHint;
        _glHint = _emscripten_glHint = function _glHint(target, mode) {
          if (target == 0x84EF) { // GL_TEXTURE_COMPRESSION_HINT
            return;
          }
          glHint(target, mode);
        };
  
        var glEnableVertexAttribArray = _glEnableVertexAttribArray;
        _glEnableVertexAttribArray = _emscripten_glEnableVertexAttribArray = function _glEnableVertexAttribArray(index) {
          glEnableVertexAttribArray(index);
          GLEmulation.enabledVertexAttribArrays[index] = 1;
          if (GLEmulation.currentVao) GLEmulation.currentVao.enabledVertexAttribArrays[index] = 1;
        };
  
        var glDisableVertexAttribArray = _glDisableVertexAttribArray;
        _glDisableVertexAttribArray = _emscripten_glDisableVertexAttribArray = function _glDisableVertexAttribArray(index) {
          glDisableVertexAttribArray(index);
          delete GLEmulation.enabledVertexAttribArrays[index];
          if (GLEmulation.currentVao) delete GLEmulation.currentVao.enabledVertexAttribArrays[index];
        };
  
        var glVertexAttribPointer = _glVertexAttribPointer;
        _glVertexAttribPointer = _emscripten_glVertexAttribPointer = function _glVertexAttribPointer(index, size, type, normalized, stride, pointer) {
          glVertexAttribPointer(index, size, type, normalized, stride, pointer);
          if (GLEmulation.currentVao) { // TODO: avoid object creation here? likely not hot though
            GLEmulation.currentVao.vertexAttribPointers[index] = [index, size, type, normalized, stride, pointer];
          }
        };
      },getAttributeFromCapability:function (cap) {
        var attrib = null;
        switch (cap) {
          case 0x0de1: // GL_TEXTURE_2D - XXX not according to spec, and not in desktop GL, but works in some GLES1.x apparently, so support it
            // Fall through:
          case 0x8078: // GL_TEXTURE_COORD_ARRAY
            attrib = GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture; break;
          case 0x8074: // GL_VERTEX_ARRAY
            attrib = GLImmediate.VERTEX; break;
          case 0x8075: // GL_NORMAL_ARRAY
            attrib = GLImmediate.NORMAL; break;
          case 0x8076: // GL_COLOR_ARRAY
            attrib = GLImmediate.COLOR; break;
        }
        return attrib;
      }};function _glVertexPointer(size, type, stride, pointer) {
      GLImmediate.setClientAttribute(GLImmediate.VERTEX, size, type, stride, pointer);
    }

  function _glBindFramebuffer(target, framebuffer) {
      GLctx.bindFramebuffer(target, framebuffer ? GL.framebuffers[framebuffer] : null);
    }


  var _floor=Math_floor;

  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      stream = FS.getStreamFromPtr(stream);
      return Number(stream && stream.eof);
    }

  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }

  function _glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }


  
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }

  var _emscripten_get_longjmp_result=true;

  function _glRenderbufferStorage(x0, x1, x2, x3) { GLctx.renderbufferStorage(x0, x1, x2, x3) }

  function _glLoadIdentity() {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.identity(GLImmediate.matrix[GLImmediate.currentMatrix]);
    }

  function _glColor4f(r, g, b, a) {
      r = Math.max(Math.min(r, 1), 0);
      g = Math.max(Math.min(g, 1), 0);
      b = Math.max(Math.min(b, 1), 0);
      a = Math.max(Math.min(a, 1), 0);
  
      // TODO: make ub the default, not f, save a few mathops
      if (GLImmediate.mode >= 0) {
        var start = GLImmediate.vertexCounter << 2;
        GLImmediate.vertexDataU8[start + 0] = r * 255;
        GLImmediate.vertexDataU8[start + 1] = g * 255;
        GLImmediate.vertexDataU8[start + 2] = b * 255;
        GLImmediate.vertexDataU8[start + 3] = a * 255;
        GLImmediate.vertexCounter++;
        GLImmediate.addRendererComponent(GLImmediate.COLOR, 4, GLctx.UNSIGNED_BYTE);
      } else {
        GLImmediate.clientColor[0] = r;
        GLImmediate.clientColor[1] = g;
        GLImmediate.clientColor[2] = b;
        GLImmediate.clientColor[3] = a;
      }
    }

  function _ferror(stream) {
      // int ferror(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ferror.html
      stream = FS.getStreamFromPtr(stream);
      return Number(stream && stream.error);
    }

  function _glBlendFunc(x0, x1) { GLctx.blendFunc(x0, x1) }


  function _glCheckFramebufferStatus(x0) { return GLctx.checkFramebufferStatus(x0) }


  function _glViewport(x0, x1, x2, x3) { GLctx.viewport(x0, x1, x2, x3) }

  function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg) {
      Module['noExitRuntime'] = true;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
        if (Browser.mainLoop.shouldPause) {
          // catch pauses from non-main loop sources
          Browser.mainLoop.paused = true;
          Browser.mainLoop.shouldPause = false;
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
        GL.newRenderingFrameStarted();
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        if (Module['preMainLoop']) {
          Module['preMainLoop']();
        }
  
        try {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        } catch (e) {
          if (e instanceof ExitStatus) {
            return;
          } else {
            if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
            throw e;
          }
        }
  
        if (Module['postMainLoop']) {
          Module['postMainLoop']();
        }
  
        if (Browser.mainLoop.shouldPause) {
          // catch pauses from the main loop itself
          Browser.mainLoop.paused = true;
          Browser.mainLoop.shouldPause = false;
          return;
        }
        Browser.mainLoop.scheduler();
      }
      if (fps && fps > 0) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, 1000/fps); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      Browser.mainLoop.scheduler();
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _glEnableClientState(cap) {
      var attrib = GLEmulation.getAttributeFromCapability(cap);
      if (attrib === null) {
        return;
      }
      if (!GLImmediate.enabledClientAttributes[attrib]) {
        GLImmediate.enabledClientAttributes[attrib] = true;
        GLImmediate.totalEnabledClientAttributes++;
        GLImmediate.currentRenderer = null; // Will need to change current renderer, since the set of active vertex pointers changed.
        if (GLEmulation.currentVao) GLEmulation.currentVao.enabledClientStates[cap] = 1;
        GLImmediate.modifiedClientAttributes = true;
      }
    }

  var _sinf=Math_sin;


  var _emscripten_setjmp=true;

  
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      var fd = _fileno(stream);
      return _write(fd, s, _strlen(s));
    }function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc(10, stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }

  function _glTexParameterf(x0, x1, x2) { GLctx.texParameterf(x0, x1, x2) }

  function _glPushMatrix() {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixStack[GLImmediate.currentMatrix].push(
          Array.prototype.slice.call(GLImmediate.matrix[GLImmediate.currentMatrix]));
    }

  function _glMatrixMode(mode) {
      if (mode == 0x1700 /* GL_MODELVIEW */) {
        GLImmediate.currentMatrix = 0/*m*/;
      } else if (mode == 0x1701 /* GL_PROJECTION */) {
        GLImmediate.currentMatrix = 1/*p*/;
      } else if (mode == 0x1702) { // GL_TEXTURE
        GLImmediate.useTextureMatrix = true;
        GLImmediate.currentMatrix = 2/*t*/ + GLImmediate.clientActiveTexture;
      } else {
        throw "Wrong mode " + mode + " passed to glMatrixMode";
      }
    }

  function _glOrtho(left, right, bottom, top_, nearVal, farVal) {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.multiply(GLImmediate.matrix[GLImmediate.currentMatrix],
          GLImmediate.matrixLib.mat4.ortho(left, right, bottom, top_, nearVal, farVal));
    }

  function _glPixelStorei(pname, param) {
      if (pname == 0x0D05 /* GL_PACK_ALIGNMENT */) {
        GL.packAlignment = param;
      } else if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  var _FtoILow=true;


var GLctx; GL.init()
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
___buildEnvironment(ENV);
GLEmulation.init();
GLImmediate.setupFuncs(); Browser.moduleContextCreatedCallbacks.push(function() { GLImmediate.init() });
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

var Math_min = Math.min;
function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function asmPrintInt(x, y) {
  Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
}
function asmPrintFloat(x, y) {
  Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
}
// EMSCRIPTEN_START_ASM
var asm=(function(global,env,buffer){"use asm";var a=new global.Int8Array(buffer);var b=new global.Int16Array(buffer);var c=new global.Int32Array(buffer);var d=new global.Uint8Array(buffer);var e=new global.Uint16Array(buffer);var f=new global.Uint32Array(buffer);var g=new global.Float32Array(buffer);var h=new global.Float64Array(buffer);var i=env.STACKTOP|0;var j=env.STACK_MAX|0;var k=env.tempDoublePtr|0;var l=env.ABORT|0;var m=env.cttz_i8|0;var n=env.ctlz_i8|0;var o=env._stderr|0;var p=0;var q=0;var r=0;var s=0;var t=+env.NaN,u=+env.Infinity;var v=0,w=0,x=0,y=0,z=0.0,A=0,B=0,C=0,D=0.0;var E=0;var F=0;var G=0;var H=0;var I=0;var J=0;var K=0;var L=0;var M=0;var N=0;var O=global.Math.floor;var P=global.Math.abs;var Q=global.Math.sqrt;var R=global.Math.pow;var S=global.Math.cos;var T=global.Math.sin;var U=global.Math.tan;var V=global.Math.acos;var W=global.Math.asin;var X=global.Math.atan;var Y=global.Math.atan2;var Z=global.Math.exp;var _=global.Math.log;var $=global.Math.ceil;var aa=global.Math.imul;var ba=env.abort;var ca=env.assert;var da=env.asmPrintInt;var ea=env.asmPrintFloat;var fa=env.min;var ga=env.invoke_iiii;var ha=env.invoke_viiiii;var ia=env.invoke_vid;var ja=env.invoke_di;var ka=env.invoke_i;var la=env.invoke_vi;var ma=env.invoke_viiiiiii;var na=env.invoke_vii;var oa=env.invoke_iiiiiii;var pa=env.invoke_ii;var qa=env.invoke_viii;var ra=env.invoke_v;var sa=env.invoke_iiiii;var ta=env.invoke_iii;var ua=env.invoke_iiiiii;var va=env.invoke_viiii;var wa=env._glUseProgram;var xa=env._fread;var ya=env._glLineWidth;var za=env._glGenRenderbuffers;var Aa=env._glDeleteProgram;var Ba=env._longjmp;var Ca=env._glBindBuffer;var Da=env._clock_gettime;var Ea=env._fsync;var Fa=env._llvm_pow_f32;var Ga=env._glTranslatef;var Ha=env._sbrk;var Ia=env._glBlendFunc;var Ja=env._glDisableVertexAttribArray;var Ka=env._sinf;var La=env._sysconf;var Ma=env._close;var Na=env._ferror;var Oa=env._glLoadMatrixf;var Pa=env._glfwGetMousePos;var Qa=env._fileno;var Ra=env._glfwTerminate;var Sa=env._puts;var Ta=env._glLoadIdentity;var Ua=env._glMatrixMode;var Va=env._glfwInit;var Wa=env._write;var Xa=env._ftell;var Ya=env._glShaderSource;var Za=env._glFramebufferRenderbuffer;var _a=env._glOrtho;var $a=env._glVertexPointer;var ab=env._tmpnam;var bb=env._glGetBooleanv;var cb=env._tmpfile;var db=env.__getFloat;var eb=env._glVertexAttribPointer;var fb=env._glHint;var gb=env._send;var hb=env._setlocale;var ib=env._glfwOpenWindow;var jb=env._glBindRenderbuffer;var kb=env._glViewport;var lb=env.___setErrNo;var mb=env._glDeleteTextures;var nb=env._putchar;var ob=env._floor;var pb=env._glEnable;var qb=env._printf;var rb=env._glGenTextures;var sb=env._sprintf;var tb=env._glGetIntegerv;var ub=env._glGetString;var vb=env._glPushMatrix;var wb=env._llvm_bswap_i32;var xb=env._glAttachShader;var yb=env._read;var zb=env._fwrite;var Ab=env._time;var Bb=env._glBindFramebuffer;var Cb=env._glDetachShader;var Db=env._glGenFramebuffers;var Eb=env._exit;var Fb=env._llvm_pow_f64;var Gb=env._glDeleteFramebuffers;var Hb=env._glColor4f;var Ib=env._glfwPollEvents;var Jb=env._lseek;var Kb=env._glCheckFramebufferStatus;var Lb=env.___buildEnvironment;var Mb=env._glEnableClientState;var Nb=env._pwrite;var Ob=env._open;var Pb=env._glClearColor;var Qb=env._glIsEnabled;var Rb=env._glBindTexture;var Sb=env._snprintf;var Tb=env._emscripten_get_now;var Ub=env._glGetFloatv;var Vb=env._glDrawArrays;var Wb=env._glCreateShader;var Xb=env._fseek;var Yb=env._getenv;var Zb=env._fclose;var _b=env._glActiveTexture;var $b=env._glTexCoordPointer;var ac=env._recv;var bc=env._glCompileShader;var cc=env._glEnableVertexAttribArray;var dc=env._abort;var ec=env._glTexImage2D;var fc=env._fopen;var gc=env._glDisableClientState;var hc=env._cosf;var ic=env._glDeleteRenderbuffers;var jc=env._glLinkProgram;var kc=env._fprintf;var lc=env.__reallyNegative;var mc=env._glClear;var nc=env._sscanf;var oc=env._glPopMatrix;var pc=env._glRenderbufferStorage;var qc=env.__exit;var rc=env._glBindAttribLocation;var sc=env._glPixelStorei;var tc=env._pread;var uc=env._mkport;var vc=env._fflush;var wc=env._feof;var xc=env._emscripten_memcpy_big;var yc=env._emscripten_set_main_loop;var zc=env.___errno_location;var Ac=env._fputc;var Bc=env.__scanString;var Cc=env._glDisable;var Dc=env._emscripten_cancel_main_loop;var Ec=env._emscripten_longjmp;var Fc=env.__formatString;var Gc=env._fputs;var Hc=env._glTexParameterf;var Ic=0.0;
// EMSCRIPTEN_START_FUNCS
function Zc(a){a=a|0;var b=0;b=i;i=i+a|0;i=i+7&-8;return b|0}function _c(){return i|0}function $c(a){a=a|0;i=a}function ad(a,b){a=a|0;b=b|0;if((p|0)==0){p=a;q=b}}function bd(b){b=b|0;a[k]=a[b];a[k+1|0]=a[b+1|0];a[k+2|0]=a[b+2|0];a[k+3|0]=a[b+3|0]}function cd(b){b=b|0;a[k]=a[b];a[k+1|0]=a[b+1|0];a[k+2|0]=a[b+2|0];a[k+3|0]=a[b+3|0];a[k+4|0]=a[b+4|0];a[k+5|0]=a[b+5|0];a[k+6|0]=a[b+6|0];a[k+7|0]=a[b+7|0]}function dd(a){a=a|0;E=a}function ed(a){a=a|0;F=a}function fd(a){a=a|0;G=a}function gd(a){a=a|0;H=a}function hd(a){a=a|0;I=a}function id(a){a=a|0;J=a}function jd(a){a=a|0;K=a}function kd(a){a=a|0;L=a}function ld(a){a=a|0;M=a}function md(a){a=a|0;N=a}function nd(a){a=a|0;c[a>>2]=0;return}function od(a){a=a|0;var b=0,d=0,e=0;b=i;d=c[a>>2]|0;if((d|0)==0){i=b;return}else{e=d}while(1){d=c[e+16>>2]|0;vm(e);if((d|0)==0){break}else{e=d}}i=b;return}function pd(a,d,e,f,g){a=a|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;h=i;j=um(20)|0;c[j>>2]=d;k=j+4|0;b[k>>1]=e;c[j+8>>2]=f;c[j+12>>2]=g;e=j+16|0;c[e>>2]=0;l=c[a>>2]|0;if((l|0)!=0){m=l;l=0;while(1){if(((c[m>>2]|0)==(d|0)?(c[m+8>>2]|0)==(f|0):0)?(c[m+12>>2]|0)==(g|0):0){n=5;break}o=c[m+16>>2]|0;if((o|0)==0){break}else{p=m;m=o;l=p}}do{if((n|0)==5){g=c[m+16>>2]|0;if((l|0)==0){c[a>>2]=g;vm(m);break}else{c[l+16>>2]=g;vm(m);break}}}while(0);m=c[a>>2]|0;if((m|0)!=0){l=m;m=0;while(1){if((l|0)==0){n=18;break}if((b[k>>1]|0)>(b[l+4>>1]|0)){n=12;break}q=l+16|0;g=c[q>>2]|0;if((g|0)==0){n=16;break}else{f=l;l=g;m=f}}if((n|0)==12){if((m|0)==0){c[a>>2]=j;c[e>>2]=l;i=h;return}else{c[m+16>>2]=j;c[e>>2]=l;i=h;return}}else if((n|0)==16){c[q>>2]=j;i=h;return}else if((n|0)==18){i=h;return}}}c[a>>2]=j;i=h;return}function qd(a,d){a=a|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;e=i;f=c[a>>2]|0;if((f|0)==0){g=1;i=e;return g|0}a=b[d>>1]|0;h=0;j=f;f=0;while(1){if((c[j>>2]|0)==(a&65535|0)){k=um(12)|0;c[k>>2]=c[j+8>>2];c[k+4>>2]=c[j+12>>2];c[k+8>>2]=0;if((h|0)==0){l=k;m=k}else{c[f+8>>2]=k;l=h;m=k}}else{l=h;m=f}j=c[j+16>>2]|0;if((j|0)==0){break}else{h=l;f=m}}m=(l|0)==0;if(m){g=1;i=e;return g|0}else{n=l}while(1){if((Wc[c[n>>2]&31](d,c[n+4>>2]|0)|0)==0){o=0;break}f=c[n+8>>2]|0;if((f|0)==0){o=1;break}else{n=f}}if(m){g=o;i=e;return g|0}else{p=l}while(1){l=c[p+8>>2]|0;vm(p);if((l|0)==0){g=o;break}else{p=l}}i=e;return g|0}function rd(){var a=0,b=0,d=0;a=i;i=i+16|0;b=a;c[40]=0;d=um(4)|0;c[474]=d;c[482]=um(4)|0;nd(d);nd(c[482]|0);c[10]=of()|0;c[b+0>>2]=c[32>>2];c[b+4>>2]=c[36>>2];td(b);c[2]=0;Oc[c[108>>2]&63](0);b=Af()|0;d=1968;c[d>>2]=b;c[d+4>>2]=E;c[6]=0;c[34]=0;Oc[c[84>>2]&63](0);c[1924>>2]=0;Gf();If();Dd();if((Nc[c[12]&7]()|0)==0){c[14]=0;Fd();Hf();Lf();pf(c[10]|0);od(c[482]|0);od(c[474]|0);vm(c[482]|0);vm(c[474]|0);Uc[c[72>>2]&15]();Uc[c[76>>2]&15]();i=a;return}else{Qc[c[68>>2]&31](4,5);i=a;return}}function sd(a){a=a|0;var b=0,d=0,e=0,f=0,h=0,j=0,k=0,l=0,m=0.0,n=0.0,o=0;b=i;i=i+16|0;d=b;if((c[36]|0)==0){e=c[88>>2]|0;c[d+0>>2]=c[a+0>>2];c[d+4>>2]=c[a+4>>2];Oc[e&63](d);sf(c[10]|0,+g[a>>2],+g[a+4>>2]);c[d+0>>2]=c[a+0>>2];c[d+4>>2]=c[a+4>>2];td(d);f=0}else{f=1}c[38]=f;f=a;a=c[f+4>>2]|0;d=32;c[d>>2]=c[f>>2];c[d+4>>2]=a;a=c[96>>2]|0;if((c[40]|0)==0){h=0;j=h&1;k=Sc[a&31](j)|0;c[40]=k;i=b;return}d=Sc[c[92>>2]&31](0)|0;f=wm(d,8)|0;Sc[c[92>>2]&31](f)|0;a:do{if((d|0)==0){l=0}else{m=+g[8];n=+g[36>>2];e=0;while(1){if(+g[f+(e<<3)>>2]==m?+g[f+(e<<3)+4>>2]==n:0){l=1;break a}o=e+1|0;if(o>>>0<d>>>0){e=o}else{l=0;break}}}}while(0);vm(f);h=l;j=h&1;k=Sc[a&31](j)|0;c[40]=k;i=b;return}function td(a){a=a|0;var b=0,d=0,e=0.0,f=0.0;b=i;i=i+16|0;d=b;e=+g[a>>2];f=+g[a+4>>2];kb(0,0,~~e|0,~~f|0);Ua(5889);Ta();_a(0.0,+e,+f,0.0,-1.0,1.0);Ua(5888);Ta();Pb(0.0,0.0,0.0,1.0);Ia(770,771);pb(3042);ke();c[d+0>>2]=c[a+0>>2];c[d+4>>2]=c[a+4>>2];je(d);i=b;return}function ud(){return c[40]|0}function vd(a,d){a=a|0;d=d|0;var e=0,f=0,h=0,j=0,k=0.0,l=0.0;e=i;i=i+32|0;f=e+8|0;h=e;b[f>>1]=2;j=c[474]|0;c[f+8>>2]=j;c[f+4>>2]=j;k=+(a|0);l=+(d|0);pe(h,k,l);d=h;h=c[d+4>>2]|0;a=f+16|0;c[a>>2]=c[d>>2];c[a+4>>2]=h;g[476]=k;g[1908>>2]=l;qd(c[474]|0,f)|0;zf(f);i=e;return}function wd(){var a=0,b=0,d=0,e=0,f=0,h=0,j=0,k=0;a=i;mc(16640);De();ye();c[36]=1;b=Af()|0;d=168;e=Bm(b|0,E|0,c[d>>2]|0,c[d+4>>2]|0)|0;d=E;b=Af()|0;f=168;c[f>>2]=b;c[f+4>>2]=E;sf(c[10]|0,+g[8],+g[36>>2]);tf(c[10]|0);uf(c[10]|0);f=192;b=zm(c[f>>2]|0,c[f+4>>2]|0,e|0,d|0)|0;d=E;e=192;c[e>>2]=b;c[e+4>>2]=d;e=176;f=zm(c[e>>2]|0,c[e+4>>2]|0,1,0)|0;e=E;h=176;c[h>>2]=f;c[h+4>>2]=e;h=184;j=c[h+4>>2]|0;if(d>>>0<j>>>0|(d|0)==(j|0)&b>>>0<(c[h>>2]|0)>>>0){c[36]=0;k=c[124>>2]|0;Uc[k&15]();i=a;return}c[4]=~~(1.0e3/((+(b>>>0)+4294967296.0*+(d>>>0))/(+(f>>>0)+4294967296.0*+(e>>>0))));e=192;c[e>>2]=0;c[e+4>>2]=0;e=176;c[e>>2]=0;c[e+4>>2]=0;c[36]=0;k=c[124>>2]|0;Uc[k&15]();i=a;return}function xd(){var a=0,b=0,d=0,e=0,f=0,g=0,h=0,j=0;a=i;i=i+16|0;b=a;d=c[6]|0;if((d|0)==0){e=0;f=0}else{g=1e3/(d|0)|0;e=g;f=((g|0)<0)<<31>>31}g=Af()|0;d=E;Jf();Ff();yf(c[10]|0);xf();Uc[c[120>>2]&15]();wd();if((c[38]|0)!=0){c[b+0>>2]=c[32>>2];c[b+4>>2]=c[36>>2];sd(b)}b=Af()|0;h=E;j=zm(g|0,d|0,e|0,f|0)|0;f=Bm(j|0,E|0,b|0,h|0)|0;Af()|0;if(!((f|0)>0&(c[34]|0)!=0)){i=a;return}Oc[c[112>>2]&63](f);i=a;return}function yd(){var a=0,b=0;a=i;b=c[14]|0;if((b|0)!=0){Uc[b&15]()}Fd();Hf();Lf();pf(c[10]|0);od(c[482]|0);od(c[474]|0);vm(c[482]|0);vm(c[474]|0);Uc[c[72>>2]&15]();i=a;return}function zd(){var a=0,b=0,d=0,e=0;a=i;i=i+64|0;b=a;c[12]=1;c[14]=6;hb(0,128)|0;Ye(b);d=64|0;e=b+0|0;b=d+64|0;do{c[d>>2]=c[e>>2];d=d+4|0;e=e+4|0}while((d|0)<(b|0));Sc[c[16]&31](7)|0;i=a;return}function Ad(){var a=0;a=i;Pe(c[54]|0);Pe(c[52]|0);i=a;return}function Bd(){var a=0,b=0,d=0;a=i;b=Me(232)|0;c[52]=b;if((b|0)==0){Sa(272)|0}b=Me(256)|0;c[54]=b;if((b|0)==0){Sa(312)|0}b=Af()|0;d=224;c[d>>2]=b;c[d+4>>2]=E;c[(c[10]|0)+112>>2]=2;i=a;return 1}function Cd(a){a=a|0;var b=0,d=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0.0,p=0.0;b=i;i=i+144|0;d=b+108|0;f=b;h=b+36|0;j=b+72|0;k=Af()|0;l=E;m=224;n=Bm(k|0,l|0,c[m>>2]|0,c[m+4>>2]|0)|0;o=(+(n>>>0)+4294967296.0*+(E>>>0))*.0010000000474974513;n=224;c[n>>2]=k;c[n+4>>2]=l;l=c[54]|0;se(f,+(0-(e[l+4>>1]|0)|0)*.5,+(0-(e[l+6>>1]|0)|0)*.5);te(h,+g[50]);l=d+0|0;n=h+0|0;h=l+36|0;do{c[l>>2]=c[n>>2];l=l+4|0;n=n+4|0}while((l|0)<(h|0));ue(f,d);se(j,+g[a+120>>2],+g[a+124>>2]);l=d+0|0;n=j+0|0;h=l+36|0;do{c[l>>2]=c[n>>2];l=l+4|0;n=n+4|0}while((l|0)<(h|0));ue(f,d);Oe(c[52]|0,0.0,0.0);Ge(1.0,0.0,0.0,.5);Ie(1.0);He(1.0,1.0,1.0,1.0);p=+g[a+12>>2]*.5;Je(p,+g[a+16>>2]*.5,p);Ee(f);Oe(c[54]|0,0.0,0.0);Fe();g[50]=o*5.0+ +g[50];i=b;return}function Dd(){var a=0,b=0,d=0,e=0;a=i;i=i+112|0;b=a;Kd(b);d=344|0;e=b+0|0;b=d+112|0;do{c[d>>2]=c[e>>2];d=d+4|0;e=e+4|0}while((d|0)<(b|0));Uc[c[352>>2]&15]();e=Bf()|0;c[114]=e;d=e+24|0;c[d>>2]=100;c[d+4>>2]=0;pd(e,201,0,1,0);Cf(c[114]|0,0);i=a;return}function Ed(d,e){d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0.0,y=0,z=0,A=0,B=0,C=0,D=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,aa=0,ba=0,ca=0;e=i;i=i+32|0;d=e+8|0;f=e;h=e+4|0;j=Af()|0;k=E;l=c[116]|0;if((l|0)==0){i=e;return 1}m=d+4|0;n=l;while(1){l=c[n>>2]|0;o=n+8|0;p=c[o>>2]|0;if((a[l+4|0]|0)==1?(q=l+8|0,r=c[q>>2]|0,(c[r+8>>2]&2|0)!=0):0){if((r|0)==0){s=l+16|0;t=0}else{u=l+32|0;v=u;w=Bm(j|0,k|0,c[v>>2]|0,c[v+4>>2]|0)|0;v=E;x=+g[r>>2]*1.0e3;r=~~x>>>0;y=+P(x)>=1.0?x>0.0?(fa(+O(x/4294967296.0),4294967295.0)|0)>>>0:~~+$((x- +(~~x>>>0))/4294967296.0)>>>0:0;z=l+16|0;x=(+(w>>>0)+4294967296.0*+(v>>>0))*+Mc[c[396>>2]&3](c[z>>2]|0);A=+P(x)>=1.0?x>0.0?(fa(+O(x/4294967296.0),4294967295.0)|0)>>>0:~~+$((x- +(~~x>>>0))/4294967296.0)>>>0:0;B=l+24|0;C=B;D=zm(~~x>>>0|0,A|0,c[C>>2]|0,c[C+4>>2]|0)|0;C=E;if((r|0)==0&(y|0)==0){F=D;G=C}else{A=Rm(D|0,C|0,r|0,y|0)|0;F=A;G=E}A=B;c[A>>2]=F;c[A+4>>2]=G;A=u;B=zm(c[A>>2]|0,c[A+4>>2]|0,w|0,v|0)|0;v=u;c[v>>2]=B;c[v+4>>2]=E;s=z;t=c[q>>2]|0}Tc[c[436>>2]&15](c[s>>2]|0,f,h);q=c[h>>2]|0;if((q|0)<10){Hd(l,10-q|0,t+(q<<2)+12|0)}q=c[f>>2]|0;if((q|0)>0?(z=t+12|0,Jc[c[432>>2]&15](c[s>>2]|0,q,z)|0,Hd(l,c[f>>2]|0,z),q=c[f>>2]|0,(q|0)>0):0){v=t+48|0;B=t+16|0;u=t+20|0;w=t+24|0;A=t+28|0;y=t+32|0;r=t+36|0;C=t+40|0;D=t+44|0;H=c[B>>2]|0;I=c[u>>2]|0;J=c[w>>2]|0;K=c[A>>2]|0;L=c[y>>2]|0;M=c[r>>2]|0;N=c[C>>2]|0;Q=c[D>>2]|0;R=c[v>>2]|0;S=c[z>>2]|0;T=0;while(1){T=T+1|0;if((T|0)==(q|0)){break}else{U=S;V=R;W=Q;X=N;Y=M;Z=L;_=K;aa=J;ba=I;S=H;R=U;Q=V;N=W;M=X;L=Y;K=Z;J=_;I=aa;H=ba}}c[z>>2]=H;c[B>>2]=I;c[u>>2]=J;c[w>>2]=K;c[A>>2]=L;c[y>>2]=M;c[r>>2]=N;c[C>>2]=Q;c[D>>2]=R;c[v>>2]=S}}if((Sc[c[452>>2]&31](c[l+16>>2]|0)|0)==2){q=c[n>>2]|0;a[q+4|0]=0;Qc[c[424>>2]&31](c[q+16>>2]|0,0);b[d>>1]=151;c[m>>2]=q;qd(q,d)|0;c[q+8>>2]=0;if((c[q+44>>2]|0)!=0){Gd(q)}q=c[o>>2]|0;T=n+4|0;if((q|0)==0){c[118]=c[T>>2];ca=c[o>>2]|0}else{ca=q}q=c[T>>2]|0;if((q|0)==0){c[116]=ca;ba=c[o>>2]|0;if((ba|0)!=0){c[ba+4>>2]=0}}else{c[q+8>>2]=ca;q=c[o>>2]|0;if((q|0)!=0){c[q+4>>2]=c[T>>2]}}vm(n)}if((p|0)==0){break}else{n=p}}i=e;return 1}function Fd(){var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0;b=i;d=c[116]|0;Df(c[114]|0);Ef(c[114]|0);if((d|0)==0){e=c[356>>2]|0;Uc[e&15]();i=b;return}else{f=d}while(1){d=f+8|0;g=c[d>>2]|0;a[(c[f>>2]|0)+4|0]=0;h=c[f>>2]|0;if((c[h+44>>2]|0)!=0){Gd(h)}h=c[d>>2]|0;j=f+4|0;if((h|0)==0){c[118]=c[j>>2];k=c[d>>2]|0}else{k=h}h=c[j>>2]|0;if((h|0)==0){c[116]=k;l=c[d>>2]|0;if((l|0)!=0){c[l+4>>2]=0}}else{c[h+8>>2]=k;h=c[d>>2]|0;if((h|0)!=0){c[h+4>>2]=c[j>>2]}}vm(f);if((g|0)==0){break}else{f=g}}e=c[356>>2]|0;Uc[e&15]();i=b;return}function Gd(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;d=i;a:do{if((a[b+4|0]|0)!=0?(e=c[116]|0,(e|0)!=0):0){f=e;while(1){g=f+8|0;h=c[g>>2]|0;j=(h|0)==0;if((c[f>>2]|0)==(b|0)){break}if(j){break a}else{f=h}}e=f+4|0;if(j){c[118]=c[e>>2];k=c[g>>2]|0}else{k=h}l=c[e>>2]|0;if((l|0)==0){c[116]=k;m=c[g>>2]|0;if((m|0)!=0){c[m+4>>2]=0}}else{c[l+8>>2]=k;l=c[g>>2]|0;if((l|0)!=0){c[l+4>>2]=c[e>>2]}}vm(f)}}while(0);od(b);Oc[c[388>>2]&63](c[b+16>>2]|0);vm(b);i=d;return}function Hd(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;e=i;i=i+8192|0;f=e;g=(c[a+8>>2]|0)+52|0;h=c[g>>2]|0;j=(b|0)>0;if(j){k=0;l=h;while(1){m=c[d+(k<<2)>>2]|0;n=Jc[c[l>>2]&15](l,f,8192)|0;if((n|0)==0){o=k;break}Jc[c[380>>2]&15](m,f,n)|0;m=k+1|0;if((n|0)<=0){o=k;break}if((m|0)>=(b|0)){o=m;break}k=m;l=c[g>>2]|0}if((o|0)!=0){p=o}else{q=8}}else{q=8}a:do{if((q|0)==8){if(((Sc[c[h+8>>2]&31](h)|0)!=0?(c[a+40>>2]|0)!=0:0)?(Jc[c[h+4>>2]&15](h,0,0)|0,j):0){o=0;while(1){l=c[d+(o<<2)>>2]|0;k=c[g>>2]|0;m=Jc[c[k>>2]&15](k,f,8192)|0;if((m|0)==0){p=o;break a}Jc[c[380>>2]&15](l,f,m)|0;l=o+1|0;if((m|0)<=0){p=o;break a}if((l|0)<(b|0)){o=l}else{p=l;break}}}else{p=0}}}while(0);Jc[c[428>>2]&15](c[a+16>>2]|0,p,d)|0;i=e;return}function Id(){return}function Jd(){return}function Kd(a){a=a|0;g[a>>2]=-5.0e3;g[a+4>>2]=0.0;c[a+8>>2]=8;c[a+12>>2]=9;c[a+16>>2]=2;c[a+20>>2]=3;c[a+24>>2]=3;c[a+28>>2]=1;c[a+32>>2]=4;c[a+36>>2]=2;c[a+40>>2]=4;c[a+44>>2]=5;c[a+48>>2]=1;c[a+52>>2]=1;c[a+56>>2]=1;c[a+60>>2]=1;c[a+64>>2]=2;c[a+68>>2]=2;c[a+72>>2]=2;c[a+76>>2]=2;c[a+80>>2]=3;c[a+84>>2]=3;c[a+88>>2]=4;c[a+92>>2]=1;c[a+96>>2]=3;c[a+100>>2]=4;c[a+104>>2]=5;c[a+108>>2]=6;return}function Ld(a,b,c){a=a|0;b=b|0;c=c|0;c=i;b=um(4)|0;i=c;return b|0}function Md(a){a=a|0;var b=0;b=i;vm(a);i=b;return}function Nd(a,b,c){a=a|0;b=b|0;c=c|0;return 0}function Od(a){a=a|0;var b=0;b=i;vm(a);i=b;return}function Pd(a,b){a=a|0;b=+b;g[a+12>>2]=b;return}function Qd(a){a=a|0;return+(+g[a+12>>2])}function Rd(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function Sd(a){a=a|0;return c[a>>2]|0}function Td(a,b){a=a|0;b=b|0;c[a+8>>2]=b;return}function Ud(a){a=a|0;return c[a+8>>2]|0}function Vd(a,b){a=a|0;b=+b;return}function Wd(a){a=a|0;return 0.0}function Xd(a,b){a=a|0;b=b|0;return}function Yd(a,b,c){a=a|0;b=b|0;c=c|0;return 0}function Zd(a,b,c){a=a|0;b=b|0;c=c|0;return 0}function _d(a){a=a|0;return 0}function $d(a){a=a|0;return 0}function ae(a){a=a|0;return 0}function be(a){a=a|0;return 2}function ce(a,b,d){a=a|0;b=b|0;d=d|0;c[b>>2]=0;c[d>>2]=0;return}function de(a){a=a|0;c[120]=a;return}function ee(){return c[120]|0}function fe(){var a=0,b=0;a=i;b=um(16)|0;c[b>>2]=1;c[b+4>>2]=0;c[b+8>>2]=0;i=a;return b|0}function ge(){return 0}function he(){return}function ie(){return}function je(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;i=i+16|0;d=b;e=c[122]|0;if((e|0)==0){c[122]=512;Sa(808)|0;f=c[122]|0}else{f=e}e=c[f>>2]|0;c[d+0>>2]=c[a+0>>2];c[d+4>>2]=c[a+4>>2];Oc[e&63](d);i=b;return}function ke(){var a=0,b=0;a=i;b=c[122]|0;if((b|0)==0){i=a;return}Uc[c[b+4>>2]&15]();i=a;return}function le(a){a=a|0;var b=0,d=0,e=0;b=i;Db(1,496);Bb(36160,c[124]|0);za(2,504);jb(36161,c[126]|0);d=~~+g[a>>2];e=~~+g[a+4>>2];pc(36161,6408,d|0,e|0);Za(36160,36064,36161,c[126]|0);jb(36161,c[508>>2]|0);pc(36161,33189,d|0,e|0);Za(36160,36096,36161,c[508>>2]|0);e=Kb(36160)|0;if((e|0)==36054){Sa(728)|0}else if((e|0)==36055){Sa(640)|0}else if((e|0)==36061){Sa(528)|0}else if((e|0)==36053){Bb(36160,0);i=b;return}Bb(36160,0);ic(2,504);Gb(1,496);c[124]=0;Sa(600)|0;Bb(36160,0);i=b;return}function me(){var a=0;a=i;if((c[124]|0)==0){i=a;return}ic(2,504);Gb(1,496);i=a;return}function ne(){var a=0,b=0;a=i;b=c[124]|0;if((b|0)!=0){Bb(36160,b|0)}i=a;return}function oe(){var a=0;a=i;Bb(36160,0);i=a;return}function pe(a,b,c){a=a|0;b=+b;c=+c;g[a>>2]=b;g[a+4>>2]=c;return}function qe(a,b,c){a=a|0;b=+b;c=+c;g[a>>2]=b;g[a+4>>2]=c;return}function re(a){a=a|0;var b=0,d=0,e=0;b=i;d=a+0|0;a=832|0;e=d+36|0;do{c[d>>2]=c[a>>2];d=d+4|0;a=a+4|0}while((d|0)<(e|0));i=b;return}function se(a,b,c){a=a|0;b=+b;c=+c;g[a>>2]=1.0;g[a+4>>2]=0.0;g[a+8>>2]=0.0;g[a+12>>2]=0.0;g[a+16>>2]=1.0;g[a+20>>2]=0.0;g[a+24>>2]=b;g[a+28>>2]=c;g[a+32>>2]=1.0;return}function te(a,b){a=a|0;b=+b;var c=0.0,d=0.0;c=+T(+b);d=+S(+b);g[a>>2]=d;g[a+4>>2]=-c;g[a+8>>2]=0.0;g[a+12>>2]=c;g[a+16>>2]=d;g[a+20>>2]=0.0;g[a+24>>2]=0.0;g[a+28>>2]=0.0;g[a+32>>2]=1.0;return}function ue(a,b){a=a|0;b=b|0;var c=0;c=i;ve(a,b);i=c;return}function ve(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,h=0,j=0,k=0.0,l=0.0,m=0.0,n=0,o=0,p=0,q=0,r=0;d=i;i=i+48|0;e=d;f=e+0|0;h=a+0|0;j=f+36|0;do{c[f>>2]=c[h>>2];f=f+4|0;h=h+4|0}while((f|0)<(j|0));k=+g[e>>2];l=+g[e+4>>2];m=+g[e+8>>2];h=b+12|0;f=b+24|0;g[a>>2]=+g[b>>2]*k+ +g[h>>2]*l+ +g[f>>2]*m;j=b+4|0;n=b+16|0;o=b+28|0;g[a+4>>2]=+g[j>>2]*k+ +g[n>>2]*l+ +g[o>>2]*m;p=b+8|0;q=b+20|0;r=b+32|0;g[a+8>>2]=+g[p>>2]*k+ +g[q>>2]*l+ +g[r>>2]*m;m=+g[e+12>>2];l=+g[e+16>>2];k=+g[e+20>>2];g[a+12>>2]=+g[b>>2]*m+ +g[h>>2]*l+ +g[f>>2]*k;g[a+16>>2]=+g[j>>2]*m+ +g[n>>2]*l+ +g[o>>2]*k;g[a+20>>2]=+g[p>>2]*m+ +g[q>>2]*l+ +g[r>>2]*k;k=+g[e+24>>2];l=+g[e+28>>2];m=+g[e+32>>2];g[a+24>>2]=+g[b>>2]*k+ +g[h>>2]*l+ +g[f>>2]*m;g[a+28>>2]=+g[j>>2]*k+ +g[n>>2]*l+ +g[o>>2]*m;g[a+32>>2]=+g[p>>2]*k+ +g[q>>2]*l+ +g[r>>2]*m;i=d;return}function we(a){a=a|0;var b=0,d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0,x=0,y=0;b=i;i=i+48|0;d=b;e=+g[a>>2];f=+g[a+16>>2];h=e*f;j=+g[a+32>>2];k=+g[a+12>>2];l=+g[a+28>>2];m=k*l;n=+g[a+8>>2];o=+g[a+24>>2];p=+g[a+4>>2];q=o*p;r=+g[a+20>>2];s=f*o;t=k*p;u=e*l;v=h*j+m*n+q*r-n*s-j*t-u*r;if(v==0.0){w=a+0|0;x=832|0;y=w+36|0;do{c[w>>2]=c[x>>2];w=w+4|0;x=x+4|0}while((w|0)<(y|0));i=b;return}else{g[d>>2]=(f*j-l*r)/v;g[d+4>>2]=-(p*j-l*n)/v;g[d+8>>2]=(p*r-f*n)/v;g[d+12>>2]=-(k*j-o*r)/v;g[d+16>>2]=(e*j-o*n)/v;g[d+20>>2]=-(e*r-k*n)/v;g[d+24>>2]=(m-s)/v;g[d+28>>2]=-(u-q)/v;g[d+32>>2]=(h-t)/v;w=a+0|0;x=d+0|0;y=w+36|0;do{c[w>>2]=c[x>>2];w=w+4|0;x=x+4|0}while((w|0)<(y|0));i=b;return}}function xe(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0,e=0.0,f=0.0;d=+g[b>>2];e=+g[b+4>>2];f=+g[c+28>>2]+(d*+g[c+4>>2]+e*+g[c+16>>2]);g[a>>2]=+g[c+24>>2]+(d*+g[c>>2]+e*+g[c+12>>2]);g[a+4>>2]=f;return}function ye(){var a=0,b=0,d=0,e=0,f=0;a=i;b=c[224]|0;d=c[b+16>>2]|0;if((d|0)==0){i=a;return}else{e=d;f=b}do{c[224]=e;vm(f);f=c[224]|0;e=c[f+16>>2]|0}while((e|0)!=0);i=a;return}function ze(a,b,d,e){a=+a;b=+b;d=+d;e=+e;var f=0,h=0,j=0,k=0.0;f=i;h=um(20)|0;j=c[224]|0;k=+g[j+4>>2]*b;b=+g[j+8>>2]*d;d=+g[j+12>>2]*e;g[h>>2]=+g[j>>2]*a;g[h+4>>2]=k;g[h+8>>2]=b;g[h+12>>2]=d;c[h+16>>2]=j;c[224]=h;i=f;return}function Ae(a,b,c,d,e){a=a|0;b=+b;c=+c;d=+d;e=+e;g[a>>2]=b;g[a+4>>2]=c;g[a+8>>2]=d;g[a+12>>2]=e;return}function Be(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=i;e=c[224]|0;g[b>>2]=+g[e>>2]*+g[b>>2];f=b+4|0;g[f>>2]=+g[e+4>>2]*+g[f>>2];f=b+8|0;g[f>>2]=+g[e+8>>2]*+g[f>>2];f=b+12|0;g[f>>2]=+g[e+12>>2]*+g[f>>2];c[a+0>>2]=c[b+0>>2];c[a+4>>2]=c[b+4>>2];c[a+8>>2]=c[b+8>>2];c[a+12>>2]=c[b+12>>2];i=d;return}function Ce(){var a=0,b=0,d=0;a=i;b=c[224]|0;d=c[b+16>>2]|0;if((d|0)==0){i=a;return}c[224]=d;vm(b);i=a;return}function De(){var a=0,b=0,d=0,e=0,f=0;a=i;b=c[236]|0;d=c[b+36>>2]|0;if((d|0)==0){Ta();i=a;return}else{e=d;f=b}do{c[236]=e;vm(f);f=c[236]|0;e=c[f+36>>2]|0}while((e|0)!=0);Ta();i=a;return}function Ee(a){a=a|0;var b=0,d=0,e=0,f=0,h=0;b=i;i=i+64|0;d=b;e=um(40)|0;f=e+0|0;h=a+0|0;a=f+36|0;do{c[f>>2]=c[h>>2];f=f+4|0;h=h+4|0}while((f|0)<(a|0));ve(e,c[236]|0);c[e+36>>2]=c[236];c[236]=e;g[d>>2]=+g[e>>2];g[d+4>>2]=+g[e+4>>2];g[d+8>>2]=0.0;g[d+12>>2]=+g[e+8>>2];g[d+16>>2]=+g[e+12>>2];g[d+20>>2]=+g[e+16>>2];g[d+24>>2]=0.0;g[d+28>>2]=+g[e+20>>2];g[d+32>>2]=0.0;g[d+36>>2]=0.0;g[d+40>>2]=1.0;g[d+44>>2]=0.0;g[d+48>>2]=+g[e+24>>2];g[d+52>>2]=+g[e+28>>2];g[d+56>>2]=0.0;g[d+60>>2]=+g[e+32>>2];Oa(d|0);i=b;return}function Fe(){var a=0,b=0,d=0,e=0,f=0;a=i;i=i+64|0;b=a;d=c[236]|0;e=c[d+36>>2]|0;if((e|0)==0){f=d}else{c[236]=e;vm(d);f=c[236]|0}g[b>>2]=+g[f>>2];g[b+4>>2]=+g[f+4>>2];g[b+8>>2]=0.0;g[b+12>>2]=+g[f+8>>2];g[b+16>>2]=+g[f+12>>2];g[b+20>>2]=+g[f+16>>2];g[b+24>>2]=0.0;g[b+28>>2]=+g[f+20>>2];g[b+32>>2]=0.0;g[b+36>>2]=0.0;g[b+40>>2]=1.0;g[b+44>>2]=0.0;g[b+48>>2]=+g[f+24>>2];g[b+52>>2]=+g[f+28>>2];g[b+56>>2]=0.0;g[b+60>>2]=+g[f+32>>2];Oa(b|0);i=a;return}function Ge(a,b,c,d){a=+a;b=+b;c=+c;d=+d;g[238]=a;g[956>>2]=b;g[960>>2]=c;g[964>>2]=d;return}function He(a,b,c,d){a=+a;b=+b;c=+c;d=+d;g[242]=a;g[972>>2]=b;g[976>>2]=c;g[980>>2]=d;return}function Ie(a){a=+a;g[246]=a;return}function Je(a,b,d){a=+a;b=+b;d=+d;var e=0,f=0,h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0,o=0;e=i;i=i+496|0;f=e;h=c[224]|0;j=+g[238]*+g[h>>2];k=+g[956>>2]*+g[h+4>>2];l=+g[960>>2]*+g[h+8>>2];m=+g[964>>2]*+g[h+12>>2];g[f>>2]=a;g[f+4>>2]=b;h=f;n=f+8|0;o=992;while(1){g[n>>2]=+g[o>>2]*d+a;g[n+4>>2]=+g[o+4>>2]*d+b;n=n+8|0;if((n-h|0)>=496){break}else{o=o+8|0}}Mb(32884);$a(2,5126,0,f|0);Hb(+j,+k,+l,+m);Vb(6,0,62);if(!(+g[246]>0.0)){gc(32884);i=e;return}f=c[224]|0;Hb(+(+g[242]*+g[f>>2]),+(+g[972>>2]*+g[f+4>>2]),+(+g[976>>2]*+g[f+8>>2]),+(+g[980>>2]*+g[f+12>>2]));ya(+(+g[246]));Vb(2,1,61);gc(32884);i=e;return}function Ke(){return}function Le(){return}function Me(a){a=a|0;var d=0,f=0,g=0,h=0,j=0,k=0,l=0;d=i;i=i+16|0;f=d;g=Qe(a)|0;if((g|0)==0){h=0;i=d;return h|0}a=um(8)|0;j=a+4|0;b[j>>1]=c[g>>2];k=a+6|0;b[k>>1]=c[g+4>>2];rb(1,a|0);pb(3553);tb(32873,f|0);Rb(3553,c[a>>2]|0);sc(3317,1);l=c[g+8>>2]|0;if((l|0)==0){ec(3553,0,6408,e[j>>1]|0|0,e[k>>1]|0|0,0,6408,5121,c[g+12>>2]|0)}else if((l|0)==1){ec(3553,0,6407,e[j>>1]|0|0,e[k>>1]|0|0,0,6407,5121,c[g+12>>2]|0)}Hc(3553,10240,9729.0);Hc(3553,10241,9729.0);Hc(3553,10242,33071.0);Hc(3553,10243,33071.0);Rb(3553,c[f>>2]|0);Cc(3553);h=a;i=d;return h|0}function Ne(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0,j=0;e=i;i=i+48|0;f=e+32|0;h=e;j=e+16|0;Ae(j,1.0,1.0,1.0,1.0);c[f+0>>2]=c[j+0>>2];c[f+4>>2]=c[j+4>>2];c[f+8>>2]=c[j+8>>2];c[f+12>>2]=c[j+12>>2];Be(h,f);Hb(+(+g[h>>2]),+(+g[h+4>>2]),+(+g[h+8>>2]),+(+g[h+12>>2]));pb(3553);Rb(3553,c[a>>2]|0);Mb(32884);Mb(32888);$a(2,5126,0,b|0);$b(2,5126,0,d|0);Vb(6,0,4);gc(32884);gc(32888);Cc(3553);i=e;return}function Oe(a,b,d){a=a|0;b=+b;d=+d;var f=0,h=0,j=0,k=0.0;f=i;i=i+64|0;h=f+32|0;j=f;g[h>>2]=0.0;g[h+4>>2]=0.0;k=+(e[a+4>>1]|0);g[h+8>>2]=k;g[h+12>>2]=0.0;g[h+16>>2]=k;k=+(e[a+6>>1]|0);g[h+20>>2]=k;g[h+24>>2]=0.0;g[h+28>>2]=k;c[j+0>>2]=c[1480>>2];c[j+4>>2]=c[1484>>2];c[j+8>>2]=c[1488>>2];c[j+12>>2]=c[1492>>2];c[j+16>>2]=c[1496>>2];c[j+20>>2]=c[1500>>2];c[j+24>>2]=c[1504>>2];c[j+28>>2]=c[1508>>2];vb();Ga(+b,+d,0.0);Ne(a,h,j);oc();i=f;return}function Pe(a){a=a|0;var b=0;b=i;mb(1,a|0);vm(a);i=b;return}function Qe(a){a=a|0;var b=0,c=0,d=0,e=0,f=0;b=i;c=Xf(a,1512)|0;if((c|0)==0){d=0;i=b;return d|0}Of(c,0,2)|0;a=Pf(c)|0;Of(c,0,0)|0;e=um(a)|0;Nf(c,e,a)|0;f=Re(e,a)|0;vm(e);Qf(c);d=f;i=b;return d|0}function Re(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0;d=i;i=i+624|0;e=d;f=d+488|0;g=We(a,b)|0;if((g|0)==3){h=Se(a,b)|0;i=d;return h|0}else if((g|0)==2){c[e>>2]=Uh(f)|0;ag(e,90,488);sg(e,a,b);bg(e,1)|0;b=c[e+28>>2]|0;a=c[e+32>>2]|0;f=um((aa(b*3|0,a)|0)+16|0)|0;c[f>>2]=b;c[f+4>>2]=a;c[f+8>>2]=1;a=f+16|0;c[f+12>>2]=a;c[e+44>>2]=2;dg(e)|0;b=aa(c[e+112>>2]|0,c[e+120>>2]|0)|0;g=Vc[c[(c[e+4>>2]|0)+8>>2]&3](e,1,b,1)|0;j=e+140|0;k=e+116|0;if((c[j>>2]|0)>>>0<(c[k>>2]|0)>>>0){l=a;while(1){fg(e,g,1)|0;Fm(l|0,c[g>>2]|0,b|0)|0;if((c[j>>2]|0)>>>0<(c[k>>2]|0)>>>0){l=l+b|0}else{break}}}Zf(e);h=f;i=d;return h|0}else{h=0;i=d;return h|0}return 0}function Se(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0;d=i;i=i+32|0;e=i;i=i+168|0;c[e>>2]=0;f=d+16|0;g=d;h=d+8|0;c[h>>2]=a;c[h+4>>2]=b;p=0;b=sa(1,1520,0,4,5)|0;a=p;p=0;if((a|0)!=0&(q|0)!=0){j=Em(c[a>>2]|0,e)|0;if((j|0)==0){Ba(a|0,q|0)}E=q}else{j=-1}do{if((j|0)!=1){c[f>>2]=b;if((b|0)==0){p=0;pa(7,1568)|0;a=p;p=0;if((a|0)!=0&(q|0)!=0){k=Em(c[a>>2]|0,e)|0;if((k|0)==0){Ba(a|0,q|0)}E=q}else{k=-1}if((k|0)==1){l=E;break}m=0;i=d;return m|0}p=0;a=pa(8,b|0)|0;n=p;p=0;if((n|0)!=0&(q|0)!=0){o=Em(c[n>>2]|0,e)|0;if((o|0)==0){Ba(n|0,q|0)}E=q}else{o=-1}if((o|0)!=1){c[g>>2]=a;if((a|0)!=0){p=0;a=ga(5,b|0,6,156)|0;n=p;p=0;if((n|0)!=0&(q|0)!=0){r=Em(c[n>>2]|0,e)|0;if((r|0)==0){Ba(n|0,q|0)}E=q}else{r=-1}if((r|0)==1){l=E;break}Dm(a,1,e|0)|0;p=0;a=p;p=0;if((a|0)!=0&(q|0)!=0){s=Em(c[a>>2]|0,e)|0;if((s|0)==0){Ba(a|0,q|0)}E=q}else{s=-1}if((s|0)==1){l=E;break}l=0;break}p=0;pa(7,1600)|0;a=p;p=0;if((a|0)!=0&(q|0)!=0){t=Em(c[a>>2]|0,e)|0;if((t|0)==0){Ba(a|0,q|0)}E=q}else{t=-1}if((t|0)!=1){p=0;qa(2,f|0,0,0);a=p;p=0;if((a|0)!=0&(q|0)!=0){u=Em(c[a>>2]|0,e)|0;if((u|0)==0){Ba(a|0,q|0)}E=q}else{u=-1}if((u|0)!=1){m=0;i=d;return m|0}else{l=E}}else{l=E}}else{l=E}}else{l=E}}while(0);a:while(1){if((l|0)!=0){p=0;pa(7,1632)|0;u=p;p=0;if((u|0)!=0&(q|0)!=0){v=Em(c[u>>2]|0,e)|0;if((v|0)==0){Ba(u|0,q|0)}E=q}else{v=-1}if((v|0)==1){l=E;continue}p=0;qa(2,f|0,g|0,0);u=p;p=0;if((u|0)!=0&(q|0)!=0){w=Em(c[u>>2]|0,e)|0;if((w|0)==0){Ba(u|0,q|0)}E=q}else{w=-1}if((w|0)==1){l=E;continue}else{x=16;break}}p=0;qa(3,c[f>>2]|0,h|0,4);u=p;p=0;if((u|0)!=0&(q|0)!=0){y=Em(c[u>>2]|0,e)|0;if((y|0)==0){Ba(u|0,q|0)}E=q}else{y=-1}if((y|0)==1){l=E;continue}p=0;na(7,c[f>>2]|0,c[g>>2]|0);u=p;p=0;if((u|0)!=0&(q|0)!=0){z=Em(c[u>>2]|0,e)|0;if((z|0)==0){Ba(u|0,q|0)}E=q}else{z=-1}if((z|0)==1){l=E;continue}p=0;u=ta(2,c[f>>2]|0,c[g>>2]|0)|0;t=p;p=0;if((t|0)!=0&(q|0)!=0){A=Em(c[t>>2]|0,e)|0;if((A|0)==0){Ba(t|0,q|0)}E=q}else{A=-1}if((A|0)==1){l=E;continue}p=0;t=ta(3,c[f>>2]|0,c[g>>2]|0)|0;s=p;p=0;if((s|0)!=0&(q|0)!=0){B=Em(c[s>>2]|0,e)|0;if((B|0)==0){Ba(s|0,q|0)}E=q}else{B=-1}if((B|0)==1){l=E;continue}p=0;s=ta(4,c[f>>2]|0,c[g>>2]|0)|0;r=p;p=0;if((r|0)!=0&(q|0)!=0){C=Em(c[r>>2]|0,e)|0;if((C|0)==0){Ba(r|0,q|0)}E=q}else{C=-1}if((C|0)==1){l=E;continue}p=0;r=ta(5,c[f>>2]|0,c[g>>2]|0)|0;b=p;p=0;if((b|0)!=0&(q|0)!=0){D=Em(c[b>>2]|0,e)|0;if((D|0)==0){Ba(b|0,q|0)}E=q}else{D=-1}if((D|0)==1){l=E;continue}if(!(r<<24>>24==3)){b=s&255;if(r<<24>>24==0){p=0;la(7,c[f>>2]|0);r=p;p=0;if((r|0)!=0&(q|0)!=0){F=Em(c[r>>2]|0,e)|0;if((F|0)==0){Ba(r|0,q|0)}E=q}else{F=-1}if((F|0)==1){l=E;continue}G=3}else{G=b}}else{p=0;la(6,c[f>>2]|0);b=p;p=0;if((b|0)!=0&(q|0)!=0){H=Em(c[b>>2]|0,e)|0;if((H|0)==0){Ba(b|0,q|0)}E=q}else{H=-1}if((H|0)==1){l=E;continue}G=3}p=0;b=ga(6,c[f>>2]|0,c[g>>2]|0,16)|0;r=p;p=0;if((r|0)!=0&(q|0)!=0){I=Em(c[r>>2]|0,e)|0;if((I|0)==0){Ba(r|0,q|0)}E=q}else{I=-1}if((I|0)==1){l=E;continue}if((b|0)==0){J=G}else{p=0;la(8,c[f>>2]|0);b=p;p=0;if((b|0)!=0&(q|0)!=0){K=Em(c[b>>2]|0,e)|0;if((K|0)==0){Ba(b|0,q|0)}E=q}else{K=-1}if((K|0)==1){l=E;continue}J=G+1|0}p=0;b=ta(6,c[f>>2]|0,c[g>>2]|0)|0;r=p;p=0;if((r|0)!=0&(q|0)!=0){L=Em(c[r>>2]|0,e)|0;if((L|0)==0){Ba(r|0,q|0)}E=q}else{L=-1}if((L|0)==1){l=E;continue}if(b<<24>>24==16){p=0;la(9,c[f>>2]|0);b=p;p=0;if((b|0)!=0&(q|0)!=0){M=Em(c[b>>2]|0,e)|0;if((M|0)==0){Ba(b|0,q|0)}E=q}else{M=-1}if((M|0)==1){l=E;continue}}b=(J|0)==3;r=b&1;s=(aa(aa(t,u)|0,b?3:4)|0)+16|0;p=0;N=pa(9,s|0)|0;s=p;p=0;if((s|0)!=0&(q|0)!=0){O=Em(c[s>>2]|0,e)|0;if((O|0)==0){Ba(s|0,q|0)}E=q}else{O=-1}if((O|0)==1){l=E;continue}c[N>>2]=u;c[N+4>>2]=t;c[N+8>>2]=r;r=N+16|0;c[N+12>>2]=r;s=aa(J,u)|0;if((t|0)!=0){u=t;t=r;while(1){p=0;qa(5,c[f>>2]|0,t|0,0);r=p;p=0;if((r|0)!=0&(q|0)!=0){P=Em(c[r>>2]|0,e)|0;if((P|0)==0){Ba(r|0,q|0)}E=q}else{P=-1}if((P|0)==1){l=E;continue a}u=u+ -1|0;if((u|0)==0){break}else{t=t+s|0}}}p=0;qa(2,f|0,g|0,0);s=p;p=0;if((s|0)!=0&(q|0)!=0){Q=Em(c[s>>2]|0,e)|0;if((Q|0)==0){Ba(s|0,q|0)}E=q}else{Q=-1}if((Q|0)==1){l=E}else{x=42;break}}if((x|0)==16){m=0;i=d;return m|0}else if((x|0)==42){m=N;i=d;return m|0}return 0}function Te(a,b){a=a|0;b=b|0;var d=0;a=i;i=i+16|0;d=a;c[d>>2]=b;qb(1552,d|0)|0;i=a;return}function Ue(a,b){a=a|0;b=b|0;var d=0;a=i;i=i+16|0;d=a;c[d>>2]=b;qb(1528,d|0)|0;i=a;return}function Ve(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=i;f=Kj(a)|0;a=f+4|0;g=c[a>>2]|0;h=g>>>0<d>>>0?g:d;Fm(b|0,c[f>>2]|0,h|0)|0;c[f>>2]=(c[f>>2]|0)+h;c[a>>2]=(c[a>>2]|0)-h;i=e;return}function We(b,c){b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0;d=i;if(c>>>0<2){e=0;i=d;return e|0}f=a[b]|0;do{if(f<<24>>24==66){if((a[b+1|0]|0)==77){e=1;i=d;return e|0}else{g=c>>>0>10?10:c;break}}else{h=c>>>0>10?10:c;if(f<<24>>24==-1?(a[b+1|0]|0)==-40:0){if(!(h>>>0>6)){e=2;i=d;return e|0}j=b+6|0;k=h+ -6|0;if((xm(j,1648,k)|0)==0){e=2;i=d;return e|0}if((xm(j,1656,k)|0)==0){e=2;i=d;return e|0}else{g=h}}else{g=h}}}while(0);e=(xm(b,1664,g>>>0>8?8:g)|0)==0;i=d;return(e?3:0)|0}function Xe(){var a=0;a=i;zd();i=a;return 0}function Ye(a){a=a|0;c[a>>2]=10;c[a+4>>2]=8;c[a+8>>2]=10;c[a+12>>2]=11;c[a+16>>2]=9;c[a+20>>2]=10;c[a+24>>2]=11;c[a+28>>2]=11;c[a+32>>2]=12;c[a+36>>2]=12;c[a+40>>2]=10;c[a+44>>2]=13;c[a+48>>2]=14;c[a+52>>2]=7;c[a+56>>2]=12;c[a+60>>2]=13;return}function Ze(a){a=a|0;var b=0,c=0;b=i;do{if((Va()|0)==1){if((ib(800,600,8,8,8,8,16,0,65537)|0)==1){g[8]=800.0;g[36>>2]=600.0;Uc[a&15]();c=1;break}else{Sa(1688)|0;c=0;break}}else{Sa(1712)|0;c=0}}while(0);i=b;return c|0}function _e(a,b){a=a|0;b=b|0;var d=0;d=i;c[420]=b;yc(a|0,0,1);i=d;return}function $e(b,c){b=b|0;c=c|0;c=i;Sa(1736)|0;a[b]=0;i=c;return}function af(a){a=a|0;a=i;Sa(1752)|0;i=a;return}function bf(a){a=a|0;a=i;Sa(1768)|0;i=a;return}function cf(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;i=i+16|0;d=b;Sa(1784)|0;if((a|0)==0){i=b;return 1}qe(d,100.0,100.0);e=d;d=c[e+4>>2]|0;f=a;c[f>>2]=c[e>>2];c[f+4>>2]=d;i=b;return 1}function df(a){a=a|0;var b=0,c=0;b=i;if((a|0)==0){Sa(1864)|0;c=0}else{Sa(1880)|0;c=1}i=b;return c|0}function ef(a){a=a|0;a=i;Sa(1808)|0;i=a;return}function ff(a,b){a=a|0;b=b|0;b=i;Sa(1824)|0;i=b;return}function gf(a){a=a|0;a=i;Sa(1840)|0;i=a;return}function hf(a){a=a|0;return}function jf(a,b,c){a=a|0;b=b|0;c=c|0;return a|0}function kf(){var a=0;a=i;Ra();i=a;return}function lf(){var a=0,b=0,d=0;a=i;i=i+16|0;b=a+4|0;d=a;Ib();Pa(b|0,d|0);vd(~~+(c[b>>2]|0),~~+(c[d>>2]|0));i=a;return}function mf(){var a=0;a=i;Dc();Uc[c[420]&15]();i=a;return}function nf(){var a=0;a=i;Ra();i=a;return}function of(){var a=0,d=0,e=0,f=0,h=0,j=0;a=i;i=i+64|0;d=a+16|0;e=a;f=um(164)|0;nd(f);h=f+4|0;j=f+20|0;c[h+0>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;re(d);h=j+0|0;j=d+0|0;d=h+36|0;do{c[h>>2]=c[j>>2];h=h+4|0;j=j+4|0}while((h|0)<(d|0));g[f+56>>2]=0.0;g[f+60>>2]=0.0;j=f+64|0;Ae(e,1.0,1.0,1.0,1.0);c[j+0>>2]=c[e+0>>2];c[j+4>>2]=c[e+4>>2];c[j+8>>2]=c[e+8>>2];c[j+12>>2]=c[e+12>>2];e=f+100|0;j=f+92|0;c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[e+16>>2]=0;c[e+20>>2]=0;c[e+24>>2]=0;c[e+28>>2]=0;b[e+32>>1]=0;c[j>>2]=1;c[f+88>>2]=1;c[f+84>>2]=1;c[f+80>>2]=1;c[f+96>>2]=1;j=f+136|0;c[j+0>>2]=0;c[j+4>>2]=0;c[j+8>>2]=0;c[j+12>>2]=0;c[j+16>>2]=0;c[j+20>>2]=0;c[j+24>>2]=0;i=a;return f|0}function pf(a){a=a|0;var d=0,e=0,f=0,g=0;d=i;i=i+32|0;e=d+12|0;f=d;if((c[a+152>>2]|0)!=0){c[a+156>>2]=1;i=d;return}if((c[a+128>>2]|0)!=0){qf(a)}if((((((c[486]|0)==(a|0)?(a|0)!=0:0)?(c[490]=0,c[486]=0,b[e>>1]=105,c[e+8>>2]=a,c[e+4>>2]=a,qd(a,e)|0,e=c[490]|0,(c[486]|0)!=(e|0)):0)?(c[e+88>>2]|0)!=0:0)?(c[e+96>>2]|0)!=0:0)?(c[486]=e,(e|0)!=0):0){b[f>>1]=104;c[f+8>>2]=e;c[f+4>>2]=e;qd(e,f)|0}od(a);f=c[a+136>>2]|0;if((f|0)!=0){e=a+148|0;g=f;do{f=g+144|0;c[e>>2]=c[f>>2];c[g+128>>2]=0;c[f>>2]=0;g=c[e>>2]|0}while((g|0)!=0)}if((c[484]|0)==(a|0)){c[484]=0}vm(a);i=d;return}function qf(a){a=a|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;d=i;i=i+48|0;e=d+24|0;f=d;g=d+12|0;h=a+128|0;j=c[h>>2]|0;if((j|0)==0){i=d;return}k=j+136|0;l=k;m=0;while(1){n=c[l>>2]|0;o=(n|0)!=0;l=n+144|0;if(!(o&(n|0)!=(a|0))){break}else{m=n}}if(o){o=j+140|0;if((n|0)==(c[o>>2]|0)){c[o>>2]=m}o=c[l>>2]|0;if((m|0)==0){c[k>>2]=o}else{c[m+144>>2]=o}o=j+148|0;if((n|0)==(c[o>>2]|0)){c[o>>2]=c[l>>2]}l=j+132|0;b[l>>1]=(b[l>>1]|0)+ -1<<16>>16}c[h>>2]=0;c[a+144>>2]=0;if((((((c[486]|0)==(a|0)?(a|0)!=0:0)?(c[490]=0,c[486]=0,b[e>>1]=105,c[e+8>>2]=a,c[e+4>>2]=a,qd(a,e)|0,e=c[490]|0,(c[486]|0)!=(e|0)):0)?(c[e+88>>2]|0)!=0:0)?(c[e+96>>2]|0)!=0:0)?(c[486]=e,(e|0)!=0):0){b[f>>1]=104;c[f+8>>2]=e;c[f+4>>2]=e;qd(e,f)|0}b[g>>1]=102;c[g+8>>2]=a;c[g+4>>2]=a;qd(a,g)|0;i=d;return}function rf(a){a=a|0;var d=0,e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0.0,p=0,q=0.0,r=0;d=i;i=i+32|0;e=d+16|0;f=d;g[f>>2]=0.0;g[f+4>>2]=0.0;g[f+8>>2]=+g[a+12>>2];g[f+12>>2]=+g[a+16>>2];h=a+152|0;c[h>>2]=1;j=c[a+136>>2]|0;if((j|0)!=0){k=a+148|0;l=e+4|0;m=e+8|0;n=j;do{c[k>>2]=c[n+144>>2];j=n+12|0;o=+g[j>>2];p=n+16|0;q=+g[p>>2];r=c[n+104>>2]|0;if((r|0)!=0){Qc[r&31](n,f)}rf(n);if(!(!(o!=+g[j>>2])?!(q!=+g[p>>2]):0)){b[e>>1]=103;c[l>>2]=n;c[m>>2]=n;qd(n,e)|0}n=c[k>>2]|0}while((n|0)!=0)}c[h>>2]=0;if((c[a+156>>2]|0)==0){i=d;return}pf(a);i=d;return}function sf(a,d,e){a=a|0;d=+d;e=+e;var f=0,h=0,j=0,k=0,l=0.0,m=0,n=0.0,o=0;f=i;i=i+32|0;h=f+16|0;j=f;k=a+12|0;l=+g[k>>2];m=a+16|0;n=+g[m>>2];g[h>>2]=0.0;g[h+4>>2]=0.0;g[h+8>>2]=d;g[h+12>>2]=e;o=c[a+104>>2]|0;if((o|0)!=0){Qc[o&31](a,h)}g[k>>2]=d;g[m>>2]=e;rf(a);if(!(l!=d|n!=e)){i=f;return}b[j>>1]=103;c[j+4>>2]=a;c[j+8>>2]=a;qd(a,j)|0;i=f;return}function tf(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;b=i;d=a+152|0;c[d>>2]=1;e=c[a+108>>2]|0;if((e|0)!=0){Oc[e&63](a)}e=c[a+136>>2]|0;if((e|0)!=0){f=a+148|0;g=e;do{c[f>>2]=c[g+144>>2];tf(g);g=c[f>>2]|0}while((g|0)!=0)}c[d>>2]=0;if((c[a+156>>2]|0)==0){i=b;return}pf(a);i=b;return}function uf(a){a=a|0;var b=0,d=0,e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;b=i;i=i+160|0;d=b+144|0;e=b;f=b+36|0;h=b+72|0;j=b+112|0;k=b+120|0;l=b+128|0;m=b+136|0;se(e,+g[a+4>>2],+g[a+8>>2]);n=a+12|0;o=a+16|0;se(f,-(+g[a+56>>2]*+g[n>>2]),-(+g[a+60>>2]*+g[o>>2]));if((c[a+96>>2]|0)==0){i=b;return}p=a+152|0;c[p>>2]=1;ze(+g[a+64>>2],+g[a+68>>2],+g[a+72>>2],+g[a+76>>2]);Ee(e);Ee(a+20|0);Ee(f);if((c[a+160>>2]|0)==0){f=c[a+112>>2]|0;if((f|0)!=0){Oc[f&63](a)}f=c[a+136>>2]|0;if((f|0)!=0){e=a+148|0;q=f;do{c[e>>2]=c[q+144>>2];uf(q);q=c[e>>2]|0}while((q|0)!=0)}}else{vf(h,a);pe(k,0.0,0.0);c[d+0>>2]=c[k+0>>2];c[d+4>>2]=c[k+4>>2];xe(j,d,h);pe(m,+g[n>>2],+g[o>>2]);c[d+0>>2]=c[m+0>>2];c[d+4>>2]=c[m+4>>2];xe(l,d,h);vb();Ua(5889);vb();Ua(5889);oc();Ua(5888);oc()}Fe();Fe();Fe();Ce();c[p>>2]=0;if((c[a+156>>2]|0)==0){i=b;return}pf(a);i=b;return}function vf(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;d=i;i=i+192|0;e=d+144|0;f=d;h=d+36|0;j=d+72|0;k=d+108|0;re(e);l=b;do{se(j,+g[l+4>>2],+g[l+8>>2]);m=f+0|0;n=j+0|0;o=m+36|0;do{c[m>>2]=c[n>>2];m=m+4|0;n=n+4|0}while((m|0)<(o|0));se(k,-(+g[l+56>>2]*+g[l+12>>2]),-(+g[l+60>>2]*+g[l+16>>2]));m=h+0|0;n=k+0|0;o=m+36|0;do{c[m>>2]=c[n>>2];m=m+4|0;n=n+4|0}while((m|0)<(o|0));ve(e,h);ve(e,l+20|0);ve(e,f);l=c[l+128>>2]|0}while((l|0)!=0);m=a+0|0;n=e+0|0;o=m+36|0;do{c[m>>2]=c[n>>2];m=m+4|0;n=n+4|0}while((m|0)<(o|0));i=d;return}function wf(a,d,e,f){a=a|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0.0,F=0.0;h=i;i=i+176|0;j=h+160|0;k=h+124|0;l=h+16|0;m=h;n=h+52|0;o=h+88|0;p=h+8|0;q=a+132|0;r=b[q>>1]|0;s=r<<16>>16;t=a+e|0;if((c[a+96>>2]|0)==0){u=0;i=h;return u|0}if((c[a+f>>2]|0)!=0){v=wm(s,4)|0;w=c[a+136>>2]|0;x=r<<16>>16>0;if((w|0)!=0&x){r=s;s=w;do{r=r+ -1|0;c[v+(r<<2)>>2]=s;s=c[s+144>>2]|0}while((s|0)!=0&(r|0)>0)}a:do{if(x){r=d;s=c[r>>2]|0;w=c[r+4>>2]|0;r=s|0;y=0;while(1){z=m;c[z>>2]=s;c[z+4>>2]=w;z=c[v+(y<<2)>>2]|0;se(n,+g[z+4>>2],+g[z+8>>2]);A=k+0|0;B=n+0|0;C=A+36|0;do{c[A>>2]=c[B>>2];A=A+4|0;B=B+4|0}while((A|0)<(C|0));se(o,-(+g[z+56>>2]*+g[z+12>>2]),-(+g[z+60>>2]*+g[z+16>>2]));A=l+0|0;B=o+0|0;C=A+36|0;do{c[A>>2]=c[B>>2];A=A+4|0;B=B+4|0}while((A|0)<(C|0));ve(l,z+20|0);ve(l,k);we(l);c[j+0>>2]=c[m+0>>2];c[j+4>>2]=c[m+4>>2];xe(p,j,l);B=p;A=c[B+4>>2]|0;C=m;c[C>>2]=c[B>>2];c[C+4>>2]=A;c[j+0>>2]=c[m+0>>2];c[j+4>>2]=c[m+4>>2];D=wf(z,j,e,f)|0;if((D|0)!=0){break}y=y+1|0;if((y|0)>=(b[q>>1]|0)){break a}}c[a+120>>2]=r;g[a+124>>2]=+g[d+4>>2];vm(v);u=D;i=h;return u|0}}while(0);vm(v)}E=+g[d>>2];if(!(E>=0.0)){u=0;i=h;return u|0}F=+g[d+4>>2];if(!(F>=0.0)){u=0;i=h;return u|0}if(!(E<=+g[a+12>>2])){u=0;i=h;return u|0}if(!(F<=+g[a+16>>2])){u=0;i=h;return u|0}if((c[t>>2]|0)==0){u=0;i=h;return u|0}g[a+120>>2]=E;g[a+124>>2]=F;u=a;i=h;return u|0}function xf(){var a=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;a=i;i=i+32|0;d=a+12|0;e=a;f=c[486]|0;if((f|0)==0){i=a;return}a:do{if((c[f+88>>2]|0)!=0){g=(c[f+96>>2]|0)!=0;h=g&1;b:do{if(g){j=f;k=h;c:while(1){if((k|0)==0){break a}else{l=j}while(1){m=c[l+128>>2]|0;if((m|0)==0){n=k;break b}if((c[m+92>>2]|0)==0){j=m;k=0;continue c}if((c[m+96>>2]|0)==0){j=m;k=0;continue c}else{l=m}}}}else{n=h}}while(0);if((n|0)!=0){i=a;return}}}while(0);c[490]=0;c[486]=0;b[d>>1]=105;c[d+8>>2]=f;c[d+4>>2]=f;qd(f,d)|0;d=c[490]|0;if((c[486]|0)==(d|0)){i=a;return}if((c[d+88>>2]|0)==0){i=a;return}if((c[d+96>>2]|0)==0){i=a;return}c[486]=d;if((d|0)==0){i=a;return}b[e>>1]=104;c[e+8>>2]=d;c[e+4>>2]=d;qd(d,e)|0;i=a;return}function yf(a){a=a|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;d=i;i=i+64|0;e=d+56|0;f=d;g=d+8|0;h=d+32|0;j=1952;k=c[j+4>>2]|0;l=f;c[l>>2]=c[j>>2];c[l+4>>2]=k;if((a|0)==0){c[484]=0;i=d;return}k=c[484]|0;c[e+0>>2]=c[f+0>>2];c[e+4>>2]=c[f+4>>2];f=wf(a,e,80,84)|0;c[484]=f;if((k|0)==(f|0)){i=d;return}b[g>>1]=5;c[g+4>>2]=f;e=1952;a=c[e>>2]|0;l=c[e+4>>2]|0;e=g+16|0;c[e>>2]=a;c[e+4>>2]=l;b[h>>1]=6;c[h+4>>2]=k;e=h+16|0;c[e>>2]=a;c[e+4>>2]=l;l=(k|0)==0;if(l){m=f}else{f=k;do{c[f+116>>2]=0;f=c[f+128>>2]|0}while((f|0)!=0);m=c[484]|0}if((m|0)!=0){f=m;do{c[f+116>>2]=1;f=c[f+128>>2]|0}while((f|0)!=0)}a:do{if(l){n=0}else{f=h+8|0;m=k;while(1){if((c[m+116>>2]|0)!=0){n=m;break a}c[f>>2]=m;qd(m,h)|0;e=c[m+128>>2]|0;if((e|0)==0){n=0;break}else{m=e}}}}while(0);h=c[484]|0;if((h|0)==0|(h|0)==(n|0)){i=d;return}k=g+8|0;l=h;do{c[k>>2]=l;qd(l,g)|0;l=c[l+128>>2]|0}while(!((l|0)==0|(l|0)==(n|0)));i=d;return}function zf(a){a=a|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;d=i;i=i+80|0;e=d+44|0;f=d+8|0;g=d;h=c[486]|0;j=a+16|0;k=j;l=c[k+4>>2]|0;m=1952;c[m>>2]=c[k>>2];c[m+4>>2]=l;if((b[a>>1]|0)==1){l=c[10]|0;c[e+0>>2]=c[1952>>2];c[e+4>>2]=c[1956>>2];n=wf(l,e,88,92)|0}else{n=0}l=c[484]|0;a:do{if((l|0)!=0){c[a+4>>2]=l;m=a+8|0;k=l;do{vf(e,k);we(e);o=f+0|0;p=e+0|0;q=o+36|0;do{c[o>>2]=c[p>>2];o=o+4|0;p=p+4|0}while((o|0)<(q|0));c[e+0>>2]=c[1952>>2];c[e+4>>2]=c[1956>>2];xe(g,e,f);p=g;o=c[p+4>>2]|0;q=j;c[q>>2]=c[p>>2];c[q+4>>2]=o;c[m>>2]=k;if((qd(k,a)|0)==0){break a}k=c[k+128>>2]|0}while((k|0)!=0)}}while(0);if(!((n|0)!=0&(h|0)==(c[486]|0))){i=d;return}if((h|0)==(n|0)){i=d;return}c[490]=n;c[486]=0;if((h|0)==0){r=0;s=n}else{b[e>>1]=105;c[e+8>>2]=h;c[e+4>>2]=h;qd(h,e)|0;r=c[486]|0;s=c[490]|0}if((r|0)==(s|0)){i=d;return}if((c[s+88>>2]|0)==0){i=d;return}if((c[s+96>>2]|0)==0){i=d;return}c[486]=s;if((s|0)==0){i=d;return}b[f>>1]=104;c[f+8>>2]=s;c[f+4>>2]=s;qd(s,f)|0;i=d;return}function Af(){var a=0,b=0,d=0,e=0;a=i;i=i+16|0;b=a;Da(1,b|0)|0;d=((c[b+4>>2]|0)/1e6|0)+((c[b>>2]|0)*1e3|0)|0;b=1968;e=Bm(d|0,((d|0)<0)<<31>>31|0,c[b>>2]|0,c[b+4>>2]|0)|0;i=a;return e|0}function Bf(){var a=0,b=0,d=0,e=0;a=i;b=um(64)|0;d=um(8)|0;nd(b);e=b+8|0;c[e>>2]=0;c[e+4>>2]=0;c[b+16>>2]=0;e=b+24|0;c[b+56>>2]=0;c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[d>>2]=0;c[d+4>>2]=b;c[b+40>>2]=d;if((c[494]|0)==0){c[494]=d;c[496]=d;i=a;return b|0}else{c[c[496]>>2]=d;c[496]=d;i=a;return b|0}return 0}function Cf(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;i=i+16|0;e=d;Da(1,e|0)|0;f=((c[e+4>>2]|0)/1e6|0)+((c[e>>2]|0)*1e3|0)|0;e=1968;g=Bm(f|0,((f|0)<0)<<31>>31|0,c[e>>2]|0,c[e+4>>2]|0)|0;e=a+48|0;c[e>>2]=g;c[e+4>>2]=E;c[a+56>>2]=0;c[a+36>>2]=b;c[a+32>>2]=1;i=d;return}function Df(a){a=a|0;c[a+32>>2]=0;return}function Ef(a){a=a|0;var b=0;b=i;c[(c[a+40>>2]|0)+4>>2]=0;od(a);vm(a);i=b;return}function Ff(){var a=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;a=i;i=i+32|0;d=a+16|0;e=a;f=c[494]|0;Da(1,d|0)|0;g=((c[d+4>>2]|0)/1e6|0)+((c[d>>2]|0)*1e3|0)|0;d=1968;h=Bm(g|0,((g|0)<0)<<31>>31|0,c[d>>2]|0,c[d+4>>2]|0)|0;d=E;if((f|0)==0){i=a;return}g=e+4|0;j=e+8|0;k=0;l=f;a:while(1){b:do{if((k|0)==0){f=l;while(1){m=f+4|0;n=c[m>>2]|0;if((n|0)!=0){o=m;p=n;q=f;break b}if((f|0)==(c[496]|0)){c[496]=0}c[494]=c[f>>2];n=c[f>>2]|0;vm(f);if((n|0)==0){r=22;break a}else{f=n}}}else{f=l;while(1){n=f+4|0;m=c[n>>2]|0;if((m|0)!=0){o=n;p=m;q=f;break b}if((f|0)==(c[496]|0)){c[496]=k}c[k>>2]=c[f>>2];m=c[f>>2]|0;vm(f);if((m|0)==0){r=22;break a}else{f=m}}}}while(0);f=p+32|0;do{if((c[f>>2]|0)!=0){m=p+56|0;n=(c[m>>2]|0)==0;s=p+48|0;t=Bm(h|0,d|0,c[s>>2]|0,c[s+4>>2]|0)|0;s=E;if(n){n=p+8|0;u=c[n+4>>2]|0;if(s>>>0<u>>>0|(s|0)==(u|0)&t>>>0<(c[n>>2]|0)>>>0){break}}else{n=p+24|0;u=c[n+4>>2]|0;if(s>>>0<u>>>0|(s|0)==(u|0)&t>>>0<(c[n>>2]|0)>>>0){break}}b[e>>1]=201;c[g>>2]=p;c[j>>2]=p;qd(p,e)|0;if((((c[o>>2]|0)!=0?(n=p+48|0,c[n>>2]=h,c[n+4>>2]=d,n=(c[m>>2]|0)+1|0,c[m>>2]=n,m=c[p+16>>2]|0,(m|0)!=0&(n|0)==(m|0)):0)?(c[f>>2]=0,b[e>>1]=202,c[g>>2]=p,c[j>>2]=p,qd(p,e)|0,(c[o>>2]|0)!=0):0)?(c[p+36>>2]|0)!=0:0){c[(c[p+40>>2]|0)+4>>2]=0;od(p);vm(p)}}}while(0);f=c[q>>2]|0;if((f|0)==0){r=22;break}else{k=q;l=f}}if((r|0)==22){i=a;return}}function Gf(){c[494]=0;c[496]=0;return}function Hf(){var a=0,b=0,d=0;a=i;b=c[494]|0;if((b|0)==0){c[494]=0;c[496]=0;i=a;return}else{d=b}while(1){b=c[d+4>>2]|0;if((b|0)!=0){c[(c[b+40>>2]|0)+4>>2]=0;od(b);vm(b)}b=c[d>>2]|0;vm(d);if((b|0)==0){break}else{d=b}}c[494]=0;c[496]=0;i=a;return}function If(){var a=0,b=0,d=0;a=i;c[500]=0;c[502]=0;b=Af()|0;d=1992;c[d>>2]=b;c[d+4>>2]=E;i=a;return}function Jf(){var a=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;a=i;i=i+16|0;d=a;e=c[502]|0;f=Af()|0;g=1992;h=Bm(f|0,E|0,c[g>>2]|0,c[g+4>>2]|0)|0;g=E;if(g>>>0<0|(g|0)==0&h>>>0<15){i=a;return}h=Af()|0;g=1992;c[g>>2]=h;c[g+4>>2]=E;if((e|0)==0){i=a;return}g=d+4|0;h=d+8|0;f=d+12|0;j=0;k=e;a:while(1){b:do{if((j|0)==0){e=k;while(1){l=e+4|0;m=c[l>>2]|0;if((m|0)!=0){n=l;o=m;p=e;break b}c[502]=c[e>>2];m=c[e>>2]|0;vm(e);if((m|0)==0){q=16;break a}else{e=m}}}else{e=k;while(1){m=e+4|0;l=c[m>>2]|0;if((l|0)!=0){n=m;o=l;p=e;break b}l=c[e>>2]|0;c[j>>2]=l;if((l|0)==0){c[500]=j}l=c[e>>2]|0;vm(e);if((l|0)==0){q=16;break a}else{e=l}}}}while(0);e=Kf(o)|0;b[d>>1]=211;l=c[n>>2]|0;c[g>>2]=l;c[h>>2]=l;c[f>>2]=c[(c[n>>2]|0)+4>>2];qd(c[n>>2]|0,d)|0;if((e|0)!=0){b[d>>1]=212;qd(c[n>>2]|0,d)|0;e=c[n>>2]|0;if((e|0)!=0){od(e);vm(e)}c[n>>2]=0}e=c[p>>2]|0;if((e|0)==0){q=16;break}else{j=p;k=e}}if((q|0)==16){i=a;return}}function Kf(f){f=f|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0.0,q=0.0,r=0,s=0;j=i;k=1992;l=c[k>>2]|0;m=c[k+4>>2]|0;k=f+48|0;n=c[k>>2]|0;o=c[k+4>>2]|0;if(m>>>0>o>>>0|(m|0)==(o|0)&l>>>0>n>>>0){k=Bm(l|0,m|0,n|0,o|0)|0;o=f+16|0;p=(+(k>>>0)+4294967296.0*+(E>>>0))/(+((c[o>>2]|0)>>>0)+4294967296.0*+((c[o+4>>2]|0)>>>0));if(p>1.0){q=1.0}else{q=p}}else{q=0.0}switch(c[f+24>>2]|0){case 0:{o=f+32|0;k=~~+Mf(+(a[o]|0),+(a[o+1|0]|0),q,c[f+8>>2]|0);a[c[f+4>>2]|0]=k;r=q==1.0;s=r&1;i=j;return s|0};case 4:{k=f+32|0;o=~~+Mf(+(e[k>>1]|0),+(e[k+2>>1]|0),q,c[f+8>>2]|0)&65535;b[c[f+4>>2]>>1]=o;r=q==1.0;s=r&1;i=j;return s|0};case 1:{o=f+32|0;k=~~+Mf(+(b[o>>1]|0),+(b[o+2>>1]|0),q,c[f+8>>2]|0);b[c[f+4>>2]>>1]=k;r=q==1.0;s=r&1;i=j;return s|0};case 3:{k=f+32|0;o=~~+Mf(+(d[k]|0),+(d[k+1|0]|0),q,c[f+8>>2]|0)&255;a[c[f+4>>2]|0]=o;r=q==1.0;s=r&1;i=j;return s|0};case 2:{o=f+32|0;k=~~+Mf(+(c[o>>2]|0),+(c[o+4>>2]|0),q,c[f+8>>2]|0);c[c[f+4>>2]>>2]=k;r=q==1.0;s=r&1;i=j;return s|0};case 5:{k=f+32|0;o=~~+Mf(+((c[k>>2]|0)>>>0),+((c[k+4>>2]|0)>>>0),q,c[f+8>>2]|0)>>>0;c[c[f+4>>2]>>2]=o;r=q==1.0;s=r&1;i=j;return s|0};case 7:{p=+Mf(+h[f+32>>3],+h[f+40>>3],q,c[f+8>>2]|0);h[c[f+4>>2]>>3]=p;r=q==1.0;s=r&1;i=j;return s|0};case 6:{o=f+32|0;p=+Mf(+g[o>>2],+g[o+4>>2],q,c[f+8>>2]|0);g[c[f+4>>2]>>2]=p;r=q==1.0;s=r&1;i=j;return s|0};default:{r=q==1.0;s=r&1;i=j;return s|0}}return 0}function Lf(){var a=0,b=0,d=0,e=0;a=i;b=c[502]|0;if((b|0)!=0){d=b;while(1){b=d+4|0;e=c[b>>2]|0;if((e|0)!=0){od(e);vm(e);c[b>>2]=0}b=c[d>>2]|0;vm(d);if((b|0)==0){break}else{d=b}}}c[502]=0;c[500]=0;i=a;return}function Mf(a,b,c,d){a=+a;b=+b;c=+c;d=d|0;var e=0,f=0.0,g=0.0,h=0.0,j=0.0,k=0.0;e=i;switch(d|0){case 4:{f=+T(+(c*3.1415927410125732));if(c<.5){g=f*.5}else{g=f*-.5+1.0}h=(b-a)*g+a;i=e;return+h};case 3:{h=(b-a)*(+T(+((c+-.5)*3.1415927410125732))+1.0)*.5+a;i=e;return+h};case 2:{h=(b-a)*+T(+(c*3.1415927410125732*.5))+a;i=e;return+h};case 0:{h=(b-a)*c+a;i=e;return+h};case 1:{h=(b-a)*(+T(+(c*3.1415927410125732*.5+-1.5707963705062866))+1.0)+a;i=e;return+h};case 8:{do{if(!(c<.3636363744735718)){if(c<.7272727489471436){g=c+-.5454545617103577;j=g*g*7.5625+.75;break}if(c<.9090909361839294){g=c+-.8181818127632141;j=g*g*7.5625+.9375;break}else{g=c+-.9545454382896423;j=g*g*7.5625+.984375;break}}else{j=c*7.5625*c}}while(0);h=(b-a)*j+a;i=e;return+h};case 5:{h=(b-a)*(c*c*+T(+(c*3.1415927410125732*6.0+1.5707963705062866))+ +R(+c,10.0))*.5+a;i=e;return+h};case 6:{j=1.0-c;h=(b-a)*(1.0-(j*j*+T(+(j*3.1415927410125732*6.0+1.5707963705062866))+ +R(+j,10.0))*.5)+a;i=e;return+h};case 7:{j=1.0-c;do{if(!(j<.3636363744735718)){if(j<.7272727489471436){c=j+-.5454545617103577;k=c*c*7.5625+.75;break}if(j<.9090909361839294){c=j+-.8181818127632141;k=c*c*7.5625+.9375;break}else{c=j+-.9545454382896423;k=c*c*7.5625+.984375;break}}else{k=j*j*7.5625}}while(0);h=(b-a)*(1.0-k)+a;i=e;return+h};default:{h=b;i=e;return+h}}return 0.0}function Nf(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;f=Jc[c[a+4>>2]&15](a,b,d)|0;i=e;return f|0}function Of(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;f=Jc[c[a+8>>2]&15](a,b,d)|0;i=e;return f|0}function Pf(a){a=a|0;var b=0,d=0;b=i;d=Sc[c[a+12>>2]&31](a)|0;i=b;return d|0}function Qf(a){a=a|0;var b=0;b=i;Oc[c[a+24>>2]&63](a);i=b;return}function Rf(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;e=i;f=a+28|0;a=xa(b|0,1,d|0,c[f>>2]|0)|0;if((a|0)!=0){g=a;i=e;return g|0}g=((Na(c[f>>2]|0)|0)!=0)<<31>>31;i=e;return g|0}function Sf(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;f=Xb(c[a+28>>2]|0,b|0,d|0)|0;i=e;return f|0}function Tf(a){a=a|0;var b=0,d=0;b=i;d=Xa(c[a+28>>2]|0)|0;i=b;return d|0}function Uf(a){a=a|0;var b=0,d=0;b=i;d=wc(c[a+28>>2]|0)|0;i=b;return d|0}function Vf(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;e=i;f=a+28|0;a=zb(b|0,1,d|0,c[f>>2]|0)|0;if((a|0)!=0){g=a;i=e;return g|0}g=((Na(c[f>>2]|0)|0)!=0)<<31>>31;i=e;return g|0}function Wf(a){a=a|0;var b=0;b=i;Zb(c[a+28>>2]|0)|0;vm(a);i=b;return}function Xf(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=i;e=fc(a|0,b|0)|0;if((e|0)==0){f=0;i=d;return f|0}b=um(32)|0;c[b+28>>2]=e;c[b>>2]=1;c[b+4>>2]=8;c[b+8>>2]=9;c[b+12>>2]=13;c[b+16>>2]=14;c[b+20>>2]=10;c[b+24>>2]=15;f=b;i=d;return f|0}function Yf(a){a=a|0;var b=0,d=0;b=i;d=c[a+4>>2]|0;if((d|0)==0){i=b;return}Qc[c[d+36>>2]&31](a,1);d=a+20|0;if((c[a+16>>2]|0)==0){c[d>>2]=100;i=b;return}else{c[d>>2]=200;c[a+312>>2]=0;i=b;return}}function Zf(a){a=a|0;var b=0,d=0,e=0;b=i;d=a+4|0;e=c[d>>2]|0;if((e|0)!=0){Oc[c[e+40>>2]&63](a)}c[d>>2]=0;c[a+20>>2]=0;i=b;return}function _f(a){a=a|0;var b=0,d=0;b=i;d=Jc[c[c[a+4>>2]>>2]&15](a,0,132)|0;c[d+128>>2]=0;i=b;return d|0}function $f(a){a=a|0;var b=0,d=0;b=i;d=Jc[c[c[a+4>>2]>>2]&15](a,0,280)|0;c[d+276>>2]=0;i=b;return d|0}function ag(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;e=i;c[a+4>>2]=0;if((b|0)!=90){f=c[a>>2]|0;c[f+20>>2]=13;c[f+24>>2]=90;c[f+28>>2]=b;Oc[c[f>>2]&63](a)}if((d|0)==488){g=a}else{f=c[a>>2]|0;c[f+20>>2]=22;c[f+24>>2]=488;c[f+28>>2]=d;Oc[c[f>>2]&63](a);g=a}f=c[a>>2]|0;d=a+12|0;b=c[d>>2]|0;Gm(a|0,0,488)|0;c[a>>2]=f;c[d>>2]=b;c[a+16>>2]=1;dj(g);c[a+8>>2]=0;c[a+24>>2]=0;c[a+312>>2]=0;g=a+164|0;b=g+48|0;do{c[g>>2]=0;g=g+4|0}while((g|0)<(b|0));oh(a);ch(a);c[a+20>>2]=200;i=e;return}function bg(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0;d=i;e=a+20|0;if(!(((c[e>>2]|0)+ -200|0)>>>0<2)){f=c[a>>2]|0;c[f+20>>2]=21;c[f+24>>2]=c[e>>2];Oc[c[f>>2]&63](a)}f=cg(a)|0;if((f|0)==2){if((b|0)==0){g=a}else{b=c[a>>2]|0;c[b+20>>2]=53;Oc[c[b>>2]&63](a);g=a}Yf(g);h=2;i=d;return h|0}else if((f|0)==1){h=1;i=d;return h|0}else{h=f;i=d;return h|0}return 0}function cg(a){a=a|0;var b=0,e=0,f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0;b=i;e=a+20|0;switch(c[e>>2]|0){case 210:case 208:case 207:case 206:case 205:case 204:case 203:{f=Sc[c[c[a+460>>2]>>2]&31](a)|0;i=b;return f|0};case 202:{f=1;i=b;return f|0};case 201:{g=a+460|0;break};case 200:{j=a+460|0;Oc[c[(c[j>>2]|0)+4>>2]&63](a);Oc[c[(c[a+24>>2]|0)+8>>2]&63](a);c[e>>2]=201;g=j;break};default:{j=c[a>>2]|0;c[j+20>>2]=21;c[j+24>>2]=c[e>>2];Oc[c[j>>2]&63](a);f=0;i=b;return f|0}}j=Sc[c[c[g>>2]>>2]&31](a)|0;if((j|0)!=1){f=j;i=b;return f|0}j=c[a+36>>2]|0;if((j|0)==1){c[a+40>>2]=1;c[a+44>>2]=1}else if((j|0)==3){g=c[a+216>>2]|0;k=c[g>>2]|0;l=c[g+88>>2]|0;m=c[g+176>>2]|0;g=(k|0)==1;do{if(!(g&(l|0)==2&(m|0)==3)){if(g&(l|0)==34&(m|0)==35){c[a+40>>2]=7;break}if((k|0)==82&(l|0)==71&(m|0)==66){c[a+40>>2]=2;break}if((k|0)==114&(l|0)==103&(m|0)==98){c[a+40>>2]=6;break}if((c[a+284>>2]|0)!=0){c[a+40>>2]=3;break}if((c[a+296>>2]|0)==0){n=c[a>>2]|0;c[n+24>>2]=k;c[n+28>>2]=l;c[n+32>>2]=m;c[n+20>>2]=113;Qc[c[n+4>>2]&31](a,1);c[a+40>>2]=3;break}n=a+300|0;o=d[n]|0;if((o|0)==0){c[a+40>>2]=2;break}else if((o|0)==1){c[a+40>>2]=3;break}else{o=c[a>>2]|0;c[o+20>>2]=116;c[o+24>>2]=d[n]|0;Qc[c[o+4>>2]&31](a,-1);c[a+40>>2]=3;break}}else{c[a+40>>2]=3}}while(0);c[a+44>>2]=2}else if((j|0)==4){do{if((c[a+296>>2]|0)!=0){j=a+300|0;m=d[j]|0;if((m|0)==0){c[a+40>>2]=4;break}else if((m|0)==2){c[a+40>>2]=5;break}else{m=c[a>>2]|0;c[m+20>>2]=116;c[m+24>>2]=d[j]|0;Qc[c[m+4>>2]&31](a,-1);c[a+40>>2]=5;break}}else{c[a+40>>2]=4}}while(0);c[a+44>>2]=4}else{c[a+40>>2]=0;c[a+44>>2]=0}m=c[a+428>>2]|0;c[a+48>>2]=m;c[a+52>>2]=m;h[a+56>>3]=1.0;c[a+64>>2]=0;c[a+68>>2]=0;c[a+72>>2]=0;c[a+76>>2]=1;c[a+80>>2]=1;c[a+84>>2]=0;c[a+88>>2]=2;c[a+92>>2]=1;c[a+96>>2]=256;c[a+136>>2]=0;c[a+100>>2]=0;c[a+104>>2]=0;c[a+108>>2]=0;c[e>>2]=202;f=1;i=b;return f|0}function dg(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;b=i;d=a+20|0;e=c[d>>2]|0;do{if((e|0)==202){yh(a);if((c[a+64>>2]|0)==0){c[d>>2]=203;f=5;break}c[d>>2]=207;g=1;i=b;return g|0}else if((e|0)==203){f=5}else if((e|0)!=204){h=c[a>>2]|0;c[h+20>>2]=21;c[h+24>>2]=c[d>>2];Oc[c[h>>2]&63](a)}}while(0);if((f|0)==5){f=a+460|0;a:do{if((c[(c[f>>2]|0)+16>>2]|0)!=0){d=a+8|0;e=a+332|0;h=c[d>>2]|0;while(1){if((h|0)!=0){Oc[c[h>>2]&63](a)}j=Sc[c[c[f>>2]>>2]&31](a)|0;if((j|0)==0){g=0;break}else if((j|0)==2){break a}k=c[d>>2]|0;if((k|0)==0){h=0;continue}if((j&-3|0)!=1){h=k;continue}j=k+4|0;l=(c[j>>2]|0)+1|0;c[j>>2]=l;j=k+8|0;m=c[j>>2]|0;if((l|0)<(m|0)){h=k;continue}c[j>>2]=(c[e>>2]|0)+m;h=k}i=b;return g|0}}while(0);c[a+152>>2]=c[a+144>>2]}g=eg(a)|0;i=b;return g|0}function eg(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;b=i;d=a+20|0;e=a+444|0;if((c[d>>2]|0)!=204){Oc[c[c[e>>2]>>2]&63](a);c[a+140>>2]=0;c[d>>2]=204}a:do{if((c[(c[e>>2]|0)+8>>2]|0)!=0){f=a+140|0;g=a+116|0;h=a+8|0;j=a+448|0;k=c[f>>2]|0;while(1){l=c[g>>2]|0;if(!(k>>>0<l>>>0)){Oc[c[(c[e>>2]|0)+4>>2]&63](a);Oc[c[c[e>>2]>>2]&63](a);c[f>>2]=0;if((c[(c[e>>2]|0)+8>>2]|0)==0){break a}else{k=0;continue}}m=c[h>>2]|0;if((m|0)==0){n=k}else{c[m+4>>2]=k;c[m+8>>2]=l;Oc[c[m>>2]&63](a);n=c[f>>2]|0}Yc[c[(c[j>>2]|0)+4>>2]&31](a,0,f,0);m=c[f>>2]|0;if((m|0)==(n|0)){o=0;break}else{k=m}}i=b;return o|0}}while(0);c[d>>2]=(c[a+68>>2]|0)!=0?206:205;o=1;i=b;return o|0}function fg(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0;e=i;i=i+16|0;f=e;g=a+20|0;if((c[g>>2]|0)!=205){h=c[a>>2]|0;c[h+20>>2]=21;c[h+24>>2]=c[g>>2];Oc[c[h>>2]&63](a)}h=a+140|0;g=c[h>>2]|0;j=c[a+116>>2]|0;if(!(g>>>0<j>>>0)){k=c[a>>2]|0;c[k+20>>2]=126;Qc[c[k+4>>2]&31](a,-1);l=0;i=e;return l|0}k=c[a+8>>2]|0;if((k|0)!=0){c[k+4>>2]=g;c[k+8>>2]=j;Oc[c[k>>2]&63](a)}c[f>>2]=0;Yc[c[(c[a+448>>2]|0)+4>>2]&31](a,b,f,d);d=c[f>>2]|0;c[h>>2]=(c[h>>2]|0)+d;l=d;i=e;return l|0}function gg(b){b=b|0;var d=0,e=0,f=0,g=0,h=0;d=i;e=b+4|0;f=Jc[c[c[e>>2]>>2]&15](b,1,192)|0;c[b+468>>2]=f;c[f>>2]=16;c[f+8>>2]=17;c[f+60>>2]=0;c[f+124>>2]=0;c[f+64>>2]=0;c[f+128>>2]=0;c[f+68>>2]=0;c[f+132>>2]=0;c[f+72>>2]=0;c[f+136>>2]=0;c[f+76>>2]=0;c[f+140>>2]=0;c[f+80>>2]=0;c[f+144>>2]=0;c[f+84>>2]=0;c[f+148>>2]=0;c[f+88>>2]=0;c[f+152>>2]=0;c[f+92>>2]=0;c[f+156>>2]=0;c[f+96>>2]=0;c[f+160>>2]=0;c[f+100>>2]=0;c[f+164>>2]=0;c[f+104>>2]=0;c[f+168>>2]=0;c[f+108>>2]=0;c[f+172>>2]=0;c[f+112>>2]=0;c[f+176>>2]=0;c[f+116>>2]=0;c[f+180>>2]=0;c[f+120>>2]=0;c[f+184>>2]=0;a[f+188|0]=113;if((c[b+224>>2]|0)==0){i=d;return}f=b+36|0;g=Jc[c[c[e>>2]>>2]&15](b,1,c[f>>2]<<8)|0;c[b+160>>2]=g;if((c[f>>2]|0)>0){h=0}else{i=d;return}do{Gm(g+(h<<8)|0,-1,256)|0;h=h+1|0}while((h|0)<(c[f>>2]|0));i=d;return}function hg(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0;d=i;e=c[b+468>>2]|0;f=b+224|0;g=b+412|0;h=c[g>>2]|0;j=(h|0)==0;do{if((c[f>>2]|0)!=0){k=b+416|0;l=c[k>>2]|0;if(j){if((l|0)==0){m=7}else{m=11}}else{if(((l|0)>=(h|0)?(l|0)<=(c[b+436>>2]|0):0)?(c[b+340>>2]|0)==1:0){m=7}else{m=11}}do{if((m|0)==7){l=c[b+420>>2]|0;if((l|0)!=0){n=l+ -1|0;if((n|0)==(c[b+424>>2]|0)){o=n}else{m=11;break}}else{o=c[b+424>>2]|0}if((o|0)>13){m=11}}}while(0);if((m|0)==11){n=c[b>>2]|0;c[n+20>>2]=17;c[n+24>>2]=c[g>>2];c[n+28>>2]=c[k>>2];c[n+32>>2]=c[b+420>>2];c[n+36>>2]=c[b+424>>2];Oc[c[n>>2]&63](b)}n=b+340|0;l=c[n>>2]|0;if((l|0)>0){p=b+160|0;q=b+420|0;r=b+424|0;s=0;while(1){t=c[(c[b+(s<<2)+344>>2]|0)+4>>2]|0;u=c[p>>2]|0;v=c[g>>2]|0;if((v|0)!=0){if((c[u+(t<<8)>>2]|0)<0){w=c[b>>2]|0;c[w+20>>2]=118;c[w+24>>2]=t;c[w+28>>2]=0;Qc[c[w+4>>2]&31](b,-1);x=c[g>>2]|0}else{x=v}}else{x=0}a:do{if((x|0)<=(c[k>>2]|0)){v=x;while(1){w=u+(t<<8)+(v<<2)|0;y=c[w>>2]|0;if((c[q>>2]|0)!=(((y|0)<0?0:y)|0)){y=c[b>>2]|0;c[y+20>>2]=118;c[y+24>>2]=t;c[y+28>>2]=v;Qc[c[y+4>>2]&31](b,-1)}c[w>>2]=c[r>>2];if((v|0)>=(c[k>>2]|0)){break a}v=v+1|0}}}while(0);t=s+1|0;u=c[n>>2]|0;if((t|0)<(u|0)){s=t}else{z=q;A=u;break}}}else{z=b+420|0;A=l}q=(c[g>>2]|0)==0;s=e+4|0;if((c[z>>2]|0)==0){if(q){c[s>>2]=7;B=A;break}else{c[s>>2]=8;B=A;break}}else{if(q){c[s>>2]=9;B=A;break}else{c[s>>2]=10;B=A;break}}}else{if((j?(c[b+420>>2]|0)==0:0)?(c[b+424>>2]|0)==0:0){s=c[b+416>>2]|0;if((s|0)<64?(s|0)!=(c[b+436>>2]|0):0){m=36}}else{m=36}if((m|0)==36){s=c[b>>2]|0;c[s+20>>2]=125;Qc[c[s+4>>2]&31](b,-1)}c[e+4>>2]=11;B=c[b+340>>2]|0}}while(0);j=b+340|0;if((B|0)<=0){C=e+12|0;c[C>>2]=0;D=e+16|0;c[D>>2]=0;E=e+20|0;c[E>>2]=-16;F=b+280|0;G=c[F>>2]|0;H=e+56|0;I=G;c[H>>2]=I;i=d;return}B=e+60|0;A=b+4|0;z=e+24|0;x=e+40|0;o=b+436|0;h=e+124|0;s=b+420|0;q=0;do{n=c[b+(q<<2)+344>>2]|0;k=c[f>>2]|0;if((k|0)!=0){if((c[g>>2]|0)==0?(c[s>>2]|0)==0:0){m=43}else{J=k}}else{m=43}if((m|0)==43){m=0;k=c[n+20>>2]|0;if(k>>>0>15){r=c[b>>2]|0;c[r+20>>2]=50;c[r+24>>2]=k;Oc[c[r>>2]&63](b)}r=B+(k<<2)|0;k=c[r>>2]|0;if((k|0)==0){p=Jc[c[c[A>>2]>>2]&15](b,1,64)|0;c[r>>2]=p;K=p}else{K=k}k=K+0|0;p=k+64|0;do{a[k]=0;k=k+1|0}while((k|0)<(p|0));c[z+(q<<2)>>2]=0;c[x+(q<<2)>>2]=0;J=c[f>>2]|0}if((J|0)==0){if((c[o>>2]|0)!=0){m=51}}else{if((c[g>>2]|0)!=0){m=51}}if((m|0)==51){m=0;k=c[n+24>>2]|0;if(k>>>0>15){p=c[b>>2]|0;c[p+20>>2]=50;c[p+24>>2]=k;Oc[c[p>>2]&63](b)}p=h+(k<<2)|0;k=c[p>>2]|0;if((k|0)==0){l=Jc[c[c[A>>2]>>2]&15](b,1,256)|0;c[p>>2]=l;L=l}else{L=k}Gm(L|0,0,256)|0}q=q+1|0}while((q|0)<(c[j>>2]|0));C=e+12|0;c[C>>2]=0;D=e+16|0;c[D>>2]=0;E=e+20|0;c[E>>2]=-16;F=b+280|0;G=c[F>>2]|0;H=e+56|0;I=G;c[H>>2]=I;i=d;return}function ig(a){a=a|0;return}function jg(a,e){a=a|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;f=i;g=c[a+468>>2]|0;if((c[a+280>>2]|0)!=0){h=g+56|0;j=c[h>>2]|0;if((j|0)==0){og(a);k=c[h>>2]|0}else{k=j}c[h>>2]=k+ -1}k=g+20|0;if((c[k>>2]|0)==-1){i=f;return 1}h=a+368|0;if((c[h>>2]|0)<=0){i=f;return 1}j=g+60|0;l=g+40|0;m=g+24|0;g=a+424|0;n=0;a:while(1){o=c[e+(n<<2)>>2]|0;p=c[a+(n<<2)+372>>2]|0;q=c[(c[a+(p<<2)+344>>2]|0)+20>>2]|0;r=j+(q<<2)|0;s=c[r>>2]|0;t=l+(p<<2)|0;u=c[t>>2]|0;if((pg(a,s+u|0)|0)==0){c[t>>2]=0;v=c[m+(p<<2)>>2]|0}else{w=pg(a,s+(u+1)|0)|0;x=s+(u+2+w)|0;u=pg(a,x)|0;if((u|0)!=0){s=(c[r>>2]|0)+20|0;if((pg(a,s)|0)==0){y=u;z=s}else{r=u;u=s;while(1){s=r<<1;A=u+1|0;if((s|0)==32768){break a}if((pg(a,A)|0)==0){y=s;z=A;break}else{r=s;u=A}}}}else{y=0;z=x}do{if((y|0)>=(1<<(d[a+q+232|0]|0)>>1|0)){u=w<<2;if((y|0)>(1<<(d[a+q+248|0]|0)>>1|0)){c[t>>2]=u+12;break}else{c[t>>2]=u+4;break}}else{c[t>>2]=0}}while(0);t=z+14|0;q=y>>1;if((q|0)==0){B=y}else{x=q;q=y;while(1){u=(pg(a,t)|0)==0;r=(u?0:x)|q;u=x>>1;if((u|0)==0){B=r;break}else{x=u;q=r}}}q=m+(p<<2)|0;x=(c[q>>2]|0)+((w|0)==0?B+1|0:~B)|0;c[q>>2]=x;v=x}b[o>>1]=v<<c[g>>2];x=n+1|0;if((x|0)<(c[h>>2]|0)){n=x}else{C=24;break}}if((C|0)==24){i=f;return 1}C=c[a>>2]|0;c[C+20>>2]=117;Qc[c[C+4>>2]&31](a,-1);c[k>>2]=-1;i=f;return 1}function kg(a,e){a=a|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;f=i;g=c[a+468>>2]|0;if((c[a+280>>2]|0)!=0){h=g+56|0;j=c[h>>2]|0;if((j|0)==0){og(a);k=c[h>>2]|0}else{k=j}c[h>>2]=k+ -1}k=g+20|0;if((c[k>>2]|0)==-1){i=f;return 1}h=c[a+432>>2]|0;j=c[e>>2]|0;e=c[(c[a+344>>2]|0)+24>>2]|0;l=g+124+(e<<2)|0;m=a+416|0;n=g+188|0;g=a+424|0;o=a+e+264|0;e=(c[a+412>>2]|0)+ -1|0;a:while(1){p=(c[l>>2]|0)+(e*3|0)|0;if((pg(a,p)|0)==0){q=e;r=p}else{s=20;break}while(1){t=q+1|0;if((pg(a,r+1|0)|0)!=0){break}if((t|0)<(c[m>>2]|0)){q=t;r=r+3|0}else{s=10;break a}}p=pg(a,n)|0;u=r+2|0;v=pg(a,u)|0;if((v|0)!=0){if((pg(a,u)|0)!=0){w=v<<1;x=(c[l>>2]|0)+((q|0)<(d[o]|0|0)?189:217)|0;if((pg(a,x)|0)==0){y=w;z=x}else{A=w;w=x;while(1){x=A<<1;B=w+1|0;if((x|0)==32768){s=16;break a}if((pg(a,B)|0)==0){y=x;z=B;break}else{A=x;w=B}}}}else{y=v;z=u}w=z+14|0;A=y>>1;if((A|0)==0){C=y}else{B=A;A=y;while(1){x=(pg(a,w)|0)==0;D=(x?0:B)|A;x=B>>1;if((x|0)==0){C=D;break}else{B=x;A=D}}}}else{C=0}b[j+(c[h+(t<<2)>>2]<<1)>>1]=((p|0)==0?C+1|0:~C)<<c[g>>2];if((t|0)<(c[m>>2]|0)){e=t}else{s=20;break}}if((s|0)==10){t=c[a>>2]|0;c[t+20>>2]=117;Qc[c[t+4>>2]&31](a,-1);c[k>>2]=-1;i=f;return 1}else if((s|0)==16){t=c[a>>2]|0;c[t+20>>2]=117;Qc[c[t+4>>2]&31](a,-1);c[k>>2]=-1;i=f;return 1}else if((s|0)==20){i=f;return 1}return 0}function lg(a,d){a=a|0;d=d|0;var f=0,g=0,h=0,j=0,k=0,l=0;f=i;g=c[a+468>>2]|0;if((c[a+280>>2]|0)!=0){h=g+56|0;j=c[h>>2]|0;if((j|0)==0){og(a);k=c[h>>2]|0}else{k=j}c[h>>2]=k+ -1}k=g+188|0;g=1<<c[a+424>>2];h=a+368|0;if((c[h>>2]|0)>0){l=0}else{i=f;return 1}do{if((pg(a,k)|0)!=0){j=c[d+(l<<2)>>2]|0;b[j>>1]=e[j>>1]|0|g}l=l+1|0}while((l|0)<(c[h>>2]|0));i=f;return 1}function mg(a,d){a=a|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;e=i;f=c[a+468>>2]|0;if((c[a+280>>2]|0)!=0){g=f+56|0;h=c[g>>2]|0;if((h|0)==0){og(a);j=c[g>>2]|0}else{j=h}c[g>>2]=j+ -1}j=f+20|0;if((c[j>>2]|0)==-1){i=e;return 1}g=c[a+432>>2]|0;h=c[d>>2]|0;d=c[(c[a+344>>2]|0)+24>>2]|0;k=c[a+424>>2]|0;l=1<<k;m=-1<<k;k=a+416|0;n=c[k>>2]|0;while(1){if((b[h+(c[g+(n<<2)>>2]<<1)>>1]|0)!=0){o=n;break}p=n+ -1|0;if((p|0)==0){o=0;break}else{n=p}}n=f+124+(d<<2)|0;d=f+188|0;f=l&65535;p=m&65535;q=(c[a+412>>2]|0)+ -1|0;a:while(1){r=(c[n>>2]|0)+(q*3|0)|0;if((q|0)>=(o|0)?(pg(a,r)|0)!=0:0){s=24;break}else{t=q;u=r}while(1){v=t+1|0;w=h+(c[g+(v<<2)>>2]<<1)|0;if((b[w>>1]|0)!=0){s=13;break}if((pg(a,u+1|0)|0)!=0){s=18;break}if((v|0)<(c[k>>2]|0)){t=v;u=u+3|0}else{s=22;break a}}do{if((s|0)==13){s=0;if((pg(a,u+2|0)|0)!=0){r=b[w>>1]|0;x=r<<16>>16;if(r<<16>>16<0){b[w>>1]=x+m;break}else{b[w>>1]=x+l;break}}}else if((s|0)==18){s=0;if((pg(a,d)|0)==0){b[w>>1]=f;break}else{b[w>>1]=p;break}}}while(0);if((v|0)<(c[k>>2]|0)){q=v}else{s=24;break}}if((s|0)==22){v=c[a>>2]|0;c[v+20>>2]=117;Qc[c[v+4>>2]&31](a,-1);c[j>>2]=-1;i=e;return 1}else if((s|0)==24){i=e;return 1}return 0}function ng(a,e){a=a|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0;f=i;g=c[a+468>>2]|0;if((c[a+280>>2]|0)!=0){h=g+56|0;j=c[h>>2]|0;if((j|0)==0){og(a);k=c[h>>2]|0}else{k=j}c[h>>2]=k+ -1}k=g+20|0;if((c[k>>2]|0)==-1){i=f;return 1}h=c[a+432>>2]|0;j=a+368|0;if((c[j>>2]|0)<=0){i=f;return 1}l=g+60|0;m=g+40|0;n=g+24|0;o=a+436|0;p=g+124|0;q=g+188|0;g=0;a:while(1){r=c[e+(g<<2)>>2]|0;s=c[a+(g<<2)+372>>2]|0;t=c[a+(s<<2)+344>>2]|0;u=c[t+20>>2]|0;v=l+(u<<2)|0;w=c[v>>2]|0;x=m+(s<<2)|0;y=c[x>>2]|0;if((pg(a,w+y|0)|0)==0){c[x>>2]=0;z=c[n+(s<<2)>>2]|0}else{A=pg(a,w+(y+1)|0)|0;B=w+(y+2+A)|0;y=pg(a,B)|0;if((y|0)!=0){w=(c[v>>2]|0)+20|0;if((pg(a,w)|0)==0){C=y;D=w}else{v=y;y=w;while(1){w=v<<1;E=y+1|0;if((w|0)==32768){F=14;break a}if((pg(a,E)|0)==0){C=w;D=E;break}else{v=w;y=E}}}}else{C=0;D=B}do{if((C|0)>=(1<<(d[a+u+232|0]|0)>>1|0)){y=A<<2;if((C|0)>(1<<(d[a+u+248|0]|0)>>1|0)){c[x>>2]=y+12;break}else{c[x>>2]=y+4;break}}else{c[x>>2]=0}}while(0);x=D+14|0;u=C>>1;if((u|0)==0){G=C}else{B=u;u=C;while(1){y=(pg(a,x)|0)==0;v=(y?0:B)|u;y=B>>1;if((y|0)==0){G=v;break}else{B=y;u=v}}}u=n+(s<<2)|0;B=(c[u>>2]|0)+((A|0)==0?G+1|0:~G)|0;c[u>>2]=B;z=B}b[r>>1]=z;b:do{if((c[o>>2]|0)!=0){B=c[t+24>>2]|0;u=p+(B<<2)|0;x=a+B+264|0;B=0;while(1){v=(c[u>>2]|0)+(B*3|0)|0;if((pg(a,v)|0)==0){H=B;I=v}else{break b}while(1){J=H+1|0;if((pg(a,I+1|0)|0)!=0){break}if((J|0)<(c[o>>2]|0)){H=J;I=I+3|0}else{F=28;break a}}v=pg(a,q)|0;y=I+2|0;E=pg(a,y)|0;if((E|0)!=0){if((pg(a,y)|0)!=0){w=E<<1;K=(c[u>>2]|0)+((H|0)<(d[x]|0|0)?189:217)|0;if((pg(a,K)|0)==0){L=w;M=K}else{N=w;w=K;while(1){K=N<<1;O=w+1|0;if((K|0)==32768){F=34;break a}if((pg(a,O)|0)==0){L=K;M=O;break}else{N=K;w=O}}}}else{L=E;M=y}w=M+14|0;N=L>>1;if((N|0)==0){P=L}else{O=N;N=L;while(1){K=(pg(a,w)|0)==0;Q=(K?0:O)|N;K=O>>1;if((K|0)==0){P=Q;break}else{O=K;N=Q}}}}else{P=0}b[r+(c[h+(J<<2)>>2]<<1)>>1]=(v|0)==0?P+1|0:P^65535;if((J|0)<(c[o>>2]|0)){B=J}else{break}}}}while(0);r=g+1|0;if((r|0)<(c[j>>2]|0)){g=r}else{F=39;break}}if((F|0)==14){g=c[a>>2]|0;c[g+20>>2]=117;Qc[c[g+4>>2]&31](a,-1);c[k>>2]=-1;i=f;return 1}else if((F|0)==28){g=c[a>>2]|0;c[g+20>>2]=117;Qc[c[g+4>>2]&31](a,-1);c[k>>2]=-1;i=f;return 1}else if((F|0)==34){g=c[a>>2]|0;c[g+20>>2]=117;Qc[c[g+4>>2]&31](a,-1);c[k>>2]=-1;i=f;return 1}else if((F|0)==39){i=f;return 1}return 0}function og(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;d=i;e=c[b+468>>2]|0;if((Sc[c[(c[b+464>>2]|0)+8>>2]&31](b)|0)==0){f=c[b>>2]|0;c[f+20>>2]=25;Oc[c[f>>2]&63](b)}f=b+340|0;if((c[f>>2]|0)<=0){g=e+12|0;c[g>>2]=0;h=e+16|0;c[h>>2]=0;j=e+20|0;c[j>>2]=-16;k=b+280|0;l=c[k>>2]|0;m=e+56|0;n=l;c[m>>2]=n;i=d;return}o=b+224|0;p=e+60|0;q=e+24|0;r=e+40|0;s=b+436|0;t=b+412|0;u=e+124|0;v=b+420|0;w=0;do{x=c[b+(w<<2)+344>>2]|0;y=c[o>>2]|0;if((y|0)!=0){if((c[t>>2]|0)==0?(c[v>>2]|0)==0:0){z=8}else{A=y}}else{z=8}if((z|0)==8){z=0;y=(c[p+(c[x+20>>2]<<2)>>2]|0)+0|0;B=y+64|0;do{a[y]=0;y=y+1|0}while((y|0)<(B|0));c[q+(w<<2)>>2]=0;c[r+(w<<2)>>2]=0;A=c[o>>2]|0}if((A|0)==0){if((c[s>>2]|0)!=0){z=12}}else{if((c[t>>2]|0)!=0){z=12}}if((z|0)==12){z=0;Gm(c[u+(c[x+24>>2]<<2)>>2]|0,0,256)|0}w=w+1|0}while((w|0)<(c[f>>2]|0));g=e+12|0;c[g>>2]=0;h=e+16|0;c[h>>2]=0;j=e+20|0;c[j>>2]=-16;k=b+280|0;l=c[k>>2]|0;m=e+56|0;n=l;c[m>>2]=n;i=d;return}function pg(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;f=i;g=c[b+468>>2]|0;h=g+16|0;j=c[h>>2]|0;k=g+20|0;if((j|0)<32768){l=b+440|0;m=b+24|0;n=g+12|0;o=c[k>>2]|0;while(1){p=o+ -1|0;c[k>>2]=p;if((o|0)<1){a:do{if((c[l>>2]|0)==0){q=c[m>>2]|0;r=q+4|0;if((c[r>>2]|0)==0?(Sc[c[q+12>>2]&31](b)|0)==0:0){s=c[b>>2]|0;c[s+20>>2]=25;Oc[c[s>>2]&63](b)}c[r>>2]=(c[r>>2]|0)+ -1;r=c[q>>2]|0;c[q>>2]=r+1;q=a[r]|0;if(!(q<<24>>24==-1)){t=q&255;break}while(1){q=c[m>>2]|0;r=q+4|0;if((c[r>>2]|0)==0?(Sc[c[q+12>>2]&31](b)|0)==0:0){s=c[b>>2]|0;c[s+20>>2]=25;Oc[c[s>>2]&63](b)}c[r>>2]=(c[r>>2]|0)+ -1;r=c[q>>2]|0;c[q>>2]=r+1;u=d[r]|0;if((u|0)==0){t=255;break a}else if((u|0)!=255){break}}c[l>>2]=u;t=0}else{t=0}}while(0);c[n>>2]=c[n>>2]<<8|t;r=c[k>>2]|0;q=r+8|0;c[k>>2]=q;if((q|0)<0){s=r+9|0;c[k>>2]=s;if((s|0)==0){c[h>>2]=32768;v=0}else{v=s}}else{v=q}}else{v=p}q=c[h>>2]<<1;c[h>>2]=q;if((q|0)<32768){o=v}else{w=q;x=n;y=n;z=v;break}}}else{v=g+12|0;w=j;x=v;y=v;z=c[k>>2]|0}k=d[e]|0;v=c[2016+((k&127)<<2)>>2]|0;j=v>>8;g=v>>16;n=w-g|0;c[h>>2]=n;w=n<<z;z=c[x>>2]|0;if((z|0)>=(w|0)){c[y>>2]=z-w;c[h>>2]=g;h=k&128;if((n|0)<(g|0)){a[e]=h^j;A=k;B=A>>7;i=f;return B|0}else{a[e]=h^v;A=k^128;B=A>>7;i=f;return B|0}}if((n|0)>=32768){A=k;B=A>>7;i=f;return B|0}h=k&128;if((n|0)<(g|0)){a[e]=h^v;A=k^128;B=A>>7;i=f;return B|0}else{a[e]=h^j;A=k;B=A>>7;i=f;return B|0}return 0}function qg(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;d=i;e=c[a+24>>2]|0;if((b|0)<=0){i=d;return}f=e+4|0;g=c[f>>2]|0;if((g|0)<(b|0)){h=e+12|0;j=b;k=g;while(1){l=j-k|0;Sc[c[h>>2]&31](a)|0;m=c[f>>2]|0;if((l|0)>(m|0)){j=l;k=m}else{n=l;o=m;break}}}else{n=b;o=g}c[e>>2]=(c[e>>2]|0)+n;c[f>>2]=o-n;i=d;return}function rg(a){a=a|0;return}function sg(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=i;if((b|0)==0|(d|0)==0){f=c[a>>2]|0;c[f+20>>2]=43;Oc[c[f>>2]&63](a)}f=a+24|0;g=c[f>>2]|0;if((g|0)==0){h=Jc[c[c[a+4>>2]>>2]&15](a,0,28)|0;c[f>>2]=h;j=h}else{j=g}c[j+8>>2]=18;c[j+12>>2]=15;c[j+16>>2]=11;c[j+20>>2]=12;c[j+24>>2]=19;c[j+4>>2]=d;c[j>>2]=b;i=e;return}function tg(a){a=a|0;return}function ug(a){a=a|0;var b=0,d=0;b=i;d=c[a>>2]|0;c[d+20>>2]=123;Qc[c[d+4>>2]&31](a,-1);d=a+24|0;c[c[d>>2]>>2]=2472;c[(c[d>>2]|0)+4>>2]=2;i=b;return 1}function vg(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;d=i;e=a+4|0;f=Jc[c[c[e>>2]>>2]&15](a,1,116)|0;c[a+452>>2]=f;c[f>>2]=20;c[f+8>>2]=21;c[f+112>>2]=0;if((b|0)==0){b=Jc[c[(c[e>>2]|0)+4>>2]&15](a,1,1280)|0;c[f+32>>2]=b;c[f+36>>2]=b+128;c[f+40>>2]=b+256;c[f+44>>2]=b+384;c[f+48>>2]=b+512;c[f+52>>2]=b+640;c[f+56>>2]=b+768;c[f+60>>2]=b+896;c[f+64>>2]=b+1024;c[f+68>>2]=b+1152;if((c[a+436>>2]|0)==0){Gm(b|0,0,1280)|0}c[f+4>>2]=17;c[f+12>>2]=14;c[f+16>>2]=0;i=d;return}b=a+36|0;if((c[b>>2]|0)>0){g=a+224|0;h=f+72|0;j=0;k=c[a+216>>2]|0;while(1){l=k+12|0;m=c[l>>2]|0;if((c[g>>2]|0)==0){n=m}else{n=m*3|0}m=c[(c[e>>2]|0)+20>>2]|0;o=aj(c[k+28>>2]|0,c[k+8>>2]|0)|0;p=aj(c[k+32>>2]|0,c[l>>2]|0)|0;c[h+(j<<2)>>2]=Rc[m&3](a,1,1,o,p,n)|0;p=j+1|0;if((p|0)<(c[b>>2]|0)){j=p;k=k+88|0}else{q=h;break}}}else{q=f+72|0}c[f+4>>2]=16;c[f+12>>2]=13;c[f+16>>2]=q;i=d;return}function wg(a){a=a|0;var b=0,d=0,e=0;b=i;c[a+148>>2]=0;d=c[a+452>>2]|0;do{if((c[a+340>>2]|0)<=1){e=c[a+344>>2]|0;if((c[a+332>>2]|0)==1){c[d+28>>2]=c[e+76>>2];break}else{c[d+28>>2]=c[e+12>>2];break}}else{c[d+28>>2]=1}}while(0);c[d+20>>2]=0;c[d+24>>2]=0;i=b;return}function xg(a){a=a|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;d=i;e=c[a+452>>2]|0;if((c[e+16>>2]|0)==0){f=a+156|0;c[f>>2]=0;i=d;return}a:do{if(((c[a+80>>2]|0)!=0?(c[a+224>>2]|0)!=0:0)?(g=a+160|0,(c[g>>2]|0)!=0):0){h=e+112|0;j=c[h>>2]|0;if((j|0)==0){k=a+36|0;l=Jc[c[c[a+4>>2]>>2]&15](a,1,(c[k>>2]|0)*24|0)|0;c[h>>2]=l;m=k;n=l}else{m=a+36|0;n=j}if((c[m>>2]|0)>0){j=0;l=n;k=c[a+216>>2]|0;h=0;while(1){o=c[k+80>>2]|0;if((o|0)==0){break a}if((b[o>>1]|0)==0){break a}if((b[o+2>>1]|0)==0){break a}if((b[o+16>>1]|0)==0){break a}if((b[o+32>>1]|0)==0){break a}if((b[o+18>>1]|0)==0){break a}if((b[o+4>>1]|0)==0){break a}o=c[g>>2]|0;if((c[o+(j<<8)>>2]|0)<0){break a}p=o+(j<<8)+4|0;c[l+4>>2]=c[p>>2];q=(c[p>>2]|0)==0?h:1;p=o+(j<<8)+8|0;c[l+8>>2]=c[p>>2];r=(c[p>>2]|0)==0?q:1;q=o+(j<<8)+12|0;c[l+12>>2]=c[q>>2];p=(c[q>>2]|0)==0?r:1;r=o+(j<<8)+16|0;c[l+16>>2]=c[r>>2];q=(c[r>>2]|0)==0?p:1;p=o+(j<<8)+20|0;c[l+20>>2]=c[p>>2];h=(c[p>>2]|0)==0?q:1;j=j+1|0;if((j|0)>=(c[m>>2]|0)){break}else{l=l+24|0;k=k+88|0}}if((h|0)!=0){c[e+12>>2]=15;f=a+156|0;c[f>>2]=0;i=d;return}}}}while(0);c[e+12>>2]=13;f=a+156|0;c[f>>2]=0;i=d;return}function yg(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0;b=i;i=i+16|0;d=b;e=a+452|0;f=c[e>>2]|0;g=a+340|0;if((c[g>>2]|0)>0){h=a+4|0;j=f+72|0;k=a+148|0;l=0;do{m=c[a+(l<<2)+344>>2]|0;n=c[m+12>>2]|0;o=aa(n,c[k>>2]|0)|0;c[d+(l<<2)>>2]=Xc[c[(c[h>>2]|0)+32>>2]&3](a,c[j+(c[m+4>>2]<<2)>>2]|0,o,n,1)|0;l=l+1|0}while((l|0)<(c[g>>2]|0))}l=f+24|0;j=c[l>>2]|0;h=f+28|0;k=c[h>>2]|0;a:do{if((j|0)<(k|0)){n=f+20|0;o=a+360|0;m=a+468|0;p=f+32|0;q=k;r=c[n>>2]|0;s=j;b:while(1){if(r>>>0<(c[o>>2]|0)>>>0){t=r;while(1){u=c[g>>2]|0;if((u|0)>0){v=0;w=0;while(1){x=c[a+(w<<2)+344>>2]|0;y=c[x+56>>2]|0;z=aa(y,t)|0;A=c[x+60>>2]|0;if((A|0)>0?(x=c[d+(w<<2)>>2]|0,(y|0)>0):0){B=v;C=0;while(1){D=(y|0)>1?y:1;E=B;F=(c[x+(C+s<<2)>>2]|0)+(z<<7)|0;G=0;while(1){c[p+(E<<2)>>2]=F;G=G+1|0;if((G|0)>=(y|0)){break}else{E=E+1|0;F=F+128|0}}F=B+D|0;E=C+1|0;if((E|0)<(A|0)){B=F;C=E}else{H=F;break}}}else{H=v}w=w+1|0;if((w|0)>=(u|0)){break}else{v=H}}}v=t+1|0;if((Wc[c[(c[m>>2]|0)+4>>2]&31](a,p)|0)==0){break b}if(v>>>0<(c[o>>2]|0)>>>0){t=v}else{break}}I=c[h>>2]|0}else{I=q}c[n>>2]=0;v=s+1|0;if((v|0)<(I|0)){q=I;r=0;s=v}else{break a}}c[l>>2]=s;c[n>>2]=t;J=0;i=b;return J|0}}while(0);t=a+148|0;l=(c[t>>2]|0)+1|0;c[t>>2]=l;t=c[a+332>>2]|0;if(!(l>>>0<t>>>0)){Oc[c[(c[a+460>>2]|0)+12>>2]&63](a);J=4;i=b;return J|0}I=c[e>>2]|0;do{if((c[g>>2]|0)<=1){e=c[a+344>>2]|0;if(l>>>0<(t+ -1|0)>>>0){c[I+28>>2]=c[e+12>>2];break}else{c[I+28>>2]=c[e+76>>2];break}}else{c[I+28>>2]=1}}while(0);c[I+20>>2]=0;c[I+24>>2]=0;J=3;i=b;return J|0}function zg(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0;d=i;e=c[a+452>>2]|0;f=a+332|0;g=(c[f>>2]|0)+ -1|0;h=a+144|0;j=a+152|0;k=a+460|0;l=a+148|0;m=a+156|0;while(1){n=c[h>>2]|0;o=c[j>>2]|0;if((n|0)>=(o|0)){if((n|0)!=(o|0)){break}if((c[l>>2]|0)>>>0>(c[m>>2]|0)>>>0){break}}if((Sc[c[c[k>>2]>>2]&31](a)|0)==0){p=0;q=21;break}}if((q|0)==21){i=d;return p|0}q=a+36|0;k=c[q>>2]|0;if((k|0)>0){l=a+4|0;j=e+72|0;e=a+472|0;h=k;k=0;o=c[a+216>>2]|0;while(1){if((c[o+52>>2]|0)==0){r=h}else{n=o+12|0;s=c[n>>2]|0;t=aa(s,c[m>>2]|0)|0;u=Xc[c[(c[l>>2]|0)+32>>2]&3](a,c[j+(k<<2)>>2]|0,t,s,0)|0;if((c[m>>2]|0)>>>0<g>>>0){v=c[n>>2]|0}else{s=c[n>>2]|0;n=((c[o+32>>2]|0)>>>0)%(s>>>0)|0;v=(n|0)==0?s:n}n=c[(c[e>>2]|0)+(k<<2)+4>>2]|0;if((v|0)>0){s=o+28|0;t=o+40|0;w=o+36|0;x=c[s>>2]|0;y=0;z=c[b+(k<<2)>>2]|0;while(1){if((x|0)==0){A=0}else{B=0;C=c[u+(y<<2)>>2]|0;D=0;while(1){Kc[n&63](a,o,C,z,D);E=B+1|0;F=c[s>>2]|0;if(E>>>0<F>>>0){B=E;C=C+128|0;D=(c[w>>2]|0)+D|0}else{A=F;break}}}y=y+1|0;if((y|0)==(v|0)){break}else{x=A;z=z+(c[t>>2]<<2)|0}}}r=c[q>>2]|0}k=k+1|0;if((k|0)>=(r|0)){break}else{h=r;o=o+88|0}}}o=(c[m>>2]|0)+1|0;c[m>>2]=o;p=o>>>0<(c[f>>2]|0)>>>0?3:4;i=d;return p|0}function Ag(a){a=a|0;return 0}function Bg(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0;d=i;e=a+452|0;f=c[e>>2]|0;g=(c[a+360>>2]|0)+ -1|0;h=a+332|0;j=c[h>>2]|0;k=j+ -1|0;l=f+24|0;m=c[l>>2]|0;n=f+28|0;o=c[n>>2]|0;do{if((m|0)<(o|0)){p=f+20|0;q=a+436|0;r=a+468|0;s=f+32|0;t=a+340|0;u=a+472|0;v=a+148|0;w=a+368|0;x=o;y=c[p>>2]|0;z=m;a:while(1){if(y>>>0>g>>>0){A=x}else{B=y;while(1){if((c[q>>2]|0)!=0){Gm(c[s>>2]|0,0,c[w>>2]<<7|0)|0}if((Wc[c[(c[r>>2]|0)+4>>2]&31](a,s)|0)==0){break a}C=c[t>>2]|0;if((C|0)>0){D=B>>>0<g>>>0;E=C;C=0;F=0;while(1){G=c[a+(F<<2)+344>>2]|0;if((c[G+52>>2]|0)!=0){H=c[G+4>>2]|0;I=c[(c[u>>2]|0)+(H<<2)+4>>2]|0;J=G+56|0;K=c[(D?J:G+72|0)>>2]|0;L=G+40|0;M=c[L>>2]|0;N=aa(c[G+68>>2]|0,B)|0;O=G+60|0;P=c[O>>2]|0;if((P|0)>0){Q=aa(M,z)|0;R=G+76|0;S=G+36|0;b:do{if((K|0)>0){T=P;U=M;V=C;W=(c[b+(H<<2)>>2]|0)+(Q<<2)|0;X=0;while(1){if(!((c[v>>2]|0)>>>0<k>>>0)?(X+z|0)>=(c[R>>2]|0):0){Y=T;Z=U}else{_=N;$=0;ba=19}if((ba|0)==19){while(1){ba=0;Kc[I&63](a,G,c[s+($+V<<2)>>2]|0,W,_);$=$+1|0;if(($|0)==(K|0)){break}else{_=(c[S>>2]|0)+_|0;ba=19}}Y=c[O>>2]|0;Z=c[L>>2]|0}ca=(c[J>>2]|0)+V|0;da=X+1|0;if((da|0)>=(Y|0)){ea=ca;break b}T=Y;U=Z;V=ca;W=W+(Z<<2)|0;X=da}}else{X=C;W=0;while(1){V=(c[J>>2]|0)+X|0;U=W+1|0;if((U|0)<(P|0)){X=V;W=U}else{ea=V;break}}}}while(0);fa=c[t>>2]|0;ga=ea}else{fa=E;ga=C}}else{fa=E;ga=(c[G+64>>2]|0)+C|0}F=F+1|0;if((F|0)>=(fa|0)){break}else{E=fa;C=ga}}}C=B+1|0;if(C>>>0>g>>>0){break}else{B=C}}A=c[n>>2]|0}c[p>>2]=0;C=z+1|0;if((C|0)<(A|0)){x=A;y=0;z=C}else{ba=27;break}}if((ba|0)==27){ha=v;ia=c[h>>2]|0;break}c[l>>2]=z;c[p>>2]=B;ja=0;i=d;return ja|0}else{ha=a+148|0;ia=j}}while(0);j=a+156|0;c[j>>2]=(c[j>>2]|0)+1;j=(c[ha>>2]|0)+1|0;c[ha>>2]=j;if(!(j>>>0<ia>>>0)){Oc[c[(c[a+460>>2]|0)+12>>2]&63](a);ja=4;i=d;return ja|0}ha=c[e>>2]|0;do{if((c[a+340>>2]|0)<=1){e=c[a+344>>2]|0;if(j>>>0<(ia+ -1|0)>>>0){c[ha+28>>2]=c[e+12>>2];break}else{c[ha+28>>2]=c[e+76>>2];break}}else{c[ha+28>>2]=1}}while(0);c[ha+20>>2]=0;c[ha+24>>2]=0;ja=3;i=d;return ja|0}function Cg(a,d){a=a|0;d=d|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0;f=i;i=i+128|0;g=f;h=c[a+452>>2]|0;j=a+332|0;k=(c[j>>2]|0)+ -1|0;l=a+144|0;m=a+152|0;n=a+460|0;o=a+412|0;p=a+148|0;q=a+156|0;while(1){r=c[l>>2]|0;s=c[m>>2]|0;if((r|0)>(s|0)){break}t=c[n>>2]|0;if((c[t+20>>2]|0)!=0){break}if((r|0)==(s|0)?(c[p>>2]|0)>>>0>((c[q>>2]|0)+((c[o>>2]|0)==0)|0)>>>0:0){break}if((Sc[c[t>>2]&31](a)|0)==0){u=0;v=75;break}}if((v|0)==75){i=f;return u|0}v=a+36|0;o=c[v>>2]|0;if((o|0)>0){p=a+4|0;n=h+72|0;m=h+112|0;h=a+472|0;l=g+4|0;t=g+18|0;s=g+32|0;r=g+16|0;w=g+2|0;x=o;o=0;y=c[a+216>>2]|0;while(1){if((c[y+52>>2]|0)==0){z=x}else{A=c[q>>2]|0;if(A>>>0<k>>>0){B=c[y+12>>2]|0;C=B;D=B<<1;E=B;F=0}else{B=c[y+12>>2]|0;G=((c[y+32>>2]|0)>>>0)%(B>>>0)|0;H=(G|0)==0?B:G;C=B;D=H;E=H;F=1}if((A|0)==0){I=Xc[c[(c[p>>2]|0)+32>>2]&3](a,c[n+(o<<2)>>2]|0,0,D,0)|0;J=1}else{H=aa(C,A+ -1|0)|0;A=Xc[c[(c[p>>2]|0)+32>>2]&3](a,c[n+(o<<2)>>2]|0,H,C+D|0,0)|0;I=A+(c[y+12>>2]<<2)|0;J=0}A=c[m>>2]|0;H=o*6|0;B=c[y+80>>2]|0;G=e[B>>1]|0;K=e[B+2>>1]|0;L=e[B+16>>1]|0;M=e[B+32>>1]|0;N=e[B+18>>1]|0;O=e[B+4>>1]|0;B=c[(c[h>>2]|0)+(o<<2)+4>>2]|0;if((E|0)>0){P=(J|0)!=0;Q=(F|0)!=0;R=y+28|0;S=A+((H|1)<<2)|0;T=A+(H+2<<2)|0;U=A+(H+3<<2)|0;V=A+(H+4<<2)|0;W=A+(H+5<<2)|0;H=y+36|0;A=G*9|0;X=O<<7;Y=O<<8;O=G*5|0;Z=N<<7;_=N<<8;N=M<<7;$=M<<8;M=G*36|0;G=L<<7;ba=L<<8;L=K<<7;ca=K<<8;K=y+40|0;da=E+ -1|0;ea=0;fa=c[d+(o<<2)>>2]|0;while(1){ga=c[I+(ea<<2)>>2]|0;if(P&(ea|0)==0){ha=ga}else{ha=c[I+(ea+ -1<<2)>>2]|0}if(Q&(ea|0)==(da|0)){ia=ga}else{ia=c[I+(ea+1<<2)>>2]|0}ja=b[ha>>1]|0;ka=b[ga>>1]|0;la=b[ia>>1]|0;ma=(c[R>>2]|0)+ -1|0;na=ja;oa=ja;ja=ka;pa=ka;ka=la;qa=la;la=0;ra=ga;ga=ia;sa=0;ta=ha;while(1){cj(ra,g,1);if(la>>>0<ma>>>0){ua=b[ta+128>>1]|0;va=b[ra+128>>1]|0;wa=b[ga+128>>1]|0}else{ua=oa;va=pa;wa=qa}xa=c[S>>2]|0;if((xa|0)!=0?(b[w>>1]|0)==0:0){ya=aa(M,ja-va|0)|0;if((ya|0)>-1){za=(ya+L|0)/(ca|0)|0;if((xa|0)>0){Aa=1<<xa;Ba=(za|0)<(Aa|0)?za:Aa+ -1|0}else{Ba=za}}else{za=(L-ya|0)/(ca|0)|0;if((xa|0)>0){ya=1<<xa;Ca=(za|0)<(ya|0)?za:ya+ -1|0}else{Ca=za}Ba=0-Ca|0}b[w>>1]=Ba}za=c[T>>2]|0;if((za|0)!=0?(b[r>>1]|0)==0:0){ya=aa(M,oa-qa|0)|0;if((ya|0)>-1){xa=(ya+G|0)/(ba|0)|0;if((za|0)>0){Aa=1<<za;Da=(xa|0)<(Aa|0)?xa:Aa+ -1|0}else{Da=xa}}else{xa=(G-ya|0)/(ba|0)|0;if((za|0)>0){ya=1<<za;Ea=(xa|0)<(ya|0)?xa:ya+ -1|0}else{Ea=xa}Da=0-Ea|0}b[r>>1]=Da}xa=c[U>>2]|0;if((xa|0)!=0?(b[s>>1]|0)==0:0){ya=aa(A,oa-(pa<<1)+qa|0)|0;if((ya|0)>-1){za=(ya+N|0)/($|0)|0;if((xa|0)>0){Aa=1<<xa;Fa=(za|0)<(Aa|0)?za:Aa+ -1|0}else{Fa=za}}else{za=(N-ya|0)/($|0)|0;if((xa|0)>0){ya=1<<xa;Ga=(za|0)<(ya|0)?za:ya+ -1|0}else{Ga=za}Fa=0-Ga|0}b[s>>1]=Fa}za=c[V>>2]|0;if((za|0)!=0?(b[t>>1]|0)==0:0){ya=aa(O,na-ka-ua+wa|0)|0;if((ya|0)>-1){xa=(ya+Z|0)/(_|0)|0;if((za|0)>0){Aa=1<<za;Ha=(xa|0)<(Aa|0)?xa:Aa+ -1|0}else{Ha=xa}}else{xa=(Z-ya|0)/(_|0)|0;if((za|0)>0){ya=1<<za;Ia=(xa|0)<(ya|0)?xa:ya+ -1|0}else{Ia=xa}Ha=0-Ia|0}b[t>>1]=Ha}xa=c[W>>2]|0;if((xa|0)!=0?(b[l>>1]|0)==0:0){ya=aa(A,ja-(pa<<1)+va|0)|0;if((ya|0)>-1){za=(ya+X|0)/(Y|0)|0;if((xa|0)>0){Aa=1<<xa;Ja=(za|0)<(Aa|0)?za:Aa+ -1|0}else{Ja=za}}else{za=(X-ya|0)/(Y|0)|0;if((xa|0)>0){ya=1<<xa;Ka=(za|0)<(ya|0)?za:ya+ -1|0}else{Ka=za}Ja=0-Ka|0}b[l>>1]=Ja}Kc[B&63](a,y,g,fa,sa);la=la+1|0;if(la>>>0>ma>>>0){break}else{za=qa;ya=pa;xa=oa;oa=ua;pa=va;qa=wa;ra=ra+128|0;ga=ga+128|0;sa=(c[H>>2]|0)+sa|0;ta=ta+128|0;ka=za;ja=ya;na=xa}}ea=ea+1|0;if((ea|0)==(E|0)){break}else{fa=fa+(c[K>>2]<<2)|0}}}z=c[v>>2]|0}o=o+1|0;if((o|0)>=(z|0)){break}else{x=z;y=y+88|0}}}y=(c[q>>2]|0)+1|0;c[q>>2]=y;u=y>>>0<(c[j>>2]|0)>>>0?3:4;i=f;return u|0}function Dg(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;d=i;e=b+4|0;f=Jc[c[c[e>>2]>>2]&15](b,1,32)|0;g=b+480|0;c[g>>2]=f;c[f>>2]=22;h=b+40|0;switch(c[h>>2]|0){case 5:case 4:{if((c[b+36>>2]|0)!=4){j=c[b>>2]|0;c[j+20>>2]=11;Oc[c[j>>2]&63](b)}break};case 7:case 6:case 3:case 2:{if((c[b+36>>2]|0)!=3){j=c[b>>2]|0;c[j+20>>2]=11;Oc[c[j>>2]&63](b)}break};case 1:{if((c[b+36>>2]|0)!=1){j=c[b>>2]|0;c[j+20>>2]=11;Oc[c[j>>2]&63](b)}break};default:{if((c[b+36>>2]|0)<1){j=c[b>>2]|0;c[j+20>>2]=11;Oc[c[j>>2]&63](b)}}}j=b+304|0;if((c[j>>2]|0)!=0?(k=c[h>>2]|0,!((k|0)==6|(k|0)==2)):0){k=c[b>>2]|0;c[k+20>>2]=28;Oc[c[k>>2]&63](b)}k=c[b+44>>2]|0;do{if((k|0)==6){c[b+120>>2]=3;if((c[h>>2]|0)!=6){l=c[b>>2]|0;c[l+20>>2]=28;Oc[c[l>>2]&63](b);break}l=c[j>>2]|0;if((l|0)==0){c[f+4>>2]=6;break}else if((l|0)==1){c[f+4>>2]=7;break}else{l=c[b>>2]|0;c[l+20>>2]=28;Oc[c[l>>2]&63](b);break}}else if((k|0)==2){c[b+120>>2]=3;l=c[h>>2]|0;if((l|0)==1){c[f+4>>2]=4;break}else if((l|0)==3){c[f+4>>2]=5;Kg(b);break}else if((l|0)==7){c[f+4>>2]=5;m=c[g>>2]|0;n=m+8|0;c[n>>2]=Jc[c[c[e>>2]>>2]&15](b,1,1024)|0;o=m+12|0;c[o>>2]=Jc[c[c[e>>2]>>2]&15](b,1,1024)|0;p=m+16|0;c[p>>2]=Jc[c[c[e>>2]>>2]&15](b,1,1024)|0;q=m+20|0;c[q>>2]=Jc[c[c[e>>2]>>2]&15](b,1,1024)|0;r=Jc[c[c[e>>2]>>2]&15](b,1,1280)|0;s=m+24|0;c[s>>2]=r;m=c[n>>2]|0;n=c[p>>2]|0;p=0;t=-128;while(1){c[m+(p<<2)>>2]=(t*183763|0)+32768>>16;c[(c[o>>2]|0)+(p<<2)>>2]=(t*232260|0)+32768>>16;c[n+(p<<2)>>2]=aa(t,-93603)|0;u=(aa(t,-45107)|0)+32768|0;c[(c[q>>2]|0)+(p<<2)>>2]=u;p=p+1|0;if((p|0)==256){break}else{t=t+1|0}}Gm(r|0,0,512)|0;t=(c[s>>2]|0)+512|0;c[s>>2]=t;a[t]=0;t=1;while(1){a[(c[s>>2]|0)+t|0]=t;p=t+1|0;if((p|0)==256){v=256;break}else{t=p}}do{a[(c[s>>2]|0)+v|0]=-1;v=v+1|0}while((v|0)!=768)}else if((l|0)==2){s=c[j>>2]|0;if((s|0)==0){c[f+4>>2]=6;break}else if((s|0)==1){c[f+4>>2]=7;break}else{s=c[b>>2]|0;c[s+20>>2]=28;Oc[c[s>>2]&63](b);break}}else{s=c[b>>2]|0;c[s+20>>2]=28;Oc[c[s>>2]&63](b);break}}else if((k|0)==4){c[b+120>>2]=4;s=c[h>>2]|0;if((s|0)==4){c[f+4>>2]=9;break}else if((s|0)==5){c[f+4>>2]=8;Kg(b);break}else{s=c[b>>2]|0;c[s+20>>2]=28;Oc[c[s>>2]&63](b);break}}else if((k|0)==1){c[b+120>>2]=1;s=c[h>>2]|0;if((s|0)==2){t=c[j>>2]|0;if((t|0)==1){c[f+4>>2]=3}else if((t|0)==0){c[f+4>>2]=2}else{t=c[b>>2]|0;c[t+20>>2]=28;Oc[c[t>>2]&63](b)}t=c[g>>2]|0;r=Jc[c[c[e>>2]>>2]&15](b,1,3072)|0;c[t+28>>2]=r;t=0;do{c[r+(t<<2)>>2]=t*19595;c[r+(t+256<<2)>>2]=t*38470;c[r+(t+512<<2)>>2]=(t*7471|0)+32768;t=t+1|0}while((t|0)!=256)}else if((s|0)==7|(s|0)==3|(s|0)==1){c[f+4>>2]=1;t=b+36|0;if((c[t>>2]|0)<=1){break}r=b+216|0;l=1;do{c[(c[r>>2]|0)+(l*88|0)+52>>2]=0;l=l+1|0}while((l|0)<(c[t>>2]|0))}else{t=c[b>>2]|0;c[t+20>>2]=28;Oc[c[t>>2]&63](b);break}}else{if((k|0)==(c[h>>2]|0)){c[b+120>>2]=c[b+36>>2];c[f+4>>2]=9;break}else{t=c[b>>2]|0;c[t+20>>2]=28;Oc[c[t>>2]&63](b);break}}}while(0);if((c[b+84>>2]|0)==0){c[b+124>>2]=c[b+120>>2];i=d;return}else{c[b+124>>2]=1;i=d;return}}function Eg(a){a=a|0;return}function Fg(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0;g=i;bj(c[b>>2]|0,d,e,0,f,c[a+112>>2]|0);i=g;return}function Gg(b,e,f,g,h){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;j=i;k=c[(c[b+480>>2]|0)+28>>2]|0;l=c[b+112>>2]|0;if((h|0)<=0){i=j;return}b=e+4|0;m=e+8|0;if((l|0)==0){i=j;return}else{n=g;o=f;p=h}while(1){h=p+ -1|0;f=c[(c[e>>2]|0)+(o<<2)>>2]|0;g=c[(c[b>>2]|0)+(o<<2)>>2]|0;q=c[(c[m>>2]|0)+(o<<2)>>2]|0;r=o+1|0;s=n+4|0;t=c[n>>2]|0;u=0;do{a[t+u|0]=((c[k+((d[g+u|0]|0|256)<<2)>>2]|0)+(c[k+((d[f+u|0]|0)<<2)>>2]|0)+(c[k+((d[q+u|0]|0|512)<<2)>>2]|0)|0)>>>16;u=u+1|0}while((u|0)!=(l|0));if((h|0)>0){n=s;o=r;p=h}else{break}}i=j;return}function Hg(b,e,f,g,h){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;j=i;k=c[(c[b+480>>2]|0)+28>>2]|0;l=c[b+112>>2]|0;if((h|0)<=0){i=j;return}b=e+4|0;m=e+8|0;if((l|0)==0){i=j;return}else{n=g;o=f;p=h}while(1){h=p+ -1|0;f=c[(c[e>>2]|0)+(o<<2)>>2]|0;g=c[(c[b>>2]|0)+(o<<2)>>2]|0;q=c[(c[m>>2]|0)+(o<<2)>>2]|0;r=o+1|0;s=n+4|0;t=c[n>>2]|0;u=0;do{v=d[g+u|0]|0;a[t+u|0]=((c[k+((v|256)<<2)>>2]|0)+(c[k+(((d[f+u|0]|0)+128+v&255)<<2)>>2]|0)+(c[k+((v+128+(d[q+u|0]|0)&255|512)<<2)>>2]|0)|0)>>>16;u=u+1|0}while((u|0)!=(l|0));if((h|0)>0){n=s;o=r;p=h}else{break}}i=j;return}function Ig(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;h=i;j=c[b+112>>2]|0;if((g|0)<1|(j|0)==0){i=h;return}else{k=f;l=e;m=g}while(1){g=m+ -1|0;e=l+1|0;f=c[(c[d>>2]|0)+(l<<2)>>2]|0;b=k+4|0;n=0;o=c[k>>2]|0;while(1){p=a[f+n|0]|0;a[o+2|0]=p;a[o+1|0]=p;a[o]=p;n=n+1|0;if((n|0)==(j|0)){break}else{o=o+3|0}}if((g|0)>0){k=b;l=e;m=g}else{break}}i=h;return}function Jg(b,e,f,g,h){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;j=i;k=c[b+480>>2]|0;l=c[b+112>>2]|0;b=c[k+24>>2]|0;m=c[k+8>>2]|0;n=c[k+12>>2]|0;o=c[k+16>>2]|0;p=c[k+20>>2]|0;if((h|0)<=0){i=j;return}k=e+4|0;q=e+8|0;if((l|0)==0){i=j;return}else{r=g;s=f;t=h}while(1){h=t+ -1|0;f=c[(c[e>>2]|0)+(s<<2)>>2]|0;g=c[(c[k>>2]|0)+(s<<2)>>2]|0;u=c[(c[q>>2]|0)+(s<<2)>>2]|0;v=s+1|0;w=r+4|0;x=0;y=c[r>>2]|0;while(1){z=d[f+x|0]|0;A=d[g+x|0]|0;B=d[u+x|0]|0;a[y]=a[b+((c[m+(B<<2)>>2]|0)+z)|0]|0;a[y+1|0]=a[b+(((c[o+(B<<2)>>2]|0)+(c[p+(A<<2)>>2]|0)>>16)+z)|0]|0;a[y+2|0]=a[b+((c[n+(A<<2)>>2]|0)+z)|0]|0;x=x+1|0;if((x|0)==(l|0)){break}else{y=y+3|0}}if((h|0)>0){r=w;s=v;t=h}else{break}}i=j;return}function Kg(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0;b=i;d=c[a+480>>2]|0;e=a+4|0;f=d+8|0;c[f>>2]=Jc[c[c[e>>2]>>2]&15](a,1,1024)|0;g=d+12|0;c[g>>2]=Jc[c[c[e>>2]>>2]&15](a,1,1024)|0;h=d+16|0;c[h>>2]=Jc[c[c[e>>2]>>2]&15](a,1,1024)|0;j=d+20|0;c[j>>2]=Jc[c[c[e>>2]>>2]&15](a,1,1024)|0;c[d+24>>2]=c[a+336>>2];a=c[f>>2]|0;f=c[h>>2]|0;h=0;d=-128;while(1){c[a+(h<<2)>>2]=(d*91881|0)+32768>>16;c[(c[g>>2]|0)+(h<<2)>>2]=(d*116130|0)+32768>>16;c[f+(h<<2)>>2]=aa(d,-46802)|0;e=(aa(d,-22553)|0)+32768|0;c[(c[j>>2]|0)+(h<<2)>>2]=e;h=h+1|0;if((h|0)==256){break}else{d=d+1|0}}i=b;return}function Lg(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;h=i;j=c[b+112>>2]|0;if((g|0)<=0){i=h;return}b=d+4|0;k=d+8|0;l=(j|0)==0;m=f;f=e;e=g;while(1){g=e+ -1|0;n=c[(c[d>>2]|0)+(f<<2)>>2]|0;o=c[(c[b>>2]|0)+(f<<2)>>2]|0;p=c[(c[k>>2]|0)+(f<<2)>>2]|0;q=f+1|0;r=m+4|0;if(!l){s=0;t=c[m>>2]|0;while(1){a[t]=a[n+s|0]|0;a[t+1|0]=a[o+s|0]|0;a[t+2|0]=a[p+s|0]|0;s=s+1|0;if((s|0)==(j|0)){break}else{t=t+3|0}}}if((g|0)>0){m=r;f=q;e=g}else{break}}i=h;return}function Mg(b,e,f,g,h){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;j=i;k=c[b+112>>2]|0;if((h|0)<=0){i=j;return}b=e+4|0;l=e+8|0;m=(k|0)==0;n=g;g=f;f=h;while(1){h=f+ -1|0;o=c[(c[e>>2]|0)+(g<<2)>>2]|0;p=c[(c[b>>2]|0)+(g<<2)>>2]|0;q=c[(c[l>>2]|0)+(g<<2)>>2]|0;r=g+1|0;s=n+4|0;if(!m){t=0;u=c[n>>2]|0;while(1){v=a[p+t|0]|0;w=v&255;x=d[q+t|0]|0;a[u]=(d[o+t|0]|0)+128+w;a[u+1|0]=v;a[u+2|0]=w+128+x;t=t+1|0;if((t|0)==(k|0)){break}else{u=u+3|0}}}if((h|0)>0){n=s;g=r;f=h}else{break}}i=j;return}function Ng(b,e,f,g,h){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0;j=i;k=c[b+480>>2]|0;l=c[b+112>>2]|0;m=c[b+336>>2]|0;b=c[k+8>>2]|0;n=c[k+12>>2]|0;o=c[k+16>>2]|0;p=c[k+20>>2]|0;if((h|0)<=0){i=j;return}k=e+4|0;q=e+8|0;r=e+12|0;s=(l|0)==0;t=g;g=f;f=h;while(1){h=f+ -1|0;u=c[(c[e>>2]|0)+(g<<2)>>2]|0;v=c[(c[k>>2]|0)+(g<<2)>>2]|0;w=c[(c[q>>2]|0)+(g<<2)>>2]|0;x=c[(c[r>>2]|0)+(g<<2)>>2]|0;y=g+1|0;z=t+4|0;if(!s){A=0;B=c[t>>2]|0;while(1){C=d[v+A|0]|0;D=d[w+A|0]|0;E=(d[u+A|0]|0)^255;a[B]=a[m+(E-(c[b+(D<<2)>>2]|0))|0]|0;a[B+1|0]=a[m+(E-((c[o+(D<<2)>>2]|0)+(c[p+(C<<2)>>2]|0)>>16))|0]|0;a[B+2|0]=a[m+(E-(c[n+(C<<2)>>2]|0))|0]|0;a[B+3|0]=a[x+A|0]|0;A=A+1|0;if((A|0)==(l|0)){break}else{B=B+4|0}}}if((h|0)>0){t=z;g=y;f=h}else{break}}i=j;return}function Og(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;h=i;j=c[b+36>>2]|0;k=c[b+112>>2]|0;if((g|0)<=0){i=h;return}b=(j|0)>0;l=(k|0)==0;m=e;e=f;f=g;while(1){f=f+ -1|0;if(b){g=0;do{if(!l){n=0;o=c[(c[d+(g<<2)>>2]|0)+(m<<2)>>2]|0;p=(c[e>>2]|0)+g|0;while(1){a[p]=a[o]|0;n=n+1|0;if((n|0)==(k|0)){break}else{o=o+1|0;p=p+j|0}}}g=g+1|0}while((g|0)!=(j|0))}if((f|0)<=0){break}else{m=m+1|0;e=e+4|0}}i=h;return}function Pg(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0;b=i;d=a+4|0;e=Jc[c[c[d>>2]>>2]&15](a,1,84)|0;c[a+472>>2]=e;c[e>>2]=23;f=a+36|0;if((c[f>>2]|0)<=0){i=b;return}g=e+44|0;e=0;h=c[a+216>>2]|0;while(1){j=Jc[c[c[d>>2]>>2]&15](a,1,256)|0;c[h+84>>2]=j;Gm(j|0,0,256)|0;c[g+(e<<2)>>2]=-1;e=e+1|0;if((e|0)>=(c[f>>2]|0)){break}else{h=h+88|0}}i=b;return}function Qg(a){a=a|0;var d=0,f=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0.0,x=0,y=0;d=i;f=c[a+472>>2]|0;j=a+36|0;if((c[j>>2]|0)<=0){i=d;return}k=f+44|0;l=a+72|0;m=0;n=c[a+216>>2]|0;o=0;p=0;while(1){q=n+36|0;r=n+40|0;a:do{switch((c[q>>2]<<8)+(c[r>>2]|0)|0){case 3341:{s=0;t=21;break};case 513:{s=0;t=32;break};case 1026:{s=0;t=31;break};case 3855:{s=0;t=23;break};case 1539:{s=0;t=30;break};case 774:{s=0;t=38;break};case 771:{s=0;t=12;break};case 3591:{s=0;t=26;break};case 1548:{s=0;t=35;break};case 1799:{s=0;t=16;break};case 2565:{s=0;t=28;break};case 1285:{s=0;t=14;break};case 3078:{s=0;t=27;break};case 2313:{s=0;t=17;break};case 4104:{s=0;t=25;break};case 1806:{s=0;t=34;break};case 1290:{s=0;t=36;break};case 1032:{s=0;t=37;break};case 2064:{s=0;t=33;break};case 4112:{s=0;t=24;break};case 2052:{s=0;t=29;break};case 516:{s=0;t=39;break};case 2827:{s=0;t=19;break};case 1542:{s=0;t=15;break};case 258:{s=0;t=40;break};case 1028:{s=0;t=13;break};case 2056:{u=c[l>>2]|0;if((u|0)==1){s=u;t=42;break a}else if((u|0)==2){s=u;t=43;break a}else if((u|0)==0){s=0;t=41;break a}else{u=c[a>>2]|0;c[u+20>>2]=49;Oc[c[u>>2]&63](a);s=o;t=p;break a}break};case 2570:{s=0;t=18;break};case 3084:{s=0;t=20;break};case 514:{s=0;t=11;break};case 3598:{s=0;t=22;break};case 257:{s=0;t=10;break};default:{u=c[a>>2]|0;c[u+20>>2]=7;c[u+24>>2]=c[q>>2];c[u+28>>2]=c[r>>2];Oc[c[u>>2]&63](a);s=o;t=p}}}while(0);c[f+(m<<2)+4>>2]=t;do{if(((c[n+52>>2]|0)!=0?(r=k+(m<<2)|0,(c[r>>2]|0)!=(s|0)):0)?(q=c[n+80>>2]|0,(q|0)!=0):0){c[r>>2]=s;if((s|0)==2){r=c[n+84>>2]|0;u=0;v=0;while(1){w=+h[2608+(v<<3)>>3];g[r+(u<<2)>>2]=+(e[q+(u<<1)>>1]|0)*w*.125;x=u|1;g[r+(x<<2)>>2]=+(e[q+(x<<1)>>1]|0)*w*1.387039845*.125;y=x+1|0;g[r+(y<<2)>>2]=+(e[q+(y<<1)>>1]|0)*w*1.306562965*.125;y=u|3;g[r+(y<<2)>>2]=+(e[q+(y<<1)>>1]|0)*w*1.175875602*.125;x=y+1|0;g[r+(x<<2)>>2]=+(e[q+(x<<1)>>1]|0)*w*.125;x=y+2|0;g[r+(x<<2)>>2]=+(e[q+(x<<1)>>1]|0)*w*.785694958*.125;x=y+3|0;g[r+(x<<2)>>2]=+(e[q+(x<<1)>>1]|0)*w*.5411961*.125;x=u|7;g[r+(x<<2)>>2]=+(e[q+(x<<1)>>1]|0)*w*.275899379*.125;v=v+1|0;if((v|0)==8){break}else{u=u+8|0}}}else if((s|0)==0){u=c[n+84>>2]|0;v=0;do{c[u+(v<<2)>>2]=e[q+(v<<1)>>1]|0;v=v+1|0}while((v|0)!=64)}else if((s|0)==1){v=c[n+84>>2]|0;u=0;do{c[v+(u<<2)>>2]=(aa(b[2480+(u<<1)>>1]|0,e[q+(u<<1)>>1]|0)|0)+2048>>12;u=u+1|0}while((u|0)!=64)}else{u=c[a>>2]|0;c[u+20>>2]=49;Oc[c[u>>2]&63](a);break}}}while(0);m=m+1|0;if((m|0)>=(c[j>>2]|0)){break}else{n=n+88|0;o=s;p=t}}i=d;return}function Rg(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;b=i;d=a+4|0;e=Jc[c[c[d>>2]>>2]&15](a,1,220)|0;c[a+468>>2]=e;c[e>>2]=24;c[e+8>>2]=25;if((c[a+224>>2]|0)==0){c[e+84>>2]=0;c[e+68>>2]=0;c[e+88>>2]=0;c[e+72>>2]=0;c[e+92>>2]=0;c[e+76>>2]=0;c[e+96>>2]=0;c[e+80>>2]=0;i=b;return}f=a+36|0;g=Jc[c[c[d>>2]>>2]&15](a,1,c[f>>2]<<8)|0;c[a+160>>2]=g;if((c[f>>2]|0)>0){a=0;do{Gm(g+(a<<8)|0,-1,256)|0;a=a+1|0}while((a|0)<(c[f>>2]|0))}f=e+48|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;i=b;return}function Sg(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;b=i;d=c[a+468>>2]|0;e=a+412|0;f=c[e>>2]|0;g=(f|0)==0;if((c[a+224>>2]|0)==0){if((g?(c[a+420>>2]|0)==0:0)?(c[a+424>>2]|0)==0:0){h=c[a+416>>2]|0;if((c[a+220>>2]|0)!=0|(h|0)<64?(h|0)!=(c[a+436>>2]|0):0){j=46}}else{j=46}if((j|0)==46){h=c[a>>2]|0;c[h+20>>2]=125;Qc[c[h+4>>2]&31](a,-1)}h=a+436|0;c[d+4>>2]=(c[h>>2]|0)==63?20:21;k=a+340|0;if((c[k>>2]|0)>0){l=d+68|0;m=d+24|0;n=d+84|0;o=0;do{p=c[a+(o<<2)+344>>2]|0;q=c[p+20>>2]|0;Yg(a,1,q,l+(q<<2)|0);if((c[h>>2]|0)!=0){q=c[p+24>>2]|0;Yg(a,0,q,n+(q<<2)|0)}c[m+(o<<2)>>2]=0;o=o+1|0}while((o|0)<(c[k>>2]|0))}k=a+368|0;if((c[k>>2]|0)<=0){r=d+16|0;c[r>>2]=0;s=d+12|0;c[s>>2]=0;t=d+40|0;c[t>>2]=0;u=a+280|0;v=c[u>>2]|0;w=d+44|0;x=v;c[w>>2]=x;i=b;return}o=d+68|0;m=d+100|0;n=d+84|0;l=d+140|0;q=d+180|0;p=0;do{y=c[a+(c[a+(p<<2)+372>>2]<<2)+344>>2]|0;c[m+(p<<2)>>2]=c[o+(c[y+20>>2]<<2)>>2];c[l+(p<<2)>>2]=c[n+(c[y+24>>2]<<2)>>2];a:do{if((c[y+52>>2]|0)==0){c[q+(p<<2)>>2]=0}else{z=c[y+40>>2]|0;A=c[y+36>>2]|0;switch(c[h>>2]|0){case 0:{c[q+(p<<2)>>2]=1;break a;break};case 3:{B=z+ -1|0;C=A+ -1|0;c[q+(p<<2)>>2]=(c[2672+((B>>>0>1?1:B)<<3)+((C>>>0>1?1:C)<<2)>>2]|0)+1;break a;break};case 8:{C=z+ -1|0;B=A+ -1|0;c[q+(p<<2)>>2]=(c[2688+((C>>>0>2?2:C)*12|0)+((B>>>0>2?2:B)<<2)>>2]|0)+1;break a;break};case 15:{B=z+ -1|0;C=A+ -1|0;c[q+(p<<2)>>2]=(c[2728+((B>>>0>3?3:B)<<4)+((C>>>0>3?3:C)<<2)>>2]|0)+1;break a;break};case 24:{C=z+ -1|0;B=A+ -1|0;c[q+(p<<2)>>2]=(c[2792+((C>>>0>4?4:C)*20|0)+((B>>>0>4?4:B)<<2)>>2]|0)+1;break a;break};case 35:{B=z+ -1|0;C=A+ -1|0;c[q+(p<<2)>>2]=(c[2896+((B>>>0>5?5:B)*24|0)+((C>>>0>5?5:C)<<2)>>2]|0)+1;break a;break};case 48:{C=z+ -1|0;B=A+ -1|0;c[q+(p<<2)>>2]=(c[3040+((C>>>0>6?6:C)*28|0)+((B>>>0>6?6:B)<<2)>>2]|0)+1;break a;break};default:{B=z+ -1|0;z=A+ -1|0;c[q+(p<<2)>>2]=(c[3240+((B>>>0>7?7:B)<<5)+((z>>>0>7?7:z)<<2)>>2]|0)+1;break a}}}}while(0);p=p+1|0}while((p|0)<(c[k>>2]|0));r=d+16|0;c[r>>2]=0;s=d+12|0;c[s>>2]=0;t=d+40|0;c[t>>2]=0;u=a+280|0;v=c[u>>2]|0;w=d+44|0;x=v;c[w>>2]=x;i=b;return}k=a+416|0;p=c[k>>2]|0;if(g){if((p|0)==0){j=7}else{j=11}}else{if(((p|0)>=(f|0)?(p|0)<=(c[a+436>>2]|0):0)?(c[a+340>>2]|0)==1:0){j=7}else{j=11}}do{if((j|0)==7){p=c[a+420>>2]|0;if((p|0)!=0){f=p+ -1|0;if((f|0)==(c[a+424>>2]|0)){D=f}else{j=11;break}}else{D=c[a+424>>2]|0}if((D|0)>13){j=11}}}while(0);if((j|0)==11){j=c[a>>2]|0;c[j+20>>2]=17;c[j+24>>2]=c[e>>2];c[j+28>>2]=c[k>>2];c[j+32>>2]=c[a+420>>2];c[j+36>>2]=c[a+424>>2];Oc[c[j>>2]&63](a)}j=a+340|0;D=c[j>>2]|0;if((D|0)>0){f=a+160|0;p=a+420|0;g=a+424|0;q=0;while(1){h=c[(c[a+(q<<2)+344>>2]|0)+4>>2]|0;n=c[f>>2]|0;l=c[e>>2]|0;if((l|0)!=0){if((c[n+(h<<8)>>2]|0)<0){o=c[a>>2]|0;c[o+20>>2]=118;c[o+24>>2]=h;c[o+28>>2]=0;Qc[c[o+4>>2]&31](a,-1);E=c[e>>2]|0}else{E=l}}else{E=0}b:do{if((E|0)<=(c[k>>2]|0)){l=E;while(1){o=n+(h<<8)+(l<<2)|0;m=c[o>>2]|0;if((c[p>>2]|0)!=(((m|0)<0?0:m)|0)){m=c[a>>2]|0;c[m+20>>2]=118;c[m+24>>2]=h;c[m+28>>2]=l;Qc[c[m+4>>2]&31](a,-1)}c[o>>2]=c[g>>2];if((l|0)>=(c[k>>2]|0)){break b}l=l+1|0}}}while(0);h=q+1|0;n=c[j>>2]|0;if((h|0)<(n|0)){q=h}else{F=p;G=n;break}}}else{F=a+420|0;G=D}D=c[e>>2]|0;p=(D|0)==0;q=d+4|0;do{if((c[F>>2]|0)==0){if(p){c[q>>2]=16;break}else{c[q>>2]=17;break}}else{if(p){c[q>>2]=18;break}else{c[q>>2]=19;break}}}while(0);c:do{if((G|0)>0){q=d+48|0;p=d+20|0;k=p+4|0;g=d+64|0;E=D;f=0;while(1){n=c[a+(f<<2)+344>>2]|0;if((E|0)==0){if((c[F>>2]|0)==0){h=c[n+20>>2]|0;Yg(a,1,h,q+(h<<2)|0)}}else{h=c[n+24>>2]|0;n=q+(h<<2)|0;Yg(a,0,h,n);c[g>>2]=c[n>>2]}c[k+(f<<2)>>2]=0;n=f+1|0;if((n|0)>=(c[j>>2]|0)){H=p;break c}E=c[e>>2]|0;f=n}}else{H=d+20|0}}while(0);c[H>>2]=0;r=d+16|0;c[r>>2]=0;s=d+12|0;c[s>>2]=0;t=d+40|0;c[t>>2]=0;u=a+280|0;v=c[u>>2]|0;w=d+44|0;x=v;c[w>>2]=x;i=b;return}function Tg(a){a=a|0;var b=0,d=0;b=(c[a+468>>2]|0)+16|0;d=(c[a+464>>2]|0)+24|0;c[d>>2]=(c[d>>2]|0)+((c[b>>2]|0)/8|0);c[b>>2]=0;return}function Ug(a,e){a=a|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0;f=i;i=i+48|0;g=f+20|0;h=f;j=c[a+468>>2]|0;k=c[a+424>>2]|0;l=a+280|0;if((c[l>>2]|0)!=0?(m=j+44|0,(c[m>>2]|0)==0):0){n=j+16|0;o=c[a+464>>2]|0;p=o+24|0;c[p>>2]=(c[p>>2]|0)+((c[n>>2]|0)/8|0);c[n>>2]=0;if((Sc[c[o+8>>2]&31](a)|0)==0){q=0;i=f;return q|0}o=a+340|0;n=j+20|0;if((c[o>>2]|0)>0){p=n+4|0;r=0;do{c[p+(r<<2)>>2]=0;r=r+1|0}while((r|0)<(c[o>>2]|0))}c[n>>2]=0;c[m>>2]=c[l>>2];if((c[a+440>>2]|0)==0){c[j+40>>2]=0}}if((c[j+40>>2]|0)==0){c[g+16>>2]=a;l=a+24|0;m=c[l>>2]|0;n=c[m>>2]|0;c[g>>2]=n;o=c[m+4>>2]|0;r=g+4|0;c[r>>2]=o;p=j+12|0;s=c[p>>2]|0;t=j+16|0;u=c[t>>2]|0;v=j+20|0;c[h+0>>2]=c[v+0>>2];c[h+4>>2]=c[v+4>>2];c[h+8>>2]=c[v+8>>2];c[h+12>>2]=c[v+12>>2];c[h+16>>2]=c[v+16>>2];w=a+368|0;do{if((c[w>>2]|0)>0){x=j+48|0;y=g+8|0;z=g+12|0;A=u;B=0;C=s;while(1){D=c[e+(B<<2)>>2]|0;E=c[a+(B<<2)+372>>2]|0;F=c[x+(c[(c[a+(E<<2)+344>>2]|0)+20>>2]<<2)>>2]|0;if((A|0)<8){if(($g(g,C,A,0)|0)==0){q=0;G=28;break}H=c[y>>2]|0;I=c[z>>2]|0;if((I|0)<8){J=I;K=H;L=1;G=17}else{M=I;N=H;G=15}}else{M=A;N=C;G=15}if((G|0)==15){G=0;H=N>>M+ -8&255;I=c[F+(H<<2)+144>>2]|0;if((I|0)==0){J=M;K=N;L=9;G=17}else{O=M-I|0;P=N;Q=d[F+H+1168|0]|0}}if((G|0)==17){G=0;H=ah(g,K,J,F,L)|0;if((H|0)<0){q=0;G=28;break}O=c[z>>2]|0;P=c[y>>2]|0;Q=H}if((Q|0)==0){R=O;S=P;T=0}else{if((O|0)<(Q|0)){if(($g(g,P,O,Q)|0)==0){q=0;G=28;break}U=c[z>>2]|0;V=c[y>>2]|0}else{U=O;V=P}H=U-Q|0;F=c[3496+(Q<<2)>>2]|0;I=V>>H&F;R=H;S=V;T=I-((I|0)>(c[3496+(Q+ -1<<2)>>2]|0)?0:F)|0}F=h+(E<<2)+4|0;E=(c[F>>2]|0)+T|0;c[F>>2]=E;b[D>>1]=E<<k;E=B+1|0;if((E|0)<(c[w>>2]|0)){A=R;B=E;C=S}else{G=25;break}}if((G|0)==25){W=c[g>>2]|0;X=c[l>>2]|0;Y=c[r>>2]|0;Z=R;_=S;break}else if((G|0)==28){i=f;return q|0}}else{W=n;X=m;Y=o;Z=u;_=s}}while(0);c[X>>2]=W;c[(c[l>>2]|0)+4>>2]=Y;c[p>>2]=_;c[t>>2]=Z;c[v+0>>2]=c[h+0>>2];c[v+4>>2]=c[h+4>>2];c[v+8>>2]=c[h+8>>2];c[v+12>>2]=c[h+12>>2];c[v+16>>2]=c[h+16>>2]}h=j+44|0;c[h>>2]=(c[h>>2]|0)+ -1;q=1;i=f;return q|0}function Vg(a,e){a=a|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0;f=i;i=i+32|0;g=f;h=c[a+468>>2]|0;j=a+280|0;if((c[j>>2]|0)!=0?(k=h+44|0,(c[k>>2]|0)==0):0){l=h+16|0;m=c[a+464>>2]|0;n=m+24|0;c[n>>2]=(c[n>>2]|0)+((c[l>>2]|0)/8|0);c[l>>2]=0;if((Sc[c[m+8>>2]&31](a)|0)==0){o=0;i=f;return o|0}m=a+340|0;l=h+20|0;if((c[m>>2]|0)>0){n=l+4|0;p=0;do{c[n+(p<<2)>>2]=0;p=p+1|0}while((p|0)<(c[m>>2]|0))}c[l>>2]=0;c[k>>2]=c[j>>2];if((c[a+440>>2]|0)==0){c[h+40>>2]=0}}if((c[h+40>>2]|0)==0){j=c[a+416>>2]|0;k=c[a+424>>2]|0;l=c[a+432>>2]|0;m=h+20|0;p=c[m>>2]|0;if((p|0)==0){c[g+16>>2]=a;n=a+24|0;q=c[n>>2]|0;c[g>>2]=c[q>>2];r=g+4|0;c[r>>2]=c[q+4>>2];q=h+12|0;s=c[q>>2]|0;t=h+16|0;u=c[t>>2]|0;v=c[e>>2]|0;e=c[h+64>>2]|0;w=c[a+412>>2]|0;a:do{if((w|0)<=(j|0)){a=g+8|0;x=g+12|0;y=u;z=s;A=w;while(1){if((y|0)<8){if(($g(g,z,y,0)|0)==0){o=0;B=36;break}C=c[a>>2]|0;D=c[x>>2]|0;if((D|0)<8){E=D;F=C;G=1;B=19}else{H=D;I=C;B=17}}else{H=y;I=z;B=17}if((B|0)==17){B=0;C=I>>H+ -8&255;D=c[e+(C<<2)+144>>2]|0;if((D|0)==0){E=H;F=I;G=9;B=19}else{J=H-D|0;K=I;L=d[e+C+1168|0]|0}}if((B|0)==19){B=0;C=ah(g,F,E,e,G)|0;if((C|0)<0){o=0;B=36;break}J=c[x>>2]|0;K=c[a>>2]|0;L=C}M=L>>4;C=L&15;if((C|0)==0){if((M|0)==0){N=0;O=J;P=K;break a}else if((M|0)!=15){B=27;break}Q=J;R=K;S=A+15|0}else{D=M+A|0;if((J|0)<(C|0)){if(($g(g,K,J,C)|0)==0){o=0;B=36;break}T=c[x>>2]|0;U=c[a>>2]|0}else{T=J;U=K}V=T-C|0;W=c[3496+(C<<2)>>2]|0;X=U>>V&W;b[v+(c[l+(D<<2)>>2]<<1)>>1]=X-((X|0)>(c[3496+(C+ -1<<2)>>2]|0)?0:W)<<k;Q=V;R=U;S=D}if((S|0)<(j|0)){y=Q;z=R;A=S+1|0}else{N=0;O=Q;P=R;break a}}if((B|0)==27){A=1<<M;do{if((J|0)<(M|0)){if(($g(g,K,J,M)|0)==0){o=0;i=f;return o|0}else{Y=c[x>>2]|0;Z=c[a>>2]|0;break}}else{Y=J;Z=K}}while(0);a=Y-M|0;N=A+ -1+(Z>>a&c[3496+(M<<2)>>2])|0;O=a;P=Z;break}else if((B|0)==36){i=f;return o|0}}else{N=0;O=u;P=s}}while(0);c[c[n>>2]>>2]=c[g>>2];c[(c[n>>2]|0)+4>>2]=c[r>>2];c[q>>2]=P;c[t>>2]=O;_=N}else{_=p+ -1|0}c[m>>2]=_}_=h+44|0;c[_>>2]=(c[_>>2]|0)+ -1;o=1;i=f;return o|0}function Wg(a,d){a=a|0;d=d|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0;f=i;i=i+32|0;g=f;h=c[a+468>>2]|0;j=a+280|0;if((c[j>>2]|0)!=0?(k=h+44|0,(c[k>>2]|0)==0):0){l=h+16|0;m=c[a+464>>2]|0;n=m+24|0;c[n>>2]=(c[n>>2]|0)+((c[l>>2]|0)/8|0);c[l>>2]=0;if((Sc[c[m+8>>2]&31](a)|0)==0){o=0;i=f;return o|0}m=a+340|0;l=h+20|0;if((c[m>>2]|0)>0){n=l+4|0;p=0;do{c[n+(p<<2)>>2]=0;p=p+1|0}while((p|0)<(c[m>>2]|0))}c[l>>2]=0;c[k>>2]=c[j>>2];if((c[a+440>>2]|0)==0){c[h+40>>2]=0}}c[g+16>>2]=a;j=a+24|0;k=c[j>>2]|0;l=c[k>>2]|0;c[g>>2]=l;m=c[k+4>>2]|0;p=g+4|0;c[p>>2]=m;n=h+12|0;q=c[n>>2]|0;r=h+16|0;s=c[r>>2]|0;t=1<<c[a+424>>2];u=a+368|0;do{if((c[u>>2]|0)>0){a=g+8|0;v=g+12|0;w=s;x=0;y=q;while(1){if((w|0)<1){if(($g(g,y,w,1)|0)==0){o=0;z=19;break}A=c[v>>2]|0;B=c[a>>2]|0}else{A=w;B=y}C=A+ -1|0;if((1<<C&B|0)!=0){D=c[d+(x<<2)>>2]|0;b[D>>1]=e[D>>1]|0|t}D=x+1|0;if((D|0)<(c[u>>2]|0)){w=C;x=D;y=B}else{z=17;break}}if((z|0)==17){E=c[g>>2]|0;F=c[j>>2]|0;G=c[p>>2]|0;H=C;I=B;break}else if((z|0)==19){i=f;return o|0}}else{E=l;F=k;G=m;H=s;I=q}}while(0);c[F>>2]=E;c[(c[j>>2]|0)+4>>2]=G;c[n>>2]=I;c[r>>2]=H;H=h+44|0;c[H>>2]=(c[H>>2]|0)+ -1;o=1;i=f;return o|0}function Xg(a,e){a=a|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0;f=i;i=i+288|0;g=f+256|0;h=f;j=c[a+468>>2]|0;k=a+280|0;if((c[k>>2]|0)!=0?(l=j+44|0,(c[l>>2]|0)==0):0){m=j+16|0;n=c[a+464>>2]|0;o=n+24|0;c[o>>2]=(c[o>>2]|0)+((c[m>>2]|0)/8|0);c[m>>2]=0;if((Sc[c[n+8>>2]&31](a)|0)==0){p=0;i=f;return p|0}n=a+340|0;m=j+20|0;if((c[n>>2]|0)>0){o=m+4|0;q=0;do{c[o+(q<<2)>>2]=0;q=q+1|0}while((q|0)<(c[n>>2]|0))}c[m>>2]=0;c[l>>2]=c[k>>2];if((c[a+440>>2]|0)==0){c[j+40>>2]=0}}do{if((c[j+40>>2]|0)==0){k=c[a+416>>2]|0;l=c[a+424>>2]|0;m=1<<l;n=-1<<l;l=c[a+432>>2]|0;c[g+16>>2]=a;q=a+24|0;o=c[q>>2]|0;c[g>>2]=c[o>>2];r=g+4|0;c[r>>2]=c[o+4>>2];o=j+12|0;s=c[o>>2]|0;t=j+16|0;u=c[t>>2]|0;v=j+20|0;w=c[v>>2]|0;x=c[e>>2]|0;y=c[j+64>>2]|0;z=c[a+412>>2]|0;A=g+8|0;B=g+12|0;a:do{if((w|0)==0){C=u;D=s;E=z;F=0;while(1){if((C|0)<8){if(($g(g,D,C,0)|0)==0){G=F;break a}H=c[A>>2]|0;I=c[B>>2]|0;if((I|0)<8){J=I;K=H;L=1;M=18}else{N=I;O=H;M=16}}else{N=C;O=D;M=16}if((M|0)==16){M=0;H=O>>N+ -8&255;I=c[y+(H<<2)+144>>2]|0;if((I|0)==0){J=N;K=O;L=9;M=18}else{P=N-I|0;Q=O;R=d[y+H+1168|0]|0}}if((M|0)==18){M=0;H=ah(g,K,J,y,L)|0;if((H|0)<0){G=F;break a}P=c[B>>2]|0;Q=c[A>>2]|0;R=H}S=R>>4;H=R&15;if((H|0)==0){if((S|0)==15){T=P;U=Q;V=15;W=0}else{break}}else if((H|0)==1){M=22}else{H=c[a>>2]|0;c[H+20>>2]=121;Qc[c[H+4>>2]&31](a,-1);M=22}if((M|0)==22){M=0;if((P|0)<1){if(($g(g,Q,P,1)|0)==0){G=F;break a}X=c[B>>2]|0;Y=c[A>>2]|0}else{X=P;Y=Q}H=X+ -1|0;T=H;U=Y;V=S;W=(1<<H&Y|0)==0?n:m}H=T;I=U;Z=E;_=V;b:while(1){$=x+(c[l+(Z<<2)>>2]<<1)|0;do{if((b[$>>1]|0)==0){if((_|0)<1){aa=H;ba=I;ca=Z;break b}else{da=H;ea=I;fa=_+ -1|0}}else{if((H|0)<1){if(($g(g,I,H,1)|0)==0){G=F;break a}ga=c[B>>2]|0;ha=c[A>>2]|0}else{ga=H;ha=I}ia=ga+ -1|0;if((1<<ia&ha|0)!=0?(ja=b[$>>1]|0,ka=ja<<16>>16,(ka&m|0)==0):0){if(ja<<16>>16>-1){b[$>>1]=ka+m;da=ia;ea=ha;fa=_;break}else{b[$>>1]=ka+n;da=ia;ea=ha;fa=_;break}}else{da=ia;ea=ha;fa=_}}}while(0);$=Z+1|0;if((Z|0)<(k|0)){H=da;I=ea;Z=$;_=fa}else{aa=da;ba=ea;ca=$;break}}if((W|0)==0){la=F}else{_=c[l+(ca<<2)>>2]|0;b[x+(_<<1)>>1]=W;c[h+(F<<2)>>2]=_;la=F+1|0}if((ca|0)<(k|0)){C=aa;D=ba;E=ca+1|0;F=la}else{ma=0;na=aa;oa=ba;M=59;break a}}D=1<<S;if((S|0)!=0){if((P|0)<(S|0)){if(($g(g,Q,P,S)|0)==0){G=F;break}pa=c[B>>2]|0;qa=c[A>>2]|0}else{pa=P;qa=Q}C=pa-S|0;_=(qa>>C&c[3496+(S<<2)>>2])+D|0;if((_|0)==0){ma=0;na=C;oa=qa;M=59}else{ra=_;sa=C;ta=qa;ua=E;va=F;M=47}}else{ra=D;sa=P;ta=Q;ua=E;va=F;M=47}}else{ra=w;sa=u;ta=s;ua=z;va=0;M=47}}while(0);c:do{if((M|0)==47){z=sa;s=ta;u=ua;while(1){w=x+(c[l+(u<<2)>>2]<<1)|0;do{if((b[w>>1]|0)!=0){if((z|0)<1){if(($g(g,s,z,1)|0)==0){G=va;break c}wa=c[B>>2]|0;xa=c[A>>2]|0}else{wa=z;xa=s}y=wa+ -1|0;if((1<<y&xa|0)!=0?(D=b[w>>1]|0,C=D<<16>>16,(C&m|0)==0):0){if(D<<16>>16>-1){b[w>>1]=C+m;ya=y;za=xa;break}else{b[w>>1]=C+n;ya=y;za=xa;break}}else{ya=y;za=xa}}else{ya=z;za=s}}while(0);if((u|0)<(k|0)){z=ya;s=za;u=u+1|0}else{break}}ma=ra+ -1|0;na=ya;oa=za;M=59}}while(0);if((M|0)==59){c[c[q>>2]>>2]=c[g>>2];c[(c[q>>2]|0)+4>>2]=c[r>>2];c[o>>2]=oa;c[t>>2]=na;c[v>>2]=ma;break}if((G|0)==0){p=0;i=f;return p|0}else{Aa=G}while(1){k=Aa+ -1|0;b[x+(c[h+(k<<2)>>2]<<1)>>1]=0;if((k|0)==0){p=0;break}else{Aa=k}}i=f;return p|0}}while(0);Aa=j+44|0;c[Aa>>2]=(c[Aa>>2]|0)+ -1;p=1;i=f;return p|0}function Yg(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0;h=i;i=i+1296|0;j=h+1028|0;k=h;if(f>>>0>3){l=c[b>>2]|0;c[l+20>>2]=52;c[l+24>>2]=f;Oc[c[l>>2]&63](b)}l=(e|0)!=0;if(l){m=b+(f<<2)+180|0}else{m=b+(f<<2)+196|0}e=c[m>>2]|0;if((e|0)==0){m=c[b>>2]|0;c[m+20>>2]=52;c[m+24>>2]=f;Oc[c[m>>2]&63](b)}m=c[g>>2]|0;if((m|0)==0){f=Jc[c[c[b+4>>2]>>2]&15](b,1,1424)|0;c[g>>2]=f;n=b;o=f}else{n=b;o=m}c[o+140>>2]=e;m=1;f=0;while(1){g=a[e+m|0]|0;p=g&255;q=p+f|0;if((q|0)>256){r=c[b>>2]|0;c[r+20>>2]=9;Oc[c[r>>2]&63](n)}if(g<<24>>24==0){s=f}else{Gm(j+f|0,m&255|0,p|0)|0;s=q}m=m+1|0;if((m|0)==17){break}else{f=s}}a[j+s|0]=0;f=a[j]|0;if(f<<24>>24==0){t=1;u=0}else{m=f;q=0;p=0;g=f<<24>>24;while(1){if((m<<24>>24|0)==(g|0)){f=q;r=p;while(1){v=r+1|0;c[k+(r<<2)>>2]=f;w=f+1|0;x=a[j+v|0]|0;if((x<<24>>24|0)==(g|0)){f=w;r=v}else{y=x;z=w;A=v;break}}}else{y=m;z=q;A=p}if((z|0)>=(1<<g|0)){r=c[b>>2]|0;c[r+20>>2]=9;Oc[c[r>>2]&63](n)}if(y<<24>>24==0){t=1;u=0;break}else{m=y;q=z<<1;p=A;g=g+1|0}}}while(1){g=e+t|0;if((a[g]|0)==0){c[o+(t<<2)>>2]=-1;B=u}else{c[o+(t<<2)+72>>2]=u-(c[k+(u<<2)>>2]|0);A=(d[g]|0)+u|0;c[o+(t<<2)>>2]=c[k+(A+ -1<<2)>>2];B=A}t=t+1|0;if((t|0)==17){break}else{u=B}}c[o+68>>2]=1048575;Gm(o+144|0,0,1024)|0;B=1;u=0;while(1){t=e+B|0;A=a[t]|0;a:do{if(A<<24>>24==0){C=u}else{g=8-B|0;p=1<<g;if((p|0)>0){D=1;E=u}else{z=1;q=u;while(1){y=q+1|0;if((z|0)<(A&255|0)){z=z+1|0;q=y}else{C=y;break a}}}while(1){q=e+E+17|0;z=p;y=c[k+(E<<2)>>2]<<g;while(1){c[o+(y<<2)+144>>2]=B;a[o+y+1168|0]=a[q]|0;z=z+ -1|0;if((z|0)<=0){break}else{y=y+1|0}}y=E+1|0;if((D|0)<(d[t]|0)){D=D+1|0;E=y}else{C=y;break}}}}while(0);B=B+1|0;if((B|0)==9){break}else{u=C}}if(l&(s|0)>0){F=0}else{i=h;return}do{if((d[e+F+17|0]|0)>15){l=c[b>>2]|0;c[l+20>>2]=9;Oc[c[l>>2]&63](n)}F=F+1|0}while((F|0)!=(s|0));i=h;return}function Zg(a,e){a=a|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0;f=i;i=i+48|0;g=f+20|0;h=f;j=c[a+468>>2]|0;k=a+280|0;if((c[k>>2]|0)!=0?(l=j+44|0,(c[l>>2]|0)==0):0){m=j+16|0;n=c[a+464>>2]|0;o=n+24|0;c[o>>2]=(c[o>>2]|0)+((c[m>>2]|0)/8|0);c[m>>2]=0;if((Sc[c[n+8>>2]&31](a)|0)==0){p=0;i=f;return p|0}n=a+340|0;m=j+20|0;if((c[n>>2]|0)>0){o=m+4|0;q=0;do{c[o+(q<<2)>>2]=0;q=q+1|0}while((q|0)<(c[n>>2]|0))}c[m>>2]=0;c[l>>2]=c[k>>2];if((c[a+440>>2]|0)==0){c[j+40>>2]=0}}if((c[j+40>>2]|0)==0){k=c[a+432>>2]|0;l=c[a+436>>2]|0;c[g+16>>2]=a;m=a+24|0;n=c[m>>2]|0;q=c[n>>2]|0;c[g>>2]=q;o=c[n+4>>2]|0;r=g+4|0;c[r>>2]=o;s=j+12|0;t=c[s>>2]|0;u=j+16|0;v=c[u>>2]|0;w=j+20|0;c[h+0>>2]=c[w+0>>2];c[h+4>>2]=c[w+4>>2];c[h+8>>2]=c[w+8>>2];c[h+12>>2]=c[w+12>>2];c[h+16>>2]=c[w+16>>2];x=a+368|0;do{if((c[x>>2]|0)>0){y=j+100|0;z=g+8|0;A=g+12|0;B=j+140|0;C=j+180|0;D=v;E=0;F=t;a:while(1){G=c[e+(E<<2)>>2]|0;H=c[y+(E<<2)>>2]|0;if((D|0)<8){if(($g(g,F,D,0)|0)==0){p=0;I=65;break}J=c[z>>2]|0;K=c[A>>2]|0;if((K|0)<8){L=K;M=J;N=1;I=17}else{O=K;P=J;I=15}}else{O=D;P=F;I=15}if((I|0)==15){I=0;J=P>>O+ -8&255;K=c[H+(J<<2)+144>>2]|0;if((K|0)==0){L=O;M=P;N=9;I=17}else{Q=O-K|0;R=P;S=d[H+J+1168|0]|0}}if((I|0)==17){I=0;J=ah(g,M,L,H,N)|0;if((J|0)<0){p=0;I=65;break}Q=c[A>>2]|0;R=c[z>>2]|0;S=J}J=c[B+(E<<2)>>2]|0;H=c[C+(E<<2)>>2]|0;K=(S|0)!=0;b:do{if((H|0)==0){if(K){if((Q|0)<(S|0)){if(($g(g,R,Q,S)|0)==0){p=0;I=65;break a}T=c[A>>2]|0;U=c[z>>2]|0}else{T=Q;U=R}V=T-S|0;W=U;X=1;I=46}else{V=Q;W=R;X=1;I=46}}else{if(K){if((Q|0)<(S|0)){if(($g(g,R,Q,S)|0)==0){p=0;I=65;break a}Y=c[A>>2]|0;Z=c[z>>2]|0}else{Y=Q;Z=R}_=Y-S|0;$=c[3496+(S<<2)>>2]|0;aa=Z>>_&$;ba=_;ca=Z;da=aa-((aa|0)>(c[3496+(S+ -1<<2)>>2]|0)?0:$)|0}else{ba=Q;ca=R;da=0}$=h+(c[a+(E<<2)+372>>2]<<2)+4|0;aa=(c[$>>2]|0)+da|0;c[$>>2]=aa;b[G>>1]=aa;if((H|0)>1){aa=ba;$=ca;_=1;while(1){if((aa|0)<8){if(($g(g,$,aa,0)|0)==0){p=0;I=65;break a}ea=c[z>>2]|0;fa=c[A>>2]|0;if((fa|0)<8){ga=fa;ha=ea;ia=1;I=31}else{ja=fa;ka=ea;I=29}}else{ja=aa;ka=$;I=29}if((I|0)==29){I=0;ea=ka>>ja+ -8&255;fa=c[J+(ea<<2)+144>>2]|0;if((fa|0)==0){ga=ja;ha=ka;ia=9;I=31}else{la=ja-fa|0;ma=ka;na=d[J+ea+1168|0]|0}}if((I|0)==31){I=0;ea=ah(g,ha,ga,J,ia)|0;if((ea|0)<0){p=0;I=65;break a}la=c[A>>2]|0;ma=c[z>>2]|0;na=ea}ea=na>>4;fa=na&15;if((fa|0)==0){if((ea|0)!=15){oa=la;pa=ma;break b}qa=la;ra=ma;sa=_+15|0}else{ta=ea+_|0;if((la|0)<(fa|0)){if(($g(g,ma,la,fa)|0)==0){p=0;I=65;break a}ua=c[A>>2]|0;va=c[z>>2]|0}else{ua=la;va=ma}ea=ua-fa|0;wa=c[3496+(fa<<2)>>2]|0;xa=va>>ea&wa;b[G+(c[k+(ta<<2)>>2]<<1)>>1]=xa-((xa|0)>(c[3496+(fa+ -1<<2)>>2]|0)?0:wa);qa=ea;ra=va;sa=ta}ta=sa+1|0;if((ta|0)<(H|0)){aa=qa;$=ra;_=ta}else{V=qa;W=ra;X=ta;I=46;break}}}else{V=ba;W=ca;X=1;I=46}}}while(0);c:do{if((I|0)==46){I=0;if((X|0)>(l|0)){oa=V;pa=W}else{H=V;G=W;K=X;while(1){if((H|0)<8){if(($g(g,G,H,0)|0)==0){p=0;I=65;break a}_=c[z>>2]|0;$=c[A>>2]|0;if(($|0)<8){ya=$;za=_;Aa=1;I=52}else{Ba=$;Ca=_;I=50}}else{Ba=H;Ca=G;I=50}if((I|0)==50){I=0;_=Ca>>Ba+ -8&255;$=c[J+(_<<2)+144>>2]|0;if(($|0)==0){ya=Ba;za=Ca;Aa=9;I=52}else{Da=Ba-$|0;Ea=Ca;Fa=d[J+_+1168|0]|0}}if((I|0)==52){I=0;_=ah(g,za,ya,J,Aa)|0;if((_|0)<0){p=0;I=65;break a}Da=c[A>>2]|0;Ea=c[z>>2]|0;Fa=_}_=Fa>>4;$=Fa&15;if(($|0)==0){if((_|0)==15){Ga=15;Ha=Da;Ia=Ea}else{oa=Da;pa=Ea;break c}}else{if((Da|0)<($|0)){if(($g(g,Ea,Da,$)|0)==0){p=0;I=65;break a}Ja=c[A>>2]|0;Ka=c[z>>2]|0}else{Ja=Da;Ka=Ea}Ga=_;Ha=Ja-$|0;Ia=Ka}$=K+1+Ga|0;if(($|0)>(l|0)){oa=Ha;pa=Ia;break}else{H=Ha;G=Ia;K=$}}}}}while(0);J=E+1|0;if((J|0)<(c[x>>2]|0)){D=oa;E=J;F=pa}else{I=62;break}}if((I|0)==62){La=c[g>>2]|0;Ma=c[m>>2]|0;Na=c[r>>2]|0;Oa=oa;Pa=pa;break}else if((I|0)==65){i=f;return p|0}}else{La=q;Ma=n;Na=o;Oa=v;Pa=t}}while(0);c[Ma>>2]=La;c[(c[m>>2]|0)+4>>2]=Na;c[s>>2]=Pa;c[u>>2]=Oa;c[w+0>>2]=c[h+0>>2];c[w+4>>2]=c[h+4>>2];c[w+8>>2]=c[h+8>>2];c[w+12>>2]=c[h+12>>2];c[w+16>>2]=c[h+16>>2]}h=j+44|0;c[h>>2]=(c[h>>2]|0)+ -1;p=1;i=f;return p|0}function _g(a,e){a=a|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0;f=i;i=i+48|0;g=f+20|0;h=f;j=c[a+468>>2]|0;k=a+280|0;if((c[k>>2]|0)!=0?(l=j+44|0,(c[l>>2]|0)==0):0){m=j+16|0;n=c[a+464>>2]|0;o=n+24|0;c[o>>2]=(c[o>>2]|0)+((c[m>>2]|0)/8|0);c[m>>2]=0;if((Sc[c[n+8>>2]&31](a)|0)==0){p=0;i=f;return p|0}n=a+340|0;m=j+20|0;if((c[n>>2]|0)>0){o=m+4|0;q=0;do{c[o+(q<<2)>>2]=0;q=q+1|0}while((q|0)<(c[n>>2]|0))}c[m>>2]=0;c[l>>2]=c[k>>2];if((c[a+440>>2]|0)==0){c[j+40>>2]=0}}if((c[j+40>>2]|0)==0){c[g+16>>2]=a;k=a+24|0;l=c[k>>2]|0;m=c[l>>2]|0;c[g>>2]=m;n=c[l+4>>2]|0;q=g+4|0;c[q>>2]=n;o=j+12|0;r=c[o>>2]|0;s=j+16|0;t=c[s>>2]|0;u=j+20|0;c[h+0>>2]=c[u+0>>2];c[h+4>>2]=c[u+4>>2];c[h+8>>2]=c[u+8>>2];c[h+12>>2]=c[u+12>>2];c[h+16>>2]=c[u+16>>2];v=a+368|0;do{if((c[v>>2]|0)>0){w=j+100|0;x=g+8|0;y=g+12|0;z=j+140|0;A=j+180|0;B=t;C=0;D=r;a:while(1){E=c[e+(C<<2)>>2]|0;F=c[w+(C<<2)>>2]|0;if((B|0)<8){if(($g(g,D,B,0)|0)==0){p=0;G=65;break}H=c[x>>2]|0;I=c[y>>2]|0;if((I|0)<8){J=I;K=H;L=1;G=17}else{M=I;N=H;G=15}}else{M=B;N=D;G=15}if((G|0)==15){G=0;H=N>>M+ -8&255;I=c[F+(H<<2)+144>>2]|0;if((I|0)==0){J=M;K=N;L=9;G=17}else{O=M-I|0;P=N;Q=d[F+H+1168|0]|0}}if((G|0)==17){G=0;H=ah(g,K,J,F,L)|0;if((H|0)<0){p=0;G=65;break}O=c[y>>2]|0;P=c[x>>2]|0;Q=H}H=c[z+(C<<2)>>2]|0;F=c[A+(C<<2)>>2]|0;I=(Q|0)!=0;b:do{if((F|0)==0){if(I){if((O|0)<(Q|0)){if(($g(g,P,O,Q)|0)==0){p=0;G=65;break a}R=c[y>>2]|0;S=c[x>>2]|0}else{R=O;S=P}T=R-Q|0;U=S;V=1;G=47}else{T=O;U=P;V=1;G=47}}else{if(I){if((O|0)<(Q|0)){if(($g(g,P,O,Q)|0)==0){p=0;G=65;break a}W=c[y>>2]|0;X=c[x>>2]|0}else{W=O;X=P}Y=W-Q|0;Z=c[3496+(Q<<2)>>2]|0;_=X>>Y&Z;$=Y;aa=X;ba=_-((_|0)>(c[3496+(Q+ -1<<2)>>2]|0)?0:Z)|0}else{$=O;aa=P;ba=0}Z=h+(c[a+(C<<2)+372>>2]<<2)+4|0;_=(c[Z>>2]|0)+ba|0;c[Z>>2]=_;b[E>>1]=_;if((F|0)>1){_=$;Z=aa;Y=1;while(1){if((_|0)<8){if(($g(g,Z,_,0)|0)==0){p=0;G=65;break a}ca=c[x>>2]|0;da=c[y>>2]|0;if((da|0)<8){ea=da;fa=ca;ga=1;G=31}else{ha=da;ia=ca;G=29}}else{ha=_;ia=Z;G=29}if((G|0)==29){G=0;ca=ia>>ha+ -8&255;da=c[H+(ca<<2)+144>>2]|0;if((da|0)==0){ea=ha;fa=ia;ga=9;G=31}else{ja=ha-da|0;ka=ia;la=d[H+ca+1168|0]|0}}if((G|0)==31){G=0;ca=ah(g,fa,ea,H,ga)|0;if((ca|0)<0){p=0;G=65;break a}ja=c[y>>2]|0;ka=c[x>>2]|0;la=ca}ca=la>>4;da=la&15;if((da|0)==0){if((ca|0)!=15){ma=ja;na=ka;break b}oa=ja;pa=ka;qa=Y+15|0}else{ra=ca+Y|0;if((ja|0)<(da|0)){if(($g(g,ka,ja,da)|0)==0){p=0;G=65;break a}sa=c[y>>2]|0;ta=c[x>>2]|0}else{sa=ja;ta=ka}ca=sa-da|0;ua=c[3496+(da<<2)>>2]|0;va=ta>>ca&ua;b[E+(c[9472+(ra<<2)>>2]<<1)>>1]=va-((va|0)>(c[3496+(da+ -1<<2)>>2]|0)?0:ua);oa=ca;pa=ta;qa=ra}Y=qa+1|0;if((Y|0)>=(F|0)){break}else{_=oa;Z=pa}}if((Y|0)<64){T=oa;U=pa;V=Y;G=47}else{ma=oa;na=pa}}else{T=$;U=aa;V=1;G=47}}}while(0);c:do{if((G|0)==47){while(1){G=0;if((T|0)<8){if(($g(g,U,T,0)|0)==0){p=0;G=65;break a}F=c[x>>2]|0;E=c[y>>2]|0;if((E|0)<8){wa=E;xa=F;ya=1;G=52}else{za=E;Aa=F;G=50}}else{za=T;Aa=U;G=50}if((G|0)==50){G=0;F=Aa>>za+ -8&255;E=c[H+(F<<2)+144>>2]|0;if((E|0)==0){wa=za;xa=Aa;ya=9;G=52}else{Ba=za-E|0;Ca=Aa;Da=d[H+F+1168|0]|0}}if((G|0)==52){G=0;F=ah(g,xa,wa,H,ya)|0;if((F|0)<0){p=0;G=65;break a}Ba=c[y>>2]|0;Ca=c[x>>2]|0;Da=F}F=Da>>4;E=Da&15;if((E|0)==0){if((F|0)==15){Ea=15;Fa=Ba;Ga=Ca}else{ma=Ba;na=Ca;break c}}else{if((Ba|0)<(E|0)){if(($g(g,Ca,Ba,E)|0)==0){p=0;G=65;break a}Ha=c[y>>2]|0;Ia=c[x>>2]|0}else{Ha=Ba;Ia=Ca}Ea=F;Fa=Ha-E|0;Ga=Ia}E=V+1+Ea|0;if((E|0)<64){T=Fa;U=Ga;V=E;G=47}else{ma=Fa;na=Ga;break}}}}while(0);H=C+1|0;if((H|0)<(c[v>>2]|0)){B=ma;C=H;D=na}else{G=62;break}}if((G|0)==62){Ja=c[g>>2]|0;Ka=c[k>>2]|0;La=c[q>>2]|0;Ma=ma;Na=na;break}else if((G|0)==65){i=f;return p|0}}else{Ja=m;Ka=l;La=n;Ma=t;Na=r}}while(0);c[Ka>>2]=Ja;c[(c[k>>2]|0)+4>>2]=La;c[o>>2]=Na;c[s>>2]=Ma;c[u+0>>2]=c[h+0>>2];c[u+4>>2]=c[h+4>>2];c[u+8>>2]=c[h+8>>2];c[u+12>>2]=c[h+12>>2];c[u+16>>2]=c[h+16>>2]}h=j+44|0;c[h>>2]=(c[h>>2]|0)+ -1;p=1;i=f;return p|0}function $g(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0;g=i;h=c[b>>2]|0;j=b+4|0;k=c[j>>2]|0;l=c[b+16>>2]|0;m=l+440|0;a:do{if((c[m>>2]|0)==0){if((e|0)<25){n=l+24|0;o=d;p=e;q=k;r=h;b:while(1){if((q|0)==0){if((Sc[c[(c[n>>2]|0)+12>>2]&31](l)|0)==0){s=0;t=19;break}u=c[n>>2]|0;v=c[u+4>>2]|0;w=c[u>>2]|0}else{v=q;w=r}u=v+ -1|0;x=w+1|0;y=a[w]|0;z=y&255;if(y<<24>>24==-1){y=u;A=x;while(1){if((y|0)==0){if((Sc[c[(c[n>>2]|0)+12>>2]&31](l)|0)==0){s=0;t=19;break b}B=c[n>>2]|0;C=c[B+4>>2]|0;D=c[B>>2]|0}else{C=y;D=A}E=C+ -1|0;F=D+1|0;G=a[D]|0;if(G<<24>>24==-1){y=E;A=F}else if(G<<24>>24==0){H=E;I=255;J=F;break}else{t=12;break b}}}else{H=u;I=z;J=x}A=I|o<<8;y=p+8|0;if((y|0)<25){o=A;p=y;q=H;r=J}else{K=A;L=y;M=H;N=J;break a}}if((t|0)==12){c[m>>2]=G&255;O=o;P=p;Q=E;R=F;t=14;break}else if((t|0)==19){i=g;return s|0}}else{K=d;L=e;M=k;N=h}}else{O=d;P=e;Q=k;R=h;t=14}}while(0);if((t|0)==14){if((P|0)<(f|0)){f=l+468|0;if((c[(c[f>>2]|0)+40>>2]|0)==0){t=c[l>>2]|0;c[t+20>>2]=120;Qc[c[t+4>>2]&31](l,-1);c[(c[f>>2]|0)+40>>2]=1}K=O<<25-P;L=25;M=Q;N=R}else{K=O;L=P;M=Q;N=R}}c[b>>2]=N;c[j>>2]=M;c[b+8>>2]=K;c[b+12>>2]=L;s=1;i=g;return s|0}function ah(a,b,e,f,g){a=a|0;b=b|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;h=i;do{if((e|0)<(g|0)){if(($g(a,b,e,g)|0)==0){j=-1;i=h;return j|0}else{k=c[a+8>>2]|0;l=c[a+12>>2]|0;break}}else{k=b;l=e}}while(0);e=l-g|0;l=k>>e&c[3496+(g<<2)>>2];b=a+8|0;m=a+12|0;a:do{if((l|0)>(c[f+(g<<2)>>2]|0)){n=k;o=e;p=l;q=g;while(1){r=p<<1;if((o|0)<1){if(($g(a,n,o,1)|0)==0){j=-1;break}s=c[b>>2]|0;t=c[m>>2]|0}else{s=n;t=o}u=t+ -1|0;v=s>>>u&1|r;r=q+1|0;if((v|0)>(c[f+(r<<2)>>2]|0)){n=s;o=u;p=v;q=r}else{w=s;x=u;y=v;z=r;break a}}i=h;return j|0}else{w=k;x=e;y=l;z=g}}while(0);c[b>>2]=w;c[m>>2]=x;if((z|0)>16){x=c[a+16>>2]|0;a=c[x>>2]|0;c[a+20>>2]=121;Qc[c[a+4>>2]&31](x,-1);j=0;i=h;return j|0}else{j=d[(c[f+140>>2]|0)+((c[f+(z<<2)+72>>2]|0)+y)+17|0]|0;i=h;return j|0}return 0}function bh(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0;b=i;d=a+428|0;e=c[d>>2]|0;f=aa(e,c[a+48>>2]|0)|0;g=c[a+52>>2]|0;do{if(f>>>0>g>>>0){if(!(f>>>0>g<<1>>>0)){c[a+112>>2]=$i(c[a+28>>2]<<1,e)|0;c[a+116>>2]=$i(c[a+32>>2]<<1,c[d>>2]|0)|0;c[a+324>>2]=2;c[a+328>>2]=2;h=2;break}if(!(f>>>0>(g*3|0)>>>0)){c[a+112>>2]=$i((c[a+28>>2]|0)*3|0,e)|0;c[a+116>>2]=$i((c[a+32>>2]|0)*3|0,c[d>>2]|0)|0;c[a+324>>2]=3;c[a+328>>2]=3;h=3;break}if(!(f>>>0>g<<2>>>0)){c[a+112>>2]=$i(c[a+28>>2]<<2,e)|0;c[a+116>>2]=$i(c[a+32>>2]<<2,c[d>>2]|0)|0;c[a+324>>2]=4;c[a+328>>2]=4;h=4;break}if(!(f>>>0>(g*5|0)>>>0)){c[a+112>>2]=$i((c[a+28>>2]|0)*5|0,e)|0;c[a+116>>2]=$i((c[a+32>>2]|0)*5|0,c[d>>2]|0)|0;c[a+324>>2]=5;c[a+328>>2]=5;h=5;break}if(!(f>>>0>(g*6|0)>>>0)){c[a+112>>2]=$i((c[a+28>>2]|0)*6|0,e)|0;c[a+116>>2]=$i((c[a+32>>2]|0)*6|0,c[d>>2]|0)|0;c[a+324>>2]=6;c[a+328>>2]=6;h=6;break}if(!(f>>>0>(g*7|0)>>>0)){c[a+112>>2]=$i((c[a+28>>2]|0)*7|0,e)|0;c[a+116>>2]=$i((c[a+32>>2]|0)*7|0,c[d>>2]|0)|0;c[a+324>>2]=7;c[a+328>>2]=7;h=7;break}if(!(f>>>0>g<<3>>>0)){c[a+112>>2]=$i(c[a+28>>2]<<3,e)|0;c[a+116>>2]=$i(c[a+32>>2]<<3,c[d>>2]|0)|0;c[a+324>>2]=8;c[a+328>>2]=8;h=8;break}if(!(f>>>0>(g*9|0)>>>0)){c[a+112>>2]=$i((c[a+28>>2]|0)*9|0,e)|0;c[a+116>>2]=$i((c[a+32>>2]|0)*9|0,c[d>>2]|0)|0;c[a+324>>2]=9;c[a+328>>2]=9;h=9;break}if(!(f>>>0>(g*10|0)>>>0)){c[a+112>>2]=$i((c[a+28>>2]|0)*10|0,e)|0;c[a+116>>2]=$i((c[a+32>>2]|0)*10|0,c[d>>2]|0)|0;c[a+324>>2]=10;c[a+328>>2]=10;h=10;break}if(!(f>>>0>(g*11|0)>>>0)){c[a+112>>2]=$i((c[a+28>>2]|0)*11|0,e)|0;c[a+116>>2]=$i((c[a+32>>2]|0)*11|0,c[d>>2]|0)|0;c[a+324>>2]=11;c[a+328>>2]=11;h=11;break}if(!(f>>>0>(g*12|0)>>>0)){c[a+112>>2]=$i((c[a+28>>2]|0)*12|0,e)|0;c[a+116>>2]=$i((c[a+32>>2]|0)*12|0,c[d>>2]|0)|0;c[a+324>>2]=12;c[a+328>>2]=12;h=12;break}if(!(f>>>0>(g*13|0)>>>0)){c[a+112>>2]=$i((c[a+28>>2]|0)*13|0,e)|0;c[a+116>>2]=$i((c[a+32>>2]|0)*13|0,c[d>>2]|0)|0;c[a+324>>2]=13;c[a+328>>2]=13;h=13;break}if(!(f>>>0>(g*14|0)>>>0)){c[a+112>>2]=$i((c[a+28>>2]|0)*14|0,e)|0;c[a+116>>2]=$i((c[a+32>>2]|0)*14|0,c[d>>2]|0)|0;c[a+324>>2]=14;c[a+328>>2]=14;h=14;break}j=c[a+28>>2]|0;if(f>>>0>(g*15|0)>>>0){c[a+112>>2]=$i(j<<4,e)|0;c[a+116>>2]=$i(c[a+32>>2]<<4,c[d>>2]|0)|0;c[a+324>>2]=16;c[a+328>>2]=16;h=16;break}else{c[a+112>>2]=$i(j*15|0,e)|0;c[a+116>>2]=$i((c[a+32>>2]|0)*15|0,c[d>>2]|0)|0;c[a+324>>2]=15;c[a+328>>2]=15;h=15;break}}else{c[a+112>>2]=$i(c[a+28>>2]|0,e)|0;c[a+116>>2]=$i(c[a+32>>2]|0,c[d>>2]|0)|0;c[a+324>>2]=1;c[a+328>>2]=1;h=1}}while(0);d=a+36|0;if((c[d>>2]|0)<=0){i=b;return}e=a+324|0;g=a+328|0;f=h;h=1;j=c[a+216>>2]|0;while(1){c[j+36>>2]=f;c[j+40>>2]=c[g>>2];if((h|0)>=(c[d>>2]|0)){break}f=c[e>>2]|0;h=h+1|0;j=j+88|0}i=b;return}function ch(a){a=a|0;var b=0,d=0;b=i;d=Jc[c[c[a+4>>2]>>2]&15](a,0,28)|0;c[a+460>>2]=d;c[d>>2]=18;c[d+4>>2]=26;c[d+8>>2]=27;c[d+12>>2]=28;c[d+16>>2]=0;c[d+20>>2]=0;c[d+24>>2]=1;i=b;return}function dh(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0;b=i;d=a+460|0;e=c[d>>2]|0;f=e+20|0;if((c[f>>2]|0)!=0){g=2;i=b;return g|0}h=a+464|0;j=e+24|0;k=a+340|0;l=e+16|0;e=a+32|0;m=a+212|0;n=a+36|0;o=a+316|0;p=a+320|0;q=a+216|0;r=a+220|0;s=a+224|0;t=a+416|0;u=a+412|0;v=a+420|0;w=a+424|0;x=a+428|0;y=a+432|0;z=a+436|0;A=a+324|0;B=a+328|0;C=a+28|0;D=a+332|0;while(1){E=Sc[c[(c[h>>2]|0)+4>>2]&31](a)|0;if((E|0)==2){F=56;break}else if((E|0)!=1){g=E;F=61;break}E=c[j>>2]|0;if((E|0)==1){F=5}else if((E|0)==0){if((c[l>>2]|0)==0){E=c[a>>2]|0;c[E+20>>2]=36;Oc[c[E>>2]&63](a)}if((c[k>>2]|0)==0){continue}else{F=55;break}}do{if((F|0)==5){F=0;if(!((c[e>>2]|0)<=65500?(c[C>>2]|0)<=65500:0)){E=c[a>>2]|0;c[E+20>>2]=42;c[E+24>>2]=65500;Oc[c[E>>2]&63](a)}if(((c[m>>2]|0)+ -8|0)>>>0>4){E=c[a>>2]|0;c[E+20>>2]=16;c[E+24>>2]=c[m>>2];Oc[c[E>>2]&63](a)}E=c[n>>2]|0;if((E|0)>10){G=c[a>>2]|0;c[G+20>>2]=27;c[G+24>>2]=c[n>>2];c[G+28>>2]=10;Oc[c[G>>2]&63](a);H=c[n>>2]|0}else{H=E}c[o>>2]=1;c[p>>2]=1;if((H|0)>0){E=H;G=1;I=1;J=0;K=c[q>>2]|0;while(1){L=K+8|0;M=c[L>>2]|0;N=K+12|0;if(!((M+ -1|0)>>>0>3)?!(((c[N>>2]|0)+ -1|0)>>>0>3):0){O=I;P=M;Q=G;R=E}else{M=c[a>>2]|0;c[M+20>>2]=19;Oc[c[M>>2]&63](a);O=c[o>>2]|0;P=c[L>>2]|0;Q=c[p>>2]|0;R=c[n>>2]|0}L=(O|0)>(P|0)?O:P;c[o>>2]=L;M=c[N>>2]|0;N=(Q|0)>(M|0)?Q:M;c[p>>2]=N;M=J+1|0;if((M|0)<(R|0)){E=R;G=N;I=L;J=M;K=K+88|0}else{S=R;break}}}else{S=H}a:do{if((c[r>>2]|0)==0){if((c[s>>2]|0)!=0?(c[k>>2]|0)!=0:0){F=21;break}switch(c[t>>2]|0){case 255:{c[x>>2]=16;c[y>>2]=9472;c[z>>2]=63;T=16;U=S;break a;break};case 15:{c[x>>2]=4;c[y>>2]=10432;c[z>>2]=15;T=4;U=S;break a;break};case 8:{c[x>>2]=3;c[y>>2]=10560;c[z>>2]=8;T=3;U=S;break a;break};case 0:{c[x>>2]=1;c[y>>2]=9472;c[z>>2]=0;T=1;U=S;break a;break};case 35:{c[x>>2]=6;c[y>>2]=10056;c[z>>2]=35;T=6;U=S;break a;break};case 143:{c[x>>2]=12;c[y>>2]=9472;c[z>>2]=63;T=12;U=S;break a;break};case 63:{c[x>>2]=8;c[y>>2]=9472;c[z>>2]=63;T=8;U=S;break a;break};case 3:{c[x>>2]=2;c[y>>2]=10664;c[z>>2]=3;T=2;U=S;break a;break};case 224:{c[x>>2]=15;c[y>>2]=9472;c[z>>2]=63;T=15;U=S;break a;break};case 168:{c[x>>2]=13;c[y>>2]=9472;c[z>>2]=63;T=13;U=S;break a;break};case 80:{c[x>>2]=9;c[y>>2]=9472;c[z>>2]=63;T=9;U=S;break a;break};case 99:{c[x>>2]=10;c[y>>2]=9472;c[z>>2]=63;T=10;U=S;break a;break};case 48:{c[x>>2]=7;c[y>>2]=9792;c[z>>2]=48;T=7;U=S;break a;break};case 195:{c[x>>2]=14;c[y>>2]=9472;c[z>>2]=63;T=14;U=S;break a;break};case 24:{c[x>>2]=5;c[y>>2]=10264;c[z>>2]=24;T=5;U=S;break a;break};case 120:{c[x>>2]=11;c[y>>2]=9472;c[z>>2]=63;T=11;U=S;break a;break};default:{K=c[a>>2]|0;c[K+20>>2]=17;c[K+24>>2]=c[u>>2];c[K+28>>2]=c[t>>2];c[K+32>>2]=c[v>>2];c[K+36>>2]=c[w>>2];Oc[c[K>>2]&63](a);T=c[x>>2]|0;U=c[n>>2]|0;break a}}}else{F=21}}while(0);if((F|0)==21){F=0;c[x>>2]=8;c[y>>2]=9472;c[z>>2]=63;T=8;U=S}c[A>>2]=T;c[B>>2]=T;if((U|0)>0){K=T;J=1;I=c[q>>2]|0;while(1){c[I+36>>2]=K;c[I+40>>2]=c[x>>2];G=I+8|0;E=aa(c[G>>2]|0,c[C>>2]|0)|0;c[I+28>>2]=$i(E,aa(c[x>>2]|0,c[o>>2]|0)|0)|0;E=I+12|0;M=aa(c[E>>2]|0,c[e>>2]|0)|0;c[I+32>>2]=$i(M,aa(c[x>>2]|0,c[p>>2]|0)|0)|0;M=aa(c[G>>2]|0,c[C>>2]|0)|0;c[I+44>>2]=$i(M,c[o>>2]|0)|0;M=aa(c[E>>2]|0,c[e>>2]|0)|0;c[I+48>>2]=$i(M,c[p>>2]|0)|0;c[I+52>>2]=1;c[I+80>>2]=0;if((J|0)>=(c[n>>2]|0)){break}K=c[x>>2]|0;J=J+1|0;I=I+88|0}V=c[x>>2]|0}else{V=T}c[D>>2]=$i(c[e>>2]|0,aa(V,c[p>>2]|0)|0)|0;if((c[k>>2]|0)>=(c[n>>2]|0)?(c[s>>2]|0)==0:0){c[(c[d>>2]|0)+16>>2]=0;break}c[(c[d>>2]|0)+16>>2]=1}}while(0);if((c[k>>2]|0)!=0){F=51;break}c[j>>2]=2}if((F|0)==51){c[j>>2]=0;g=1;i=b;return g|0}else if((F|0)==55){fh(a);g=1;i=b;return g|0}else if((F|0)==56){c[f>>2]=1;if((c[j>>2]|0)==0){j=a+152|0;f=c[a+144>>2]|0;if((c[j>>2]|0)<=(f|0)){g=2;i=b;return g|0}c[j>>2]=f;g=2;i=b;return g|0}else{if((c[(c[h>>2]|0)+16>>2]|0)==0){g=2;i=b;return g|0}h=c[a>>2]|0;c[h+20>>2]=62;Oc[c[h>>2]&63](a);g=2;i=b;return g|0}}else if((F|0)==61){i=b;return g|0}return 0}function eh(a){a=a|0;var b=0,d=0;b=i;d=c[a+460>>2]|0;c[d>>2]=18;c[d+16>>2]=0;c[d+20>>2]=0;c[d+24>>2]=1;Oc[c[(c[a>>2]|0)+16>>2]&63](a);Oc[c[c[a+464>>2]>>2]&63](a);c[a+160>>2]=0;i=b;return}function fh(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;b=i;d=a+340|0;e=c[d>>2]|0;if((e|0)==1){f=c[a+344>>2]|0;c[a+360>>2]=c[f+28>>2];g=f+32|0;c[a+364>>2]=c[g>>2];c[f+56>>2]=1;c[f+60>>2]=1;c[f+64>>2]=1;c[f+68>>2]=c[f+36>>2];c[f+72>>2]=1;h=c[f+12>>2]|0;j=((c[g>>2]|0)>>>0)%(h>>>0)|0;c[f+76>>2]=(j|0)==0?h:j;c[a+368>>2]=1;c[a+372>>2]=0;k=c[d>>2]|0}else{if((e+ -1|0)>>>0>3){e=c[a>>2]|0;c[e+20>>2]=27;c[e+24>>2]=c[d>>2];c[e+28>>2]=4;Oc[c[e>>2]&63](a)}e=a+428|0;c[a+360>>2]=$i(c[a+28>>2]|0,aa(c[e>>2]|0,c[a+316>>2]|0)|0)|0;c[a+364>>2]=$i(c[a+32>>2]|0,aa(c[e>>2]|0,c[a+320>>2]|0)|0)|0;e=a+368|0;c[e>>2]=0;if((c[d>>2]|0)<=0){l=a+468|0;m=c[l>>2]|0;n=c[m>>2]|0;Oc[n&63](a);o=a+452|0;p=c[o>>2]|0;q=c[p>>2]|0;Oc[q&63](a);r=c[o>>2]|0;s=r+4|0;t=c[s>>2]|0;u=a+460|0;v=c[u>>2]|0;c[v>>2]=t;i=b;return}j=0;while(1){h=c[a+(j<<2)+344>>2]|0;f=c[h+8>>2]|0;c[h+56>>2]=f;g=c[h+12>>2]|0;c[h+60>>2]=g;w=aa(g,f)|0;c[h+64>>2]=w;c[h+68>>2]=aa(c[h+36>>2]|0,f)|0;x=((c[h+28>>2]|0)>>>0)%(f>>>0)|0;c[h+72>>2]=(x|0)==0?f:x;x=((c[h+32>>2]|0)>>>0)%(g>>>0)|0;c[h+76>>2]=(x|0)==0?g:x;if(((c[e>>2]|0)+w|0)>10){x=c[a>>2]|0;c[x+20>>2]=14;Oc[c[x>>2]&63](a)}if((w|0)>0){x=w;do{x=x+ -1|0;w=c[e>>2]|0;c[e>>2]=w+1;c[a+(w<<2)+372>>2]=j}while((x|0)>0)}x=j+1|0;w=c[d>>2]|0;if((x|0)<(w|0)){j=x}else{k=w;break}}}if((k|0)<=0){l=a+468|0;m=c[l>>2]|0;n=c[m>>2]|0;Oc[n&63](a);o=a+452|0;p=c[o>>2]|0;q=c[p>>2]|0;Oc[q&63](a);r=c[o>>2]|0;s=r+4|0;t=c[s>>2]|0;u=a+460|0;v=c[u>>2]|0;c[v>>2]=t;i=b;return}j=a+4|0;e=k;k=0;while(1){w=c[a+(k<<2)+344>>2]|0;x=w+80|0;if((c[x>>2]|0)==0){g=c[w+16>>2]|0;w=a+(g<<2)+164|0;if(!(!(g>>>0>3)?(c[w>>2]|0)!=0:0)){h=c[a>>2]|0;c[h+20>>2]=54;c[h+24>>2]=g;Oc[c[h>>2]&63](a)}h=Jc[c[c[j>>2]>>2]&15](a,1,132)|0;Fm(h|0,c[w>>2]|0,132)|0;c[x>>2]=h;y=c[d>>2]|0}else{y=e}k=k+1|0;if((k|0)>=(y|0)){break}else{e=y}}l=a+468|0;m=c[l>>2]|0;n=c[m>>2]|0;Oc[n&63](a);o=a+452|0;p=c[o>>2]|0;q=c[p>>2]|0;Oc[q&63](a);r=c[o>>2]|0;s=r+4|0;t=c[s>>2]|0;u=a+460|0;v=c[u>>2]|0;c[v>>2]=t;i=b;return}function gh(a){a=a|0;var b=0;b=i;Oc[c[(c[a+468>>2]|0)+8>>2]&63](a);c[c[a+460>>2]>>2]=18;i=b;return}function hh(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;d=i;e=a+4|0;f=Jc[c[c[e>>2]>>2]&15](a,1,80)|0;g=a+448|0;c[g>>2]=f;c[f>>2]=12;if((b|0)!=0){b=c[a>>2]|0;c[b+20>>2]=3;Oc[c[b>>2]&63](a)}b=a+328|0;h=c[b>>2]|0;if((c[(c[a+476>>2]|0)+8>>2]|0)==0){j=c[a+36>>2]|0;k=h;l=h}else{if((h|0)<2){m=c[a>>2]|0;c[m+20>>2]=48;Oc[c[m>>2]&63](a);n=c[b>>2]|0}else{n=h}h=c[g>>2]|0;g=a+36|0;m=Jc[c[c[e>>2]>>2]&15](a,1,c[g>>2]<<3)|0;o=h+56|0;c[o>>2]=m;p=c[g>>2]|0;q=h+60|0;c[q>>2]=m+(p<<2);if((p|0)>0){m=n+4|0;n=0;h=c[a+216>>2]|0;while(1){r=aa(c[h+40>>2]|0,c[h+12>>2]|0)|0;s=(r|0)/(c[b>>2]|0)|0;r=aa(s,m)|0;t=Jc[c[c[e>>2]>>2]&15](a,1,r<<3)|0;c[(c[o>>2]|0)+(n<<2)>>2]=t+(s<<2);c[(c[q>>2]|0)+(n<<2)>>2]=t+(r+s<<2);s=n+1|0;r=c[g>>2]|0;if((s|0)<(r|0)){n=s;h=h+88|0}else{u=r;break}}}else{u=p}p=c[b>>2]|0;j=u;k=p;l=p+2|0}p=a+36|0;if((j|0)<=0){i=d;return}j=f+8|0;f=k;k=0;u=c[a+216>>2]|0;while(1){h=(aa(c[u+40>>2]|0,c[u+12>>2]|0)|0)/(f|0)|0;n=aa(c[u+36>>2]|0,c[u+28>>2]|0)|0;g=aa(h,l)|0;c[j+(k<<2)>>2]=Vc[c[(c[e>>2]|0)+8>>2]&3](a,1,n,g)|0;g=k+1|0;if((g|0)>=(c[p>>2]|0)){break}f=c[b>>2]|0;k=g;u=u+88|0}i=d;return}function ih(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;d=i;e=a+448|0;f=c[e>>2]|0;if((b|0)==0){g=f+4|0;if((c[(c[a+476>>2]|0)+8>>2]|0)==0){c[g>>2]=2}else{c[g>>2]=1;g=c[e>>2]|0;e=c[a+328>>2]|0;h=c[a+36>>2]|0;a:do{if((h|0)>0){j=g+56|0;k=g+60|0;l=g+8|0;m=e+2|0;n=e+ -2|0;o=0;p=c[a+216>>2]|0;while(1){q=(aa(c[p+40>>2]|0,c[p+12>>2]|0)|0)/(e|0)|0;r=c[(c[j>>2]|0)+(o<<2)>>2]|0;s=c[(c[k>>2]|0)+(o<<2)>>2]|0;t=c[l+(o<<2)>>2]|0;u=aa(q,m)|0;if((u|0)>0){v=0;do{w=c[t+(v<<2)>>2]|0;c[s+(v<<2)>>2]=w;c[r+(v<<2)>>2]=w;v=v+1|0}while((v|0)!=(u|0))}u=q<<1;if((q|0)>0){v=aa(q,e)|0;w=aa(q,n)|0;x=0;while(1){y=x+v|0;z=x+w|0;c[s+(z<<2)>>2]=c[t+(y<<2)>>2];c[s+(y<<2)>>2]=c[t+(z<<2)>>2];z=x+1|0;if((z|0)<(u|0)){x=z}else{A=0;break}}do{c[r+(A-q<<2)>>2]=c[r>>2];A=A+1|0}while((A|0)!=(q|0))}q=o+1|0;if((q|0)==(h|0)){break a}o=q;p=p+88|0}}}while(0);c[f+64>>2]=0;c[f+68>>2]=0;c[f+76>>2]=0}c[f+48>>2]=0;c[f+52>>2]=0;i=d;return}else if((b|0)==2){c[f+4>>2]=3;i=d;return}else{f=c[a>>2]|0;c[f+20>>2]=3;Oc[c[f>>2]&63](a);i=d;return}}function jh(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;f=i;g=a+448|0;h=c[g>>2]|0;j=h+48|0;do{if((c[j>>2]|0)==0){if((Wc[c[(c[a+452>>2]|0)+12>>2]&31](a,c[h+56+(c[h+64>>2]<<2)>>2]|0)|0)==0){i=f;return}else{c[j>>2]=1;k=h+76|0;c[k>>2]=(c[k>>2]|0)+1;break}}}while(0);k=h+68|0;l=c[k>>2]|0;if((l|0)==0){m=h+52|0;n=9}else if((l|0)==2){o=h+52|0;p=h+72|0;Pc[c[(c[a+456>>2]|0)+4>>2]&7](a,c[h+56+(c[h+64>>2]<<2)>>2]|0,o,c[p>>2]|0,b,d,e);if((c[o>>2]|0)>>>0<(c[p>>2]|0)>>>0){i=f;return}c[k>>2]=0;if((c[d>>2]|0)>>>0<e>>>0){m=o;n=9}else{i=f;return}}else if((l|0)==1){q=h+52|0}else{i=f;return}if((n|0)==9){c[m>>2]=0;n=a+328|0;c[h+72>>2]=(c[n>>2]|0)+ -1;a:do{if((c[h+76>>2]|0)==(c[a+332>>2]|0)?(l=c[g>>2]|0,o=a+36|0,(c[o>>2]|0)>0):0){p=l+72|0;r=l+64|0;s=l+56|0;l=0;t=c[a+216>>2]|0;while(1){u=aa(c[t+40>>2]|0,c[t+12>>2]|0)|0;v=(u|0)/(c[n>>2]|0)|0;w=((c[t+48>>2]|0)>>>0)%(u>>>0)|0;x=(w|0)==0?u:w;if((l|0)==0){c[p>>2]=((x+ -1|0)/(v|0)|0)+1}w=c[(c[s+(c[r>>2]<<2)>>2]|0)+(l<<2)>>2]|0;u=v<<1;if((v|0)>0){v=w+(x+ -1<<2)|0;y=0;do{c[w+(y+x<<2)>>2]=c[v>>2];y=y+1|0}while((y|0)<(u|0))}u=l+1|0;if((u|0)>=(c[o>>2]|0)){break a}l=u;t=t+88|0}}}while(0);c[k>>2]=1;q=m}m=h+64|0;n=h+72|0;Pc[c[(c[a+456>>2]|0)+4>>2]&7](a,c[h+56+(c[m>>2]<<2)>>2]|0,q,c[n>>2]|0,b,d,e);if((c[q>>2]|0)>>>0<(c[n>>2]|0)>>>0){i=f;return}b:do{if((c[h+76>>2]|0)==1){e=c[g>>2]|0;d=a+328|0;b=c[d>>2]|0;t=c[a+36>>2]|0;if((t|0)>0){l=e+56|0;o=e+60|0;e=b+1|0;r=b+2|0;s=0;p=c[a+216>>2]|0;while(1){u=(aa(c[p+40>>2]|0,c[p+12>>2]|0)|0)/(b|0)|0;y=c[(c[l>>2]|0)+(s<<2)>>2]|0;v=c[(c[o>>2]|0)+(s<<2)>>2]|0;if((u|0)>0){x=aa(u,e)|0;w=aa(u,r)|0;z=0;do{A=z+x|0;B=z-u|0;c[y+(B<<2)>>2]=c[y+(A<<2)>>2];c[v+(B<<2)>>2]=c[v+(A<<2)>>2];A=z+w|0;c[y+(A<<2)>>2]=c[y+(z<<2)>>2];c[v+(A<<2)>>2]=c[v+(z<<2)>>2];z=z+1|0}while((z|0)!=(u|0))}u=s+1|0;if((u|0)==(t|0)){C=d;break b}s=u;p=p+88|0}}else{C=d}}else{C=a+328|0}}while(0);c[m>>2]=c[m>>2]^1;c[j>>2]=0;c[q>>2]=(c[C>>2]|0)+1;c[n>>2]=(c[C>>2]|0)+2;c[k>>2]=2;i=f;return}function kh(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0;f=i;g=c[a+448>>2]|0;h=g+48|0;do{if((c[h>>2]|0)==0){j=g+8|0;if((Wc[c[(c[a+452>>2]|0)+12>>2]&31](a,j)|0)==0){i=f;return}else{c[h>>2]=1;k=j;break}}else{k=g+8|0}}while(0);j=c[a+328>>2]|0;l=g+52|0;Pc[c[(c[a+456>>2]|0)+4>>2]&7](a,k,l,j,b,d,e);if((c[l>>2]|0)>>>0<j>>>0){i=f;return}c[h>>2]=0;c[l>>2]=0;i=f;return}function lh(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;Pc[c[(c[a+456>>2]|0)+4>>2]&7](a,0,0,0,b,d,e);i=f;return}function mh(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;d=i;e=a+440|0;f=c[e>>2]|0;g=c[a>>2]|0;c[g+20>>2]=124;c[g+24>>2]=f;c[g+28>>2]=b;Qc[c[g+4>>2]&31](a,-1);g=b+1&7|208;h=b+2&7|208;j=b+7&7|208;k=b+6&7|208;b=f;a:while(1){f=(b+ -208|0)>>>0>7;l=(b|0)==(g|0);m=(b|0)==(h|0);n=(b|0)==(j|0);o=(b|0)==(k|0)?2:1;do{if((b|0)<192){p=c[a>>2]|0;c[p+20>>2]=99;q=p+24|0;if(f){c[q>>2]=b;c[p+28>>2]=2;Qc[c[p+4>>2]&31](a,4);break}if(l){c[q>>2]=g;c[p+28>>2]=2;Qc[c[p+4>>2]&31](a,4);break}else{c[q>>2]=b;c[p+28>>2]=2;Qc[c[p+4>>2]&31](a,4);break}}else{if(f){r=10;break a}if(l){r=11;break a}while(1){if(m){s=3}else{s=n?2:o}p=c[a>>2]|0;c[p+20>>2]=99;c[p+24>>2]=b;c[p+28>>2]=s;Qc[c[p+4>>2]&31](a,4);if((s|0)==1){r=15;break a}else if((s|0)==3){t=1;r=18;break a}else if((s|0)==2){break}}}}while(0);if((nh(a)|0)==0){t=0;r=18;break}b=c[e>>2]|0}if((r|0)==10){s=c[a>>2]|0;c[s+20>>2]=99;c[s+24>>2]=b;c[s+28>>2]=3;Qc[c[s+4>>2]&31](a,4);t=1;i=d;return t|0}else if((r|0)==11){s=c[a>>2]|0;c[s+20>>2]=99;c[s+24>>2]=g;c[s+28>>2]=3;Qc[c[s+4>>2]&31](a,4);t=1;i=d;return t|0}else if((r|0)==15){c[e>>2]=0;t=1;i=d;return t|0}else if((r|0)==18){i=d;return t|0}return 0}function nh(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;d=i;e=c[b+24>>2]|0;f=e+4|0;g=e+12|0;h=b+464|0;j=c[f>>2]|0;k=c[e>>2]|0;a:while(1){if((j|0)==0){if((Sc[c[g>>2]&31](b)|0)==0){l=0;m=19;break}n=c[e>>2]|0;o=c[f>>2]|0}else{n=k;o=j}p=o+ -1|0;q=n+1|0;if((a[n]|0)==-1){r=p;s=q}else{t=p;p=q;while(1){q=(c[h>>2]|0)+24|0;c[q>>2]=(c[q>>2]|0)+1;c[e>>2]=p;c[f>>2]=t;if((t|0)==0){if((Sc[c[g>>2]&31](b)|0)==0){l=0;m=19;break a}u=c[e>>2]|0;v=c[f>>2]|0}else{u=p;v=t}q=v+ -1|0;w=u+1|0;if((a[u]|0)==-1){r=q;s=w;break}else{t=q;p=w}}}do{if((r|0)==0){if((Sc[c[g>>2]&31](b)|0)==0){l=0;m=19;break a}x=c[f>>2]|0;y=c[e>>2]|0}else{x=r;y=s}r=x+ -1|0;s=y+1|0;z=a[y]|0}while(z<<24>>24==-1);A=z&255;B=(c[h>>2]|0)+24|0;C=c[B>>2]|0;if(!(z<<24>>24==0)){m=16;break}c[B>>2]=C+2;c[e>>2]=s;c[f>>2]=r;j=r;k=s}if((m|0)==16){if((C|0)!=0){C=c[b>>2]|0;c[C+20>>2]=119;c[C+24>>2]=c[B>>2];c[C+28>>2]=A;Qc[c[C+4>>2]&31](b,-1);c[(c[h>>2]|0)+24>>2]=0}c[b+440>>2]=A;c[e>>2]=s;c[f>>2]=r;l=1;i=d;return l|0}else if((m|0)==19){i=d;return l|0}return 0}function oh(a){a=a|0;var b=0,d=0,e=0;b=i;d=Jc[c[c[a+4>>2]>>2]&15](a,0,172)|0;e=a+464|0;c[e>>2]=d;c[d>>2]=29;c[d+4>>2]=19;c[d+8>>2]=20;c[d+28>>2]=21;c[d+96>>2]=0;c[d+100>>2]=0;c[d+36>>2]=21;c[d+104>>2]=0;c[d+40>>2]=21;c[d+108>>2]=0;c[d+44>>2]=21;c[d+112>>2]=0;c[d+48>>2]=21;c[d+116>>2]=0;c[d+52>>2]=21;c[d+120>>2]=0;c[d+56>>2]=21;c[d+124>>2]=0;c[d+60>>2]=21;c[d+128>>2]=0;c[d+64>>2]=21;c[d+132>>2]=0;c[d+68>>2]=21;c[d+136>>2]=0;c[d+72>>2]=21;c[d+140>>2]=0;c[d+76>>2]=21;c[d+144>>2]=0;c[d+80>>2]=21;c[d+148>>2]=0;c[d+84>>2]=21;c[d+152>>2]=0;c[d+156>>2]=0;c[d+92>>2]=21;c[d+160>>2]=0;c[d+32>>2]=22;c[d+88>>2]=22;d=c[e>>2]|0;c[a+216>>2]=0;c[a+144>>2]=0;c[a+440>>2]=0;c[d+12>>2]=0;c[d+16>>2]=0;c[d+24>>2]=0;c[d+164>>2]=0;i=b;return}function ph(a){a=a|0;var b=0;b=c[a+464>>2]|0;c[a+216>>2]=0;c[a+144>>2]=0;c[a+440>>2]=0;c[b+12>>2]=0;c[b+16>>2]=0;c[b+24>>2]=0;c[b+164>>2]=0;return}



function qh(f){f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,mb=0,nb=0,ob=0,pb=0,qb=0,rb=0,sb=0,tb=0,ub=0,vb=0,wb=0,xb=0,yb=0,zb=0,Ab=0,Bb=0,Cb=0,Db=0,Eb=0,Fb=0,Gb=0,Hb=0,Ib=0,Jb=0,Kb=0,Lb=0,Mb=0,Nb=0,Ob=0,Pb=0,Qb=0,Rb=0,Sb=0,Tb=0,Ub=0,Vb=0,Wb=0,Xb=0,Yb=0,Zb=0,_b=0,$b=0,ac=0,bc=0,cc=0,dc=0,ec=0,fc=0,gc=0,hc=0,ic=0,jc=0,kc=0,lc=0,mc=0,nc=0,oc=0,pc=0,qc=0,rc=0,sc=0,tc=0,uc=0,vc=0,wc=0,xc=0,yc=0,zc=0,Ac=0,Bc=0,Cc=0,Dc=0,Ec=0,Fc=0,Gc=0,Hc=0,Ic=0,Jc=0,Kc=0,Lc=0,Mc=0,Nc=0,Pc=0,Rc=0,Tc=0,Uc=0,Vc=0,Wc=0,Xc=0,Yc=0,Zc=0,_c=0,$c=0,ad=0,bd=0,cd=0,dd=0,ed=0,fd=0,gd=0,hd=0,id=0,jd=0,kd=0,ld=0,md=0,nd=0,od=0,pd=0,qd=0,rd=0,sd=0,td=0,ud=0,vd=0,wd=0,xd=0,yd=0,zd=0,Ad=0,Bd=0,Cd=0,Dd=0,Ed=0,Fd=0,Gd=0,Hd=0,Id=0,Jd=0,Kd=0,Ld=0,Md=0,Nd=0,Od=0,Pd=0,Qd=0,Rd=0,Sd=0,Td=0,Ud=0,Vd=0,Wd=0,Xd=0,Yd=0,Zd=0,_d=0,$d=0,ae=0,be=0,ce=0,de=0,ee=0,fe=0,ge=0,he=0,ie=0,je=0,ke=0,le=0,me=0,ne=0,oe=0,pe=0,qe=0,re=0,se=0,te=0;g=i;i=i+288|0;h=g+256|0;j=g;k=f+440|0;l=f+464|0;m=f+24|0;n=f+232|0;o=f+248|0;p=f+264|0;q=f+233|0;r=f+249|0;s=f+265|0;t=f+234|0;u=f+250|0;v=f+266|0;w=f+235|0;x=f+251|0;y=f+267|0;z=f+236|0;A=f+252|0;B=f+268|0;C=f+237|0;D=f+253|0;E=f+269|0;F=f+238|0;G=f+254|0;H=f+270|0;I=f+239|0;J=f+255|0;K=f+271|0;L=f+240|0;M=f+256|0;N=f+272|0;O=f+241|0;P=f+257|0;Q=f+273|0;R=f+242|0;S=f+258|0;T=f+274|0;U=f+243|0;V=f+259|0;W=f+275|0;X=f+244|0;Y=f+260|0;Z=f+276|0;_=f+245|0;$=f+261|0;aa=f+277|0;ba=f+246|0;ca=f+262|0;da=f+278|0;ea=f+247|0;fa=f+263|0;ga=f+279|0;ha=f+280|0;ia=f+40|0;ja=f+304|0;ka=f+308|0;la=f+284|0;ma=f+288|0;na=f+289|0;oa=f+290|0;pa=f+292|0;qa=f+294|0;ra=f+296|0;sa=f+300|0;ta=h+1|0;ua=h+2|0;va=h+3|0;wa=h+4|0;xa=h+5|0;ya=h+6|0;za=h+7|0;Aa=h+8|0;Ba=h+9|0;Ca=h+10|0;Da=h+11|0;Ea=h+12|0;Fa=h+13|0;Ga=h+14|0;Ha=h+15|0;Ia=h+16|0;Ja=f+36|0;Ka=f+216|0;La=c[k>>2]|0;a:while(1){if((La|0)==0){if((c[(c[l>>2]|0)+12>>2]|0)!=0){if((nh(f)|0)==0){Ma=0;Na=306;break}}else{Oa=c[m>>2]|0;Pa=Oa+4|0;Qa=c[Pa>>2]|0;if((Qa|0)==0){if((Sc[c[Oa+12>>2]&31](f)|0)==0){Ma=0;Na=306;break}Ra=c[Pa>>2]|0}else{Ra=Qa}Qa=c[Oa>>2]|0;Sa=Ra+ -1|0;Ta=Qa+1|0;Ua=a[Qa]|0;Qa=Ua&255;if((Sa|0)==0){if((Sc[c[Oa+12>>2]&31](f)|0)==0){Ma=0;Na=306;break}Va=c[Pa>>2]|0;Wa=c[Oa>>2]|0}else{Va=Sa;Wa=Ta}Ta=a[Wa]|0;Sa=Ta&255;if(!(Ua<<24>>24==-1&Ta<<24>>24==-40)){Ta=c[f>>2]|0;c[Ta+20>>2]=55;c[Ta+24>>2]=Qa;c[Ta+28>>2]=Sa;Oc[c[Ta>>2]&63](f)}c[k>>2]=Sa;c[Oa>>2]=Wa+1;c[Pa>>2]=Va+ -1}Xa=c[k>>2]|0}else{Xa=La}switch(Xa|0){case 218:{Na=25;break a;break};case 216:{Pa=c[f>>2]|0;c[Pa+20>>2]=104;Qc[c[Pa+4>>2]&31](f,1);Pa=c[l>>2]|0;if((c[Pa+12>>2]|0)==0){Ya=Pa}else{Pa=c[f>>2]|0;c[Pa+20>>2]=64;Oc[c[Pa>>2]&63](f);Ya=c[l>>2]|0}a[n]=0;a[o]=1;a[p]=5;a[q]=0;a[r]=1;a[s]=5;a[t]=0;a[u]=1;a[v]=5;a[w]=0;a[x]=1;a[y]=5;a[z]=0;a[A]=1;a[B]=5;a[C]=0;a[D]=1;a[E]=5;a[F]=0;a[G]=1;a[H]=5;a[I]=0;a[J]=1;a[K]=5;a[L]=0;a[M]=1;a[N]=5;a[O]=0;a[P]=1;a[Q]=5;a[R]=0;a[S]=1;a[T]=5;a[U]=0;a[V]=1;a[W]=5;a[X]=0;a[Y]=1;a[Z]=5;a[_]=0;a[$]=1;a[aa]=5;a[ba]=0;a[ca]=1;a[da]=5;a[ea]=0;a[fa]=1;a[ga]=5;c[ha>>2]=0;c[ia>>2]=0;c[ja>>2]=0;c[ka>>2]=0;c[la>>2]=0;a[ma]=1;a[na]=1;a[oa]=0;b[pa>>1]=1;b[qa>>1]=1;c[ra>>2]=0;a[sa]=0;c[Ya+12>>2]=1;break};case 201:{if((vh(f,0,0,1)|0)==0){Ma=0;Na=306;break a}break};case 207:case 206:case 205:case 203:case 200:case 199:case 198:case 197:case 195:{Pa=c[f>>2]|0;c[Pa+20>>2]=63;c[Pa+24>>2]=c[k>>2];Oc[c[Pa>>2]&63](f);break};case 194:{if((vh(f,0,1,0)|0)==0){Ma=0;Na=306;break a}break};case 202:{if((vh(f,0,1,1)|0)==0){Ma=0;Na=306;break a}break};case 193:{if((vh(f,0,0,0)|0)==0){Ma=0;Na=306;break a}break};case 192:{if((vh(f,1,0,0)|0)==0){Ma=0;Na=306;break a}break};case 217:{Na=73;break a;break};case 204:{Pa=c[m>>2]|0;Oa=Pa+4|0;Sa=c[Oa>>2]|0;if((Sa|0)==0){if((Sc[c[Pa+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}Za=c[Oa>>2]|0}else{Za=Sa}Sa=c[Pa>>2]|0;Ta=Za+ -1|0;Qa=Sa+1|0;Ua=d[Sa]<<8;if((Ta|0)==0){if((Sc[c[Pa+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}_a=c[Oa>>2]|0;$a=c[Pa>>2]|0}else{_a=Ta;$a=Qa}Qa=_a+ -1|0;Ta=$a+1|0;Sa=(d[$a]|Ua)+ -2|0;if((Sa|0)>0){Ua=Pa+12|0;ab=Qa;bb=Sa;cb=Ta;while(1){if((ab|0)==0){if((Sc[c[Ua>>2]&31](f)|0)==0){Ma=0;Na=306;break a}db=c[Oa>>2]|0;eb=c[Pa>>2]|0}else{db=ab;eb=cb}fb=db+ -1|0;gb=eb+1|0;hb=a[eb]|0;ib=hb&255;if((fb|0)==0){if((Sc[c[Ua>>2]&31](f)|0)==0){Ma=0;Na=306;break a}jb=c[Oa>>2]|0;kb=c[Pa>>2]|0}else{jb=fb;kb=gb}gb=jb+ -1|0;fb=kb+1|0;lb=a[kb]|0;mb=lb&255;nb=bb+ -2|0;ob=c[f>>2]|0;c[ob+20>>2]=81;c[ob+24>>2]=ib;c[ob+28>>2]=mb;Qc[c[ob+4>>2]&31](f,1);if(!((hb&255)>31)){if(!((hb&255)>15)){hb=mb&15;a[f+ib+232|0]=hb;ob=(lb&255)>>>4;a[f+ib+248|0]=ob;if((hb&255)>(ob&255)){ob=c[f>>2]|0;c[ob+20>>2]=30;c[ob+24>>2]=mb;Oc[c[ob>>2]&63](f)}}else{Na=91}}else{ob=c[f>>2]|0;c[ob+20>>2]=29;c[ob+24>>2]=ib;Oc[c[ob>>2]&63](f);Na=91}if((Na|0)==91){Na=0;a[f+(ib+ -16)+264|0]=lb}if((nb|0)>0){ab=gb;bb=nb;cb=fb}else{pb=gb;qb=nb;rb=fb;break}}}else{pb=Qa;qb=Sa;rb=Ta}if((qb|0)!=0){cb=c[f>>2]|0;c[cb+20>>2]=12;Oc[c[cb>>2]&63](f)}c[Pa>>2]=rb;c[Oa>>2]=pb;break};case 196:{cb=c[m>>2]|0;bb=cb+4|0;ab=c[bb>>2]|0;if((ab|0)==0){if((Sc[c[cb+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}sb=c[bb>>2]|0}else{sb=ab}ab=c[cb>>2]|0;Ua=sb+ -1|0;fb=ab+1|0;nb=d[ab]<<8;if((Ua|0)==0){if((Sc[c[cb+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}tb=c[bb>>2]|0;ub=c[cb>>2]|0}else{tb=Ua;ub=fb}fb=tb+ -1|0;Ua=ub+1|0;ab=(d[ub]|nb)+ -2|0;if((ab|0)>16){nb=cb+12|0;gb=fb;lb=ab;ib=Ua;while(1){if((gb|0)==0){if((Sc[c[nb>>2]&31](f)|0)==0){Ma=0;Na=306;break a}vb=c[bb>>2]|0;wb=c[cb>>2]|0}else{vb=gb;wb=ib}ob=d[wb]|0;mb=c[f>>2]|0;c[mb+20>>2]=82;c[mb+24>>2]=ob;Qc[c[mb+4>>2]&31](f,1);a[h]=0;mb=vb+ -1|0;hb=0;xb=1;yb=wb+1|0;do{if((mb|0)==0){if((Sc[c[nb>>2]&31](f)|0)==0){Ma=0;Na=306;break a}zb=c[bb>>2]|0;Ab=c[cb>>2]|0}else{zb=mb;Ab=yb}Bb=a[Ab]|0;a[h+xb|0]=Bb;hb=(Bb&255)+hb|0;xb=xb+1|0;mb=zb+ -1|0;yb=Ab+1|0}while((xb|0)<17);xb=lb+ -17|0;Bb=c[f>>2]|0;c[Bb+24>>2]=d[ta]|0;c[Bb+28>>2]=d[ua]|0;c[Bb+32>>2]=d[va]|0;c[Bb+36>>2]=d[wa]|0;c[Bb+40>>2]=d[xa]|0;c[Bb+44>>2]=d[ya]|0;c[Bb+48>>2]=d[za]|0;c[Bb+52>>2]=d[Aa]|0;c[Bb+20>>2]=88;Qc[c[Bb+4>>2]&31](f,2);Bb=c[f>>2]|0;c[Bb+24>>2]=d[Ba]|0;c[Bb+28>>2]=d[Ca]|0;c[Bb+32>>2]=d[Da]|0;c[Bb+36>>2]=d[Ea]|0;c[Bb+40>>2]=d[Fa]|0;c[Bb+44>>2]=d[Ga]|0;c[Bb+48>>2]=d[Ha]|0;c[Bb+52>>2]=d[Ia]|0;c[Bb+20>>2]=88;Qc[c[Bb+4>>2]&31](f,2);if((hb|0)>256|(hb|0)>(xb|0)){Bb=c[f>>2]|0;c[Bb+20>>2]=9;Oc[c[Bb>>2]&63](f)}Gm(j|0,0,256)|0;if((hb|0)>0){Bb=mb;Cb=0;Db=yb;while(1){if((Bb|0)==0){if((Sc[c[nb>>2]&31](f)|0)==0){Ma=0;Na=306;break a}Eb=c[bb>>2]|0;Fb=c[cb>>2]|0}else{Eb=Bb;Fb=Db}Gb=Eb+ -1|0;Hb=Fb+1|0;a[j+Cb|0]=a[Fb]|0;Ib=Cb+1|0;if((Ib|0)<(hb|0)){Bb=Gb;Cb=Ib;Db=Hb}else{Jb=Gb;Kb=Hb;break}}}else{Jb=mb;Kb=yb}Db=xb-hb|0;if((ob&16|0)==0){Lb=f+(ob<<2)+180|0;Mb=ob}else{Cb=ob+ -16|0;Lb=f+(Cb<<2)+196|0;Mb=Cb}if(Mb>>>0>3){Cb=c[f>>2]|0;c[Cb+20>>2]=31;c[Cb+24>>2]=Mb;Oc[c[Cb>>2]&63](f)}Cb=c[Lb>>2]|0;if((Cb|0)==0){Bb=$f(f)|0;c[Lb>>2]=Bb;Nb=Bb}else{Nb=Cb}Cb=Nb+0|0;Bb=h+0|0;Hb=Cb+17|0;do{a[Cb]=a[Bb]|0;Cb=Cb+1|0;Bb=Bb+1|0}while((Cb|0)<(Hb|0));Fm((c[Lb>>2]|0)+17|0,j|0,256)|0;if((Db|0)>16){gb=Jb;lb=Db;ib=Kb}else{Ob=Jb;Pb=Db;Qb=Kb;break}}}else{Ob=fb;Pb=ab;Qb=Ua}if((Pb|0)!=0){ib=c[f>>2]|0;c[ib+20>>2]=12;Oc[c[ib>>2]&63](f)}c[cb>>2]=Qb;c[bb>>2]=Ob;break};case 219:{ib=c[m>>2]|0;lb=ib+4|0;gb=c[lb>>2]|0;if((gb|0)==0){if((Sc[c[ib+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}Rb=c[lb>>2]|0}else{Rb=gb}gb=c[ib>>2]|0;nb=Rb+ -1|0;Oa=gb+1|0;Pa=d[gb]<<8;if((nb|0)==0){if((Sc[c[ib+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}Sb=c[lb>>2]|0;Tb=c[ib>>2]|0}else{Sb=nb;Tb=Oa}Oa=Sb+ -1|0;nb=Tb+1|0;gb=(d[Tb]|Pa)+ -2|0;if((gb|0)>0){Pa=ib+12|0;Ta=Oa;Sa=gb;Qa=nb;while(1){Bb=Sa+ -1|0;if((Ta|0)==0){if((Sc[c[Pa>>2]&31](f)|0)==0){Ma=0;Na=306;break a}Ub=c[lb>>2]|0;Vb=c[ib>>2]|0}else{Ub=Ta;Vb=Qa}Cb=d[Vb]|0;Hb=Cb>>>4;ob=Cb&15;Cb=c[f>>2]|0;c[Cb+20>>2]=83;c[Cb+24>>2]=ob;c[Cb+28>>2]=Hb;Qc[c[Cb+4>>2]&31](f,1);if(ob>>>0>3){Cb=c[f>>2]|0;c[Cb+20>>2]=32;c[Cb+24>>2]=ob;Oc[c[Cb>>2]&63](f)}Cb=f+(ob<<2)+164|0;ob=c[Cb>>2]|0;if((ob|0)==0){hb=_f(f)|0;c[Cb>>2]=hb;Wb=hb}else{Wb=ob}ob=(Hb|0)!=0;if(ob){if((Sa|0)<129){Hb=0;do{b[Wb+(Hb<<1)>>1]=1;Hb=Hb+1|0}while((Hb|0)!=64);Xb=Bb>>1;Na=153}else{Na=160}}else{if((Sa|0)<65){Hb=0;while(1){b[Wb+(Hb<<1)>>1]=1;Db=Hb+1|0;if((Db|0)==64){Xb=Bb;Na=153;break}else{Hb=Db}}}else{Na=160}}b:do{if((Na|0)==153){Na=0;switch(Xb|0){case 9:{Yb=Xb;Zb=10560;break};case 16:{Yb=Xb;Zb=10432;break};case 25:{Yb=Xb;Zb=10264;break};case 36:{Yb=Xb;Zb=10056;break};case 49:{Yb=Xb;Zb=9792;break};case 4:{Yb=4;Zb=10664;break};default:{Hb=Ub+ -1|0;Db=Vb+1|0;if((Xb|0)>0){_b=Hb;$b=Xb;ac=9472;bc=Db;Na=162;break b}else{cc=Hb;dc=Xb;ec=Db;break b}}}_b=Ub+ -1|0;$b=Yb;ac=Zb;bc=Vb+1|0;Na=162}else if((Na|0)==160){Na=0;_b=Ub+ -1|0;$b=64;ac=9472;bc=Vb+1|0;Na=162}}while(0);if((Na|0)==162){Na=0;Db=_b;Hb=0;hb=bc;while(1){Cb=(Db|0)==0;if(ob){if(Cb){if((Sc[c[Pa>>2]&31](f)|0)==0){Ma=0;Na=306;break a}fc=c[lb>>2]|0;gc=c[ib>>2]|0}else{fc=Db;gc=hb}xb=fc+ -1|0;yb=gc+1|0;mb=d[gc]<<8;if((xb|0)==0){if((Sc[c[Pa>>2]&31](f)|0)==0){Ma=0;Na=306;break a}hc=c[lb>>2]|0;ic=c[ib>>2]|0}else{hc=xb;ic=yb}jc=hc;kc=ic;lc=d[ic]|mb}else{if(Cb){if((Sc[c[Pa>>2]&31](f)|0)==0){Ma=0;Na=306;break a}mc=c[lb>>2]|0;nc=c[ib>>2]|0}else{mc=Db;nc=hb}jc=mc;kc=nc;lc=d[nc]|0}b[Wb+(c[ac+(Hb<<2)>>2]<<1)>>1]=lc;Cb=Hb+1|0;mb=jc+ -1|0;yb=kc+1|0;if((Cb|0)<($b|0)){Db=mb;Hb=Cb;hb=yb}else{cc=mb;dc=$b;ec=yb;break}}}hb=c[f>>2]|0;c:do{if((c[hb+104>>2]|0)>1){Hb=hb;Db=0;while(1){c[Hb+24>>2]=e[Wb+(Db<<1)>>1]|0;c[Hb+28>>2]=e[Wb+((Db|1)<<1)>>1]|0;c[Hb+32>>2]=e[Wb+((Db|2)<<1)>>1]|0;c[Hb+36>>2]=e[Wb+((Db|3)<<1)>>1]|0;c[Hb+40>>2]=e[Wb+((Db|4)<<1)>>1]|0;c[Hb+44>>2]=e[Wb+((Db|5)<<1)>>1]|0;c[Hb+48>>2]=e[Wb+((Db|6)<<1)>>1]|0;c[Hb+52>>2]=e[Wb+((Db|7)<<1)>>1]|0;c[Hb+20>>2]=95;Qc[c[Hb+4>>2]&31](f,2);yb=Db+8|0;if((yb|0)>=64){break c}Hb=c[f>>2]|0;Db=yb}}}while(0);hb=Bb-dc+(ob?0-dc|0:0)|0;if((hb|0)>0){Ta=cc;Sa=hb;Qa=ec}else{oc=cc;pc=hb;qc=ec;break}}}else{oc=Oa;pc=gb;qc=nb}if((pc|0)!=0){Qa=c[f>>2]|0;c[Qa+20>>2]=12;Oc[c[Qa>>2]&63](f)}c[ib>>2]=qc;c[lb>>2]=oc;break};case 221:{Qa=c[m>>2]|0;Sa=Qa+4|0;Ta=c[Sa>>2]|0;if((Ta|0)==0){if((Sc[c[Qa+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}rc=c[Sa>>2]|0}else{rc=Ta}Ta=c[Qa>>2]|0;Pa=rc+ -1|0;bb=Ta+1|0;cb=d[Ta]<<8;if((Pa|0)==0){if((Sc[c[Qa+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}sc=c[Sa>>2]|0;tc=c[Qa>>2]|0}else{sc=Pa;tc=bb}bb=sc+ -1|0;Pa=tc+1|0;if((d[tc]|cb|0)!=4){cb=c[f>>2]|0;c[cb+20>>2]=12;Oc[c[cb>>2]&63](f)}if((bb|0)==0){if((Sc[c[Qa+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}uc=c[Sa>>2]|0;vc=c[Qa>>2]|0}else{uc=bb;vc=Pa}Pa=uc+ -1|0;bb=vc+1|0;cb=d[vc]<<8;if((Pa|0)==0){if((Sc[c[Qa+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}wc=c[Sa>>2]|0;xc=c[Qa>>2]|0}else{wc=Pa;xc=bb}bb=d[xc]|cb;cb=c[f>>2]|0;c[cb+20>>2]=84;c[cb+24>>2]=bb;Qc[c[cb+4>>2]&31](f,1);c[ha>>2]=bb;c[Qa>>2]=xc+1;c[Sa>>2]=wc+ -1;break};case 248:{Sa=c[m>>2]|0;Qa=c[Sa>>2]|0;bb=Sa+4|0;cb=c[bb>>2]|0;if((c[(c[l>>2]|0)+16>>2]|0)==0){Pa=c[f>>2]|0;c[Pa+20>>2]=60;Cm(Pa+24|0,3560,80)|0;Oc[c[c[f>>2]>>2]&63](f)}if((c[Ja>>2]|0)>=3){if((cb|0)==0){if((Sc[c[Sa+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}yc=c[bb>>2]|0;zc=c[Sa>>2]|0}else{yc=cb;zc=Qa}Pa=yc+ -1|0;Ta=zc+1|0;Ua=d[zc]<<8;if((Pa|0)==0){if((Sc[c[Sa+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}Ac=c[bb>>2]|0;Bc=c[Sa>>2]|0}else{Ac=Pa;Bc=Ta}Ta=Ac+ -1|0;Pa=Bc+1|0;if((d[Bc]|Ua|0)!=24){Ua=c[f>>2]|0;c[Ua+20>>2]=12;Oc[c[Ua>>2]&63](f)}if((Ta|0)==0){if((Sc[c[Sa+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}Cc=c[bb>>2]|0;Dc=c[Sa>>2]|0}else{Cc=Ta;Dc=Pa}Pa=Cc+ -1|0;Ta=Dc+1|0;if((a[Dc]|0)!=13){Ua=c[f>>2]|0;c[Ua+20>>2]=70;c[Ua+24>>2]=c[k>>2];Oc[c[Ua>>2]&63](f)}if((Pa|0)==0){if((Sc[c[Sa+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}Ec=c[bb>>2]|0;Fc=c[Sa>>2]|0}else{Ec=Pa;Fc=Ta}Ta=Ec+ -1|0;Pa=Fc+1|0;Ua=d[Fc]<<8;if((Ta|0)==0){if((Sc[c[Sa+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}Gc=c[bb>>2]|0;Hc=c[Sa>>2]|0}else{Gc=Ta;Hc=Pa}Pa=Gc+ -1|0;Ta=Hc+1|0;if((d[Hc]|Ua|0)==255){if((Pa|0)==0){if((Sc[c[Sa+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}Ic=c[bb>>2]|0;Jc=c[Sa>>2]|0}else{Ic=Pa;Jc=Ta}Ua=Ic+ -1|0;ab=Jc+1|0;if((a[Jc]|0)==3){if((Ua|0)==0){if((Sc[c[Sa+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}Kc=c[bb>>2]|0;Lc=c[Sa>>2]|0}else{Kc=Ua;Lc=ab}fb=Kc+ -1|0;hb=Lc+1|0;Db=c[Ka>>2]|0;if((d[Lc]|0)==(c[Db+88>>2]|0)){if((fb|0)==0){if((Sc[c[Sa+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}Mc=c[Ka>>2]|0;Nc=c[bb>>2]|0;Pc=c[Sa>>2]|0}else{Mc=Db;Nc=fb;Pc=hb}Db=Nc+ -1|0;Hb=Pc+1|0;if((d[Pc]|0)==(c[Mc>>2]|0)){if((Db|0)==0){if((Sc[c[Sa+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}Rc=c[Ka>>2]|0;Tc=c[bb>>2]|0;Uc=c[Sa>>2]|0}else{Rc=Mc;Tc=Db;Uc=Hb}yb=Tc+ -1|0;mb=Uc+1|0;if((d[Uc]|0)==(c[Rc+176>>2]|0)){if((yb|0)==0){if((Sc[c[Sa+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}Vc=c[bb>>2]|0;Wc=c[Sa>>2]|0}else{Vc=yb;Wc=mb}Cb=Vc+ -1|0;xb=Wc+1|0;if((a[Wc]|0)==-128){if((Cb|0)==0){if((Sc[c[Sa+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}Xc=c[bb>>2]|0;Yc=c[Sa>>2]|0}else{Xc=Cb;Yc=xb}Gb=Xc+ -1|0;Ib=Yc+1|0;Zc=d[Yc]<<8;if((Gb|0)==0){if((Sc[c[Sa+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}_c=c[bb>>2]|0;$c=c[Sa>>2]|0}else{_c=Gb;$c=Ib}Ib=_c+ -1|0;Gb=$c+1|0;if((d[$c]|Zc|0)==0){if((Ib|0)==0){if((Sc[c[Sa+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}ad=c[bb>>2]|0;bd=c[Sa>>2]|0}else{ad=Ib;bd=Gb}Zc=ad+ -1|0;cd=bd+1|0;dd=d[bd]<<8;if((Zc|0)==0){if((Sc[c[Sa+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}ed=c[bb>>2]|0;fd=c[Sa>>2]|0}else{ed=Zc;fd=cd}cd=ed+ -1|0;Zc=fd+1|0;if((d[fd]|dd|0)==0){if((cd|0)==0){if((Sc[c[Sa+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}gd=c[bb>>2]|0;hd=c[Sa>>2]|0}else{gd=cd;hd=Zc}dd=gd+ -1|0;id=hd+1|0;if((a[hd]|0)==0){if((dd|0)==0){if((Sc[c[Sa+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}jd=c[bb>>2]|0;kd=c[Sa>>2]|0}else{jd=dd;kd=id}ld=jd+ -1|0;md=kd+1|0;nd=d[kd]<<8;if((ld|0)==0){if((Sc[c[Sa+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}od=c[bb>>2]|0;pd=c[Sa>>2]|0}else{od=ld;pd=md}md=od+ -1|0;ld=pd+1|0;if((d[pd]|nd|0)==1){if((md|0)==0){if((Sc[c[Sa+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}qd=c[bb>>2]|0;rd=c[Sa>>2]|0}else{qd=md;rd=ld}nd=qd+ -1|0;sd=rd+1|0;td=d[rd]<<8;if((nd|0)==0){if((Sc[c[Sa+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}ud=c[bb>>2]|0;vd=c[Sa>>2]|0}else{ud=nd;vd=sd}sd=ud+ -1|0;nd=vd+1|0;if((d[vd]|td|0)==0){if((sd|0)==0){if((Sc[c[Sa+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}wd=c[bb>>2]|0;xd=c[Sa>>2]|0}else{wd=sd;xd=nd}td=wd+ -1|0;yd=xd+1|0;if((a[xd]|0)==0){if((td|0)==0){if((Sc[c[Sa+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}zd=c[bb>>2]|0;Ad=c[Sa>>2]|0}else{zd=td;Ad=yd}Bd=zd+ -1|0;Cd=Ad+1|0;Dd=d[Ad]<<8;if((Bd|0)==0){if((Sc[c[Sa+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}Ed=c[bb>>2]|0;Fd=c[Sa>>2]|0}else{Ed=Bd;Fd=Cd}Cd=Ed+ -1|0;Bd=Fd+1|0;if((d[Fd]|Dd|0)==1){if((Cd|0)==0){if((Sc[c[Sa+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}Gd=c[bb>>2]|0;Hd=c[Sa>>2]|0}else{Gd=Cd;Hd=Bd}Dd=Gd+ -1|0;Id=Hd+1|0;Jd=d[Hd]<<8;if((Dd|0)==0){if((Sc[c[Sa+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}Kd=c[bb>>2]|0;Ld=c[Sa>>2]|0}else{Kd=Dd;Ld=Id}Id=Kd+ -1|0;Dd=Ld+1|0;if((d[Ld]|Jd|0)==0){Md=Id;Nd=Dd}else{Od=Id;Pd=Dd;Na=291}}else{Od=Cd;Pd=Bd;Na=291}}else{Od=td;Pd=yd;Na=291}}else{Od=sd;Pd=nd;Na=291}}else{Od=md;Pd=ld;Na=291}}else{Od=dd;Pd=id;Na=291}}else{Od=cd;Pd=Zc;Na=291}}else{Od=Ib;Pd=Gb;Na=291}}else{Od=Cb;Pd=xb;Na=291}}else{Od=yb;Pd=mb;Na=291}}else{Od=Db;Pd=Hb;Na=291}}else{Od=fb;Pd=hb;Na=291}}else{Od=Ua;Pd=ab;Na=291}}else{Od=Pa;Pd=Ta;Na=291}}else{Od=cb;Pd=Qa;Na=291}if((Na|0)==291){Na=0;Qa=c[f>>2]|0;c[Qa+20>>2]=28;Oc[c[Qa>>2]&63](f);Md=Od;Nd=Pd}c[ja>>2]=1;c[Sa>>2]=Nd;c[bb>>2]=Md;break};case 239:case 238:case 237:case 236:case 235:case 234:case 233:case 232:case 231:case 230:case 229:case 228:case 227:case 226:case 225:case 224:{if((Sc[c[(c[l>>2]|0)+32+(Xa+ -224<<2)>>2]&31](f)|0)==0){Ma=0;Na=306;break a}break};case 1:case 215:case 214:case 213:case 212:case 211:case 210:case 209:case 208:{bb=c[f>>2]|0;c[bb+20>>2]=94;c[bb+24>>2]=c[k>>2];Qc[c[bb+4>>2]&31](f,1);break};case 254:{if((Sc[c[(c[l>>2]|0)+28>>2]&31](f)|0)==0){Ma=0;Na=306;break a}break};case 220:{bb=c[m>>2]|0;Sa=bb+4|0;Qa=c[Sa>>2]|0;if((Qa|0)==0){if((Sc[c[bb+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}Qd=c[Sa>>2]|0}else{Qd=Qa}Qa=c[bb>>2]|0;cb=Qd+ -1|0;Ta=Qa+1|0;Pa=d[Qa]<<8;if((cb|0)==0){if((Sc[c[bb+12>>2]&31](f)|0)==0){Ma=0;Na=306;break a}Rd=c[Sa>>2]|0;Sd=c[bb>>2]|0}else{Rd=cb;Sd=Ta}Ta=(d[Sd]|Pa)+ -2|0;Pa=c[f>>2]|0;c[Pa+20>>2]=93;c[Pa+24>>2]=c[k>>2];c[Pa+28>>2]=Ta;Qc[c[Pa+4>>2]&31](f,1);c[bb>>2]=Sd+1;c[Sa>>2]=Rd+ -1;if((Ta|0)>0){Qc[c[(c[m>>2]|0)+16>>2]&31](f,Ta)}break};default:{Ta=c[f>>2]|0;c[Ta+20>>2]=70;c[Ta+24>>2]=c[k>>2];Oc[c[Ta>>2]&63](f)}}c[k>>2]=0;La=0}if((Na|0)==25){La=c[m>>2]|0;m=c[La>>2]|0;Rd=La+4|0;Sd=c[Rd>>2]|0;if((c[(c[l>>2]|0)+16>>2]|0)==0){Qd=c[f>>2]|0;c[Qd+20>>2]=60;Cm(Qd+24|0,3568,80)|0;Oc[c[c[f>>2]>>2]&63](f)}do{if((Sd|0)==0){if((Sc[c[La+12>>2]&31](f)|0)==0){Ma=0;i=g;return Ma|0}else{Td=c[Rd>>2]|0;Ud=c[La>>2]|0;break}}else{Td=Sd;Ud=m}}while(0);m=Td+ -1|0;Td=Ud+1|0;Sd=d[Ud]<<8;do{if((m|0)==0){if((Sc[c[La+12>>2]&31](f)|0)==0){Ma=0;i=g;return Ma|0}else{Vd=c[Rd>>2]|0;Wd=c[La>>2]|0;break}}else{Vd=m;Wd=Td}}while(0);Td=Vd+ -1|0;Vd=Wd+1|0;m=d[Wd]|Sd;do{if((Td|0)==0){if((Sc[c[La+12>>2]&31](f)|0)==0){Ma=0;i=g;return Ma|0}else{Xd=c[Rd>>2]|0;Yd=c[La>>2]|0;break}}else{Xd=Td;Yd=Vd}}while(0);Vd=a[Yd]|0;Td=Vd&255;Sd=c[f>>2]|0;c[Sd+20>>2]=105;c[Sd+24>>2]=Td;Qc[c[Sd+4>>2]&31](f,1);do{if(!((m|0)!=((Td<<1)+6|0)|(Vd&255)>4)){if(!(Vd<<24>>24==0)){c[f+340>>2]=Td;Sd=Xd+ -1|0;Zd=(Sd|0)==0;_d=Sd;$d=Yd+1|0;Na=42;break}if((c[f+224>>2]|0)!=0){c[f+340>>2]=Td;Sd=Xd+ -1|0;if((Sd|0)==0){ae=1;Na=61}else{be=1;ce=Sd;de=Yd+1|0}}else{Na=41}}else{Na=41}}while(0);if((Na|0)==41){m=c[f>>2]|0;c[m+20>>2]=12;Oc[c[m>>2]&63](f);c[f+340>>2]=Td;m=Xd+ -1|0;Xd=Yd+1|0;Yd=(m|0)==0;if(Vd<<24>>24==0){ee=Yd;fe=1;ge=m;he=Xd;Na=60}else{Zd=Yd;_d=m;$d=Xd;Na=42}}d:do{if((Na|0)==42){Xd=La+12|0;m=f+344|0;Yd=Zd;Vd=_d;Sd=0;Wd=$d;while(1){if(Yd){if((Sc[c[Xd>>2]&31](f)|0)==0){Ma=0;Na=306;break}ie=c[Rd>>2]|0;je=c[La>>2]|0}else{ie=Vd;je=Wd}Ud=ie+ -1|0;Qd=je+1|0;Xa=d[je]|0;e:do{if((Sd|0)>0){Md=0;while(1){Nd=Md+1|0;if((Xa|0)==(c[c[f+(Md<<2)+344>>2]>>2]|0)){break}if((Nd|0)<(Sd|0)){Md=Nd}else{ke=Xa;break e}}Md=c[c[m>>2]>>2]|0;if((Sd|0)>1){Nd=Md;ja=1;while(1){Pd=c[c[f+(ja<<2)+344>>2]>>2]|0;Od=(Pd|0)>(Nd|0)?Pd:Nd;Pd=ja+1|0;if((Pd|0)==(Sd|0)){le=Od;break}else{Nd=Od;ja=Pd}}}else{le=Md}ke=le+1|0}else{ke=Xa}}while(0);Xa=c[Ka>>2]|0;ob=c[Ja>>2]|0;f:do{if((ob|0)>0){Bb=0;ja=Xa;while(1){if((ke|0)==(c[ja>>2]|0)){me=ja;break f}Nd=Bb+1|0;Pd=ja+88|0;if((Nd|0)<(ob|0)){Bb=Nd;ja=Pd}else{ne=Pd;Na=55;break}}}else{ne=Xa;Na=55}}while(0);if((Na|0)==55){Na=0;Xa=c[f>>2]|0;c[Xa+20>>2]=4;c[Xa+24>>2]=ke;Oc[c[Xa>>2]&63](f);me=ne}c[f+(Sd<<2)+344>>2]=me;if((Ud|0)==0){if((Sc[c[Xd>>2]&31](f)|0)==0){Ma=0;Na=306;break}oe=c[Rd>>2]|0;pe=c[La>>2]|0}else{oe=Ud;pe=Qd}Xa=d[pe]|0;ob=me+20|0;c[ob>>2]=Xa>>>4;ja=me+24|0;c[ja>>2]=Xa&15;Xa=c[f>>2]|0;c[Xa+24>>2]=c[me>>2];c[Xa+28>>2]=c[ob>>2];c[Xa+32>>2]=c[ja>>2];c[Xa+20>>2]=106;Qc[c[Xa+4>>2]&31](f,1);Xa=Sd+1|0;ja=oe+ -1|0;ob=pe+1|0;Bb=(ja|0)==0;if((Xa|0)<(Td|0)){Yd=Bb;Vd=ja;Sd=Xa;Wd=ob}else{ee=Bb;fe=0;ge=ja;he=ob;Na=60;break d}}if((Na|0)==306){i=g;return Ma|0}}}while(0);if((Na|0)==60){if(ee){ae=fe;Na=61}else{be=fe;ce=ge;de=he}}do{if((Na|0)==61){if((Sc[c[La+12>>2]&31](f)|0)==0){Ma=0;i=g;return Ma|0}else{be=ae;ce=c[Rd>>2]|0;de=c[La>>2]|0;break}}}while(0);ae=ce+ -1|0;ce=de+1|0;he=f+412|0;c[he>>2]=d[de]|0;do{if((ae|0)==0){if((Sc[c[La+12>>2]&31](f)|0)==0){Ma=0;i=g;return Ma|0}else{qe=c[Rd>>2]|0;re=c[La>>2]|0;break}}else{qe=ae;re=ce}}while(0);ce=qe+ -1|0;qe=f+416|0;c[qe>>2]=d[re]|0;do{if((ce|0)==0){if((Sc[c[La+12>>2]&31](f)|0)==0){Ma=0;i=g;return Ma|0}else{se=c[Rd>>2]|0;te=c[La>>2]|0;break}}else{se=ce;te=re+1|0}}while(0);re=d[te]|0;ce=f+420|0;c[ce>>2]=re>>>4;ae=f+424|0;c[ae>>2]=re&15;re=c[f>>2]|0;c[re+24>>2]=c[he>>2];c[re+28>>2]=c[qe>>2];c[re+32>>2]=c[ce>>2];c[re+36>>2]=c[ae>>2];c[re+20>>2]=107;Qc[c[re+4>>2]&31](f,1);c[(c[l>>2]|0)+20>>2]=0;if(!be){be=f+144|0;c[be>>2]=(c[be>>2]|0)+1}c[La>>2]=te+1;c[Rd>>2]=se+ -1;c[k>>2]=0;Ma=1;i=g;return Ma|0}else if((Na|0)==73){se=c[f>>2]|0;c[se+20>>2]=87;Qc[c[se+4>>2]&31](f,1);c[k>>2]=0;Ma=2;i=g;return Ma|0}else if((Na|0)==306){i=g;return Ma|0}return 0}function rh(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0;b=i;d=a+440|0;e=c[d>>2]|0;do{if((e|0)==0){if((nh(a)|0)==0){f=0;i=b;return f|0}else{g=c[d>>2]|0;break}}else{g=e}}while(0);e=a+464|0;h=(c[e>>2]|0)+20|0;j=c[h>>2]|0;if((g|0)!=(j+208|0)){if((Wc[c[(c[a+24>>2]|0)+20>>2]&31](a,j)|0)==0){f=0;i=b;return f|0}}else{j=c[a>>2]|0;c[j+20>>2]=100;c[j+24>>2]=c[h>>2];Qc[c[j+4>>2]&31](a,3);c[d>>2]=0}d=(c[e>>2]|0)+20|0;c[d>>2]=(c[d>>2]|0)+1&7;f=1;i=b;return f|0}function sh(a){a=a|0;var b=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;b=i;e=a+24|0;f=c[e>>2]|0;g=f+4|0;h=c[g>>2]|0;do{if((h|0)==0){if((Sc[c[f+12>>2]&31](a)|0)==0){j=0;i=b;return j|0}else{k=c[g>>2]|0;break}}else{k=h}}while(0);h=c[f>>2]|0;l=k+ -1|0;k=h+1|0;m=(d[h]|0)<<8;do{if((l|0)==0){if((Sc[c[f+12>>2]&31](a)|0)==0){j=0;i=b;return j|0}else{n=c[g>>2]|0;o=c[f>>2]|0;break}}else{n=l;o=k}}while(0);k=(d[o]|0|m)+ -2|0;m=c[a>>2]|0;c[m+20>>2]=93;c[m+24>>2]=c[a+440>>2];c[m+28>>2]=k;Qc[c[m+4>>2]&31](a,1);c[f>>2]=o+1;c[g>>2]=n+ -1;if((k|0)<=0){j=1;i=b;return j|0}Qc[c[(c[e>>2]|0)+16>>2]&31](a,k);j=1;i=b;return j|0}function th(b){b=b|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;e=i;i=i+16|0;f=e;g=b+24|0;h=c[g>>2]|0;j=h+4|0;k=c[j>>2]|0;do{if((k|0)==0){if((Sc[c[h+12>>2]&31](b)|0)==0){l=0;i=e;return l|0}else{m=c[j>>2]|0;break}}else{m=k}}while(0);k=c[h>>2]|0;n=m+ -1|0;m=k+1|0;o=d[k]<<8;do{if((n|0)==0){if((Sc[c[h+12>>2]&31](b)|0)==0){l=0;i=e;return l|0}else{p=c[j>>2]|0;q=c[h>>2]|0;break}}else{p=n;q=m}}while(0);m=(d[q]|o)+ -2|0;o=p+ -1|0;p=q+1|0;if((m|0)<=13){if((m|0)<1){r=o;s=p;t=0}else{u=o;v=p;w=m;x=9}}else{u=o;v=p;w=14;x=9}a:do{if((x|0)==9){p=h+12|0;o=u;q=0;n=v;while(1){if((o|0)==0){if((Sc[c[p>>2]&31](b)|0)==0){l=0;break}y=c[j>>2]|0;z=c[h>>2]|0}else{y=o;z=n}a[f+q|0]=a[z]|0;k=q+1|0;A=y+ -1|0;B=z+1|0;if(k>>>0<w>>>0){o=A;q=k;n=B}else{r=A;s=B;t=w;break a}}i=e;return l|0}}while(0);w=m-t|0;z=b+440|0;y=c[z>>2]|0;do{if((y|0)==238){if(((((t>>>0>11?(a[f]|0)==65:0)?(a[f+1|0]|0)==100:0)?(a[f+2|0]|0)==111:0)?(a[f+3|0]|0)==98:0)?(a[f+4|0]|0)==101:0){v=d[f+7|0]<<8|d[f+8|0];u=d[f+9|0]<<8|d[f+10|0];x=a[f+11|0]|0;n=c[b>>2]|0;c[n+24>>2]=d[f+5|0]<<8|d[f+6|0];c[n+28>>2]=v;c[n+32>>2]=u;c[n+36>>2]=x&255;c[n+20>>2]=78;Qc[c[n+4>>2]&31](b,1);c[b+296>>2]=1;a[b+300|0]=x;break}x=c[b>>2]|0;c[x+20>>2]=80;c[x+24>>2]=m;Qc[c[x+4>>2]&31](b,1)}else if((y|0)==224){uh(b,f,t,w)}else{x=c[b>>2]|0;c[x+20>>2]=70;c[x+24>>2]=c[z>>2];Oc[c[x>>2]&63](b)}}while(0);c[h>>2]=s;c[j>>2]=r;if((w|0)<=0){l=1;i=e;return l|0}Qc[c[(c[g>>2]|0)+16>>2]&31](b,w);l=1;i=e;return l|0}function uh(e,f,g,h){e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;j=i;k=h+g|0;if(((((g>>>0>13?(a[f]|0)==74:0)?(a[f+1|0]|0)==70:0)?(a[f+2|0]|0)==73:0)?(a[f+3|0]|0)==70:0)?(a[f+4|0]|0)==0:0){c[e+284>>2]=1;h=a[f+5|0]|0;l=e+288|0;a[l]=h;m=e+289|0;a[m]=a[f+6|0]|0;n=e+290|0;a[n]=a[f+7|0]|0;o=(d[f+8|0]<<8|d[f+9|0])&65535;p=e+292|0;b[p>>1]=o;q=(d[f+10|0]<<8|d[f+11|0])&65535;r=e+294|0;b[r>>1]=q;if((h+ -1<<24>>24&255)<2){s=e;t=h;u=o;v=q}else{q=c[e>>2]|0;c[q+20>>2]=122;c[q+24>>2]=d[l]|0;c[q+28>>2]=d[m]|0;Qc[c[q+4>>2]&31](e,-1);s=e;t=a[l]|0;u=b[p>>1]|0;v=b[r>>1]|0}r=c[e>>2]|0;c[r+24>>2]=t&255;c[r+28>>2]=d[m]|0;c[r+32>>2]=u&65535;c[r+36>>2]=v&65535;c[r+40>>2]=d[n]|0;c[r+20>>2]=89;Qc[c[r+4>>2]&31](s,1);r=f+12|0;n=a[r]|0;v=f+13|0;u=a[v]|0;if((u|n)<<24>>24==0){w=n;x=u}else{u=c[e>>2]|0;c[u+20>>2]=92;c[u+24>>2]=d[r]|0;c[u+28>>2]=d[v]|0;Qc[c[u+4>>2]&31](s,1);w=a[r]|0;x=a[v]|0}v=k+ -14|0;if((v|0)==(aa((w&255)*3|0,x&255)|0)){i=j;return}x=c[e>>2]|0;c[x+20>>2]=90;c[x+24>>2]=v;Qc[c[x+4>>2]&31](s,1);i=j;return}if(((((g>>>0>5?(a[f]|0)==74:0)?(a[f+1|0]|0)==70:0)?(a[f+2|0]|0)==88:0)?(a[f+3|0]|0)==88:0)?(a[f+4|0]|0)==0:0){g=f+5|0;f=d[g]|0;if((f|0)==19){s=c[e>>2]|0;c[s+20>>2]=112;c[s+24>>2]=k;Qc[c[s+4>>2]&31](e,1);i=j;return}else if((f|0)==17){s=c[e>>2]|0;c[s+20>>2]=111;c[s+24>>2]=k;Qc[c[s+4>>2]&31](e,1);i=j;return}else if((f|0)==16){f=c[e>>2]|0;c[f+20>>2]=110;c[f+24>>2]=k;Qc[c[f+4>>2]&31](e,1);i=j;return}else{f=c[e>>2]|0;c[f+20>>2]=91;c[f+24>>2]=d[g]|0;c[f+28>>2]=k;Qc[c[f+4>>2]&31](e,1);i=j;return}}f=c[e>>2]|0;c[f+20>>2]=79;c[f+24>>2]=k;Qc[c[f+4>>2]&31](e,1);i=j;return}function vh(a,b,e,f){a=a|0;b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0;g=i;h=c[a+24>>2]|0;j=c[h>>2]|0;k=h+4|0;l=c[k>>2]|0;c[a+220>>2]=b;c[a+224>>2]=e;c[a+228>>2]=f;do{if((l|0)==0){if((Sc[c[h+12>>2]&31](a)|0)==0){m=0;i=g;return m|0}else{n=c[k>>2]|0;o=c[h>>2]|0;break}}else{n=l;o=j}}while(0);j=n+ -1|0;n=o+1|0;l=(d[o]|0)<<8;do{if((j|0)==0){if((Sc[c[h+12>>2]&31](a)|0)==0){m=0;i=g;return m|0}else{p=c[k>>2]|0;q=c[h>>2]|0;break}}else{p=j;q=n}}while(0);n=p+ -1|0;p=q+1|0;j=d[q]|0|l;do{if((n|0)==0){if((Sc[c[h+12>>2]&31](a)|0)==0){m=0;i=g;return m|0}else{r=c[k>>2]|0;s=c[h>>2]|0;break}}else{r=n;s=p}}while(0);p=r+ -1|0;r=s+1|0;c[a+212>>2]=d[s]|0;do{if((p|0)==0){if((Sc[c[h+12>>2]&31](a)|0)==0){m=0;i=g;return m|0}else{t=c[k>>2]|0;u=c[h>>2]|0;break}}else{t=p;u=r}}while(0);r=t+ -1|0;t=u+1|0;p=(d[u]|0)<<8;u=a+32|0;c[u>>2]=p;do{if((r|0)==0){if((Sc[c[h+12>>2]&31](a)|0)==0){m=0;i=g;return m|0}else{v=c[u>>2]|0;w=c[k>>2]|0;x=c[h>>2]|0;break}}else{v=p;w=r;x=t}}while(0);t=w+ -1|0;w=x+1|0;c[u>>2]=v+(d[x]|0);do{if((t|0)==0){if((Sc[c[h+12>>2]&31](a)|0)==0){m=0;i=g;return m|0}else{y=c[k>>2]|0;z=c[h>>2]|0;break}}else{y=t;z=w}}while(0);w=y+ -1|0;y=z+1|0;t=(d[z]|0)<<8;z=a+28|0;c[z>>2]=t;do{if((w|0)==0){if((Sc[c[h+12>>2]&31](a)|0)==0){m=0;i=g;return m|0}else{A=c[z>>2]|0;B=c[k>>2]|0;C=c[h>>2]|0;break}}else{A=t;B=w;C=y}}while(0);y=B+ -1|0;B=C+1|0;c[z>>2]=A+(d[C]|0);do{if((y|0)==0){if((Sc[c[h+12>>2]&31](a)|0)==0){m=0;i=g;return m|0}else{D=c[k>>2]|0;E=c[h>>2]|0;break}}else{D=y;E=B}}while(0);B=a+36|0;c[B>>2]=d[E]|0;y=j+ -8|0;j=c[a>>2]|0;c[j+24>>2]=c[a+440>>2];c[j+28>>2]=c[z>>2];c[j+32>>2]=c[u>>2];c[j+36>>2]=c[B>>2];c[j+20>>2]=102;Qc[c[j+4>>2]&31](a,1);j=a+464|0;if((c[(c[j>>2]|0)+16>>2]|0)!=0){C=c[a>>2]|0;c[C+20>>2]=61;Oc[c[C>>2]&63](a)}if(((c[u>>2]|0)!=0?(c[z>>2]|0)!=0:0)?(z=c[B>>2]|0,(z|0)>=1):0){F=z}else{z=c[a>>2]|0;c[z+20>>2]=33;Oc[c[z>>2]&63](a);F=c[B>>2]|0}if((y|0)!=(F*3|0)){F=c[a>>2]|0;c[F+20>>2]=12;Oc[c[F>>2]&63](a)}F=a+216|0;if((c[F>>2]|0)==0){c[F>>2]=Jc[c[c[a+4>>2]>>2]&15](a,1,(c[B>>2]|0)*88|0)|0}y=D+ -1|0;D=E+1|0;a:do{if((c[B>>2]|0)>0){E=h+12|0;z=y;u=0;C=D;while(1){if((z|0)==0){if((Sc[c[E>>2]&31](a)|0)==0){m=0;G=56;break}H=c[k>>2]|0;I=c[h>>2]|0}else{H=z;I=C}A=H+ -1|0;w=I+1|0;t=d[I]|0;x=c[F>>2]|0;b:do{if((u|0)>0){v=x;r=0;while(1){if((t|0)==(c[v>>2]|0)){break}p=r+1|0;s=v+88|0;if((p|0)<(u|0)){v=s;r=p}else{J=t;K=s;break b}}r=c[x>>2]|0;v=x+88|0;if((u|0)>1){s=r;p=v;n=1;while(1){l=c[p>>2]|0;s=(l|0)>(s|0)?l:s;n=n+1|0;if((n|0)==(u|0)){break}else{p=p+88|0}}L=s;M=x+(u*88|0)|0}else{L=r;M=v}J=L+1|0;K=M}else{J=t;K=x}}while(0);c[K>>2]=J;c[K+4>>2]=u;if((A|0)==0){if((Sc[c[E>>2]&31](a)|0)==0){m=0;G=56;break}N=c[k>>2]|0;O=c[h>>2]|0}else{N=A;O=w}x=N+ -1|0;t=d[O]|0;p=K+8|0;c[p>>2]=t>>>4;n=K+12|0;c[n>>2]=t&15;if((x|0)==0){if((Sc[c[E>>2]&31](a)|0)==0){m=0;G=56;break}P=c[k>>2]|0;Q=c[h>>2]|0}else{P=x;Q=O+1|0}x=K+16|0;c[x>>2]=d[Q]|0;t=c[a>>2]|0;c[t+24>>2]=c[K>>2];c[t+28>>2]=c[p>>2];c[t+32>>2]=c[n>>2];c[t+36>>2]=c[x>>2];c[t+20>>2]=103;Qc[c[t+4>>2]&31](a,1);t=u+1|0;x=P+ -1|0;n=Q+1|0;if((t|0)<(c[B>>2]|0)){z=x;u=t;C=n}else{R=x;S=n;break a}}if((G|0)==56){i=g;return m|0}}else{R=y;S=D}}while(0);c[(c[j>>2]|0)+16>>2]=1;c[h>>2]=S;c[k>>2]=R;m=1;i=g;return m|0}function wh(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;b=i;d=a+20|0;if((c[d>>2]|0)!=202){e=c[a>>2]|0;c[e+20>>2]=21;c[e+24>>2]=c[d>>2];Oc[c[e>>2]&63](a)}bh(a);e=a+216|0;d=a+36|0;f=c[d>>2]|0;if((f|0)>0){g=a+316|0;h=a+324|0;j=a+76|0;k=a+320|0;l=a+328|0;m=0;n=c[e>>2]|0;while(1){o=c[h>>2]|0;p=(c[j>>2]|0)!=0?8:4;a:do{if((o|0)>(p|0)){q=1}else{r=c[g>>2]|0;s=c[n+8>>2]|0;t=1;while(1){u=t<<1;if(((r|0)%(aa(u,s)|0)|0|0)!=0){q=t;break a}if((aa(o,u)|0)>(p|0)){q=u;break}else{t=u}}}}while(0);p=aa(o,q)|0;t=n+36|0;c[t>>2]=p;s=c[l>>2]|0;r=(c[j>>2]|0)!=0?8:4;b:do{if((s|0)>(r|0)){v=1}else{u=c[k>>2]|0;w=c[n+12>>2]|0;x=1;while(1){y=x<<1;if(((u|0)%(aa(y,w)|0)|0|0)!=0){v=x;break b}if((aa(s,y)|0)>(r|0)){v=y;break}else{x=y}}}}while(0);r=aa(s,v)|0;o=n+40|0;c[o>>2]=r;x=r<<1;if((p|0)<=(x|0)){w=p<<1;if((r|0)>(w|0)){c[o>>2]=w}}else{c[t>>2]=x}m=m+1|0;z=c[d>>2]|0;if((m|0)>=(z|0)){break}else{n=n+88|0}}if((z|0)>0){n=a+28|0;m=a+316|0;v=a+428|0;k=a+32|0;j=a+320|0;l=0;q=c[e>>2]|0;while(1){e=aa(aa(c[q+8>>2]|0,c[n>>2]|0)|0,c[q+36>>2]|0)|0;c[q+44>>2]=$i(e,aa(c[v>>2]|0,c[m>>2]|0)|0)|0;e=aa(aa(c[q+12>>2]|0,c[k>>2]|0)|0,c[q+40>>2]|0)|0;c[q+48>>2]=$i(e,aa(c[v>>2]|0,c[j>>2]|0)|0)|0;e=l+1|0;g=c[d>>2]|0;if((e|0)<(g|0)){l=e;q=q+88|0}else{A=g;break}}}else{A=z}}else{A=f}switch(c[a+44>>2]|0){case 6:case 2:{c[a+120>>2]=3;B=3;break};case 1:{c[a+120>>2]=1;B=1;break};case 5:case 4:{c[a+120>>2]=4;B=4;break};case 7:case 3:{c[a+120>>2]=3;B=3;break};default:{c[a+120>>2]=A;B=A}}c[a+124>>2]=(c[a+84>>2]|0)==0?B:1;if((xh(a)|0)==0){c[a+128>>2]=1;i=b;return}else{c[a+128>>2]=c[a+320>>2];i=b;return}}function xh(a){a=a|0;var b=0,d=0,e=0;b=i;if((((((((((((((((((c[a+76>>2]|0)==0?(c[a+308>>2]|0)==0:0)?(c[a+40>>2]|0)==3:0)?(c[a+36>>2]|0)==3:0)?(c[a+44>>2]|0)==2:0)?(c[a+120>>2]|0)==3:0)?(c[a+304>>2]|0)==0:0)?(d=c[a+216>>2]|0,(c[d+8>>2]|0)==2):0)?(c[d+96>>2]|0)==1:0)?(c[d+184>>2]|0)==1:0)?(c[d+12>>2]|0)<=2:0)?(c[d+100>>2]|0)==1:0)?(c[d+188>>2]|0)==1:0)?(e=c[d+36>>2]|0,(e|0)==(c[a+324>>2]|0)):0)?(c[d+124>>2]|0)==(e|0):0)?(c[d+212>>2]|0)==(e|0):0)?(e=c[d+40>>2]|0,(e|0)==(c[a+328>>2]|0)):0)?(c[d+128>>2]|0)==(e|0):0){i=b;return(c[d+216>>2]|0)==(e|0)|0}i=b;return 0}function yh(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;d=i;e=b+4|0;f=Jc[c[c[e>>2]>>2]&15](b,1,28)|0;g=b+444|0;c[g>>2]=f;c[f>>2]=30;c[f+4>>2]=31;c[f+8>>2]=0;f=c[g>>2]|0;g=b+212|0;if((c[g>>2]|0)!=8){h=c[b>>2]|0;c[h+20>>2]=16;c[h+24>>2]=c[g>>2];Oc[c[h>>2]&63](b)}wh(b);h=Jc[c[c[e>>2]>>2]&15](b,1,1408)|0;g=b+336|0;c[g>>2]=h+256;Gm(h|0,0,256)|0;j=0;do{a[h+(j+256)|0]=j;j=j+1|0}while((j|0)!=256);Gm(h+512|0,-1,384)|0;Gm(h+896|0,0,384)|0;j=h+1280|0;h=(c[g>>2]|0)+0|0;g=j+128|0;do{a[j]=a[h]|0;j=j+1|0;h=h+1|0}while((j|0)<(g|0));if(((c[b+116>>2]|0)!=0?(c[b+112>>2]|0)!=0:0)?(h=b+120|0,(c[h>>2]|0)>=1):0){k=h}else{h=c[b>>2]|0;c[h+20>>2]=33;Oc[c[h>>2]&63](b);k=b+120|0}h=f+12|0;c[h>>2]=0;j=f+16|0;c[j>>2]=xh(b)|0;g=f+20|0;c[g>>2]=0;l=f+24|0;c[l>>2]=0;do{if((c[b+84>>2]|0)==0){c[b+100>>2]=0;c[b+104>>2]=0;c[b+108>>2]=0;m=b+68|0}else{if((c[b+64>>2]|0)==0){c[b+100>>2]=0;c[b+104>>2]=0;c[b+108>>2]=0}f=b+68|0;if((c[f>>2]|0)!=0){n=c[b>>2]|0;c[n+20>>2]=48;Oc[c[n>>2]&63](b)}do{if((c[k>>2]|0)==3){if((c[b+136>>2]|0)!=0){c[b+104>>2]=1;break}if((c[b+92>>2]|0)==0){c[b+100>>2]=1;break}else{c[b+108>>2]=1;break}}else{c[b+100>>2]=1;c[b+104>>2]=0;c[b+108>>2]=0;c[b+136>>2]=0}}while(0);if((c[b+100>>2]|0)!=0){Gi(b);c[g>>2]=c[b+484>>2]}if((c[b+108>>2]|0)==0?(c[b+104>>2]|0)==0:0){m=f;break}Qi(b);c[l>>2]=c[b+484>>2];m=f}}while(0);if((c[m>>2]|0)==0){if((c[j>>2]|0)==0){Dg(b);Mh(b)}else{Bh(b)}Hh(b,c[b+108>>2]|0)}Pg(b);if((c[b+228>>2]|0)==0){Rg(b)}else{gg(b)}j=b+460|0;if((c[(c[j>>2]|0)+16>>2]|0)==0){o=(c[b+64>>2]|0)!=0}else{o=1}vg(b,o&1);if((c[m>>2]|0)==0){hh(b,0)}Oc[c[(c[e>>2]|0)+24>>2]&63](b);Oc[c[(c[j>>2]|0)+8>>2]&63](b);e=c[b+8>>2]|0;if((e|0)==0){i=d;return}if((c[b+64>>2]|0)!=0){i=d;return}if((c[(c[j>>2]|0)+16>>2]|0)==0){i=d;return}j=c[b+36>>2]|0;if((c[b+224>>2]|0)==0){p=j}else{p=(j*3|0)+2|0}c[e+4>>2]=0;c[e+8>>2]=aa(c[b+332>>2]|0,p)|0;c[e+12>>2]=0;c[e+16>>2]=(c[b+108>>2]|0)!=0?3:2;c[h>>2]=(c[h>>2]|0)+1;i=d;return}function zh(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;b=i;d=c[a+444>>2]|0;e=d+8|0;if((c[e>>2]|0)==0){f=a+84|0;do{if((c[f>>2]|0)!=0?(c[a+136>>2]|0)==0:0){if((c[a+92>>2]|0)!=0?(c[a+108>>2]|0)!=0:0){c[a+484>>2]=c[d+24>>2];c[e>>2]=1;break}if((c[a+100>>2]|0)==0){g=c[a>>2]|0;c[g+20>>2]=47;Oc[c[g>>2]&63](a);break}else{c[a+484>>2]=c[d+20>>2];break}}}while(0);Oc[c[c[a+472>>2]>>2]&63](a);Oc[c[(c[a+452>>2]|0)+8>>2]&63](a);if((c[a+68>>2]|0)==0){if((c[d+16>>2]|0)==0){Oc[c[c[a+480>>2]>>2]&63](a)}Oc[c[c[a+476>>2]>>2]&63](a);if((c[f>>2]|0)!=0){Qc[c[c[a+484>>2]>>2]&31](a,c[e>>2]|0)}Qc[c[c[a+456>>2]>>2]&31](a,(c[e>>2]|0)!=0?3:0);Qc[c[c[a+448>>2]>>2]&31](a,0)}}else{c[e>>2]=0;Qc[c[c[a+484>>2]>>2]&31](a,0);Qc[c[c[a+456>>2]>>2]&31](a,2);Qc[c[c[a+448>>2]>>2]&31](a,2)}f=c[a+8>>2]|0;if((f|0)==0){i=b;return}g=d+12|0;c[f+12>>2]=c[g>>2];d=((c[e>>2]|0)!=0?2:1)+(c[g>>2]|0)|0;g=f+16|0;c[g>>2]=d;if((c[a+64>>2]|0)==0){i=b;return}if((c[(c[a+460>>2]|0)+20>>2]|0)!=0){i=b;return}c[g>>2]=d+((c[a+108>>2]|0)!=0?2:1);i=b;return}function Ah(a){a=a|0;var b=0,d=0;b=i;d=c[a+444>>2]|0;if((c[a+84>>2]|0)!=0){Oc[c[(c[a+484>>2]|0)+8>>2]&63](a)}a=d+12|0;c[a>>2]=(c[a>>2]|0)+1;i=b;return}function Bh(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0;b=i;d=a+4|0;e=Jc[c[c[d>>2]>>2]&15](a,1,48)|0;f=a+476|0;c[f>>2]=e;c[e>>2]=32;c[e+8>>2]=0;g=aa(c[a+120>>2]|0,c[a+112>>2]|0)|0;c[e+40>>2]=g;h=e+4|0;if((c[a+320>>2]|0)==2){c[h>>2]=1;c[e+12>>2]=4;c[e+32>>2]=Jc[c[(c[d>>2]|0)+4>>2]&15](a,1,g)|0}else{c[h>>2]=2;c[e+12>>2]=5;c[e+32>>2]=0}e=c[f>>2]|0;f=e+16|0;c[f>>2]=Jc[c[c[d>>2]>>2]&15](a,1,1024)|0;h=e+20|0;c[h>>2]=Jc[c[c[d>>2]>>2]&15](a,1,1024)|0;g=e+24|0;c[g>>2]=Jc[c[c[d>>2]>>2]&15](a,1,1024)|0;j=e+28|0;c[j>>2]=Jc[c[c[d>>2]>>2]&15](a,1,1024)|0;a=c[h>>2]|0;h=c[g>>2]|0;g=0;d=-128;while(1){c[(c[f>>2]|0)+(g<<2)>>2]=(d*91881|0)+32768>>16;c[a+(g<<2)>>2]=(d*116130|0)+32768>>16;c[h+(g<<2)>>2]=aa(d,-46802)|0;e=(aa(d,-22553)|0)+32768|0;c[(c[j>>2]|0)+(g<<2)>>2]=e;g=g+1|0;if((g|0)==256){break}else{d=d+1|0}}i=b;return}function Ch(a){a=a|0;var b=0;b=c[a+476>>2]|0;c[b+36>>2]=0;c[b+44>>2]=c[a+116>>2];return}function Dh(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;e=i;i=i+16|0;j=e;k=c[a+476>>2]|0;l=k+36|0;if((c[l>>2]|0)==0){m=k+44|0;n=c[m>>2]|0;o=n>>>0<2?n:2;n=c[g>>2]|0;p=h-n|0;h=o>>>0>p>>>0?p:o;c[j>>2]=c[f+(n<<2)>>2];if(h>>>0>1){c[j+4>>2]=c[f+(n+1<<2)>>2]}else{c[j+4>>2]=c[k+32>>2];c[l>>2]=1}Yc[c[k+12>>2]&31](a,b,c[d>>2]|0,j);q=m;r=h}else{bj(k+32|0,0,f+(c[g>>2]<<2)|0,0,1,c[k+40>>2]|0);c[l>>2]=0;q=k+44|0;r=1}c[g>>2]=(c[g>>2]|0)+r;c[q>>2]=(c[q>>2]|0)-r;if((c[l>>2]|0)!=0){i=e;return}c[d>>2]=(c[d>>2]|0)+1;i=e;return}function Eh(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0;h=i;j=c[b+476>>2]|0;k=c[b+336>>2]|0;l=c[j+16>>2]|0;m=c[j+20>>2]|0;n=c[j+24>>2]|0;o=c[j+28>>2]|0;j=f<<1;p=c[e>>2]|0;q=c[p+(j<<2)>>2]|0;r=c[p+((j|1)<<2)>>2]|0;j=c[(c[e+4>>2]|0)+(f<<2)>>2]|0;p=c[(c[e+8>>2]|0)+(f<<2)>>2]|0;f=c[g>>2]|0;e=c[g+4>>2]|0;g=b+112|0;b=c[g>>2]|0;s=b>>>1;if((s|0)==0){t=b;u=q;v=r;w=j;x=p;y=f;z=e}else{b=s*6|0;A=s<<1;B=f+b|0;C=p+s|0;D=s;E=q;F=r;G=j;H=p;p=f;f=e;while(1){I=d[G]|0;J=d[H]|0;K=c[l+(J<<2)>>2]|0;L=(c[n+(J<<2)>>2]|0)+(c[o+(I<<2)>>2]|0)>>16;J=c[m+(I<<2)>>2]|0;I=d[E]|0;a[p]=a[k+(I+K)|0]|0;a[p+1|0]=a[k+(I+L)|0]|0;a[p+2|0]=a[k+(I+J)|0]|0;I=d[E+1|0]|0;a[p+3|0]=a[k+(I+K)|0]|0;a[p+4|0]=a[k+(I+L)|0]|0;a[p+5|0]=a[k+(I+J)|0]|0;I=d[F]|0;a[f]=a[k+(I+K)|0]|0;a[f+1|0]=a[k+(I+L)|0]|0;a[f+2|0]=a[k+(I+J)|0]|0;I=d[F+1|0]|0;a[f+3|0]=a[k+(I+K)|0]|0;a[f+4|0]=a[k+(I+L)|0]|0;a[f+5|0]=a[k+(I+J)|0]|0;D=D+ -1|0;if((D|0)==0){break}else{E=E+2|0;F=F+2|0;G=G+1|0;H=H+1|0;p=p+6|0;f=f+6|0}}t=c[g>>2]|0;u=q+A|0;v=r+A|0;w=j+s|0;x=C;y=B;z=e+b|0}if((t&1|0)==0){i=h;return}t=d[w]|0;w=d[x]|0;x=c[l+(w<<2)>>2]|0;l=(c[n+(w<<2)>>2]|0)+(c[o+(t<<2)>>2]|0)>>16;o=c[m+(t<<2)>>2]|0;t=d[u]|0;a[y]=a[k+(t+x)|0]|0;a[y+1|0]=a[k+(t+l)|0]|0;a[y+2|0]=a[k+(t+o)|0]|0;t=d[v]|0;a[z]=a[k+(t+x)|0]|0;a[z+1|0]=a[k+(t+l)|0]|0;a[z+2|0]=a[k+(t+o)|0]|0;i=h;return}function Fh(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;h=i;Yc[c[(c[a+476>>2]|0)+12>>2]&31](a,b,c[d>>2]|0,f+(c[g>>2]<<2)|0);c[g>>2]=(c[g>>2]|0)+1;c[d>>2]=(c[d>>2]|0)+1;i=h;return}function Gh(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0;h=i;j=c[b+476>>2]|0;k=c[b+336>>2]|0;l=c[j+16>>2]|0;m=c[j+20>>2]|0;n=c[j+24>>2]|0;o=c[j+28>>2]|0;j=c[(c[e>>2]|0)+(f<<2)>>2]|0;p=c[(c[e+4>>2]|0)+(f<<2)>>2]|0;q=c[(c[e+8>>2]|0)+(f<<2)>>2]|0;f=c[g>>2]|0;g=b+112|0;b=c[g>>2]|0;e=b>>>1;if((e|0)==0){r=b;s=j;t=p;u=q;v=f}else{b=e*6|0;w=e<<1;x=q+e|0;y=e;z=j;A=p;B=q;q=f;while(1){C=d[A]|0;D=d[B]|0;E=c[l+(D<<2)>>2]|0;F=(c[n+(D<<2)>>2]|0)+(c[o+(C<<2)>>2]|0)>>16;D=c[m+(C<<2)>>2]|0;C=d[z]|0;a[q]=a[k+(C+E)|0]|0;a[q+1|0]=a[k+(C+F)|0]|0;a[q+2|0]=a[k+(C+D)|0]|0;C=d[z+1|0]|0;a[q+3|0]=a[k+(C+E)|0]|0;a[q+4|0]=a[k+(C+F)|0]|0;a[q+5|0]=a[k+(C+D)|0]|0;y=y+ -1|0;if((y|0)==0){break}else{z=z+2|0;A=A+1|0;B=B+1|0;q=q+6|0}}r=c[g>>2]|0;s=j+w|0;t=p+e|0;u=x;v=f+b|0}if((r&1|0)==0){i=h;return}r=d[t]|0;t=d[u]|0;u=(c[n+(t<<2)>>2]|0)+(c[o+(r<<2)>>2]|0)>>16;o=c[m+(r<<2)>>2]|0;r=d[s]|0;a[v]=a[k+(r+(c[l+(t<<2)>>2]|0))|0]|0;a[v+1|0]=a[k+(r+u)|0]|0;a[v+2|0]=a[k+(r+o)|0]|0;i=h;return}function Hh(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0;d=i;e=a+4|0;f=Jc[c[c[e>>2]>>2]&15](a,1,28)|0;c[a+456>>2]=f;c[f>>2]=13;g=f+8|0;c[g>>2]=0;h=f+12|0;c[h>>2]=0;if((c[a+84>>2]|0)==0){i=d;return}j=c[a+320>>2]|0;k=f+16|0;c[k>>2]=j;f=c[e>>2]|0;if((b|0)==0){b=aa(c[a+120>>2]|0,c[a+112>>2]|0)|0;c[h>>2]=Vc[c[f+8>>2]&3](a,1,b,j)|0;i=d;return}else{b=c[f+16>>2]|0;f=aa(c[a+120>>2]|0,c[a+112>>2]|0)|0;h=aj(c[a+116>>2]|0,j)|0;c[g>>2]=Rc[b&3](a,1,0,f,h,c[k>>2]|0)|0;i=d;return}}function Ih(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=i;e=c[a+456>>2]|0;do{if((b|0)==2){if((c[e+8>>2]|0)==0){f=c[a>>2]|0;c[f+20>>2]=3;Oc[c[f>>2]&63](a)}c[e+4>>2]=5}else if((b|0)==3){if((c[e+8>>2]|0)==0){f=c[a>>2]|0;c[f+20>>2]=3;Oc[c[f>>2]&63](a)}c[e+4>>2]=4}else if((b|0)==0){if((c[a+84>>2]|0)==0){c[e+4>>2]=c[(c[a+476>>2]|0)+4>>2];break}c[e+4>>2]=3;f=e+12|0;if((c[f>>2]|0)==0){c[f>>2]=Xc[c[(c[a+4>>2]|0)+28>>2]&3](a,c[e+8>>2]|0,0,c[e+16>>2]|0,1)|0}}else{f=c[a>>2]|0;c[f+20>>2]=3;Oc[c[f>>2]&63](a)}}while(0);c[e+24>>2]=0;c[e+20>>2]=0;i=d;return}function Jh(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0;j=i;i=i+16|0;k=j;l=c[a+456>>2]|0;m=h-(c[g>>2]|0)|0;h=c[l+16>>2]|0;c[k>>2]=0;n=l+12|0;Pc[c[(c[a+476>>2]|0)+4>>2]&7](a,b,d,e,c[n>>2]|0,k,m>>>0>h>>>0?h:m);Yc[c[(c[a+484>>2]|0)+4>>2]&31](a,c[n>>2]|0,f+(c[g>>2]<<2)|0,c[k>>2]|0);c[g>>2]=(c[g>>2]|0)+(c[k>>2]|0);i=j;return}function Kh(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;h=i;f=c[a+456>>2]|0;j=f+24|0;k=c[j>>2]|0;if((k|0)==0){l=f+16|0;m=Xc[c[(c[a+4>>2]|0)+28>>2]&3](a,c[f+8>>2]|0,c[f+20>>2]|0,c[l>>2]|0,1)|0;c[f+12>>2]=m;n=l;o=m;p=c[j>>2]|0}else{n=f+16|0;o=c[f+12>>2]|0;p=k}Pc[c[(c[a+476>>2]|0)+4>>2]&7](a,b,d,e,o,j,c[n>>2]|0);o=c[j>>2]|0;if(o>>>0>p>>>0){e=o-p|0;Yc[c[(c[a+484>>2]|0)+4>>2]&31](a,(c[f+12>>2]|0)+(p<<2)|0,0,e);c[g>>2]=(c[g>>2]|0)+e;q=c[j>>2]|0}else{q=o}o=c[n>>2]|0;if(q>>>0<o>>>0){i=h;return}q=f+20|0;c[q>>2]=(c[q>>2]|0)+o;c[j>>2]=0;i=h;return}function Lh(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;e=i;d=c[a+456>>2]|0;b=d+24|0;j=c[b>>2]|0;if((j|0)==0){k=d+20|0;l=d+16|0;m=Xc[c[(c[a+4>>2]|0)+28>>2]&3](a,c[d+8>>2]|0,c[k>>2]|0,c[l>>2]|0,0)|0;c[d+12>>2]=m;n=k;o=l;p=k;q=c[b>>2]|0;r=m}else{m=d+20|0;n=m;o=d+16|0;p=m;q=j;r=c[d+12>>2]|0}d=(c[o>>2]|0)-q|0;j=c[g>>2]|0;m=h-j|0;h=d>>>0>m>>>0?m:d;d=(c[a+116>>2]|0)-(c[n>>2]|0)|0;m=h>>>0>d>>>0?d:h;Yc[c[(c[a+484>>2]|0)+4>>2]&31](a,r+(q<<2)|0,f+(j<<2)|0,m);c[g>>2]=(c[g>>2]|0)+m;g=(c[b>>2]|0)+m|0;c[b>>2]=g;m=c[o>>2]|0;if(g>>>0<m>>>0){i=e;return}c[p>>2]=(c[n>>2]|0)+m;c[b>>2]=0;i=e;return}function Mh(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;d=i;e=b+4|0;f=Jc[c[c[e>>2]>>2]&15](b,1,160)|0;c[b+476>>2]=f;c[f>>2]=33;c[f+4>>2]=6;c[f+8>>2]=0;if((c[b+308>>2]|0)!=0){g=c[b>>2]|0;c[g+20>>2]=26;Oc[c[g>>2]&63](b)}g=b+36|0;if((c[g>>2]|0)<=0){i=d;return}h=b+324|0;j=b+328|0;k=b+316|0;l=b+320|0;m=f+100|0;n=f+52|0;o=b+112|0;p=f+12|0;q=0;r=c[b+216>>2]|0;while(1){s=aa(c[r+36>>2]|0,c[r+8>>2]|0)|0;t=(s|0)/(c[h>>2]|0)|0;s=aa(c[r+40>>2]|0,c[r+12>>2]|0)|0;u=(s|0)/(c[j>>2]|0)|0;s=c[k>>2]|0;v=c[l>>2]|0;c[m+(q<<2)>>2]=u;do{if((c[r+52>>2]|0)==0){c[n+(q<<2)>>2]=6}else{w=(u|0)==(v|0);if((t|0)==(s|0)&w){c[n+(q<<2)>>2]=7;break}x=(t<<1|0)==(s|0);do{if(x&w){c[n+(q<<2)>>2]=8}else{if(x?(u<<1|0)==(v|0):0){c[n+(q<<2)>>2]=9;break}if(((s|0)%(t|0)|0|0)==0?((v|0)%(u|0)|0|0)==0:0){c[n+(q<<2)>>2]=10;a[f+(q+140)|0]=(s|0)/(t|0)|0;a[f+(q+150)|0]=(v|0)/(u|0)|0;break}y=c[b>>2]|0;c[y+20>>2]=39;Oc[c[y>>2]&63](b)}}while(0);x=c[(c[e>>2]|0)+8>>2]|0;w=aj(c[o>>2]|0,c[k>>2]|0)|0;c[p+(q<<2)>>2]=Vc[x&3](b,1,w,c[l>>2]|0)|0}}while(0);q=q+1|0;if((q|0)>=(c[g>>2]|0)){break}else{r=r+88|0}}i=d;return}function Nh(a){a=a|0;var b=0;b=c[a+476>>2]|0;c[b+92>>2]=c[a+320>>2];c[b+96>>2]=c[a+116>>2];return}function Oh(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;e=i;j=c[a+476>>2]|0;k=j+92|0;l=c[k>>2]|0;m=a+320|0;n=c[m>>2]|0;if((l|0)<(n|0)){o=n;p=l}else{l=a+36|0;if((c[l>>2]|0)>0){n=j+52|0;q=j+100|0;r=j+12|0;s=0;t=c[a+216>>2]|0;while(1){u=(c[b+(s<<2)>>2]|0)+((aa(c[q+(s<<2)>>2]|0,c[d>>2]|0)|0)<<2)|0;Yc[c[n+(s<<2)>>2]&31](a,t,u,r+(s<<2)|0);s=s+1|0;if((s|0)>=(c[l>>2]|0)){break}else{t=t+88|0}}}c[k>>2]=0;o=c[m>>2]|0;p=0}t=o-p|0;o=j+96|0;l=c[o>>2]|0;s=t>>>0>l>>>0?l:t;t=c[g>>2]|0;l=h-t|0;h=s>>>0>l>>>0?l:s;Kc[c[(c[a+480>>2]|0)+4>>2]&63](a,j+12|0,p,f+(t<<2)|0,h);c[g>>2]=(c[g>>2]|0)+h;c[o>>2]=(c[o>>2]|0)-h;o=(c[k>>2]|0)+h|0;c[k>>2]=o;if((o|0)<(c[m>>2]|0)){i=e;return}c[d>>2]=(c[d>>2]|0)+1;i=e;return}function Ph(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;c[e>>2]=0;return}function Qh(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;c[e>>2]=d;return}function Rh(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;d=i;g=c[f>>2]|0;f=b+320|0;h=c[f>>2]|0;if((h|0)<=0){i=d;return}j=b+112|0;b=h;h=0;while(1){k=c[g+(h<<2)>>2]|0;l=c[j>>2]|0;m=k+l|0;if((l|0)>0){l=c[e+(h<<2)>>2]|0;n=k;while(1){k=a[l]|0;a[n]=k;o=n+2|0;a[n+1|0]=k;if(o>>>0<m>>>0){l=l+1|0;n=o}else{break}}p=c[f>>2]|0}else{p=b}h=h+1|0;if((h|0)>=(p|0)){break}else{b=p}}i=d;return}function Sh(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;d=i;g=c[f>>2]|0;f=b+320|0;if((c[f>>2]|0)<=0){i=d;return}h=b+112|0;b=0;j=0;while(1){k=c[g+(j<<2)>>2]|0;l=c[h>>2]|0;m=k+l|0;if((l|0)>0){n=c[e+(b<<2)>>2]|0;o=k;while(1){k=a[n]|0;a[o]=k;p=o+2|0;a[o+1|0]=k;if(p>>>0<m>>>0){n=n+1|0;o=p}else{break}}q=c[h>>2]|0}else{q=l}bj(g,j,g,j|1,1,q);j=j+2|0;if((j|0)>=(c[f>>2]|0)){break}else{b=b+1|0}}i=d;return}function Th(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;g=i;h=c[b+476>>2]|0;j=c[f>>2]|0;f=c[d+4>>2]|0;d=a[h+140+f|0]|0;k=d&255;l=a[h+f+150|0]|0;f=l&255;h=b+320|0;if((c[h>>2]|0)<=0){i=g;return}m=b+112|0;b=d<<24>>24!=0;d=f+ -1|0;n=0-k|0;o=((n|0)>-1?n:-1)+k+1|0;if((l&255)>1){l=0;k=0;while(1){n=c[j+(k<<2)>>2]|0;p=c[m>>2]|0;q=n+p|0;if((p|0)>0){if(b){r=c[e+(l<<2)>>2]|0;s=n;while(1){Gm(s|0,a[r]|0,o|0)|0;s=s+o|0;if(!(s>>>0<q>>>0)){break}else{r=r+1|0}}}else{do{}while((p|0)>0)}}bj(j,k,j,k+1|0,d,c[m>>2]|0);p=k+f|0;if((p|0)>=(c[h>>2]|0)){break}l=l+1|0;k=p}i=g;return}else{k=0;l=0;while(1){d=c[j+(l<<2)>>2]|0;p=c[m>>2]|0;r=d+p|0;if((p|0)>0){if(b){q=c[e+(k<<2)>>2]|0;s=d;while(1){Gm(s|0,a[q]|0,o|0)|0;s=s+o|0;if(!(s>>>0<r>>>0)){break}else{q=q+1|0}}}else{do{}while((p|0)>0)}}p=l+f|0;if((p|0)>=(c[h>>2]|0)){break}k=k+1|0;l=p}i=g;return}}function Uh(a){a=a|0;c[a>>2]=34;c[a+4>>2]=14;c[a+8>>2]=35;c[a+12>>2]=15;c[a+16>>2]=36;c[a+104>>2]=0;c[a+108>>2]=0;c[a+20>>2]=0;c[a+112>>2]=8680;c[a+116>>2]=126;c[a+120>>2]=0;c[a+124>>2]=0;c[a+128>>2]=0;return a|0}function Vh(a){a=a|0;Oc[c[(c[a>>2]|0)+8>>2]&63](a);Zf(a);Eb(1)}function Wh(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;e=c[a>>2]|0;if((b|0)>=0){if((c[e+104>>2]|0)<(b|0)){i=d;return}Oc[c[e+8>>2]&63](a);i=d;return}b=e+108|0;f=c[b>>2]|0;if((f|0)!=0?(c[e+104>>2]|0)<=2:0){g=f}else{Oc[c[e+8>>2]&63](a);g=c[b>>2]|0}c[b>>2]=g+1;i=d;return}function Xh(a){a=a|0;var b=0,d=0,e=0;b=i;i=i+208|0;d=b;e=b+8|0;Qc[c[(c[a>>2]|0)+12>>2]&31](a,e);a=c[o>>2]|0;c[d>>2]=e;kc(a|0,9192,d|0)|0;i=b;return}function Yh(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;e=i;i=i+32|0;f=e;g=c[b>>2]|0;b=c[g+20>>2]|0;if((b|0)>0?(b|0)<=(c[g+116>>2]|0):0){h=(c[g+112>>2]|0)+(b<<2)|0;j=8}else{k=c[g+120>>2]|0;if(((k|0)!=0?(l=c[g+124>>2]|0,(b|0)>=(l|0)):0)?(b|0)<=(c[g+128>>2]|0):0){h=k+(b-l<<2)|0;j=8}else{j=9}}if((j|0)==8){l=c[h>>2]|0;if((l|0)==0){j=9}else{m=l}}if((j|0)==9){c[g+24>>2]=b;m=c[c[g+112>>2]>>2]|0}b=m;while(1){n=b+1|0;l=a[b]|0;if(l<<24>>24==0){j=12;break}else if(l<<24>>24==37){j=13;break}else{b=n}}if((j|0)==12){o=g+24|0}else if((j|0)==13){j=g+24|0;if((a[n]|0)==115){c[f>>2]=j;sb(d|0,m|0,f|0)|0;i=e;return}else{o=j}}j=c[g+28>>2]|0;n=c[g+32>>2]|0;b=c[g+36>>2]|0;l=c[g+40>>2]|0;h=c[g+44>>2]|0;k=c[g+48>>2]|0;p=c[g+52>>2]|0;c[f>>2]=c[o>>2];c[f+4>>2]=j;c[f+8>>2]=n;c[f+12>>2]=b;c[f+16>>2]=l;c[f+20>>2]=h;c[f+24>>2]=k;c[f+28>>2]=p;sb(d|0,m|0,f|0)|0;i=e;return}function Zh(a){a=a|0;var b=0;b=c[a>>2]|0;c[b+108>>2]=0;c[b+20>>2]=0;return}function _h(d,e,f,h,j){d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0.0,r=0,s=0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0;k=i;i=i+256|0;l=k;m=c[d+336>>2]|0;d=8;n=f;f=c[e+84>>2]|0;e=l;while(1){o=b[n+16>>1]|0;p=b[n+32>>1]|0;if((o|p)<<16>>16==0){if(((((b[n+48>>1]|0)==0?(b[n+64>>1]|0)==0:0)?(b[n+80>>1]|0)==0:0)?(b[n+96>>1]|0)==0:0)?(b[n+112>>1]|0)==0:0){q=+(b[n>>1]|0)*+g[f>>2];g[e>>2]=q;g[e+32>>2]=q;g[e+64>>2]=q;g[e+96>>2]=q;g[e+128>>2]=q;g[e+160>>2]=q;g[e+192>>2]=q;g[e+224>>2]=q}else{r=0;s=10}}else{r=p;s=10}if((s|0)==10){s=0;q=+(b[n>>1]|0)*+g[f>>2];t=+(r<<16>>16)*+g[f+64>>2];u=+(b[n+64>>1]|0)*+g[f+128>>2];v=+(b[n+96>>1]|0)*+g[f+192>>2];w=q+u;x=q-u;u=t+v;q=(t-v)*1.4142135381698608-u;v=w+u;t=w-u;u=x+q;w=x-q;q=+(o<<16>>16)*+g[f+32>>2];x=+(b[n+48>>1]|0)*+g[f+96>>2];y=+(b[n+80>>1]|0)*+g[f+160>>2];z=+(b[n+112>>1]|0)*+g[f+224>>2];A=x+y;B=y-x;x=q+z;y=q-z;z=A+x;q=(B+y)*1.8477590084075928;C=q-B*2.613126039505005-z;B=(x-A)*1.4142135381698608-C;A=q-y*1.0823922157287598-B;g[e>>2]=v+z;g[e+224>>2]=v-z;g[e+32>>2]=u+C;g[e+192>>2]=u-C;g[e+64>>2]=w+B;g[e+160>>2]=w-B;g[e+96>>2]=t+A;g[e+128>>2]=t-A}d=d+ -1|0;if((d|0)<=0){break}else{n=n+2|0;f=f+4|0;e=e+4|0}}e=j+7|0;f=j+1|0;n=j+6|0;d=j+2|0;r=j+5|0;s=j+3|0;o=j+4|0;p=0;D=l;while(1){l=c[h+(p<<2)>>2]|0;A=+g[D>>2]+128.5;t=+g[D+16>>2];B=A+t;w=A-t;t=+g[D+8>>2];A=+g[D+24>>2];C=t+A;u=(t-A)*1.4142135381698608-C;A=B+C;t=B-C;C=w+u;B=w-u;u=+g[D+20>>2];w=+g[D+12>>2];z=u+w;v=u-w;w=+g[D+4>>2];u=+g[D+28>>2];y=w+u;q=w-u;u=z+y;w=(v+q)*1.8477590084075928;x=w-v*2.613126039505005-u;v=(y-z)*1.4142135381698608-x;z=w-q*1.0823922157287598-v;a[l+j|0]=a[m+(~~(A+u)&1023)|0]|0;a[l+e|0]=a[m+(~~(A-u)&1023)|0]|0;a[l+f|0]=a[m+(~~(C+x)&1023)|0]|0;a[l+n|0]=a[m+(~~(C-x)&1023)|0]|0;a[l+d|0]=a[m+(~~(B+v)&1023)|0]|0;a[l+r|0]=a[m+(~~(B-v)&1023)|0]|0;a[l+s|0]=a[m+(~~(t+z)&1023)|0]|0;a[l+o|0]=a[m+(~~(t-z)&1023)|0]|0;p=p+1|0;if((p|0)==8){break}else{D=D+32|0}}i=k;return}function $h(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0;j=i;i=i+256|0;k=j;l=c[d+336>>2]|0;d=8;m=f;f=c[e+84>>2]|0;e=k;while(1){n=b[m+16>>1]|0;o=b[m+32>>1]|0;if((n|o)<<16>>16==0){if(((((b[m+48>>1]|0)==0?(b[m+64>>1]|0)==0:0)?(b[m+80>>1]|0)==0:0)?(b[m+96>>1]|0)==0:0)?(b[m+112>>1]|0)==0:0){p=aa(b[m>>1]|0,c[f>>2]|0)|0;c[e>>2]=p;c[e+32>>2]=p;c[e+64>>2]=p;c[e+96>>2]=p;c[e+128>>2]=p;c[e+160>>2]=p;c[e+192>>2]=p;c[e+224>>2]=p}else{q=0;r=10}}else{q=o;r=10}if((r|0)==10){r=0;o=aa(b[m>>1]|0,c[f>>2]|0)|0;p=aa(q<<16>>16,c[f+64>>2]|0)|0;s=aa(b[m+64>>1]|0,c[f+128>>2]|0)|0;t=aa(b[m+96>>1]|0,c[f+192>>2]|0)|0;u=s+o|0;v=o-s|0;s=t+p|0;o=((p-t|0)*362>>8)-s|0;t=s+u|0;p=u-s|0;s=o+v|0;u=v-o|0;o=aa(n<<16>>16,c[f+32>>2]|0)|0;n=aa(b[m+48>>1]|0,c[f+96>>2]|0)|0;v=aa(b[m+80>>1]|0,c[f+160>>2]|0)|0;w=aa(b[m+112>>1]|0,c[f+224>>2]|0)|0;x=v+n|0;y=v-n|0;n=w+o|0;v=o-w|0;w=n+x|0;o=(v+y|0)*473>>8;z=((aa(y,-669)|0)>>8)-w+o|0;y=((n-x|0)*362>>8)-z|0;x=y+((v*277>>8)-o)|0;c[e>>2]=w+t;c[e+224>>2]=t-w;c[e+32>>2]=z+s;c[e+192>>2]=s-z;c[e+64>>2]=y+u;c[e+160>>2]=u-y;c[e+128>>2]=x+p;c[e+96>>2]=p-x}d=d+ -1|0;if((d|0)<=0){break}else{m=m+2|0;f=f+4|0;e=e+4|0}}e=h+1|0;f=h+2|0;m=h+3|0;d=h+4|0;q=h+5|0;x=h+6|0;p=h+7|0;y=0;u=k;while(1){k=c[g+(y<<2)>>2]|0;z=k+h|0;s=c[u+4>>2]|0;w=c[u+8>>2]|0;if((s|w|0)==0){if(((((c[u+12>>2]|0)==0?(c[u+16>>2]|0)==0:0)?(c[u+20>>2]|0)==0:0)?(c[u+24>>2]|0)==0:0)?(c[u+28>>2]|0)==0:0){t=a[l+(((c[u>>2]|0)>>>5&1023)+128)|0]|0;a[z]=t;a[k+e|0]=t;a[k+f|0]=t;a[k+m|0]=t;a[k+d|0]=t;a[k+q|0]=t;a[k+x|0]=t;a[k+p|0]=t}else{A=0;r=19}}else{A=w;r=19}if((r|0)==19){r=0;w=c[u>>2]|0;t=c[u+16>>2]|0;o=t+w|0;v=w-t|0;t=c[u+24>>2]|0;w=t+A|0;n=((A-t|0)*362>>8)-w|0;t=w+o|0;B=o-w|0;w=n+v|0;o=v-n|0;n=c[u+20>>2]|0;v=c[u+12>>2]|0;C=v+n|0;D=n-v|0;v=c[u+28>>2]|0;n=v+s|0;E=s-v|0;v=n+C|0;s=(E+D|0)*473>>8;F=((aa(D,-669)|0)>>8)-v+s|0;D=((n-C|0)*362>>8)-F|0;C=D+((E*277>>8)-s)|0;a[z]=a[l+(((v+t|0)>>>5&1023)+128)|0]|0;a[k+p|0]=a[l+(((t-v|0)>>>5&1023)+128)|0]|0;a[k+e|0]=a[l+(((F+w|0)>>>5&1023)+128)|0]|0;a[k+x|0]=a[l+(((w-F|0)>>>5&1023)+128)|0]|0;a[k+f|0]=a[l+(((D+o|0)>>>5&1023)+128)|0]|0;a[k+q|0]=a[l+(((o-D|0)>>>5&1023)+128)|0]|0;a[k+d|0]=a[l+(((C+B|0)>>>5&1023)+128)|0]|0;a[k+m|0]=a[l+(((B-C|0)>>>5&1023)+128)|0]|0}y=y+1|0;if((y|0)==8){break}else{u=u+32|0}}i=j;return}function ai(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0;j=i;i=i+256|0;k=j;l=c[d+336>>2]|0;d=8;m=f;f=c[e+84>>2]|0;e=k;while(1){n=b[m+16>>1]|0;o=b[m+32>>1]|0;if((n|o)<<16>>16==0){if(((((b[m+48>>1]|0)==0?(b[m+64>>1]|0)==0:0)?(b[m+80>>1]|0)==0:0)?(b[m+96>>1]|0)==0:0)?(b[m+112>>1]|0)==0:0){p=aa(c[f>>2]<<2,b[m>>1]|0)|0;c[e>>2]=p;c[e+32>>2]=p;c[e+64>>2]=p;c[e+96>>2]=p;c[e+128>>2]=p;c[e+160>>2]=p;c[e+192>>2]=p;c[e+224>>2]=p}else{q=0;r=10}}else{q=o;r=10}if((r|0)==10){r=0;o=aa(q<<16>>16,c[f+64>>2]|0)|0;p=aa(b[m+96>>1]|0,c[f+192>>2]|0)|0;s=(p+o|0)*4433|0;t=s+(o*6270|0)|0;o=s+(aa(p,-15137)|0)|0;p=aa(c[f+128>>2]<<13,b[m+64>>1]|0)|0;s=aa(c[f>>2]<<13,b[m>>1]|0)|0|1024;u=p+s|0;v=s-p|0;p=u+t|0;s=u-t|0;t=v+o|0;u=v-o|0;o=aa(b[m+112>>1]|0,c[f+224>>2]|0)|0;v=aa(b[m+80>>1]|0,c[f+160>>2]|0)|0;w=aa(b[m+48>>1]|0,c[f+96>>2]|0)|0;x=aa(n<<16>>16,c[f+32>>2]|0)|0;n=w+o|0;y=x+v|0;z=(y+n|0)*9633|0;A=z+(aa(n,-16069)|0)|0;n=z+(aa(y,-3196)|0)|0;y=aa(x+o|0,-7373)|0;z=y+(o*2446|0)+A|0;o=y+(x*12299|0)+n|0;x=aa(w+v|0,-20995)|0;y=x+(v*16819|0)+n|0;n=x+(w*25172|0)+A|0;c[e>>2]=o+p>>11;c[e+224>>2]=p-o>>11;c[e+32>>2]=n+t>>11;c[e+192>>2]=t-n>>11;c[e+64>>2]=y+u>>11;c[e+160>>2]=u-y>>11;c[e+96>>2]=z+s>>11;c[e+128>>2]=s-z>>11}d=d+ -1|0;if((d|0)<=0){break}else{m=m+2|0;f=f+4|0;e=e+4|0}}e=h+1|0;f=h+2|0;m=h+3|0;d=h+4|0;q=h+5|0;z=h+6|0;s=h+7|0;y=0;u=k;while(1){k=c[g+(y<<2)>>2]|0;n=k+h|0;t=c[u+4>>2]|0;o=c[u+8>>2]|0;if((t|o|0)==0){if(((((c[u+12>>2]|0)==0?(c[u+16>>2]|0)==0:0)?(c[u+20>>2]|0)==0:0)?(c[u+24>>2]|0)==0:0)?(c[u+28>>2]|0)==0:0){p=a[l+((((c[u>>2]|0)+16|0)>>>5&1023)+128)|0]|0;a[n]=p;a[k+e|0]=p;a[k+f|0]=p;a[k+m|0]=p;a[k+d|0]=p;a[k+q|0]=p;a[k+z|0]=p;a[k+s|0]=p}else{B=0;r=19}}else{B=o;r=19}if((r|0)==19){r=0;o=c[u+24>>2]|0;p=(o+B|0)*4433|0;A=p+(B*6270|0)|0;w=p+(aa(o,-15137)|0)|0;o=(c[u>>2]|0)+16|0;p=c[u+16>>2]|0;x=o+p<<13;v=o-p<<13;p=x+A|0;o=x-A|0;A=v+w|0;x=v-w|0;w=c[u+28>>2]|0;v=c[u+20>>2]|0;C=c[u+12>>2]|0;D=C+w|0;E=t+v|0;F=(E+D|0)*9633|0;G=F+(aa(D,-16069)|0)|0;D=F+(aa(E,-3196)|0)|0;E=aa(t+w|0,-7373)|0;F=E+(w*2446|0)+G|0;w=E+(t*12299|0)+D|0;t=aa(C+v|0,-20995)|0;E=t+(v*16819|0)+D|0;D=t+(C*25172|0)+G|0;a[n]=a[l+(((w+p|0)>>>18&1023)+128)|0]|0;a[k+s|0]=a[l+(((p-w|0)>>>18&1023)+128)|0]|0;a[k+e|0]=a[l+(((D+A|0)>>>18&1023)+128)|0]|0;a[k+z|0]=a[l+(((A-D|0)>>>18&1023)+128)|0]|0;a[k+f|0]=a[l+(((E+x|0)>>>18&1023)+128)|0]|0;a[k+q|0]=a[l+(((x-E|0)>>>18&1023)+128)|0]|0;a[k+m|0]=a[l+(((F+o|0)>>>18&1023)+128)|0]|0;a[k+d|0]=a[l+(((o-F|0)>>>18&1023)+128)|0]|0}y=y+1|0;if((y|0)==8){break}else{u=u+32|0}}i=j;return}function bi(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;j=i;i=i+208|0;k=j;l=c[d+336>>2]|0;d=0;m=f;f=c[e+84>>2]|0;e=k;while(1){n=aa(c[f>>2]<<13,b[m>>1]|0)|0|1024;o=aa(b[m+32>>1]|0,c[f+64>>2]|0)|0;p=aa(b[m+64>>1]|0,c[f+128>>2]|0)|0;q=aa(b[m+96>>1]|0,c[f+192>>2]|0)|0;r=(p-q|0)*7223|0;s=(o-p|0)*2578|0;t=(aa(p,-15083)|0)+n+s+r|0;u=q+o|0;v=(u*10438|0)+n|0;w=r+(aa(q,-637)|0)+v|0;q=s+(aa(o,-20239)|0)+v|0;v=aa(b[m+16>>1]|0,c[f+32>>2]|0)|0;o=aa(b[m+48>>1]|0,c[f+96>>2]|0)|0;s=aa(b[m+80>>1]|0,c[f+160>>2]|0)|0;r=(o+v|0)*7663|0;x=(v-o|0)*1395|0;y=aa(s+o|0,-11295)|0;o=r+x+y|0;z=(s+v|0)*5027|0;v=z+(r-x)|0;x=z+(s*15326|0)+y|0;c[e>>2]=v+w>>11;c[e+168>>2]=w-v>>11;c[e+28>>2]=o+t>>11;c[e+140>>2]=t-o>>11;c[e+56>>2]=x+q>>11;c[e+112>>2]=q-x>>11;c[e+84>>2]=((p-u|0)*11585|0)+n>>11;d=d+1|0;if((d|0)==7){break}else{m=m+2|0;f=f+4|0;e=e+4|0}}e=h+6|0;f=h+1|0;m=h+5|0;d=h+2|0;n=h+4|0;u=h+3|0;p=0;x=k;while(1){k=c[g+(p<<2)>>2]|0;q=(c[x>>2]<<13)+131072|0;o=c[x+8>>2]|0;t=c[x+16>>2]|0;v=c[x+24>>2]|0;w=(t-v|0)*7223|0;y=(o-t|0)*2578|0;s=(aa(t,-15083)|0)+q+y+w|0;z=v+o|0;r=(z*10438|0)+q|0;A=w+(aa(v,-637)|0)+r|0;v=y+(aa(o,-20239)|0)+r|0;r=c[x+4>>2]|0;o=c[x+12>>2]|0;y=c[x+20>>2]|0;w=(o+r|0)*7663|0;B=(r-o|0)*1395|0;C=aa(y+o|0,-11295)|0;o=w+B+C|0;D=(y+r|0)*5027|0;r=w-B+D|0;B=D+(y*15326|0)+C|0;a[k+h|0]=a[l+(((r+A|0)>>>18&1023)+128)|0]|0;a[k+e|0]=a[l+(((A-r|0)>>>18&1023)+128)|0]|0;a[k+f|0]=a[l+(((o+s|0)>>>18&1023)+128)|0]|0;a[k+m|0]=a[l+(((s-o|0)>>>18&1023)+128)|0]|0;a[k+d|0]=a[l+(((B+v|0)>>>18&1023)+128)|0]|0;a[k+n|0]=a[l+(((v-B|0)>>>18&1023)+128)|0]|0;a[k+u|0]=a[l+(((((t-z|0)*11585|0)+q|0)>>>18&1023)+128)|0]|0;p=p+1|0;if((p|0)==7){break}else{x=x+28|0}}i=j;return}function ci(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;j=i;i=i+144|0;k=j;l=c[d+336>>2]|0;d=0;m=f;f=c[e+84>>2]|0;e=k;while(1){n=aa(c[f>>2]<<13,b[m>>1]|0)|0|1024;o=aa((c[f+128>>2]|0)*5793|0,b[m+64>>1]|0)|0;p=o+n|0;q=(aa(o,-2)|0)+n>>11;n=aa((c[f+64>>2]|0)*10033|0,b[m+32>>1]|0)|0;o=n+p|0;r=p-n|0;n=aa(b[m+16>>1]|0,c[f+32>>2]|0)|0;p=aa(b[m+48>>1]|0,c[f+96>>2]|0)|0;s=aa(b[m+80>>1]|0,c[f+160>>2]|0)|0;t=(s+n|0)*2998|0;u=t+(p+n<<13)|0;v=t+(s-p<<13)|0;t=n-p-s<<2;c[e>>2]=u+o>>11;c[e+120>>2]=o-u>>11;c[e+24>>2]=t+q;c[e+96>>2]=q-t;c[e+48>>2]=v+r>>11;c[e+72>>2]=r-v>>11;d=d+1|0;if((d|0)==6){break}else{m=m+2|0;f=f+4|0;e=e+4|0}}e=h+5|0;f=h+1|0;m=h+4|0;d=h+2|0;v=h+3|0;r=0;t=k;while(1){k=c[g+(r<<2)>>2]|0;q=(c[t>>2]<<13)+131072|0;u=(c[t+16>>2]|0)*5793|0;o=q+u|0;s=q-u-u|0;u=(c[t+8>>2]|0)*10033|0;q=o+u|0;p=o-u|0;u=c[t+4>>2]|0;o=c[t+12>>2]|0;n=c[t+20>>2]|0;w=(n+u|0)*2998|0;x=w+(o+u<<13)|0;y=w+(n-o<<13)|0;w=u-o-n<<13;a[k+h|0]=a[l+(((x+q|0)>>>18&1023)+128)|0]|0;a[k+e|0]=a[l+(((q-x|0)>>>18&1023)+128)|0]|0;a[k+f|0]=a[l+(((w+s|0)>>>18&1023)+128)|0]|0;a[k+m|0]=a[l+(((s-w|0)>>>18&1023)+128)|0]|0;a[k+d|0]=a[l+(((y+p|0)>>>18&1023)+128)|0]|0;a[k+v|0]=a[l+(((p-y|0)>>>18&1023)+128)|0]|0;r=r+1|0;if((r|0)==6){break}else{t=t+24|0}}i=j;return}function di(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;j=i;i=i+112|0;k=j;l=c[d+336>>2]|0;d=0;m=f;f=c[e+84>>2]|0;e=k;while(1){n=aa(c[f>>2]<<13,b[m>>1]|0)|0|1024;o=aa(b[m+32>>1]|0,c[f+64>>2]|0)|0;p=aa(b[m+64>>1]|0,c[f+128>>2]|0)|0;q=(p+o|0)*6476|0;r=o-p|0;p=(r*2896|0)+n|0;o=p+q|0;s=p-q|0;q=(aa(r,-11584)|0)+n|0;n=aa(b[m+16>>1]|0,c[f+32>>2]|0)|0;r=aa(b[m+48>>1]|0,c[f+96>>2]|0)|0;p=(r+n|0)*6810|0;t=p+(n*4209|0)|0;n=p+(aa(r,-17828)|0)|0;c[e>>2]=t+o>>11;c[e+80>>2]=o-t>>11;c[e+20>>2]=n+s>>11;c[e+60>>2]=s-n>>11;c[e+40>>2]=q>>11;d=d+1|0;if((d|0)==5){break}else{m=m+2|0;f=f+4|0;e=e+4|0}}e=h+4|0;f=h+1|0;m=h+3|0;d=h+2|0;q=0;n=k;while(1){k=c[g+(q<<2)>>2]|0;s=(c[n>>2]<<13)+131072|0;t=c[n+8>>2]|0;o=c[n+16>>2]|0;r=(o+t|0)*6476|0;p=t-o|0;o=(p*2896|0)+s|0;t=o+r|0;u=o-r|0;r=(aa(p,-11584)|0)+s|0;s=c[n+4>>2]|0;p=c[n+12>>2]|0;o=(p+s|0)*6810|0;v=o+(s*4209|0)|0;s=o+(aa(p,-17828)|0)|0;a[k+h|0]=a[l+(((v+t|0)>>>18&1023)+128)|0]|0;a[k+e|0]=a[l+(((t-v|0)>>>18&1023)+128)|0]|0;a[k+f|0]=a[l+(((s+u|0)>>>18&1023)+128)|0]|0;a[k+m|0]=a[l+(((u-s|0)>>>18&1023)+128)|0]|0;a[k+d|0]=a[l+((r>>>18&1023)+128)|0]|0;q=q+1|0;if((q|0)==5){break}else{n=n+20|0}}i=j;return}function ei(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;j=i;i=i+64|0;k=j;l=c[d+336>>2]|0;d=0;m=f;f=c[e+84>>2]|0;e=k;while(1){n=aa(b[m>>1]|0,c[f>>2]|0)|0;o=aa(b[m+32>>1]|0,c[f+64>>2]|0)|0;p=o+n<<2;q=n-o<<2;o=aa(b[m+16>>1]|0,c[f+32>>2]|0)|0;n=aa(b[m+48>>1]|0,c[f+96>>2]|0)|0;r=((n+o|0)*4433|0)+1024|0;s=r+(o*6270|0)>>11;o=r+(aa(n,-15137)|0)>>11;c[e>>2]=s+p;c[e+48>>2]=p-s;c[e+16>>2]=o+q;c[e+32>>2]=q-o;d=d+1|0;if((d|0)==4){break}else{m=m+2|0;f=f+4|0;e=e+4|0}}e=h+3|0;f=h+1|0;m=h+2|0;d=0;o=k;while(1){k=c[g+(d<<2)>>2]|0;q=(c[o>>2]|0)+16|0;s=c[o+8>>2]|0;p=q+s<<13;n=q-s<<13;s=c[o+4>>2]|0;q=c[o+12>>2]|0;r=(q+s|0)*4433|0;t=r+(s*6270|0)|0;s=r+(aa(q,-15137)|0)|0;a[k+h|0]=a[l+(((t+p|0)>>>18&1023)+128)|0]|0;a[k+e|0]=a[l+(((p-t|0)>>>18&1023)+128)|0]|0;a[k+f|0]=a[l+(((s+n|0)>>>18&1023)+128)|0]|0;a[k+m|0]=a[l+(((n-s|0)>>>18&1023)+128)|0]|0;d=d+1|0;if((d|0)==4){break}else{o=o+16|0}}i=j;return}function fi(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;j=i;i=i+48|0;k=j;l=c[d+336>>2]|0;d=c[e+84>>2]|0;e=aa(c[d>>2]<<13,b[f>>1]|0)|0|1024;m=aa((c[d+64>>2]|0)*5793|0,b[f+32>>1]|0)|0;n=m+e|0;o=(aa(m,-2)|0)+e|0;e=aa((c[d+32>>2]|0)*10033|0,b[f+16>>1]|0)|0;m=e+n>>11;c[k>>2]=m;c[k+24>>2]=n-e>>11;e=k+12|0;c[e>>2]=o>>11;o=aa(c[d+4>>2]<<13,b[f+2>>1]|0)|0|1024;n=aa((c[d+68>>2]|0)*5793|0,b[f+34>>1]|0)|0;p=n+o|0;q=(aa(n,-2)|0)+o|0;o=aa((c[d+36>>2]|0)*10033|0,b[f+18>>1]|0)|0;n=o+p>>11;c[k+4>>2]=n;c[k+28>>2]=p-o>>11;o=q>>11;c[k+16>>2]=o;q=aa(c[d+8>>2]<<13,b[f+4>>1]|0)|0|1024;p=aa((c[d+72>>2]|0)*5793|0,b[f+36>>1]|0)|0;r=p+q|0;s=(aa(p,-2)|0)+q|0;q=aa((c[d+40>>2]|0)*10033|0,b[f+20>>1]|0)|0;f=q+r>>11;c[k+8>>2]=f;d=r-q>>11;c[k+32>>2]=d;q=s>>11;c[k+20>>2]=q;s=h+2|0;r=h+1|0;p=c[g>>2]|0;t=(m<<13)+131072|0;m=t+(f*5793|0)|0;u=(aa(f,-11586)|0)+t|0;t=n*10033|0;a[p+h|0]=a[l+(((m+t|0)>>>18&1023)+128)|0]|0;a[p+s|0]=a[l+(((m-t|0)>>>18&1023)+128)|0]|0;a[p+r|0]=a[l+((u>>>18&1023)+128)|0]|0;u=c[g+4>>2]|0;p=(c[e>>2]<<13)+131072|0;e=p+(q*5793|0)|0;t=(aa(q,-11586)|0)+p|0;p=o*10033|0;a[u+h|0]=a[l+(((e+p|0)>>>18&1023)+128)|0]|0;a[u+s|0]=a[l+(((e-p|0)>>>18&1023)+128)|0]|0;a[u+r|0]=a[l+((t>>>18&1023)+128)|0]|0;t=c[g+8>>2]|0;g=(c[k+24>>2]<<13)+131072|0;u=g+(d*5793|0)|0;p=(aa(d,-11586)|0)+g|0;g=(c[k+28>>2]|0)*10033|0;a[t+h|0]=a[l+(((u+g|0)>>>18&1023)+128)|0]|0;a[t+s|0]=a[l+(((u-g|0)>>>18&1023)+128)|0]|0;a[t+r|0]=a[l+((p>>>18&1023)+128)|0]|0;i=j;return}function gi(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,l=0;i=c[d+336>>2]|0;d=c[e+84>>2]|0;e=aa(b[f>>1]|0,c[d>>2]|0)|0;j=aa(b[f+16>>1]|0,c[d+32>>2]|0)|0;k=e+4|0;e=j+k|0;l=k-j|0;j=aa(b[f+2>>1]|0,c[d+4>>2]|0)|0;k=aa(b[f+18>>1]|0,c[d+36>>2]|0)|0;d=k+j|0;f=j-k|0;k=c[g>>2]|0;a[k+h|0]=a[i+(((d+e|0)>>>3&1023)+128)|0]|0;j=h+1|0;a[k+j|0]=a[i+(((e-d|0)>>>3&1023)+128)|0]|0;d=c[g+4>>2]|0;a[d+h|0]=a[i+(((f+l|0)>>>3&1023)+128)|0]|0;a[d+j|0]=a[i+(((l-f|0)>>>3&1023)+128)|0]|0;return}function hi(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0;i=a[(c[d+336>>2]|0)+((((aa(b[f>>1]|0,c[c[e+84>>2]>>2]|0)|0)+4|0)>>>3&1023)+128)|0]|0;a[(c[g>>2]|0)+h|0]=i;return}function ii(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0;j=i;i=i+288|0;k=j;l=c[d+336>>2]|0;d=0;m=f;f=c[e+84>>2]|0;e=k;while(1){n=aa(c[f>>2]<<13,b[m>>1]|0)|0|1024;o=aa(b[m+32>>1]|0,c[f+64>>2]|0)|0;p=aa(b[m+64>>1]|0,c[f+128>>2]|0)|0;q=aa((c[f+192>>2]|0)*5793|0,b[m+96>>1]|0)|0;r=q+n|0;s=n-q-q|0;q=o-p|0;n=s+(q*5793|0)|0;t=(aa(q,-11586)|0)+s|0;s=(p+o|0)*10887|0;q=o*8875|0;o=p*2012|0;p=s-o+r|0;u=r-s+q|0;s=r-q+o|0;o=aa(b[m+16>>1]|0,c[f+32>>2]|0)|0;q=aa(b[m+80>>1]|0,c[f+160>>2]|0)|0;r=aa(b[m+112>>1]|0,c[f+224>>2]|0)|0;v=aa(aa(c[f+96>>2]|0,-10033)|0,b[m+48>>1]|0)|0;w=(q+o|0)*7447|0;x=(r+o|0)*3962|0;y=w-v+x|0;z=(q-r|0)*11409|0;A=v-z+w|0;w=z+v+x|0;x=(o-q-r|0)*10033|0;c[e>>2]=y+p>>11;c[e+256>>2]=p-y>>11;c[e+32>>2]=x+n>>11;c[e+224>>2]=n-x>>11;c[e+64>>2]=A+u>>11;c[e+192>>2]=u-A>>11;c[e+96>>2]=w+s>>11;c[e+160>>2]=s-w>>11;c[e+128>>2]=t>>11;d=d+1|0;if((d|0)==8){break}else{m=m+2|0;f=f+4|0;e=e+4|0}}e=h+8|0;f=h+1|0;m=h+7|0;d=h+2|0;t=h+6|0;w=h+3|0;s=h+5|0;A=h+4|0;u=0;x=k;while(1){k=c[g+(u<<2)>>2]|0;n=(c[x>>2]<<13)+131072|0;y=c[x+8>>2]|0;p=c[x+16>>2]|0;r=(c[x+24>>2]|0)*5793|0;q=r+n|0;o=n-r-r|0;r=y-p|0;n=o+(r*5793|0)|0;v=(aa(r,-11586)|0)+o|0;o=(p+y|0)*10887|0;r=y*8875|0;y=p*2012|0;p=o-y+q|0;z=q-o+r|0;o=q-r+y|0;y=c[x+4>>2]|0;r=c[x+20>>2]|0;q=c[x+28>>2]|0;B=aa(c[x+12>>2]|0,-10033)|0;C=(r+y|0)*7447|0;D=(q+y|0)*3962|0;E=C-B+D|0;F=(r-q|0)*11409|0;G=B-F+C|0;C=F+B+D|0;D=(y-r-q|0)*10033|0;a[k+h|0]=a[l+(((E+p|0)>>>18&1023)+128)|0]|0;a[k+e|0]=a[l+(((p-E|0)>>>18&1023)+128)|0]|0;a[k+f|0]=a[l+(((D+n|0)>>>18&1023)+128)|0]|0;a[k+m|0]=a[l+(((n-D|0)>>>18&1023)+128)|0]|0;a[k+d|0]=a[l+(((G+z|0)>>>18&1023)+128)|0]|0;a[k+t|0]=a[l+(((z-G|0)>>>18&1023)+128)|0]|0;a[k+w|0]=a[l+(((C+o|0)>>>18&1023)+128)|0]|0;a[k+s|0]=a[l+(((o-C|0)>>>18&1023)+128)|0]|0;a[k+A|0]=a[l+((v>>>18&1023)+128)|0]|0;u=u+1|0;if((u|0)==9){break}else{x=x+32|0}}i=j;return}function ji(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;j=i;i=i+320|0;k=j;l=c[d+336>>2]|0;d=0;m=f;f=c[e+84>>2]|0;e=k;while(1){n=aa(c[f>>2]<<13,b[m>>1]|0)|0|1024;o=aa(b[m+64>>1]|0,c[f+128>>2]|0)|0;p=(o*9373|0)+n|0;q=(aa(o,-3580)|0)+n|0;r=(aa(o,-11586)|0)+n>>11;n=aa(b[m+32>>1]|0,c[f+64>>2]|0)|0;o=aa(b[m+96>>1]|0,c[f+192>>2]|0)|0;s=(o+n|0)*6810|0;t=s+(n*4209|0)|0;n=s+(aa(o,-17828)|0)|0;o=t+p|0;s=p-t|0;t=n+q|0;p=q-n|0;n=aa(b[m+16>>1]|0,c[f+32>>2]|0)|0;q=aa(b[m+48>>1]|0,c[f+96>>2]|0)|0;u=aa(b[m+80>>1]|0,c[f+160>>2]|0)|0;v=aa(b[m+112>>1]|0,c[f+224>>2]|0)|0;w=v+q|0;x=q-v|0;v=x*2531|0;q=u<<13;y=w*7791|0;z=v+q|0;A=y+(n*11443|0)+z|0;B=(n*1812|0)-y+z|0;z=w*4815|0;w=q-v-(x<<12)|0;v=n-u-x<<2;x=(n*10323|0)-z-w|0;u=w+((n*5260|0)-z)|0;c[e>>2]=A+o>>11;c[e+288>>2]=o-A>>11;c[e+32>>2]=x+t>>11;c[e+256>>2]=t-x>>11;c[e+64>>2]=v+r;c[e+224>>2]=r-v;c[e+96>>2]=u+p>>11;c[e+192>>2]=p-u>>11;c[e+128>>2]=B+s>>11;c[e+160>>2]=s-B>>11;d=d+1|0;if((d|0)==8){break}else{m=m+2|0;f=f+4|0;e=e+4|0}}e=h+9|0;f=h+1|0;m=h+8|0;d=h+2|0;B=h+7|0;s=h+3|0;u=h+6|0;p=h+4|0;v=h+5|0;r=0;x=k;while(1){k=c[g+(r<<2)>>2]|0;t=(c[x>>2]<<13)+131072|0;A=c[x+16>>2]|0;o=t+(A*9373|0)|0;z=t+(aa(A,-3580)|0)|0;n=t+(aa(A,-11586)|0)|0;A=c[x+8>>2]|0;t=c[x+24>>2]|0;w=(t+A|0)*6810|0;q=w+(A*4209|0)|0;A=w+(aa(t,-17828)|0)|0;t=q+o|0;w=o-q|0;q=A+z|0;o=z-A|0;A=c[x+4>>2]|0;z=c[x+12>>2]|0;y=c[x+20>>2]<<13;C=c[x+28>>2]|0;D=C+z|0;E=z-C|0;C=E*2531|0;z=D*7791|0;F=C+y|0;G=z+(A*11443|0)+F|0;H=(A*1812|0)-z+F|0;F=D*4815|0;D=y-C-(E<<12)|0;C=(A-E<<13)-y|0;y=(A*10323|0)-F-D|0;E=D+((A*5260|0)-F)|0;a[k+h|0]=a[l+(((G+t|0)>>>18&1023)+128)|0]|0;a[k+e|0]=a[l+(((t-G|0)>>>18&1023)+128)|0]|0;a[k+f|0]=a[l+(((y+q|0)>>>18&1023)+128)|0]|0;a[k+m|0]=a[l+(((q-y|0)>>>18&1023)+128)|0]|0;a[k+d|0]=a[l+(((C+n|0)>>>18&1023)+128)|0]|0;a[k+B|0]=a[l+(((n-C|0)>>>18&1023)+128)|0]|0;a[k+s|0]=a[l+(((E+o|0)>>>18&1023)+128)|0]|0;a[k+u|0]=a[l+(((o-E|0)>>>18&1023)+128)|0]|0;a[k+p|0]=a[l+(((H+w|0)>>>18&1023)+128)|0]|0;a[k+v|0]=a[l+(((w-H|0)>>>18&1023)+128)|0]|0;r=r+1|0;if((r|0)==10){break}else{x=x+32|0}}i=j;return}function ki(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0;j=i;i=i+352|0;k=j;l=c[d+336>>2]|0;d=0;m=f;f=c[e+84>>2]|0;e=k;while(1){n=aa(c[f>>2]<<13,b[m>>1]|0)|0|1024;o=aa(b[m+32>>1]|0,c[f+64>>2]|0)|0;p=aa(b[m+64>>1]|0,c[f+128>>2]|0)|0;q=aa(b[m+96>>1]|0,c[f+192>>2]|0)|0;r=(p-q|0)*20862|0;s=(p-o|0)*3529|0;t=q+o|0;u=t-p|0;v=(u*11116|0)+n|0;w=s+(aa(p,-14924)|0)+r+v|0;x=r+(q*17333|0)+v|0;r=s+(aa(o,-12399)|0)+v|0;s=v+(aa(t,-9467)|0)|0;t=s+(aa(q,-6461)|0)|0;q=(p*15929|0)+(aa(o,-11395)|0)+s|0;s=(aa(u,-11585)|0)+n|0;n=aa(b[m+16>>1]|0,c[f+32>>2]|0)|0;u=aa(b[m+48>>1]|0,c[f+96>>2]|0)|0;o=aa(b[m+80>>1]|0,c[f+160>>2]|0)|0;p=aa(b[m+112>>1]|0,c[f+224>>2]|0)|0;v=u+n|0;y=(o+v+p|0)*3264|0;z=v*7274|0;v=(o+n|0)*5492|0;A=y+((p+n|0)*3e3|0)|0;B=z+(aa(n,-7562)|0)+v+A|0;n=y+(aa(o+u|0,-9527)|0)|0;C=v+(aa(o,-9766)|0)+n|0;v=aa(p+u|0,-14731)|0;D=z+(u*16984|0)+v+n|0;n=v+(p*17223|0)+A|0;A=(o*8203|0)+(aa(u,-12019)|0)+(aa(p,-13802)|0)+y|0;c[e>>2]=B+x>>11;c[e+320>>2]=x-B>>11;c[e+32>>2]=D+w>>11;c[e+288>>2]=w-D>>11;c[e+64>>2]=C+t>>11;c[e+256>>2]=t-C>>11;c[e+96>>2]=n+r>>11;c[e+224>>2]=r-n>>11;c[e+128>>2]=A+q>>11;c[e+192>>2]=q-A>>11;c[e+160>>2]=s>>11;d=d+1|0;if((d|0)==8){break}else{m=m+2|0;f=f+4|0;e=e+4|0}}e=h+10|0;f=h+1|0;m=h+9|0;d=h+2|0;s=h+8|0;A=h+3|0;q=h+7|0;n=h+4|0;r=h+6|0;C=h+5|0;t=0;D=k;while(1){k=c[g+(t<<2)>>2]|0;w=(c[D>>2]<<13)+131072|0;B=c[D+8>>2]|0;x=c[D+16>>2]|0;y=c[D+24>>2]|0;p=(x-y|0)*20862|0;u=(x-B|0)*3529|0;o=y+B|0;v=o-x|0;z=(v*11116|0)+w|0;E=u+(aa(x,-14924)|0)+p+z|0;F=p+(y*17333|0)+z|0;p=u+(aa(B,-12399)|0)+z|0;u=z+(aa(o,-9467)|0)|0;o=u+(aa(y,-6461)|0)|0;y=(x*15929|0)+(aa(B,-11395)|0)+u|0;u=(aa(v,-11585)|0)+w|0;w=c[D+4>>2]|0;v=c[D+12>>2]|0;B=c[D+20>>2]|0;x=c[D+28>>2]|0;z=v+w|0;G=(z+B+x|0)*3264|0;H=z*7274|0;z=(B+w|0)*5492|0;I=G+((x+w|0)*3e3|0)|0;J=H+(aa(w,-7562)|0)+z+I|0;w=G+(aa(B+v|0,-9527)|0)|0;K=z+(aa(B,-9766)|0)+w|0;z=aa(x+v|0,-14731)|0;L=H+(v*16984|0)+z+w|0;w=z+(x*17223|0)+I|0;I=(B*8203|0)+(aa(v,-12019)|0)+(aa(x,-13802)|0)+G|0;a[k+h|0]=a[l+(((J+F|0)>>>18&1023)+128)|0]|0;a[k+e|0]=a[l+(((F-J|0)>>>18&1023)+128)|0]|0;a[k+f|0]=a[l+(((L+E|0)>>>18&1023)+128)|0]|0;a[k+m|0]=a[l+(((E-L|0)>>>18&1023)+128)|0]|0;a[k+d|0]=a[l+(((K+o|0)>>>18&1023)+128)|0]|0;a[k+s|0]=a[l+(((o-K|0)>>>18&1023)+128)|0]|0;a[k+A|0]=a[l+(((w+p|0)>>>18&1023)+128)|0]|0;a[k+q|0]=a[l+(((p-w|0)>>>18&1023)+128)|0]|0;a[k+n|0]=a[l+(((I+y|0)>>>18&1023)+128)|0]|0;a[k+r|0]=a[l+(((y-I|0)>>>18&1023)+128)|0]|0;a[k+C|0]=a[l+((u>>>18&1023)+128)|0]|0;t=t+1|0;if((t|0)==11){break}else{D=D+32|0}}i=j;return}function li(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0;j=i;i=i+384|0;k=j;l=c[d+336>>2]|0;d=0;m=f;f=c[e+84>>2]|0;e=k;while(1){n=aa(c[f>>2]<<13,b[m>>1]|0)|0|1024;o=aa((c[f+128>>2]|0)*10033|0,b[m+64>>1]|0)|0;p=o+n|0;q=n-o|0;o=aa(b[m+32>>1]|0,c[f+64>>2]|0)|0;r=o*11190|0;s=o<<13;o=aa(c[f+192>>2]<<13,b[m+96>>1]|0)|0;t=s-o|0;u=t+n|0;v=n-t|0;t=o+r|0;n=t+p|0;w=p-t|0;t=r-s-o|0;o=t+q|0;s=q-t|0;t=aa(b[m+16>>1]|0,c[f+32>>2]|0)|0;q=aa(b[m+48>>1]|0,c[f+96>>2]|0)|0;r=aa(b[m+80>>1]|0,c[f+160>>2]|0)|0;p=aa(b[m+112>>1]|0,c[f+224>>2]|0)|0;x=q*10703|0;y=aa(q,-4433)|0;z=r+t|0;A=(p+z|0)*7053|0;B=A+(z*2139|0)|0;z=x+(t*2295|0)+B|0;C=aa(p+r|0,-8565)|0;D=(aa(r,-12112)|0)+y+C+B|0;B=(p*12998|0)-x+A+C|0;C=y+(aa(t,-5540)|0)+(aa(p,-16244)|0)+A|0;A=t-p|0;p=q-r|0;r=(A+p|0)*4433|0;q=r+(A*6270|0)|0;A=r+(aa(p,-15137)|0)|0;c[e>>2]=z+n>>11;c[e+352>>2]=n-z>>11;c[e+32>>2]=q+u>>11;c[e+320>>2]=u-q>>11;c[e+64>>2]=D+o>>11;c[e+288>>2]=o-D>>11;c[e+96>>2]=B+s>>11;c[e+256>>2]=s-B>>11;c[e+128>>2]=A+v>>11;c[e+224>>2]=v-A>>11;c[e+160>>2]=C+w>>11;c[e+192>>2]=w-C>>11;d=d+1|0;if((d|0)==8){break}else{m=m+2|0;f=f+4|0;e=e+4|0}}e=h+11|0;f=h+1|0;m=h+10|0;d=h+2|0;C=h+9|0;w=h+3|0;A=h+8|0;v=h+4|0;B=h+7|0;s=h+5|0;D=h+6|0;o=0;q=k;while(1){k=c[g+(o<<2)>>2]|0;u=(c[q>>2]<<13)+131072|0;z=(c[q+16>>2]|0)*10033|0;n=u+z|0;p=u-z|0;z=c[q+8>>2]|0;r=z*11190|0;t=z<<13;z=c[q+24>>2]<<13;y=t-z|0;x=y+u|0;E=u-y|0;y=z+r|0;u=y+n|0;F=n-y|0;y=r-t-z|0;z=y+p|0;t=p-y|0;y=c[q+4>>2]|0;p=c[q+12>>2]|0;r=c[q+20>>2]|0;n=c[q+28>>2]|0;G=p*10703|0;H=aa(p,-4433)|0;I=r+y|0;J=(I+n|0)*7053|0;K=J+(I*2139|0)|0;I=G+(y*2295|0)+K|0;L=aa(n+r|0,-8565)|0;M=(aa(r,-12112)|0)+H+L+K|0;K=(n*12998|0)-G+J+L|0;L=H+(aa(y,-5540)|0)+(aa(n,-16244)|0)+J|0;J=y-n|0;n=p-r|0;r=(J+n|0)*4433|0;p=r+(J*6270|0)|0;J=r+(aa(n,-15137)|0)|0;a[k+h|0]=a[l+(((I+u|0)>>>18&1023)+128)|0]|0;a[k+e|0]=a[l+(((u-I|0)>>>18&1023)+128)|0]|0;a[k+f|0]=a[l+(((p+x|0)>>>18&1023)+128)|0]|0;a[k+m|0]=a[l+(((x-p|0)>>>18&1023)+128)|0]|0;a[k+d|0]=a[l+(((M+z|0)>>>18&1023)+128)|0]|0;a[k+C|0]=a[l+(((z-M|0)>>>18&1023)+128)|0]|0;a[k+w|0]=a[l+(((K+t|0)>>>18&1023)+128)|0]|0;a[k+A|0]=a[l+(((t-K|0)>>>18&1023)+128)|0]|0;a[k+v|0]=a[l+(((J+E|0)>>>18&1023)+128)|0]|0;a[k+B|0]=a[l+(((E-J|0)>>>18&1023)+128)|0]|0;a[k+s|0]=a[l+(((L+F|0)>>>18&1023)+128)|0]|0;a[k+D|0]=a[l+(((F-L|0)>>>18&1023)+128)|0]|0;o=o+1|0;if((o|0)==12){break}else{q=q+32|0}}i=j;return}function mi(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0;j=i;i=i+416|0;k=j;l=c[d+336>>2]|0;d=0;m=f;f=c[e+84>>2]|0;e=k;while(1){n=aa(c[f>>2]<<13,b[m>>1]|0)|0|1024;o=aa(b[m+32>>1]|0,c[f+64>>2]|0)|0;p=aa(b[m+64>>1]|0,c[f+128>>2]|0)|0;q=aa(b[m+96>>1]|0,c[f+192>>2]|0)|0;r=q+p|0;s=p-q|0;q=r*9465|0;p=(s*793|0)+n|0;t=q+(o*11249|0)+p|0;u=(o*4108|0)-q+p|0;p=r*2592|0;q=(s*3989|0)+n|0;v=(o*8672|0)-p+q|0;w=p+(aa(o,-10258)|0)+q|0;q=r*3570|0;r=n+(aa(s,-7678)|0)|0;p=(aa(o,-1396)|0)-q+r|0;x=q+(aa(o,-6581)|0)+r|0;r=aa(b[m+16>>1]|0,c[f+32>>2]|0)|0;q=aa(b[m+48>>1]|0,c[f+96>>2]|0)|0;y=aa(b[m+80>>1]|0,c[f+160>>2]|0)|0;z=aa(b[m+112>>1]|0,c[f+224>>2]|0)|0;A=(q+r|0)*10832|0;B=(y+r|0)*9534|0;C=z+r|0;D=C*7682|0;E=A+(aa(r,-16549)|0)+B+D|0;F=aa(y+q|0,-2773)|0;G=aa(z+q|0,-9534)|0;H=A+(q*6859|0)+F+G|0;A=aa(z+y|0,-5384)|0;I=F+(aa(y,-12879)|0)+B+A|0;B=G+(z*18068|0)+D+A|0;A=C*2773|0;C=(y-q|0)*7682|0;D=(aa(q,-3818)|0)+(r*2611|0)+C+A|0;r=C+(y*3150|0)+(aa(z,-14273)|0)+A|0;c[e>>2]=E+t>>11;c[e+384>>2]=t-E>>11;c[e+32>>2]=H+v>>11;c[e+352>>2]=v-H>>11;c[e+64>>2]=I+u>>11;c[e+320>>2]=u-I>>11;c[e+96>>2]=B+p>>11;c[e+288>>2]=p-B>>11;c[e+128>>2]=D+x>>11;c[e+256>>2]=x-D>>11;c[e+160>>2]=r+w>>11;c[e+224>>2]=w-r>>11;c[e+192>>2]=((s-o|0)*11585|0)+n>>11;d=d+1|0;if((d|0)==8){break}else{m=m+2|0;f=f+4|0;e=e+4|0}}e=h+12|0;f=h+1|0;m=h+11|0;d=h+2|0;n=h+10|0;o=h+3|0;s=h+9|0;r=h+4|0;w=h+8|0;D=h+5|0;x=h+7|0;B=h+6|0;p=0;I=k;while(1){k=c[g+(p<<2)>>2]|0;u=(c[I>>2]<<13)+131072|0;H=c[I+8>>2]|0;v=c[I+16>>2]|0;E=c[I+24>>2]|0;t=E+v|0;A=v-E|0;E=t*9465|0;v=(A*793|0)+u|0;z=E+(H*11249|0)+v|0;y=(H*4108|0)-E+v|0;v=t*2592|0;E=(A*3989|0)+u|0;C=(H*8672|0)-v+E|0;q=v+(aa(H,-10258)|0)+E|0;E=t*3570|0;t=u+(aa(A,-7678)|0)|0;v=(aa(H,-1396)|0)-E+t|0;G=E+(aa(H,-6581)|0)+t|0;t=c[I+4>>2]|0;E=c[I+12>>2]|0;F=c[I+20>>2]|0;J=c[I+28>>2]|0;K=(E+t|0)*10832|0;L=(F+t|0)*9534|0;M=J+t|0;N=M*7682|0;O=K+(aa(t,-16549)|0)+L+N|0;P=aa(F+E|0,-2773)|0;Q=aa(J+E|0,-9534)|0;R=K+(E*6859|0)+P+Q|0;K=aa(J+F|0,-5384)|0;S=P+(aa(F,-12879)|0)+L+K|0;L=Q+(J*18068|0)+N+K|0;K=M*2773|0;M=(F-E|0)*7682|0;N=(aa(E,-3818)|0)+(t*2611|0)+M+K|0;t=M+(F*3150|0)+(aa(J,-14273)|0)+K|0;a[k+h|0]=a[l+(((O+z|0)>>>18&1023)+128)|0]|0;a[k+e|0]=a[l+(((z-O|0)>>>18&1023)+128)|0]|0;a[k+f|0]=a[l+(((R+C|0)>>>18&1023)+128)|0]|0;a[k+m|0]=a[l+(((C-R|0)>>>18&1023)+128)|0]|0;a[k+d|0]=a[l+(((S+y|0)>>>18&1023)+128)|0]|0;a[k+n|0]=a[l+(((y-S|0)>>>18&1023)+128)|0]|0;a[k+o|0]=a[l+(((L+v|0)>>>18&1023)+128)|0]|0;a[k+s|0]=a[l+(((v-L|0)>>>18&1023)+128)|0]|0;a[k+r|0]=a[l+(((N+G|0)>>>18&1023)+128)|0]|0;a[k+w|0]=a[l+(((G-N|0)>>>18&1023)+128)|0]|0;a[k+D|0]=a[l+(((t+q|0)>>>18&1023)+128)|0]|0;a[k+x|0]=a[l+(((q-t|0)>>>18&1023)+128)|0]|0;a[k+B|0]=a[l+(((((A-H|0)*11585|0)+u|0)>>>18&1023)+128)|0]|0;p=p+1|0;if((p|0)==13){break}else{I=I+32|0}}i=j;return}function ni(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0;j=i;i=i+448|0;k=j;l=c[d+336>>2]|0;d=0;m=f;f=c[e+84>>2]|0;e=k;while(1){n=aa(c[f>>2]<<13,b[m>>1]|0)|0|1024;o=aa(b[m+64>>1]|0,c[f+128>>2]|0)|0;p=(o*10438|0)+n|0;q=(o*2578|0)+n|0;r=(aa(o,-7223)|0)+n|0;s=(aa(o,-11586)|0)+n>>11;n=aa(b[m+32>>1]|0,c[f+64>>2]|0)|0;o=aa(b[m+96>>1]|0,c[f+192>>2]|0)|0;t=(o+n|0)*9058|0;u=t+(n*2237|0)|0;v=t+(aa(o,-14084)|0)|0;t=(aa(o,-11295)|0)+(n*5027|0)|0;n=u+p|0;o=p-u|0;u=v+q|0;p=q-v|0;v=t+r|0;q=r-t|0;t=aa(b[m+16>>1]|0,c[f+32>>2]|0)|0;r=aa(b[m+48>>1]|0,c[f+96>>2]|0)|0;w=aa(b[m+80>>1]|0,c[f+160>>2]|0)|0;x=aa(b[m+112>>1]|0,c[f+224>>2]|0)|0;y=x<<13;z=w+t|0;A=(r+t|0)*10935|0;B=z*9810|0;C=A+(aa(t,-9232)|0)+B+y|0;D=z*6164|0;z=t-r|0;E=(z*3826|0)-y|0;F=D+(aa(t,-8693)|0)+E|0;t=(aa(w+r|0,-1297)|0)-y|0;G=A+(aa(r,-3474)|0)+t|0;A=B+(aa(w,-19447)|0)+t|0;t=(w-r|0)*11512|0;B=t+(aa(w,-13850)|0)+D+y|0;y=t+(r*5529|0)+E|0;E=z-w+x<<2;c[e>>2]=C+n>>11;c[e+416>>2]=n-C>>11;c[e+32>>2]=G+u>>11;c[e+384>>2]=u-G>>11;c[e+64>>2]=A+v>>11;c[e+352>>2]=v-A>>11;c[e+96>>2]=E+s;c[e+320>>2]=s-E;c[e+128>>2]=B+q>>11;c[e+288>>2]=q-B>>11;c[e+160>>2]=y+p>>11;c[e+256>>2]=p-y>>11;c[e+192>>2]=F+o>>11;c[e+224>>2]=o-F>>11;d=d+1|0;if((d|0)==8){break}else{m=m+2|0;f=f+4|0;e=e+4|0}}e=h+13|0;f=h+1|0;m=h+12|0;d=h+2|0;F=h+11|0;o=h+3|0;y=h+10|0;p=h+4|0;B=h+9|0;q=h+5|0;E=h+8|0;s=h+6|0;A=h+7|0;v=0;G=k;while(1){k=c[g+(v<<2)>>2]|0;u=(c[G>>2]<<13)+131072|0;C=c[G+16>>2]|0;n=u+(C*10438|0)|0;x=u+(C*2578|0)|0;w=u+(aa(C,-7223)|0)|0;z=u+(aa(C,-11586)|0)|0;C=c[G+8>>2]|0;u=c[G+24>>2]|0;r=(u+C|0)*9058|0;t=r+(C*2237|0)|0;D=r+(aa(u,-14084)|0)|0;r=(aa(u,-11295)|0)+(C*5027|0)|0;C=t+n|0;u=n-t|0;t=D+x|0;n=x-D|0;D=r+w|0;x=w-r|0;r=c[G+4>>2]|0;w=c[G+12>>2]|0;H=c[G+20>>2]|0;I=c[G+28>>2]<<13;J=H+r|0;K=(w+r|0)*10935|0;L=J*9810|0;M=K+(aa(r,-9232)|0)+L+I|0;N=J*6164|0;J=r-w|0;O=(J*3826|0)-I|0;P=N+(aa(r,-8693)|0)+O|0;r=(aa(H+w|0,-1297)|0)-I|0;Q=K+(aa(w,-3474)|0)+r|0;K=L+(aa(H,-19447)|0)+r|0;r=(H-w|0)*11512|0;L=I+(aa(H,-13850)|0)+r+N|0;N=r+(w*5529|0)+O|0;O=(J-H<<13)+I|0;a[k+h|0]=a[l+(((M+C|0)>>>18&1023)+128)|0]|0;a[k+e|0]=a[l+(((C-M|0)>>>18&1023)+128)|0]|0;a[k+f|0]=a[l+(((Q+t|0)>>>18&1023)+128)|0]|0;a[k+m|0]=a[l+(((t-Q|0)>>>18&1023)+128)|0]|0;a[k+d|0]=a[l+(((K+D|0)>>>18&1023)+128)|0]|0;a[k+F|0]=a[l+(((D-K|0)>>>18&1023)+128)|0]|0;a[k+o|0]=a[l+(((O+z|0)>>>18&1023)+128)|0]|0;a[k+y|0]=a[l+(((z-O|0)>>>18&1023)+128)|0]|0;a[k+p|0]=a[l+(((L+x|0)>>>18&1023)+128)|0]|0;a[k+B|0]=a[l+(((x-L|0)>>>18&1023)+128)|0]|0;a[k+q|0]=a[l+(((N+n|0)>>>18&1023)+128)|0]|0;a[k+E|0]=a[l+(((n-N|0)>>>18&1023)+128)|0]|0;a[k+s|0]=a[l+(((P+u|0)>>>18&1023)+128)|0]|0;a[k+A|0]=a[l+(((u-P|0)>>>18&1023)+128)|0]|0;v=v+1|0;if((v|0)==14){break}else{G=G+32|0}}i=j;return}function oi(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0;j=i;i=i+480|0;k=j;l=c[d+336>>2]|0;d=0;m=f;f=c[e+84>>2]|0;e=k;while(1){n=aa(c[f>>2]<<13,b[m>>1]|0)|0|1024;o=aa(b[m+32>>1]|0,c[f+64>>2]|0)|0;p=aa(b[m+64>>1]|0,c[f+128>>2]|0)|0;q=aa(b[m+96>>1]|0,c[f+192>>2]|0)|0;r=(aa(q,-3580)|0)+n|0;s=(q*9373|0)+n|0;t=(aa(q,-11586)|0)+n|0;n=o-p|0;q=p+o|0;p=q*10958|0;u=n*374|0;v=o*11795|0;o=u+p+s|0;w=v-p+u+r|0;u=q*4482|0;p=aa(n,-3271)|0;x=s-u+p|0;y=u-v+p+r|0;p=q*6476|0;q=n*2896|0;v=q+p+r|0;r=s-p+q|0;q=t+(n*5792|0)|0;p=(aa(n,-11584)|0)+t|0;t=aa(b[m+16>>1]|0,c[f+32>>2]|0)|0;n=aa(b[m+48>>1]|0,c[f+96>>2]|0)|0;s=aa((c[f+160>>2]|0)*10033|0,b[m+80>>1]|0)|0;u=aa(b[m+112>>1]|0,c[f+224>>2]|0)|0;z=n-u|0;A=(z+t|0)*6810|0;B=A+(t*4209|0)|0;C=A+(aa(z,-17828)|0)|0;z=aa(n,-6810)|0;A=aa(n,-11018)|0;n=t-u|0;D=(n*11522|0)+s|0;E=(u*20131|0)-A+D|0;F=z+(aa(t,-9113)|0)+D|0;D=(n*10033|0)-s|0;n=(u+t|0)*4712|0;G=z+(t*3897|0)-s+n|0;t=s+A+(aa(u,-7121)|0)+n|0;c[e>>2]=E+o>>11;c[e+448>>2]=o-E>>11;c[e+32>>2]=B+v>>11;c[e+416>>2]=v-B>>11;c[e+64>>2]=D+q>>11;c[e+384>>2]=q-D>>11;c[e+96>>2]=G+w>>11;c[e+352>>2]=w-G>>11;c[e+128>>2]=C+r>>11;c[e+320>>2]=r-C>>11;c[e+160>>2]=t+x>>11;c[e+288>>2]=x-t>>11;c[e+192>>2]=F+y>>11;c[e+256>>2]=y-F>>11;c[e+224>>2]=p>>11;d=d+1|0;if((d|0)==8){break}else{m=m+2|0;f=f+4|0;e=e+4|0}}e=h+14|0;f=h+1|0;m=h+13|0;d=h+2|0;p=h+12|0;F=h+3|0;y=h+11|0;t=h+4|0;x=h+10|0;C=h+5|0;r=h+9|0;G=h+6|0;w=h+8|0;D=h+7|0;q=0;B=k;while(1){k=c[g+(q<<2)>>2]|0;v=(c[B>>2]<<13)+131072|0;E=c[B+8>>2]|0;o=c[B+16>>2]|0;n=c[B+24>>2]|0;u=(aa(n,-3580)|0)+v|0;A=(n*9373|0)+v|0;s=(aa(n,-11586)|0)+v|0;v=E-o|0;n=o+E|0;o=n*10958|0;z=v*374|0;H=E*11795|0;E=z+o+A|0;I=H-o+z+u|0;z=n*4482|0;o=aa(v,-3271)|0;J=A-z+o|0;K=z-H+o+u|0;o=n*6476|0;n=v*2896|0;H=n+o+u|0;u=A-o+n|0;n=s+(v*5792|0)|0;o=(aa(v,-11584)|0)+s|0;s=c[B+4>>2]|0;v=c[B+12>>2]|0;A=(c[B+20>>2]|0)*10033|0;z=c[B+28>>2]|0;L=v-z|0;M=(L+s|0)*6810|0;N=M+(s*4209|0)|0;O=M+(aa(L,-17828)|0)|0;L=aa(v,-6810)|0;M=aa(v,-11018)|0;v=s-z|0;P=(v*11522|0)+A|0;Q=(z*20131|0)-M+P|0;R=L+(aa(s,-9113)|0)+P|0;P=(v*10033|0)-A|0;v=(z+s|0)*4712|0;S=L+(s*3897|0)-A+v|0;s=A+M+(aa(z,-7121)|0)+v|0;a[k+h|0]=a[l+(((Q+E|0)>>>18&1023)+128)|0]|0;a[k+e|0]=a[l+(((E-Q|0)>>>18&1023)+128)|0]|0;a[k+f|0]=a[l+(((N+H|0)>>>18&1023)+128)|0]|0;a[k+m|0]=a[l+(((H-N|0)>>>18&1023)+128)|0]|0;a[k+d|0]=a[l+(((P+n|0)>>>18&1023)+128)|0]|0;a[k+p|0]=a[l+(((n-P|0)>>>18&1023)+128)|0]|0;a[k+F|0]=a[l+(((S+I|0)>>>18&1023)+128)|0]|0;a[k+y|0]=a[l+(((I-S|0)>>>18&1023)+128)|0]|0;a[k+t|0]=a[l+(((O+u|0)>>>18&1023)+128)|0]|0;a[k+x|0]=a[l+(((u-O|0)>>>18&1023)+128)|0]|0;a[k+C|0]=a[l+(((s+J|0)>>>18&1023)+128)|0]|0;a[k+r|0]=a[l+(((J-s|0)>>>18&1023)+128)|0]|0;a[k+G|0]=a[l+(((R+K|0)>>>18&1023)+128)|0]|0;a[k+w|0]=a[l+(((K-R|0)>>>18&1023)+128)|0]|0;a[k+D|0]=a[l+((o>>>18&1023)+128)|0]|0;q=q+1|0;if((q|0)==15){break}else{B=B+32|0}}i=j;return}function pi(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0;j=i;i=i+512|0;k=j;l=c[d+336>>2]|0;d=0;m=f;f=c[e+84>>2]|0;e=k;while(1){n=aa(c[f>>2]<<13,b[m>>1]|0)|0|1024;o=aa(b[m+64>>1]|0,c[f+128>>2]|0)|0;p=o*10703|0;q=o*4433|0;o=p+n|0;r=n-p|0;p=q+n|0;s=n-q|0;q=aa(b[m+32>>1]|0,c[f+64>>2]|0)|0;n=aa(b[m+96>>1]|0,c[f+192>>2]|0)|0;t=q-n|0;u=t*2260|0;v=t*11363|0;t=v+(n*20995|0)|0;w=u+(q*7373|0)|0;x=v+(aa(q,-4926)|0)|0;q=u+(aa(n,-4176)|0)|0;n=t+o|0;u=o-t|0;t=w+p|0;o=p-w|0;w=x+s|0;p=s-x|0;x=q+r|0;s=r-q|0;q=aa(b[m+16>>1]|0,c[f+32>>2]|0)|0;r=aa(b[m+48>>1]|0,c[f+96>>2]|0)|0;v=aa(b[m+80>>1]|0,c[f+160>>2]|0)|0;y=aa(b[m+112>>1]|0,c[f+224>>2]|0)|0;z=v+q|0;A=(r+q|0)*11086|0;B=z*10217|0;C=(y+q|0)*8956|0;D=(q-y|0)*7350|0;E=z*5461|0;z=(q-r|0)*3363|0;F=A+(aa(q,-18730)|0)+B+C|0;G=z+(aa(q,-15038)|0)+E+D|0;q=(v+r|0)*1136|0;H=(v-r|0)*11529|0;I=y+r|0;J=aa(I,-5461)|0;K=A+(r*589|0)+q+J|0;A=aa(I,-10217)|0;I=z+(r*16154|0)+H+A|0;r=aa(y+v|0,-11086)|0;z=q+(aa(v,-9222)|0)+B+r|0;B=J+(y*8728|0)+C+r|0;r=(y-v|0)*3363|0;C=A+(y*25733|0)+D+r|0;D=H+(aa(v,-6278)|0)+E+r|0;c[e>>2]=F+n>>11;c[e+480>>2]=n-F>>11;c[e+32>>2]=K+t>>11;c[e+448>>2]=t-K>>11;c[e+64>>2]=z+w>>11;c[e+416>>2]=w-z>>11;c[e+96>>2]=B+x>>11;c[e+384>>2]=x-B>>11;c[e+128>>2]=C+s>>11;c[e+352>>2]=s-C>>11;c[e+160>>2]=D+p>>11;c[e+320>>2]=p-D>>11;c[e+192>>2]=I+o>>11;c[e+288>>2]=o-I>>11;c[e+224>>2]=G+u>>11;c[e+256>>2]=u-G>>11;d=d+1|0;if((d|0)==8){break}else{m=m+2|0;f=f+4|0;e=e+4|0}}e=h+15|0;f=h+1|0;m=h+14|0;d=h+2|0;G=h+13|0;u=h+3|0;I=h+12|0;o=h+4|0;D=h+11|0;p=h+5|0;C=h+10|0;s=h+6|0;B=h+9|0;x=h+7|0;z=h+8|0;w=0;K=k;while(1){k=c[g+(w<<2)>>2]|0;t=(c[K>>2]<<13)+131072|0;F=c[K+16>>2]|0;n=F*10703|0;r=F*4433|0;F=t+n|0;E=t-n|0;n=t+r|0;v=t-r|0;r=c[K+8>>2]|0;t=c[K+24>>2]|0;H=r-t|0;y=H*2260|0;A=H*11363|0;H=A+(t*20995|0)|0;J=y+(r*7373|0)|0;q=A+(aa(r,-4926)|0)|0;r=y+(aa(t,-4176)|0)|0;t=H+F|0;y=F-H|0;H=J+n|0;F=n-J|0;J=q+v|0;n=v-q|0;q=r+E|0;v=E-r|0;r=c[K+4>>2]|0;E=c[K+12>>2]|0;A=c[K+20>>2]|0;L=c[K+28>>2]|0;M=A+r|0;N=(E+r|0)*11086|0;O=M*10217|0;P=(L+r|0)*8956|0;Q=(r-L|0)*7350|0;R=M*5461|0;M=(r-E|0)*3363|0;S=N+(aa(r,-18730)|0)+O+P|0;T=M+(aa(r,-15038)|0)+R+Q|0;r=(A+E|0)*1136|0;U=(A-E|0)*11529|0;V=L+E|0;W=aa(V,-5461)|0;X=N+(E*589|0)+r+W|0;N=aa(V,-10217)|0;V=M+(E*16154|0)+U+N|0;E=aa(L+A|0,-11086)|0;M=r+(aa(A,-9222)|0)+O+E|0;O=W+(L*8728|0)+P+E|0;E=(L-A|0)*3363|0;P=N+(L*25733|0)+Q+E|0;Q=U+(aa(A,-6278)|0)+R+E|0;a[k+h|0]=a[l+(((S+t|0)>>>18&1023)+128)|0]|0;a[k+e|0]=a[l+(((t-S|0)>>>18&1023)+128)|0]|0;a[k+f|0]=a[l+(((X+H|0)>>>18&1023)+128)|0]|0;a[k+m|0]=a[l+(((H-X|0)>>>18&1023)+128)|0]|0;a[k+d|0]=a[l+(((M+J|0)>>>18&1023)+128)|0]|0;a[k+G|0]=a[l+(((J-M|0)>>>18&1023)+128)|0]|0;a[k+u|0]=a[l+(((O+q|0)>>>18&1023)+128)|0]|0;a[k+I|0]=a[l+(((q-O|0)>>>18&1023)+128)|0]|0;a[k+o|0]=a[l+(((P+v|0)>>>18&1023)+128)|0]|0;a[k+D|0]=a[l+(((v-P|0)>>>18&1023)+128)|0]|0;a[k+p|0]=a[l+(((Q+n|0)>>>18&1023)+128)|0]|0;a[k+C|0]=a[l+(((n-Q|0)>>>18&1023)+128)|0]|0;a[k+s|0]=a[l+(((V+F|0)>>>18&1023)+128)|0]|0;a[k+B|0]=a[l+(((F-V|0)>>>18&1023)+128)|0]|0;a[k+x|0]=a[l+(((T+y|0)>>>18&1023)+128)|0]|0;a[k+z|0]=a[l+(((y-T|0)>>>18&1023)+128)|0]|0;w=w+1|0;if((w|0)==16){break}else{K=K+32|0}}i=j;return}function qi(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0;j=i;i=i+256|0;k=j;l=c[d+336>>2]|0;d=8;m=f;f=c[e+84>>2]|0;e=k;while(1){n=b[m+16>>1]|0;o=b[m+32>>1]|0;if((n|o)<<16>>16==0){if(((((b[m+48>>1]|0)==0?(b[m+64>>1]|0)==0:0)?(b[m+80>>1]|0)==0:0)?(b[m+96>>1]|0)==0:0)?(b[m+112>>1]|0)==0:0){p=aa(c[f>>2]<<2,b[m>>1]|0)|0;c[e>>2]=p;c[e+32>>2]=p;c[e+64>>2]=p;c[e+96>>2]=p;c[e+128>>2]=p;c[e+160>>2]=p;c[e+192>>2]=p;c[e+224>>2]=p}else{q=0;r=10}}else{q=o;r=10}if((r|0)==10){r=0;o=aa(q<<16>>16,c[f+64>>2]|0)|0;p=aa(b[m+96>>1]|0,c[f+192>>2]|0)|0;s=(p+o|0)*4433|0;t=s+(o*6270|0)|0;o=s+(aa(p,-15137)|0)|0;p=aa(c[f+128>>2]<<13,b[m+64>>1]|0)|0;s=aa(c[f>>2]<<13,b[m>>1]|0)|0|1024;u=p+s|0;v=s-p|0;p=u+t|0;s=u-t|0;t=v+o|0;u=v-o|0;o=aa(b[m+112>>1]|0,c[f+224>>2]|0)|0;v=aa(b[m+80>>1]|0,c[f+160>>2]|0)|0;w=aa(b[m+48>>1]|0,c[f+96>>2]|0)|0;x=aa(n<<16>>16,c[f+32>>2]|0)|0;n=w+o|0;y=x+v|0;z=(y+n|0)*9633|0;A=z+(aa(n,-16069)|0)|0;n=z+(aa(y,-3196)|0)|0;y=aa(x+o|0,-7373)|0;z=y+(o*2446|0)+A|0;o=y+(x*12299|0)+n|0;x=aa(w+v|0,-20995)|0;y=x+(v*16819|0)+n|0;n=x+(w*25172|0)+A|0;c[e>>2]=o+p>>11;c[e+224>>2]=p-o>>11;c[e+32>>2]=n+t>>11;c[e+192>>2]=t-n>>11;c[e+64>>2]=y+u>>11;c[e+160>>2]=u-y>>11;c[e+96>>2]=z+s>>11;c[e+128>>2]=s-z>>11}d=d+ -1|0;if((d|0)<=0){break}else{m=m+2|0;f=f+4|0;e=e+4|0}}e=h+15|0;f=h+1|0;m=h+14|0;d=h+2|0;q=h+13|0;r=h+3|0;z=h+12|0;s=h+4|0;y=h+11|0;u=h+5|0;n=h+10|0;t=h+6|0;o=h+9|0;p=h+7|0;A=h+8|0;w=0;x=k;while(1){k=c[g+(w<<2)>>2]|0;v=(c[x>>2]<<13)+131072|0;B=c[x+16>>2]|0;C=B*10703|0;D=B*4433|0;B=v+C|0;E=v-C|0;C=v+D|0;F=v-D|0;D=c[x+8>>2]|0;v=c[x+24>>2]|0;G=D-v|0;H=G*2260|0;I=G*11363|0;G=I+(v*20995|0)|0;J=H+(D*7373|0)|0;K=I+(aa(D,-4926)|0)|0;D=H+(aa(v,-4176)|0)|0;v=G+B|0;H=B-G|0;G=J+C|0;B=C-J|0;J=K+F|0;C=F-K|0;K=D+E|0;F=E-D|0;D=c[x+4>>2]|0;E=c[x+12>>2]|0;I=c[x+20>>2]|0;L=c[x+28>>2]|0;M=I+D|0;N=(E+D|0)*11086|0;O=M*10217|0;P=(L+D|0)*8956|0;Q=(D-L|0)*7350|0;R=M*5461|0;M=(D-E|0)*3363|0;S=N+(aa(D,-18730)|0)+O+P|0;T=M+(aa(D,-15038)|0)+R+Q|0;D=(I+E|0)*1136|0;U=(I-E|0)*11529|0;V=L+E|0;W=aa(V,-5461)|0;X=N+(E*589|0)+D+W|0;N=aa(V,-10217)|0;V=M+(E*16154|0)+U+N|0;E=aa(L+I|0,-11086)|0;M=D+(aa(I,-9222)|0)+O+E|0;O=W+(L*8728|0)+P+E|0;E=(L-I|0)*3363|0;P=N+(L*25733|0)+Q+E|0;Q=U+(aa(I,-6278)|0)+R+E|0;a[k+h|0]=a[l+(((S+v|0)>>>18&1023)+128)|0]|0;a[k+e|0]=a[l+(((v-S|0)>>>18&1023)+128)|0]|0;a[k+f|0]=a[l+(((X+G|0)>>>18&1023)+128)|0]|0;a[k+m|0]=a[l+(((G-X|0)>>>18&1023)+128)|0]|0;a[k+d|0]=a[l+(((M+J|0)>>>18&1023)+128)|0]|0;a[k+q|0]=a[l+(((J-M|0)>>>18&1023)+128)|0]|0;a[k+r|0]=a[l+(((O+K|0)>>>18&1023)+128)|0]|0;a[k+z|0]=a[l+(((K-O|0)>>>18&1023)+128)|0]|0;a[k+s|0]=a[l+(((P+F|0)>>>18&1023)+128)|0]|0;a[k+y|0]=a[l+(((F-P|0)>>>18&1023)+128)|0]|0;a[k+u|0]=a[l+(((Q+C|0)>>>18&1023)+128)|0]|0;a[k+n|0]=a[l+(((C-Q|0)>>>18&1023)+128)|0]|0;a[k+t|0]=a[l+(((V+B|0)>>>18&1023)+128)|0]|0;a[k+o|0]=a[l+(((B-V|0)>>>18&1023)+128)|0]|0;a[k+p|0]=a[l+(((T+H|0)>>>18&1023)+128)|0]|0;a[k+A|0]=a[l+(((H-T|0)>>>18&1023)+128)|0]|0;w=w+1|0;if((w|0)==8){break}else{x=x+32|0}}i=j;return}function ri(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0;j=i;i=i+224|0;k=j;l=c[d+336>>2]|0;d=0;m=f;f=c[e+84>>2]|0;e=k;while(1){n=aa(c[f>>2]<<13,b[m>>1]|0)|0|1024;o=aa(b[m+32>>1]|0,c[f+64>>2]|0)|0;p=aa(b[m+64>>1]|0,c[f+128>>2]|0)|0;q=aa(b[m+96>>1]|0,c[f+192>>2]|0)|0;r=(p-q|0)*7223|0;s=(o-p|0)*2578|0;t=(aa(p,-15083)|0)+n+s+r|0;u=q+o|0;v=(u*10438|0)+n|0;w=r+(aa(q,-637)|0)+v|0;q=s+(aa(o,-20239)|0)+v|0;v=aa(b[m+16>>1]|0,c[f+32>>2]|0)|0;o=aa(b[m+48>>1]|0,c[f+96>>2]|0)|0;s=aa(b[m+80>>1]|0,c[f+160>>2]|0)|0;r=(o+v|0)*7663|0;x=(v-o|0)*1395|0;y=aa(s+o|0,-11295)|0;o=r+x+y|0;z=(s+v|0)*5027|0;v=z+(r-x)|0;x=z+(s*15326|0)+y|0;c[e>>2]=v+w>>11;c[e+192>>2]=w-v>>11;c[e+32>>2]=o+t>>11;c[e+160>>2]=t-o>>11;c[e+64>>2]=x+q>>11;c[e+128>>2]=q-x>>11;c[e+96>>2]=((p-u|0)*11585|0)+n>>11;d=d+1|0;if((d|0)==8){break}else{m=m+2|0;f=f+4|0;e=e+4|0}}e=h+13|0;f=h+1|0;m=h+12|0;d=h+2|0;n=h+11|0;u=h+3|0;p=h+10|0;x=h+4|0;q=h+9|0;o=h+5|0;t=h+8|0;v=h+6|0;w=h+7|0;y=0;s=k;while(1){k=c[g+(y<<2)>>2]|0;z=(c[s>>2]<<13)+131072|0;r=c[s+16>>2]|0;A=z+(r*10438|0)|0;B=z+(r*2578|0)|0;C=z+(aa(r,-7223)|0)|0;D=z+(aa(r,-11586)|0)|0;r=c[s+8>>2]|0;z=c[s+24>>2]|0;E=(z+r|0)*9058|0;F=E+(r*2237|0)|0;G=E+(aa(z,-14084)|0)|0;E=(aa(z,-11295)|0)+(r*5027|0)|0;r=F+A|0;z=A-F|0;F=G+B|0;A=B-G|0;G=E+C|0;B=C-E|0;E=c[s+4>>2]|0;C=c[s+12>>2]|0;H=c[s+20>>2]|0;I=c[s+28>>2]<<13;J=H+E|0;K=(C+E|0)*10935|0;L=J*9810|0;M=K+(aa(E,-9232)|0)+L+I|0;N=J*6164|0;J=E-C|0;O=(J*3826|0)-I|0;P=N+(aa(E,-8693)|0)+O|0;E=(aa(H+C|0,-1297)|0)-I|0;Q=K+(aa(C,-3474)|0)+E|0;K=L+(aa(H,-19447)|0)+E|0;E=(H-C|0)*11512|0;L=I+(aa(H,-13850)|0)+E+N|0;N=E+(C*5529|0)+O|0;O=(J-H<<13)+I|0;a[k+h|0]=a[l+(((M+r|0)>>>18&1023)+128)|0]|0;a[k+e|0]=a[l+(((r-M|0)>>>18&1023)+128)|0]|0;a[k+f|0]=a[l+(((Q+F|0)>>>18&1023)+128)|0]|0;a[k+m|0]=a[l+(((F-Q|0)>>>18&1023)+128)|0]|0;a[k+d|0]=a[l+(((K+G|0)>>>18&1023)+128)|0]|0;a[k+n|0]=a[l+(((G-K|0)>>>18&1023)+128)|0]|0;a[k+u|0]=a[l+(((O+D|0)>>>18&1023)+128)|0]|0;a[k+p|0]=a[l+(((D-O|0)>>>18&1023)+128)|0]|0;a[k+x|0]=a[l+(((L+B|0)>>>18&1023)+128)|0]|0;a[k+q|0]=a[l+(((B-L|0)>>>18&1023)+128)|0]|0;a[k+o|0]=a[l+(((N+A|0)>>>18&1023)+128)|0]|0;a[k+t|0]=a[l+(((A-N|0)>>>18&1023)+128)|0]|0;a[k+v|0]=a[l+(((P+z|0)>>>18&1023)+128)|0]|0;a[k+w|0]=a[l+(((z-P|0)>>>18&1023)+128)|0]|0;y=y+1|0;if((y|0)==7){break}else{s=s+32|0}}i=j;return}function si(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0;j=i;i=i+192|0;k=j;l=c[d+336>>2]|0;d=0;m=f;f=c[e+84>>2]|0;e=k;while(1){n=aa(c[f>>2]<<13,b[m>>1]|0)|0|1024;o=aa((c[f+128>>2]|0)*5793|0,b[m+64>>1]|0)|0;p=o+n|0;q=(aa(o,-2)|0)+n>>11;n=aa((c[f+64>>2]|0)*10033|0,b[m+32>>1]|0)|0;o=n+p|0;r=p-n|0;n=aa(b[m+16>>1]|0,c[f+32>>2]|0)|0;p=aa(b[m+48>>1]|0,c[f+96>>2]|0)|0;s=aa(b[m+80>>1]|0,c[f+160>>2]|0)|0;t=(s+n|0)*2998|0;u=t+(p+n<<13)|0;v=t+(s-p<<13)|0;t=n-p-s<<2;c[e>>2]=u+o>>11;c[e+160>>2]=o-u>>11;c[e+32>>2]=t+q;c[e+128>>2]=q-t;c[e+64>>2]=v+r>>11;c[e+96>>2]=r-v>>11;d=d+1|0;if((d|0)==8){break}else{m=m+2|0;f=f+4|0;e=e+4|0}}e=h+11|0;f=h+1|0;m=h+10|0;d=h+2|0;v=h+9|0;r=h+3|0;t=h+8|0;q=h+4|0;u=h+7|0;o=h+5|0;s=h+6|0;p=0;n=k;while(1){k=c[g+(p<<2)>>2]|0;w=(c[n>>2]<<13)+131072|0;x=(c[n+16>>2]|0)*10033|0;y=w+x|0;z=w-x|0;x=c[n+8>>2]|0;A=x*11190|0;B=x<<13;x=c[n+24>>2]<<13;C=B-x|0;D=C+w|0;E=w-C|0;C=x+A|0;w=C+y|0;F=y-C|0;C=A-B-x|0;x=C+z|0;B=z-C|0;C=c[n+4>>2]|0;z=c[n+12>>2]|0;A=c[n+20>>2]|0;y=c[n+28>>2]|0;G=z*10703|0;H=aa(z,-4433)|0;I=A+C|0;J=(I+y|0)*7053|0;K=J+(I*2139|0)|0;I=G+(C*2295|0)+K|0;L=aa(y+A|0,-8565)|0;M=(aa(A,-12112)|0)+H+L+K|0;K=(y*12998|0)-G+J+L|0;L=H+(aa(C,-5540)|0)+(aa(y,-16244)|0)+J|0;J=C-y|0;y=z-A|0;A=(J+y|0)*4433|0;z=A+(J*6270|0)|0;J=A+(aa(y,-15137)|0)|0;a[k+h|0]=a[l+(((I+w|0)>>>18&1023)+128)|0]|0;a[k+e|0]=a[l+(((w-I|0)>>>18&1023)+128)|0]|0;a[k+f|0]=a[l+(((z+D|0)>>>18&1023)+128)|0]|0;a[k+m|0]=a[l+(((D-z|0)>>>18&1023)+128)|0]|0;a[k+d|0]=a[l+(((M+x|0)>>>18&1023)+128)|0]|0;a[k+v|0]=a[l+(((x-M|0)>>>18&1023)+128)|0]|0;a[k+r|0]=a[l+(((K+B|0)>>>18&1023)+128)|0]|0;a[k+t|0]=a[l+(((B-K|0)>>>18&1023)+128)|0]|0;a[k+q|0]=a[l+(((J+E|0)>>>18&1023)+128)|0]|0;a[k+u|0]=a[l+(((E-J|0)>>>18&1023)+128)|0]|0;a[k+o|0]=a[l+(((L+F|0)>>>18&1023)+128)|0]|0;a[k+s|0]=a[l+(((F-L|0)>>>18&1023)+128)|0]|0;p=p+1|0;if((p|0)==6){break}else{n=n+32|0}}i=j;return}function ti(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;j=i;i=i+160|0;k=j;l=c[d+336>>2]|0;d=0;m=f;f=c[e+84>>2]|0;e=k;while(1){n=aa(c[f>>2]<<13,b[m>>1]|0)|0|1024;o=aa(b[m+32>>1]|0,c[f+64>>2]|0)|0;p=aa(b[m+64>>1]|0,c[f+128>>2]|0)|0;q=(p+o|0)*6476|0;r=o-p|0;p=(r*2896|0)+n|0;o=p+q|0;s=p-q|0;q=(aa(r,-11584)|0)+n|0;n=aa(b[m+16>>1]|0,c[f+32>>2]|0)|0;r=aa(b[m+48>>1]|0,c[f+96>>2]|0)|0;p=(r+n|0)*6810|0;t=p+(n*4209|0)|0;n=p+(aa(r,-17828)|0)|0;c[e>>2]=t+o>>11;c[e+128>>2]=o-t>>11;c[e+32>>2]=n+s>>11;c[e+96>>2]=s-n>>11;c[e+64>>2]=q>>11;d=d+1|0;if((d|0)==8){break}else{m=m+2|0;f=f+4|0;e=e+4|0}}e=h+9|0;f=h+1|0;m=h+8|0;d=h+2|0;q=h+7|0;n=h+3|0;s=h+6|0;t=h+4|0;o=h+5|0;r=0;p=k;while(1){k=c[g+(r<<2)>>2]|0;u=(c[p>>2]<<13)+131072|0;v=c[p+16>>2]|0;w=u+(v*9373|0)|0;x=u+(aa(v,-3580)|0)|0;y=u+(aa(v,-11586)|0)|0;v=c[p+8>>2]|0;u=c[p+24>>2]|0;z=(u+v|0)*6810|0;A=z+(v*4209|0)|0;v=z+(aa(u,-17828)|0)|0;u=A+w|0;z=w-A|0;A=v+x|0;w=x-v|0;v=c[p+4>>2]|0;x=c[p+12>>2]|0;B=c[p+20>>2]<<13;C=c[p+28>>2]|0;D=C+x|0;E=x-C|0;C=E*2531|0;x=D*7791|0;F=C+B|0;G=x+(v*11443|0)+F|0;H=(v*1812|0)-x+F|0;F=D*4815|0;D=B-C-(E<<12)|0;C=(v-E<<13)-B|0;B=(v*10323|0)-F-D|0;E=D+((v*5260|0)-F)|0;a[k+h|0]=a[l+(((G+u|0)>>>18&1023)+128)|0]|0;a[k+e|0]=a[l+(((u-G|0)>>>18&1023)+128)|0]|0;a[k+f|0]=a[l+(((B+A|0)>>>18&1023)+128)|0]|0;a[k+m|0]=a[l+(((A-B|0)>>>18&1023)+128)|0]|0;a[k+d|0]=a[l+(((C+y|0)>>>18&1023)+128)|0]|0;a[k+q|0]=a[l+(((y-C|0)>>>18&1023)+128)|0]|0;a[k+n|0]=a[l+(((E+w|0)>>>18&1023)+128)|0]|0;a[k+s|0]=a[l+(((w-E|0)>>>18&1023)+128)|0]|0;a[k+t|0]=a[l+(((H+z|0)>>>18&1023)+128)|0]|0;a[k+o|0]=a[l+(((z-H|0)>>>18&1023)+128)|0]|0;r=r+1|0;if((r|0)==5){break}else{p=p+32|0}}i=j;return}function ui(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;j=i;i=i+128|0;k=j;l=c[d+336>>2]|0;d=0;m=f;f=c[e+84>>2]|0;e=k;while(1){n=aa(b[m>>1]|0,c[f>>2]|0)|0;o=aa(b[m+32>>1]|0,c[f+64>>2]|0)|0;p=o+n<<2;q=n-o<<2;o=aa(b[m+16>>1]|0,c[f+32>>2]|0)|0;n=aa(b[m+48>>1]|0,c[f+96>>2]|0)|0;r=((n+o|0)*4433|0)+1024|0;s=r+(o*6270|0)>>11;o=r+(aa(n,-15137)|0)>>11;c[e>>2]=s+p;c[e+96>>2]=p-s;c[e+32>>2]=o+q;c[e+64>>2]=q-o;d=d+1|0;if((d|0)==8){break}else{m=m+2|0;f=f+4|0;e=e+4|0}}e=h+7|0;f=h+1|0;m=h+6|0;d=h+2|0;o=h+5|0;q=h+3|0;s=h+4|0;p=0;n=k;while(1){k=c[g+(p<<2)>>2]|0;r=c[n+8>>2]|0;t=c[n+24>>2]|0;u=(t+r|0)*4433|0;v=u+(r*6270|0)|0;r=u+(aa(t,-15137)|0)|0;t=(c[n>>2]|0)+16|0;u=c[n+16>>2]|0;w=t+u<<13;x=t-u<<13;u=w+v|0;t=w-v|0;v=x+r|0;w=x-r|0;r=c[n+28>>2]|0;x=c[n+20>>2]|0;y=c[n+12>>2]|0;z=c[n+4>>2]|0;A=y+r|0;B=z+x|0;C=(B+A|0)*9633|0;D=C+(aa(A,-16069)|0)|0;A=C+(aa(B,-3196)|0)|0;B=aa(z+r|0,-7373)|0;C=B+(r*2446|0)+D|0;r=B+(z*12299|0)+A|0;z=aa(y+x|0,-20995)|0;B=z+(x*16819|0)+A|0;A=z+(y*25172|0)+D|0;a[k+h|0]=a[l+(((r+u|0)>>>18&1023)+128)|0]|0;a[k+e|0]=a[l+(((u-r|0)>>>18&1023)+128)|0]|0;a[k+f|0]=a[l+(((A+v|0)>>>18&1023)+128)|0]|0;a[k+m|0]=a[l+(((v-A|0)>>>18&1023)+128)|0]|0;a[k+d|0]=a[l+(((B+w|0)>>>18&1023)+128)|0]|0;a[k+o|0]=a[l+(((w-B|0)>>>18&1023)+128)|0]|0;a[k+q|0]=a[l+(((C+t|0)>>>18&1023)+128)|0]|0;a[k+s|0]=a[l+(((t-C|0)>>>18&1023)+128)|0]|0;p=p+1|0;if((p|0)==4){break}else{n=n+32|0}}i=j;return}function vi(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;j=i;i=i+80|0;k=j;l=c[d+336>>2]|0;d=0;m=f;f=c[e+84>>2]|0;e=k;while(1){n=aa(c[f>>2]<<13,b[m>>1]|0)|0|1024;o=aa((c[f+64>>2]|0)*5793|0,b[m+32>>1]|0)|0;p=o+n|0;q=(aa(o,-2)|0)+n|0;n=aa((c[f+32>>2]|0)*10033|0,b[m+16>>1]|0)|0;c[e>>2]=n+p>>11;c[e+48>>2]=p-n>>11;c[e+24>>2]=q>>11;d=d+1|0;if((d|0)==6){break}else{m=m+2|0;f=f+4|0;e=e+4|0}}e=h+5|0;f=h+1|0;m=h+4|0;d=h+2|0;q=h+3|0;n=0;p=k;while(1){k=c[g+(n<<2)>>2]|0;o=(c[p>>2]<<13)+131072|0;r=(c[p+16>>2]|0)*5793|0;s=o+r|0;t=o-r-r|0;r=(c[p+8>>2]|0)*10033|0;o=s+r|0;u=s-r|0;r=c[p+4>>2]|0;s=c[p+12>>2]|0;v=c[p+20>>2]|0;w=(v+r|0)*2998|0;x=w+(s+r<<13)|0;y=w+(v-s<<13)|0;w=r-s-v<<13;a[k+h|0]=a[l+(((x+o|0)>>>18&1023)+128)|0]|0;a[k+e|0]=a[l+(((o-x|0)>>>18&1023)+128)|0]|0;a[k+f|0]=a[l+(((w+t|0)>>>18&1023)+128)|0]|0;a[k+m|0]=a[l+(((t-w|0)>>>18&1023)+128)|0]|0;a[k+d|0]=a[l+(((y+u|0)>>>18&1023)+128)|0]|0;a[k+q|0]=a[l+(((u-y|0)>>>18&1023)+128)|0]|0;n=n+1|0;if((n|0)==3){break}else{p=p+24|0}}i=j;return}function wi(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;j=i;i=i+32|0;k=j;l=c[d+336>>2]|0;d=c[e+84>>2]|0;e=aa(b[f>>1]|0,c[d>>2]|0)|0;m=aa(b[f+16>>1]|0,c[d+32>>2]|0)|0;n=m+e|0;c[k>>2]=n;o=k+16|0;c[o>>2]=e-m;m=aa(b[f+2>>1]|0,c[d+4>>2]|0)|0;e=aa(b[f+18>>1]|0,c[d+36>>2]|0)|0;p=e+m|0;c[k+4>>2]=p;q=m-e|0;c[k+20>>2]=q;e=aa(b[f+4>>1]|0,c[d+8>>2]|0)|0;m=aa(b[f+20>>1]|0,c[d+40>>2]|0)|0;r=m+e|0;c[k+8>>2]=r;s=e-m|0;c[k+24>>2]=s;m=aa(b[f+6>>1]|0,c[d+12>>2]|0)|0;e=aa(b[f+22>>1]|0,c[d+44>>2]|0)|0;d=e+m|0;c[k+12>>2]=d;f=m-e|0;c[k+28>>2]=f;k=h+3|0;e=h+1|0;m=h+2|0;t=c[g>>2]|0;u=n+4|0;n=u+r<<13;v=u-r<<13;r=(d+p|0)*4433|0;u=r+(p*6270|0)|0;p=r+(aa(d,-15137)|0)|0;a[t+h|0]=a[l+(((u+n|0)>>>16&1023)+128)|0]|0;a[t+k|0]=a[l+(((n-u|0)>>>16&1023)+128)|0]|0;a[t+e|0]=a[l+(((p+v|0)>>>16&1023)+128)|0]|0;a[t+m|0]=a[l+(((v-p|0)>>>16&1023)+128)|0]|0;p=c[g+4>>2]|0;g=(c[o>>2]|0)+4|0;o=g+s<<13;v=g-s<<13;s=(f+q|0)*4433|0;g=s+(q*6270|0)|0;q=s+(aa(f,-15137)|0)|0;a[p+h|0]=a[l+(((g+o|0)>>>16&1023)+128)|0]|0;a[p+k|0]=a[l+(((o-g|0)>>>16&1023)+128)|0]|0;a[p+e|0]=a[l+(((q+v|0)>>>16&1023)+128)|0]|0;a[p+m|0]=a[l+(((v-q|0)>>>16&1023)+128)|0]|0;i=j;return}function xi(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0;i=c[d+336>>2]|0;d=c[e+84>>2]|0;e=c[g>>2]|0;g=(aa(b[f>>1]|0,c[d>>2]|0)|0)+4|0;j=aa(b[f+2>>1]|0,c[d+4>>2]|0)|0;a[e+h|0]=a[i+(((j+g|0)>>>3&1023)+128)|0]|0;a[e+(h+1)|0]=a[i+(((g-j|0)>>>3&1023)+128)|0]|0;return}function yi(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0;j=i;i=i+512|0;k=j;l=c[d+336>>2]|0;d=0;m=f;f=c[e+84>>2]|0;e=k;while(1){n=aa(c[f>>2]<<13,b[m>>1]|0)|0|1024;o=aa(b[m+64>>1]|0,c[f+128>>2]|0)|0;p=o*10703|0;q=o*4433|0;o=p+n|0;r=n-p|0;p=q+n|0;s=n-q|0;q=aa(b[m+32>>1]|0,c[f+64>>2]|0)|0;n=aa(b[m+96>>1]|0,c[f+192>>2]|0)|0;t=q-n|0;u=t*2260|0;v=t*11363|0;t=v+(n*20995|0)|0;w=u+(q*7373|0)|0;x=v+(aa(q,-4926)|0)|0;q=u+(aa(n,-4176)|0)|0;n=t+o|0;u=o-t|0;t=w+p|0;o=p-w|0;w=x+s|0;p=s-x|0;x=q+r|0;s=r-q|0;q=aa(b[m+16>>1]|0,c[f+32>>2]|0)|0;r=aa(b[m+48>>1]|0,c[f+96>>2]|0)|0;v=aa(b[m+80>>1]|0,c[f+160>>2]|0)|0;y=aa(b[m+112>>1]|0,c[f+224>>2]|0)|0;z=v+q|0;A=(r+q|0)*11086|0;B=z*10217|0;C=(y+q|0)*8956|0;D=(q-y|0)*7350|0;E=z*5461|0;z=(q-r|0)*3363|0;F=A+(aa(q,-18730)|0)+B+C|0;G=z+(aa(q,-15038)|0)+E+D|0;q=(v+r|0)*1136|0;H=(v-r|0)*11529|0;I=y+r|0;J=aa(I,-5461)|0;K=A+(r*589|0)+q+J|0;A=aa(I,-10217)|0;I=z+(r*16154|0)+H+A|0;r=aa(y+v|0,-11086)|0;z=q+(aa(v,-9222)|0)+B+r|0;B=J+(y*8728|0)+C+r|0;r=(y-v|0)*3363|0;C=A+(y*25733|0)+D+r|0;D=H+(aa(v,-6278)|0)+E+r|0;c[e>>2]=F+n>>11;c[e+480>>2]=n-F>>11;c[e+32>>2]=K+t>>11;c[e+448>>2]=t-K>>11;c[e+64>>2]=z+w>>11;c[e+416>>2]=w-z>>11;c[e+96>>2]=B+x>>11;c[e+384>>2]=x-B>>11;c[e+128>>2]=C+s>>11;c[e+352>>2]=s-C>>11;c[e+160>>2]=D+p>>11;c[e+320>>2]=p-D>>11;c[e+192>>2]=I+o>>11;c[e+288>>2]=o-I>>11;c[e+224>>2]=G+u>>11;c[e+256>>2]=u-G>>11;d=d+1|0;if((d|0)==8){break}else{m=m+2|0;f=f+4|0;e=e+4|0}}e=h+7|0;f=h+1|0;m=h+6|0;d=h+2|0;G=h+5|0;u=h+3|0;I=h+4|0;o=0;D=k;while(1){k=c[g+(o<<2)>>2]|0;p=c[D+8>>2]|0;C=c[D+24>>2]|0;s=(C+p|0)*4433|0;B=s+(p*6270|0)|0;p=s+(aa(C,-15137)|0)|0;C=(c[D>>2]|0)+16|0;s=c[D+16>>2]|0;x=C+s<<13;z=C-s<<13;s=x+B|0;C=x-B|0;B=z+p|0;x=z-p|0;p=c[D+28>>2]|0;z=c[D+20>>2]|0;w=c[D+12>>2]|0;K=c[D+4>>2]|0;t=w+p|0;F=K+z|0;n=(F+t|0)*9633|0;r=n+(aa(t,-16069)|0)|0;t=n+(aa(F,-3196)|0)|0;F=aa(K+p|0,-7373)|0;n=F+(p*2446|0)+r|0;p=F+(K*12299|0)+t|0;K=aa(w+z|0,-20995)|0;F=K+(z*16819|0)+t|0;t=K+(w*25172|0)+r|0;a[k+h|0]=a[l+(((p+s|0)>>>18&1023)+128)|0]|0;a[k+e|0]=a[l+(((s-p|0)>>>18&1023)+128)|0]|0;a[k+f|0]=a[l+(((t+B|0)>>>18&1023)+128)|0]|0;a[k+m|0]=a[l+(((B-t|0)>>>18&1023)+128)|0]|0;a[k+d|0]=a[l+(((F+x|0)>>>18&1023)+128)|0]|0;a[k+G|0]=a[l+(((x-F|0)>>>18&1023)+128)|0]|0;a[k+u|0]=a[l+(((n+C|0)>>>18&1023)+128)|0]|0;a[k+I|0]=a[l+(((C-n|0)>>>18&1023)+128)|0]|0;o=o+1|0;if((o|0)==16){break}else{D=D+32|0}}i=j;return}function zi(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0;j=i;i=i+400|0;k=j;l=c[d+336>>2]|0;d=0;m=f;f=c[e+84>>2]|0;e=k;while(1){n=aa(c[f>>2]<<13,b[m>>1]|0)|0|1024;o=aa(b[m+64>>1]|0,c[f+128>>2]|0)|0;p=(o*10438|0)+n|0;q=(o*2578|0)+n|0;r=(aa(o,-7223)|0)+n|0;s=(aa(o,-11586)|0)+n>>11;n=aa(b[m+32>>1]|0,c[f+64>>2]|0)|0;o=aa(b[m+96>>1]|0,c[f+192>>2]|0)|0;t=(o+n|0)*9058|0;u=t+(n*2237|0)|0;v=t+(aa(o,-14084)|0)|0;t=(aa(o,-11295)|0)+(n*5027|0)|0;n=u+p|0;o=p-u|0;u=v+q|0;p=q-v|0;v=t+r|0;q=r-t|0;t=aa(b[m+16>>1]|0,c[f+32>>2]|0)|0;r=aa(b[m+48>>1]|0,c[f+96>>2]|0)|0;w=aa(b[m+80>>1]|0,c[f+160>>2]|0)|0;x=aa(b[m+112>>1]|0,c[f+224>>2]|0)|0;y=x<<13;z=w+t|0;A=(r+t|0)*10935|0;B=z*9810|0;C=A+(aa(t,-9232)|0)+B+y|0;D=z*6164|0;z=t-r|0;E=(z*3826|0)-y|0;F=D+(aa(t,-8693)|0)+E|0;t=(aa(w+r|0,-1297)|0)-y|0;G=A+(aa(r,-3474)|0)+t|0;A=B+(aa(w,-19447)|0)+t|0;t=(w-r|0)*11512|0;B=t+(aa(w,-13850)|0)+D+y|0;y=t+(r*5529|0)+E|0;E=z-w+x<<2;c[e>>2]=C+n>>11;c[e+364>>2]=n-C>>11;c[e+28>>2]=G+u>>11;c[e+336>>2]=u-G>>11;c[e+56>>2]=A+v>>11;c[e+308>>2]=v-A>>11;c[e+84>>2]=E+s;c[e+280>>2]=s-E;c[e+112>>2]=B+q>>11;c[e+252>>2]=q-B>>11;c[e+140>>2]=y+p>>11;c[e+224>>2]=p-y>>11;c[e+168>>2]=F+o>>11;c[e+196>>2]=o-F>>11;d=d+1|0;if((d|0)==7){break}else{m=m+2|0;f=f+4|0;e=e+4|0}}e=h+6|0;f=h+1|0;m=h+5|0;d=h+2|0;F=h+4|0;o=h+3|0;y=0;p=k;while(1){k=c[g+(y<<2)>>2]|0;B=(c[p>>2]<<13)+131072|0;q=c[p+8>>2]|0;E=c[p+16>>2]|0;s=c[p+24>>2]|0;A=(E-s|0)*7223|0;v=(q-E|0)*2578|0;G=(aa(E,-15083)|0)+B+v+A|0;u=s+q|0;C=(u*10438|0)+B|0;n=A+(aa(s,-637)|0)+C|0;s=v+(aa(q,-20239)|0)+C|0;C=c[p+4>>2]|0;q=c[p+12>>2]|0;v=c[p+20>>2]|0;A=(q+C|0)*7663|0;x=(C-q|0)*1395|0;w=aa(v+q|0,-11295)|0;q=A+x+w|0;z=(v+C|0)*5027|0;C=A-x+z|0;x=z+(v*15326|0)+w|0;a[k+h|0]=a[l+(((C+n|0)>>>18&1023)+128)|0]|0;a[k+e|0]=a[l+(((n-C|0)>>>18&1023)+128)|0]|0;a[k+f|0]=a[l+(((q+G|0)>>>18&1023)+128)|0]|0;a[k+m|0]=a[l+(((G-q|0)>>>18&1023)+128)|0]|0;a[k+d|0]=a[l+(((x+s|0)>>>18&1023)+128)|0]|0;a[k+F|0]=a[l+(((s-x|0)>>>18&1023)+128)|0]|0;a[k+o|0]=a[l+(((((E-u|0)*11585|0)+B|0)>>>18&1023)+128)|0]|0;y=y+1|0;if((y|0)==14){break}else{p=p+28|0}}i=j;return}function Ai(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;j=i;i=i+288|0;k=j;l=c[d+336>>2]|0;d=0;m=f;f=c[e+84>>2]|0;e=k;while(1){n=aa(c[f>>2]<<13,b[m>>1]|0)|0|1024;o=aa((c[f+128>>2]|0)*10033|0,b[m+64>>1]|0)|0;p=o+n|0;q=n-o|0;o=aa(b[m+32>>1]|0,c[f+64>>2]|0)|0;r=o*11190|0;s=o<<13;o=aa(c[f+192>>2]<<13,b[m+96>>1]|0)|0;t=s-o|0;u=t+n|0;v=n-t|0;t=o+r|0;n=t+p|0;w=p-t|0;t=r-s-o|0;o=t+q|0;s=q-t|0;t=aa(b[m+16>>1]|0,c[f+32>>2]|0)|0;q=aa(b[m+48>>1]|0,c[f+96>>2]|0)|0;r=aa(b[m+80>>1]|0,c[f+160>>2]|0)|0;p=aa(b[m+112>>1]|0,c[f+224>>2]|0)|0;x=q*10703|0;y=aa(q,-4433)|0;z=r+t|0;A=(p+z|0)*7053|0;B=A+(z*2139|0)|0;z=x+(t*2295|0)+B|0;C=aa(p+r|0,-8565)|0;D=(aa(r,-12112)|0)+y+C+B|0;B=(p*12998|0)-x+A+C|0;C=y+(aa(t,-5540)|0)+(aa(p,-16244)|0)+A|0;A=t-p|0;p=q-r|0;r=(A+p|0)*4433|0;q=r+(A*6270|0)|0;A=r+(aa(p,-15137)|0)|0;c[e>>2]=z+n>>11;c[e+264>>2]=n-z>>11;c[e+24>>2]=q+u>>11;c[e+240>>2]=u-q>>11;c[e+48>>2]=D+o>>11;c[e+216>>2]=o-D>>11;c[e+72>>2]=B+s>>11;c[e+192>>2]=s-B>>11;c[e+96>>2]=A+v>>11;c[e+168>>2]=v-A>>11;c[e+120>>2]=C+w>>11;c[e+144>>2]=w-C>>11;d=d+1|0;if((d|0)==6){break}else{m=m+2|0;f=f+4|0;e=e+4|0}}e=h+5|0;f=h+1|0;m=h+4|0;d=h+2|0;C=h+3|0;w=0;A=k;while(1){k=c[g+(w<<2)>>2]|0;v=(c[A>>2]<<13)+131072|0;B=(c[A+16>>2]|0)*5793|0;s=v+B|0;D=v-B-B|0;B=(c[A+8>>2]|0)*10033|0;v=s+B|0;o=s-B|0;B=c[A+4>>2]|0;s=c[A+12>>2]|0;q=c[A+20>>2]|0;u=(q+B|0)*2998|0;z=u+(s+B<<13)|0;n=u+(q-s<<13)|0;u=B-s-q<<13;a[k+h|0]=a[l+(((z+v|0)>>>18&1023)+128)|0]|0;a[k+e|0]=a[l+(((v-z|0)>>>18&1023)+128)|0]|0;a[k+f|0]=a[l+(((u+D|0)>>>18&1023)+128)|0]|0;a[k+m|0]=a[l+(((D-u|0)>>>18&1023)+128)|0]|0;a[k+d|0]=a[l+(((n+o|0)>>>18&1023)+128)|0]|0;a[k+C|0]=a[l+(((o-n|0)>>>18&1023)+128)|0]|0;w=w+1|0;if((w|0)==12){break}else{A=A+24|0}}i=j;return}function Bi(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;j=i;i=i+208|0;k=j;l=c[d+336>>2]|0;d=0;m=f;f=c[e+84>>2]|0;e=k;while(1){n=aa(c[f>>2]<<13,b[m>>1]|0)|0|1024;o=aa(b[m+64>>1]|0,c[f+128>>2]|0)|0;p=(o*9373|0)+n|0;q=(aa(o,-3580)|0)+n|0;r=(aa(o,-11586)|0)+n>>11;n=aa(b[m+32>>1]|0,c[f+64>>2]|0)|0;o=aa(b[m+96>>1]|0,c[f+192>>2]|0)|0;s=(o+n|0)*6810|0;t=s+(n*4209|0)|0;n=s+(aa(o,-17828)|0)|0;o=t+p|0;s=p-t|0;t=n+q|0;p=q-n|0;n=aa(b[m+16>>1]|0,c[f+32>>2]|0)|0;q=aa(b[m+48>>1]|0,c[f+96>>2]|0)|0;u=aa(b[m+80>>1]|0,c[f+160>>2]|0)|0;v=aa(b[m+112>>1]|0,c[f+224>>2]|0)|0;w=v+q|0;x=q-v|0;v=x*2531|0;q=u<<13;y=w*7791|0;z=v+q|0;A=y+(n*11443|0)+z|0;B=(n*1812|0)-y+z|0;z=w*4815|0;w=q-v-(x<<12)|0;v=n-u-x<<2;x=(n*10323|0)-z-w|0;u=w+((n*5260|0)-z)|0;c[e>>2]=A+o>>11;c[e+180>>2]=o-A>>11;c[e+20>>2]=x+t>>11;c[e+160>>2]=t-x>>11;c[e+40>>2]=v+r;c[e+140>>2]=r-v;c[e+60>>2]=u+p>>11;c[e+120>>2]=p-u>>11;c[e+80>>2]=B+s>>11;c[e+100>>2]=s-B>>11;d=d+1|0;if((d|0)==5){break}else{m=m+2|0;f=f+4|0;e=e+4|0}}e=h+4|0;f=h+1|0;m=h+3|0;d=h+2|0;B=0;s=k;while(1){k=c[g+(B<<2)>>2]|0;u=(c[s>>2]<<13)+131072|0;p=c[s+8>>2]|0;v=c[s+16>>2]|0;r=(v+p|0)*6476|0;x=p-v|0;v=(x*2896|0)+u|0;p=v+r|0;t=v-r|0;r=(aa(x,-11584)|0)+u|0;u=c[s+4>>2]|0;x=c[s+12>>2]|0;v=(x+u|0)*6810|0;A=v+(u*4209|0)|0;u=v+(aa(x,-17828)|0)|0;a[k+h|0]=a[l+(((A+p|0)>>>18&1023)+128)|0]|0;a[k+e|0]=a[l+(((p-A|0)>>>18&1023)+128)|0]|0;a[k+f|0]=a[l+(((u+t|0)>>>18&1023)+128)|0]|0;a[k+m|0]=a[l+(((t-u|0)>>>18&1023)+128)|0]|0;a[k+d|0]=a[l+((r>>>18&1023)+128)|0]|0;B=B+1|0;if((B|0)==10){break}else{s=s+20|0}}i=j;return}function Ci(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;j=i;i=i+128|0;k=j;l=c[d+336>>2]|0;d=4;m=f;f=c[e+84>>2]|0;e=k;while(1){n=b[m+16>>1]|0;o=b[m+32>>1]|0;if((n|o)<<16>>16==0){if(((((b[m+48>>1]|0)==0?(b[m+64>>1]|0)==0:0)?(b[m+80>>1]|0)==0:0)?(b[m+96>>1]|0)==0:0)?(b[m+112>>1]|0)==0:0){p=aa(c[f>>2]<<2,b[m>>1]|0)|0;c[e>>2]=p;c[e+16>>2]=p;c[e+32>>2]=p;c[e+48>>2]=p;c[e+64>>2]=p;c[e+80>>2]=p;c[e+96>>2]=p;c[e+112>>2]=p}else{q=0;r=10}}else{q=o;r=10}if((r|0)==10){r=0;o=aa(q<<16>>16,c[f+64>>2]|0)|0;p=aa(b[m+96>>1]|0,c[f+192>>2]|0)|0;s=(p+o|0)*4433|0;t=s+(o*6270|0)|0;o=s+(aa(p,-15137)|0)|0;p=aa(c[f+128>>2]<<13,b[m+64>>1]|0)|0;s=aa(c[f>>2]<<13,b[m>>1]|0)|0|1024;u=p+s|0;v=s-p|0;p=u+t|0;s=u-t|0;t=v+o|0;u=v-o|0;o=aa(b[m+112>>1]|0,c[f+224>>2]|0)|0;v=aa(b[m+80>>1]|0,c[f+160>>2]|0)|0;w=aa(b[m+48>>1]|0,c[f+96>>2]|0)|0;x=aa(n<<16>>16,c[f+32>>2]|0)|0;n=w+o|0;y=x+v|0;z=(y+n|0)*9633|0;A=z+(aa(n,-16069)|0)|0;n=z+(aa(y,-3196)|0)|0;y=aa(x+o|0,-7373)|0;z=y+(o*2446|0)+A|0;o=y+(x*12299|0)+n|0;x=aa(w+v|0,-20995)|0;y=x+(v*16819|0)+n|0;n=x+(w*25172|0)+A|0;c[e>>2]=o+p>>11;c[e+112>>2]=p-o>>11;c[e+16>>2]=n+t>>11;c[e+96>>2]=t-n>>11;c[e+32>>2]=y+u>>11;c[e+80>>2]=u-y>>11;c[e+48>>2]=z+s>>11;c[e+64>>2]=s-z>>11}d=d+ -1|0;if((d|0)<=0){break}else{m=m+2|0;f=f+4|0;e=e+4|0}}e=h+3|0;f=h+1|0;m=h+2|0;d=0;q=k;while(1){k=c[g+(d<<2)>>2]|0;r=(c[q>>2]|0)+16|0;z=c[q+8>>2]|0;s=r+z<<13;y=r-z<<13;z=c[q+4>>2]|0;r=c[q+12>>2]|0;u=(r+z|0)*4433|0;n=u+(z*6270|0)|0;z=u+(aa(r,-15137)|0)|0;a[k+h|0]=a[l+(((n+s|0)>>>18&1023)+128)|0]|0;a[k+e|0]=a[l+(((s-n|0)>>>18&1023)+128)|0]|0;a[k+f|0]=a[l+(((z+y|0)>>>18&1023)+128)|0]|0;a[k+m|0]=a[l+(((y-z|0)>>>18&1023)+128)|0]|0;d=d+1|0;if((d|0)==8){break}else{q=q+16|0}}i=j;return}function Di(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;j=i;i=i+80|0;k=j;l=c[d+336>>2]|0;d=0;m=f;f=c[e+84>>2]|0;e=k;while(1){n=aa(c[f>>2]<<13,b[m>>1]|0)|0|1024;o=aa((c[f+128>>2]|0)*5793|0,b[m+64>>1]|0)|0;p=o+n|0;q=(aa(o,-2)|0)+n>>11;n=aa((c[f+64>>2]|0)*10033|0,b[m+32>>1]|0)|0;o=n+p|0;r=p-n|0;n=aa(b[m+16>>1]|0,c[f+32>>2]|0)|0;p=aa(b[m+48>>1]|0,c[f+96>>2]|0)|0;s=aa(b[m+80>>1]|0,c[f+160>>2]|0)|0;t=(s+n|0)*2998|0;u=t+(p+n<<13)|0;v=t+(s-p<<13)|0;t=n-p-s<<2;c[e>>2]=u+o>>11;c[e+60>>2]=o-u>>11;c[e+12>>2]=t+q;c[e+48>>2]=q-t;c[e+24>>2]=v+r>>11;c[e+36>>2]=r-v>>11;d=d+1|0;if((d|0)==3){break}else{m=m+2|0;f=f+4|0;e=e+4|0}}e=h+2|0;f=h+1|0;m=0;d=k;while(1){k=c[g+(m<<2)>>2]|0;v=(c[d>>2]<<13)+131072|0;r=c[d+8>>2]|0;t=v+(r*5793|0)|0;q=(aa(r,-11586)|0)+v|0;v=(c[d+4>>2]|0)*10033|0;a[k+h|0]=a[l+(((t+v|0)>>>18&1023)+128)|0]|0;a[k+e|0]=a[l+(((t-v|0)>>>18&1023)+128)|0]|0;a[k+f|0]=a[l+((q>>>18&1023)+128)|0]|0;m=m+1|0;if((m|0)==6){break}else{d=d+12|0}}i=j;return}



function Ei(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;j=i;i=i+32|0;k=j;l=c[d+336>>2]|0;d=c[e+84>>2]|0;e=aa(b[f>>1]|0,c[d>>2]|0)|0;m=aa(b[f+32>>1]|0,c[d+64>>2]|0)|0;n=m+e<<13;o=e-m<<13;m=aa(b[f+16>>1]|0,c[d+32>>2]|0)|0;e=aa(b[f+48>>1]|0,c[d+96>>2]|0)|0;p=(e+m|0)*4433|0;q=p+(m*6270|0)|0;m=p+(aa(e,-15137)|0)|0;e=q+n|0;c[k>>2]=e;c[k+24>>2]=n-q;q=m+o|0;c[k+8>>2]=q;n=o-m|0;c[k+16>>2]=n;m=aa(b[f+2>>1]|0,c[d+4>>2]|0)|0;o=aa(b[f+34>>1]|0,c[d+68>>2]|0)|0;p=o+m<<13;r=m-o<<13;o=aa(b[f+18>>1]|0,c[d+36>>2]|0)|0;m=aa(b[f+50>>1]|0,c[d+100>>2]|0)|0;d=(m+o|0)*4433|0;f=d+(o*6270|0)|0;o=d+(aa(m,-15137)|0)|0;m=f+p|0;c[k+4>>2]=m;d=p-f|0;c[k+28>>2]=d;f=o+r|0;c[k+12>>2]=f;p=r-o|0;c[k+20>>2]=p;o=h+1|0;r=c[g>>2]|0;s=e+32768|0;a[r+h|0]=a[l+(((s+m|0)>>>16&1023)+128)|0]|0;a[r+o|0]=a[l+(((s-m|0)>>>16&1023)+128)|0]|0;m=c[g+4>>2]|0;s=q+32768|0;a[m+h|0]=a[l+(((s+f|0)>>>16&1023)+128)|0]|0;a[m+o|0]=a[l+(((s-f|0)>>>16&1023)+128)|0]|0;f=c[g+8>>2]|0;s=n+32768|0;a[f+h|0]=a[l+(((s+p|0)>>>16&1023)+128)|0]|0;a[f+o|0]=a[l+(((s-p|0)>>>16&1023)+128)|0]|0;p=c[g+12>>2]|0;g=(c[k+24>>2]|0)+32768|0;a[p+h|0]=a[l+(((g+d|0)>>>16&1023)+128)|0]|0;a[p+o|0]=a[l+(((g-d|0)>>>16&1023)+128)|0]|0;i=j;return}function Fi(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0;i=c[d+336>>2]|0;d=c[e+84>>2]|0;e=(aa(b[f>>1]|0,c[d>>2]|0)|0)+4|0;j=aa(b[f+16>>1]|0,c[d+32>>2]|0)|0;a[(c[g>>2]|0)+h|0]=a[i+(((j+e|0)>>>3&1023)+128)|0]|0;a[(c[g+4>>2]|0)+h|0]=a[i+(((e-j|0)>>>3&1023)+128)|0]|0;return}function Gi(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;d=i;e=b+4|0;f=Jc[c[c[e>>2]>>2]&15](b,1,88)|0;g=b+484|0;c[g>>2]=f;c[f>>2]=16;c[f+8>>2]=37;c[f+12>>2]=38;c[f+68>>2]=0;c[f+52>>2]=0;f=b+120|0;if((c[f>>2]|0)>4){h=c[b>>2]|0;c[h+20>>2]=57;c[h+24>>2]=4;Oc[c[h>>2]&63](b)}h=b+96|0;j=c[h>>2]|0;if((j|0)>256){k=c[b>>2]|0;c[k+20>>2]=59;c[k+24>>2]=256;Oc[c[k>>2]&63](b);l=c[h>>2]|0}else{l=j}j=c[g>>2]|0;h=j+32|0;k=c[f>>2]|0;if((k|0)>1){m=1;while(1){n=m+1|0;o=1;p=n;do{p=aa(p,n)|0;o=o+1|0}while((o|0)!=(k|0));if((p|0)>(l|0)){q=m;r=p;break}else{m=n}}}else{m=(l|0)>1?l:1;q=m;r=m+1|0}if((q|0)<2){m=c[b>>2]|0;c[m+20>>2]=58;c[m+24>>2]=r;Oc[c[m>>2]&63](b)}if((k|0)>0){m=0;r=1;while(1){c[h+(m<<2)>>2]=q;o=aa(r,q)|0;s=m+1|0;if((s|0)==(k|0)){t=o;break}else{m=s;r=o}}}else{t=1}r=b+44|0;m=0;q=0;o=t;a:while(1){t=m;s=q;while(1){if((s|0)<(k|0)){if((c[r>>2]|0)==2){u=c[9200+(s<<2)>>2]|0}else{u=s}v=h+(u<<2)|0;w=c[v>>2]|0;x=w+1|0;y=aa((o|0)/(w|0)|0,x)|0;if((y|0)<=(l|0)){break}}if((t|0)==0){break a}else{t=0;s=0}}c[v>>2]=x;m=1;q=s+1|0;o=y}y=c[b>>2]|0;if((c[f>>2]|0)==3){c[y+24>>2]=o;c[y+28>>2]=c[h>>2];c[y+32>>2]=c[j+36>>2];c[y+36>>2]=c[j+40>>2];c[y+20>>2]=96;Qc[c[y+4>>2]&31](b,1)}else{c[y+20>>2]=97;c[y+24>>2]=o;Qc[c[y+4>>2]&31](b,1)}y=Vc[c[(c[e>>2]|0)+8>>2]&3](b,1,o,c[f>>2]|0)|0;q=c[f>>2]|0;if((q|0)>0){m=q;q=o;x=0;while(1){v=c[h+(x<<2)>>2]|0;l=(q|0)/(v|0)|0;b:do{if((v|0)>0){u=v+ -1|0;r=(u|0)/2|0;k=y+(x<<2)|0;if((l|0)>0){z=0}else{t=0;while(1){n=aa(t,l)|0;if((n|0)<(o|0)){p=n;do{p=p+q|0}while((p|0)<(o|0))}p=t+1|0;if((p|0)==(v|0)){A=m;break b}else{t=p}}}do{t=aa(z,l)|0;if((t|0)<(o|0)){p=(((z*255|0)+r|0)/(u|0)|0)&255;n=t;do{t=0;do{a[(c[k>>2]|0)+(t+n)|0]=p;t=t+1|0}while((t|0)!=(l|0));n=n+q|0}while((n|0)<(o|0))}z=z+1|0}while((z|0)!=(v|0));A=c[f>>2]|0}else{A=m}}while(0);v=x+1|0;if((v|0)<(A|0)){m=A;q=l;x=v}else{break}}}c[j+16>>2]=y;c[j+20>>2]=o;Ki(b);if((c[b+88>>2]|0)!=2){i=d;return}o=(c[b+112>>2]<<1)+4|0;if((c[f>>2]|0)<=0){i=d;return}j=(c[g>>2]|0)+68|0;g=0;do{c[j+(g<<2)>>2]=Jc[c[(c[e>>2]|0)+4>>2]&15](b,1,o)|0;g=g+1|0}while((g|0)<(c[f>>2]|0));i=d;return}function Hi(a,b){a=a|0;b=b|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;b=i;e=a+484|0;f=c[e>>2]|0;c[a+136>>2]=c[f+16>>2];c[a+132>>2]=c[f+20>>2];g=c[a+88>>2]|0;if((g|0)==0){h=f+4|0;if((c[a+120>>2]|0)==3){c[h>>2]=11;i=b;return}else{c[h>>2]=12;i=b;return}}else if((g|0)==2){c[f+4>>2]=15;c[f+84>>2]=0;h=f+68|0;if((c[h>>2]|0)==0){j=a+112|0;k=(c[j>>2]<<1)+4|0;l=a+120|0;if((c[l>>2]|0)<=0){i=b;return}m=a+4|0;n=(c[e>>2]|0)+68|0;o=0;while(1){c[n+(o<<2)>>2]=Jc[c[(c[m>>2]|0)+4>>2]&15](a,1,k)|0;p=o+1|0;q=c[l>>2]|0;if((p|0)<(q|0)){o=p}else{r=j;s=q;break}}}else{r=a+112|0;s=c[a+120>>2]|0}j=(c[r>>2]<<1)+4|0;r=a+120|0;if((s|0)>0){t=0}else{i=b;return}do{Gm(c[h+(t<<2)>>2]|0,0,j|0)|0;t=t+1|0}while((t|0)<(c[r>>2]|0));i=b;return}else if((g|0)==1){g=a+120|0;c[f+4>>2]=(c[g>>2]|0)==3?13:14;c[f+48>>2]=0;if((c[f+28>>2]|0)==0){Ki(a)}if((c[f+52>>2]|0)!=0){i=b;return}f=c[e>>2]|0;e=c[g>>2]|0;if((e|0)<=0){i=b;return}r=f+32|0;t=a+4|0;j=f+52|0;f=e;e=0;while(1){h=c[r+(e<<2)>>2]|0;a:do{if((e|0)>0){s=0;while(1){o=s+1|0;if((h|0)==(c[r+(s<<2)>>2]|0)){break}if((o|0)<(e|0)){s=o}else{u=14;break a}}o=c[j+(s<<2)>>2]|0;if((o|0)!=0){v=f;w=o}else{u=14}}else{u=14}}while(0);if((u|0)==14){u=0;o=Jc[c[c[t>>2]>>2]&15](a,1,1024)|0;l=(h<<9)+ -512|0;k=0;do{m=0;do{n=255-((d[9216+(k<<4)+m|0]|0)<<1)|0;q=n*255|0;if((n|0)<0){x=0-((0-q|0)/(l|0)|0)|0}else{x=(q|0)/(l|0)|0}c[o+(k<<6)+(m<<2)>>2]=x;m=m+1|0}while((m|0)!=16);k=k+1|0}while((k|0)!=16);v=c[g>>2]|0;w=o}c[j+(e<<2)>>2]=w;e=e+1|0;if((e|0)>=(v|0)){break}else{f=v}}i=b;return}else{v=c[a>>2]|0;c[v+20>>2]=49;Oc[c[v>>2]&63](a);i=b;return}}function Ii(a){a=a|0;return}function Ji(a){a=a|0;var b=0,d=0;b=i;d=c[a>>2]|0;c[d+20>>2]=47;Oc[c[d>>2]&63](a);i=b;return}function Ki(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;d=i;e=c[b+484>>2]|0;f=(c[b+88>>2]|0)==1;c[e+28>>2]=f?1:0;g=b+120|0;h=e+24|0;c[h>>2]=Vc[c[(c[b+4>>2]|0)+8>>2]&3](b,1,f?766:256,c[g>>2]|0)|0;if((c[g>>2]|0)<=0){i=d;return}b=e+32|0;j=c[e+20>>2]|0;e=0;do{k=c[b+(e<<2)>>2]|0;j=(j|0)/(k|0)|0;if(f){l=(c[h>>2]|0)+(e<<2)|0;c[l>>2]=(c[l>>2]|0)+255}l=c[(c[h>>2]|0)+(e<<2)>>2]|0;m=k+ -1|0;n=m<<1;o=0;p=(k+254|0)/(n|0)|0;k=0;while(1){if((o|0)>(p|0)){q=k;while(1){r=q+1|0;s=(((r<<1|1)*255|0)+m|0)/(n|0)|0;if((o|0)>(s|0)){q=r}else{t=s;u=r;break}}}else{t=p;u=k}a[l+o|0]=aa(u,j)|0;o=o+1|0;if((o|0)==256){break}else{p=t;k=u}}if(f){k=l+255|0;p=1;do{a[l+(0-p)|0]=a[l]|0;a[l+(p+255)|0]=a[k]|0;p=p+1|0}while((p|0)!=256)}e=e+1|0}while((e|0)<(c[g>>2]|0));i=d;return}function Li(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;h=i;j=c[(c[b+484>>2]|0)+24>>2]|0;k=c[j>>2]|0;l=c[j+4>>2]|0;m=c[j+8>>2]|0;j=c[b+112>>2]|0;if((g|0)<1|(j|0)==0){i=h;return}else{n=0}do{b=j;o=c[e+(n<<2)>>2]|0;p=c[f+(n<<2)>>2]|0;while(1){a[p]=(d[l+(d[o+1|0]|0)|0]|0)+(d[k+(d[o]|0)|0]|0)+(d[m+(d[o+2|0]|0)|0]|0);b=b+ -1|0;if((b|0)==0){break}else{o=o+3|0;p=p+1|0}}n=n+1|0}while((n|0)!=(g|0));i=h;return}function Mi(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;h=i;j=c[(c[b+484>>2]|0)+24>>2]|0;k=c[b+112>>2]|0;l=c[b+120>>2]|0;if((g|0)<=0){i=h;return}b=(k|0)==0;m=(l|0)>0;n=0;do{if(!b){o=k;p=c[e+(n<<2)>>2]|0;q=c[f+(n<<2)>>2]|0;while(1){if(m){r=0;s=0;t=p;while(1){s=(d[(c[j+(r<<2)>>2]|0)+(d[t]|0)|0]|0)+s|0;r=r+1|0;if((r|0)==(l|0)){break}else{t=t+1|0}}u=s&255;v=p+l|0}else{u=0;v=p}a[q]=u;o=o+ -1|0;if((o|0)==0){break}else{p=v;q=q+1|0}}}n=n+1|0}while((n|0)!=(g|0));i=h;return}function Ni(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;h=i;j=c[b+484>>2]|0;k=c[j+24>>2]|0;l=c[k>>2]|0;m=c[k+4>>2]|0;n=c[k+8>>2]|0;k=c[b+112>>2]|0;if((g|0)<=0){i=h;return}b=j+48|0;o=j+52|0;j=o+4|0;p=o+8|0;q=(k|0)==0;r=c[b>>2]|0;s=0;do{t=c[o>>2]|0;u=c[j>>2]|0;v=c[p>>2]|0;if(!q){w=k;x=0;y=c[e+(s<<2)>>2]|0;z=c[f+(s<<2)>>2]|0;while(1){a[z]=(d[m+((d[y+1|0]|0)+(c[u+(r<<6)+(x<<2)>>2]|0))|0]|0)+(d[l+((d[y]|0)+(c[t+(r<<6)+(x<<2)>>2]|0))|0]|0)+(d[n+((d[y+2|0]|0)+(c[v+(r<<6)+(x<<2)>>2]|0))|0]|0);w=w+ -1|0;if((w|0)==0){break}else{x=x+1&15;y=y+3|0;z=z+1|0}}}r=r+1&15;c[b>>2]=r;s=s+1|0}while((s|0)!=(g|0));i=h;return}function Oi(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;h=i;j=c[b+484>>2]|0;k=c[b+120>>2]|0;l=c[b+112>>2]|0;if((g|0)<=0){i=h;return}b=j+48|0;m=(k|0)>0;n=j+24|0;o=j+52|0;j=(l|0)==0;p=0;do{q=f+(p<<2)|0;Gm(c[q>>2]|0,0,l|0)|0;r=c[b>>2]|0;if(m){s=e+(p<<2)|0;t=0;do{u=c[(c[n>>2]|0)+(t<<2)>>2]|0;v=c[o+(t<<2)>>2]|0;if(!j){w=l;x=0;y=(c[s>>2]|0)+t|0;z=c[q>>2]|0;while(1){a[z]=(d[z]|0)+(d[u+((d[y]|0)+(c[v+(r<<6)+(x<<2)>>2]|0))|0]|0);w=w+ -1|0;if((w|0)==0){break}else{x=x+1&15;y=y+k|0;z=z+1|0}}}t=t+1|0}while((t|0)!=(k|0))}c[b>>2]=r+1&15;p=p+1|0}while((p|0)!=(g|0));i=h;return}function Pi(e,f,g,h){e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0;j=i;k=c[e+484>>2]|0;l=c[e+120>>2]|0;m=c[e+112>>2]|0;n=c[e+336>>2]|0;if((h|0)<=0){i=j;return}e=(l|0)>0;o=k+84|0;p=k+68|0;q=k+24|0;r=k+16|0;k=(m|0)==0;s=m+ -1|0;t=aa(s,l)|0;u=0-l|0;v=m+1|0;w=0;do{x=g+(w<<2)|0;Gm(c[x>>2]|0,0,m|0)|0;if(e){y=f+(w<<2)|0;z=0;do{A=c[x>>2]|0;if((c[o>>2]|0)==0){B=z;C=1;D=l;E=c[p+(z<<2)>>2]|0;F=A}else{B=z+t|0;C=-1;D=u;E=(c[p+(z<<2)>>2]|0)+(v<<1)|0;F=A+s|0}A=c[(c[q>>2]|0)+(z<<2)>>2]|0;G=c[(c[r>>2]|0)+(z<<2)>>2]|0;if(k){H=0;I=E}else{J=aa(m,C)|0;K=0;L=0;M=m;N=0;O=E;P=(c[y>>2]|0)+B|0;Q=F;while(1){R=O+(C<<1)|0;S=d[n+((N+8+(b[R>>1]|0)>>4)+(d[P]|0))|0]|0;T=d[A+S|0]|0;a[Q]=(d[Q]|0)+T;U=S-(d[G+T|0]|0)|0;T=U<<1;S=T+U|0;b[O>>1]=S+L;V=S+T|0;W=V+K|0;S=M+ -1|0;if((S|0)==0){break}else{K=U;L=W;M=S;N=V+T|0;O=R;P=P+D|0;Q=Q+C|0}}H=W&65535;I=E+(J<<1)|0}b[I>>1]=H;z=z+1|0}while((z|0)!=(l|0))}c[o>>2]=(c[o>>2]|0)==0;w=w+1|0}while((w|0)!=(h|0));i=j;return}function Qi(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0;b=i;d=a+4|0;e=Jc[c[c[d>>2]>>2]&15](a,1,44)|0;c[a+484>>2]=e;c[e>>2]=17;c[e+12>>2]=39;f=e+32|0;c[f>>2]=0;c[e+40>>2]=0;if((c[a+120>>2]|0)!=3){g=c[a>>2]|0;c[g+20>>2]=48;Oc[c[g>>2]&63](a)}g=e+24|0;c[g>>2]=Jc[c[c[d>>2]>>2]&15](a,1,128)|0;h=0;do{j=Jc[c[(c[d>>2]|0)+4>>2]&15](a,1,4096)|0;c[(c[g>>2]|0)+(h<<2)>>2]=j;h=h+1|0}while((h|0)!=32);c[e+28>>2]=1;if((c[a+108>>2]|0)==0){c[e+16>>2]=0}else{h=c[a+96>>2]|0;if((h|0)>=8){if((h|0)>256){g=c[a>>2]|0;c[g+20>>2]=59;c[g+24>>2]=256;Oc[c[g>>2]&63](a)}}else{g=c[a>>2]|0;c[g+20>>2]=58;c[g+24>>2]=8;Oc[c[g>>2]&63](a)}c[e+16>>2]=Vc[c[(c[d>>2]|0)+8>>2]&3](a,1,h,3)|0;c[e+20>>2]=h}h=a+88|0;if((c[h>>2]|0)==0){i=b;return}c[h>>2]=2;c[f>>2]=Jc[c[(c[d>>2]|0)+4>>2]&15](a,1,((c[a+112>>2]|0)*6|0)+12|0)|0;Ti(a);i=b;return}function Ri(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0;d=i;e=c[a+484>>2]|0;f=c[e+24>>2]|0;g=a+88|0;if((c[g>>2]|0)==0){h=0}else{c[g>>2]=2;h=2}if((b|0)==0){c[e+4>>2]=(h|0)==2?17:18;c[e+8>>2]=41;h=c[a+132>>2]|0;if((h|0)>=1){if((h|0)>256){h=c[a>>2]|0;c[h+20>>2]=59;c[h+24>>2]=256;Oc[c[h>>2]&63](a)}}else{h=c[a>>2]|0;c[h+20>>2]=58;c[h+24>>2]=1;Oc[c[h>>2]&63](a)}if((c[g>>2]|0)==2){g=((c[a+112>>2]|0)*6|0)+12|0;h=e+32|0;b=c[h>>2]|0;if((b|0)==0){j=Jc[c[(c[a+4>>2]|0)+4>>2]&15](a,1,g)|0;c[h>>2]=j;k=j}else{k=b}Gm(k|0,0,g|0)|0;if((c[e+40>>2]|0)==0){Ti(a)}c[e+36>>2]=0}}else{c[e+4>>2]=16;c[e+8>>2]=40;c[e+28>>2]=1}a=e+28|0;if((c[a>>2]|0)==0){i=d;return}else{l=0}do{Gm(c[f+(l<<2)>>2]|0,0,4096)|0;l=l+1|0}while((l|0)!=32);c[a>>2]=0;i=d;return}function Si(a){a=a|0;c[(c[a+484>>2]|0)+28>>2]=1;return}function Ti(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;d=c[a+484>>2]|0;e=Jc[c[c[a+4>>2]>>2]&15](a,1,2044)|0;a=e+1020|0;c[d+40>>2]=a;c[a>>2]=0;c[e+1024>>2]=1;c[e+1016>>2]=-1;c[e+1028>>2]=2;c[e+1012>>2]=-2;c[e+1032>>2]=3;c[e+1008>>2]=-3;c[e+1036>>2]=4;c[e+1004>>2]=-4;c[e+1040>>2]=5;c[e+1e3>>2]=-5;c[e+1044>>2]=6;c[e+996>>2]=-6;c[e+1048>>2]=7;c[e+992>>2]=-7;c[e+1052>>2]=8;c[e+988>>2]=-8;c[e+1056>>2]=9;c[e+984>>2]=-9;c[e+1060>>2]=10;c[e+980>>2]=-10;c[e+1064>>2]=11;c[e+976>>2]=-11;c[e+1068>>2]=12;c[e+972>>2]=-12;c[e+1072>>2]=13;c[e+968>>2]=-13;c[e+1076>>2]=14;c[e+964>>2]=-14;c[e+1080>>2]=15;c[e+960>>2]=-15;e=16;d=16;do{c[a+(e<<2)>>2]=d;c[a+(0-e<<2)>>2]=0-d;e=e+1|0;d=(e&1^1)+d|0}while((e|0)!=48);e=0-d|0;f=48;do{c[a+(f<<2)>>2]=d;c[a+(0-f<<2)>>2]=e;f=f+1|0}while((f|0)!=256);i=b;return}function Ui(a,e,f,g){a=a|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0;f=i;h=c[(c[a+484>>2]|0)+24>>2]|0;j=c[a+112>>2]|0;if((g|0)<1|(j|0)==0){i=f;return}else{k=0}do{a=j;l=c[e+(k<<2)>>2]|0;while(1){m=(c[h+((d[l]|0)>>>3<<2)>>2]|0)+((d[l+1|0]|0)>>>2<<6)+((d[l+2|0]|0)>>>3<<1)|0;n=b[m>>1]|0;o=n+1<<16>>16;b[m>>1]=o<<16>>16==0?n:o;a=a+ -1|0;if((a|0)==0){break}else{l=l+3|0}}k=k+1|0}while((k|0)!=(g|0));i=f;return}function Vi(d){d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0;e=i;f=d+484|0;g=c[f>>2]|0;h=d+136|0;c[h>>2]=c[g+16>>2];j=c[g+20>>2]|0;k=Jc[c[c[d+4>>2]>>2]&15](d,1,j<<5)|0;c[k>>2]=0;c[k+4>>2]=31;c[k+8>>2]=0;c[k+12>>2]=63;c[k+16>>2]=0;c[k+20>>2]=31;_i(c[(c[f>>2]|0)+24>>2]|0,k);if((j|0)>1){l=1;while(1){if((l<<1|0)>(j|0)){m=k;n=0;o=0;p=0;while(1){q=c[m+24>>2]|0;r=(q|0)>(o|0);s=r?m:p;t=n+1|0;if((t|0)==(l|0)){u=s;break}else{m=m+32|0;n=t;o=r?q:o;p=s}}}else{p=k;o=0;n=0;m=0;while(1){s=c[p+28>>2]|0;if((s|0)>(n|0)){q=(c[p+24>>2]|0)>0;v=q?s:n;w=q?p:m}else{v=n;w=m}q=o+1|0;if((q|0)==(l|0)){u=w;break}else{p=p+32|0;o=q;n=v;m=w}}}if((u|0)==0){x=l;break}m=k+(l<<5)|0;n=u+4|0;c[k+(l<<5)+4>>2]=c[n>>2];o=u+12|0;c[k+(l<<5)+12>>2]=c[o>>2];p=u+20|0;c[k+(l<<5)+20>>2]=c[p>>2];c[m>>2]=c[u>>2];q=u+8|0;s=k+(l<<5)+8|0;c[s>>2]=c[q>>2];r=u+16|0;t=k+(l<<5)+16|0;c[t>>2]=c[r>>2];y=c[n>>2]|0;z=c[u>>2]|0;A=y-z<<4;B=c[o>>2]|0;C=c[q>>2]|0;q=(B-C|0)*12|0;D=c[p>>2]|0;E=c[r>>2]|0;r=(A|0)>(q|0);F=(D-E<<3|0)>((r?A:q)|0)?2:r&1^1;if((F|0)==0){r=(z+y|0)/2|0;c[n>>2]=r;c[m>>2]=r+1}else if((F|0)==1){r=(C+B|0)/2|0;c[o>>2]=r;c[s>>2]=r+1}else if((F|0)==2){F=(E+D|0)/2|0;c[p>>2]=F;c[t>>2]=F+1}_i(c[(c[f>>2]|0)+24>>2]|0,u);_i(c[(c[f>>2]|0)+24>>2]|0,m);m=l+1|0;if((m|0)<(j|0)){l=m}else{x=m;break}}if((x|0)>0){G=x}else{H=x;I=d+132|0;c[I>>2]=H;J=c[d>>2]|0;K=J+20|0;c[K>>2]=98;L=J+24|0;c[L>>2]=H;M=J+4|0;N=c[M>>2]|0;Qc[N&31](d,1);O=g+28|0;c[O>>2]=1;i=e;return}}else{G=1}x=0;while(1){l=c[(c[f>>2]|0)+24>>2]|0;j=c[k+(x<<5)>>2]|0;u=c[k+(x<<5)+4>>2]|0;w=c[k+(x<<5)+8>>2]|0;v=c[k+(x<<5)+12>>2]|0;m=c[k+(x<<5)+16>>2]|0;F=c[k+(x<<5)+20>>2]|0;if((j|0)>(u|0)){P=0;Q=0;R=0;S=0}else{t=(w|0)>(v|0);p=(m|0)>(F|0);D=j;j=0;E=0;r=0;s=0;while(1){if(t){T=j;U=E;V=r;W=s}else{o=c[l+(D<<2)>>2]|0;B=D<<3|4;C=j;n=w;y=E;z=r;q=s;while(1){if(p){X=C;Y=y;Z=z;_=q}else{A=n<<2|2;$=C;ba=y;ca=m;da=z;ea=o+(n<<6)+(m<<1)|0;fa=q;while(1){ga=b[ea>>1]|0;ha=ga&65535;if(ga<<16>>16==0){ia=$;ja=ba;ka=da;la=fa}else{ia=(aa(ha,B)|0)+$|0;ja=(aa(ha,A)|0)+ba|0;ka=(aa(ha,ca<<3|4)|0)+da|0;la=ha+fa|0}if((ca|0)<(F|0)){$=ia;ba=ja;ca=ca+1|0;da=ka;ea=ea+2|0;fa=la}else{X=ia;Y=ja;Z=ka;_=la;break}}}if((n|0)<(v|0)){C=X;n=n+1|0;y=Y;z=Z;q=_}else{T=X;U=Y;V=Z;W=_;break}}}if((D|0)<(u|0)){D=D+1|0;j=T;E=U;r=V;s=W}else{P=T;Q=U;R=V;S=W;break}}}s=S>>1;a[(c[c[h>>2]>>2]|0)+x|0]=(s+P|0)/(S|0)|0;a[(c[(c[h>>2]|0)+4>>2]|0)+x|0]=(s+Q|0)/(S|0)|0;a[(c[(c[h>>2]|0)+8>>2]|0)+x|0]=(s+R|0)/(S|0)|0;s=x+1|0;if((s|0)==(G|0)){H=G;break}else{x=s}}I=d+132|0;c[I>>2]=H;J=c[d>>2]|0;K=J+20|0;c[K>>2]=98;L=J+24|0;c[L>>2]=H;M=J+4|0;N=c[M>>2]|0;Qc[N&31](d,1);O=g+28|0;c[O>>2]=1;i=e;return}function Wi(e,f,g,h){e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0;j=i;k=c[e+484>>2]|0;l=c[k+24>>2]|0;m=c[e+112>>2]|0;n=c[e+336>>2]|0;o=c[k+40>>2]|0;p=c[e+136>>2]|0;q=c[p>>2]|0;r=c[p+4>>2]|0;s=c[p+8>>2]|0;if((h|0)<=0){i=j;return}p=k+36|0;t=k+32|0;k=(m|0)==0;u=m+ -1|0;v=u*3|0;w=(m*3|0)+3|0;x=0;do{y=c[f+(x<<2)>>2]|0;z=c[g+(x<<2)>>2]|0;if((c[p>>2]|0)==0){A=1;B=3;C=c[t>>2]|0;D=y;E=z;F=1}else{A=-1;B=-3;C=(c[t>>2]|0)+(w<<1)|0;D=y+v|0;E=z+u|0;F=0}c[p>>2]=F;if(k){G=0;H=0;I=0;J=C}else{z=B+1|0;y=B+2|0;K=aa(m,B)|0;L=0;M=0;N=0;O=0;P=0;Q=0;R=m;S=0;T=0;U=0;V=C;W=D;X=E;while(1){Y=V+(B<<1)|0;Z=d[n+((d[W]|0)+(c[o+(S+8+(b[Y>>1]|0)>>4<<2)>>2]|0))|0]|0;_=d[n+((d[W+1|0]|0)+(c[o+(T+8+(b[V+(z<<1)>>1]|0)>>4<<2)>>2]|0))|0]|0;$=d[n+((d[W+2|0]|0)+(c[o+(U+8+(b[V+(y<<1)>>1]|0)>>4<<2)>>2]|0))|0]|0;ba=$>>>3;ca=_>>>2;da=Z>>>3;ea=(c[l+(da<<2)>>2]|0)+(ca<<6)+(ba<<1)|0;fa=b[ea>>1]|0;if(fa<<16>>16==0){Zi(e,da,ca,ba);ga=b[ea>>1]|0}else{ga=fa}fa=(ga&65535)+ -1|0;a[X]=fa;ea=Z-(d[q+fa|0]|0)|0;Z=_-(d[r+fa|0]|0)|0;_=$-(d[s+fa|0]|0)|0;fa=ea<<1;$=fa+ea|0;b[V>>1]=$+O;ba=$+fa|0;ha=ba+L|0;$=Z<<1;ca=$+Z|0;b[V+2>>1]=ca+P;da=ca+$|0;ia=da+M|0;ca=_<<1;ja=ca+_|0;b[V+4>>1]=ja+Q;ka=ja+ca|0;la=ka+N|0;ja=R+ -1|0;if((ja|0)==0){break}else{L=ea;M=Z;N=_;O=ha;P=ia;Q=la;R=ja;S=ba+fa|0;T=da+$|0;U=ka+ca|0;V=Y;W=W+B|0;X=X+A|0}}G=ha&65535;H=ia&65535;I=la&65535;J=C+(K<<1)|0}b[J>>1]=G;b[J+2>>1]=H;b[J+4>>1]=I;x=x+1|0}while((x|0)!=(h|0));i=j;return}function Xi(e,f,g,h){e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;j=i;k=c[(c[e+484>>2]|0)+24>>2]|0;l=c[e+112>>2]|0;if((h|0)<=0){i=j;return}m=(l|0)==0;n=0;do{if(!m){o=l;p=c[f+(n<<2)>>2]|0;q=c[g+(n<<2)>>2]|0;while(1){r=(d[p]|0)>>>3;s=(d[p+1|0]|0)>>>2;t=(d[p+2|0]|0)>>>3;u=(c[k+(r<<2)>>2]|0)+(s<<6)+(t<<1)|0;v=b[u>>1]|0;if(v<<16>>16==0){Zi(e,r,s,t);w=b[u>>1]|0}else{w=v}a[q]=(w&65535)+255;o=o+ -1|0;if((o|0)==0){break}else{p=p+3|0;q=q+1|0}}}n=n+1|0}while((n|0)!=(h|0));i=j;return}function Yi(a){a=a|0;return}function Zi(e,f,g,h){e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0;j=i;i=i+1408|0;k=j;l=j+1152|0;m=j+1024|0;n=c[(c[e+484>>2]|0)+24>>2]|0;o=f>>2;f=g>>3;g=h>>2;h=o<<5;p=h|4;q=f<<5;r=q|2;s=g<<5;t=s|4;u=c[e+132>>2]|0;v=h|28;h=v+p>>1;w=q|30;q=w+r>>1;x=s|28;s=x+t>>1;if((u|0)>0){y=c[e+136>>2]|0;z=c[y>>2]|0;A=c[y+4>>2]|0;B=c[y+8>>2]|0;y=0;C=2147483647;while(1){D=d[z+y|0]|0;do{if((D|0)>=(p|0)){if((D|0)>(v|0)){E=D-v<<1;F=D-p<<1;G=aa(F,F)|0;H=aa(E,E)|0;break}if((D|0)>(h|0)){E=D-p<<1;G=aa(E,E)|0;H=0;break}else{E=D-v<<1;G=aa(E,E)|0;H=0;break}}else{E=D-p<<1;F=D-v<<1;G=aa(F,F)|0;H=aa(E,E)|0}}while(0);D=d[A+y|0]|0;do{if((D|0)>=(r|0)){if((D|0)>(w|0)){E=(D-w|0)*3|0;F=(D-r|0)*3|0;I=aa(F,F)|0;J=(aa(E,E)|0)+H|0;break}if((D|0)>(q|0)){E=(D-r|0)*3|0;I=aa(E,E)|0;J=H;break}else{E=(D-w|0)*3|0;I=aa(E,E)|0;J=H;break}}else{E=(D-r|0)*3|0;F=(D-w|0)*3|0;I=aa(F,F)|0;J=(aa(E,E)|0)+H|0}}while(0);D=I+G|0;E=d[B+y|0]|0;do{if((E|0)>=(t|0)){if((E|0)>(x|0)){F=E-x|0;K=E-t|0;L=aa(K,K)|0;M=(aa(F,F)|0)+J|0;break}if((E|0)>(s|0)){F=E-t|0;L=aa(F,F)|0;M=J;break}else{F=E-x|0;L=aa(F,F)|0;M=J;break}}else{F=E-t|0;K=E-x|0;L=aa(K,K)|0;M=(aa(F,F)|0)+J|0}}while(0);E=D+L|0;c[k+(y<<2)>>2]=M;N=(E|0)<(C|0)?E:C;E=y+1|0;if((E|0)==(u|0)){O=0;P=0;break}else{y=E;C=N}}while(1){if((c[k+(O<<2)>>2]|0)>(N|0)){Q=P}else{a[l+P|0]=O;Q=P+1|0}C=O+1|0;if((C|0)==(u|0)){R=Q;break}else{O=C;P=Q}}}else{R=0}Q=k;P=127;while(1){c[Q>>2]=2147483647;if((P|0)>0){Q=Q+4|0;P=P+ -1|0}else{break}}if((R|0)>0){P=e+136|0;e=0;do{Q=a[l+e|0]|0;O=Q&255;u=c[P>>2]|0;N=p-(d[(c[u>>2]|0)+O|0]|0)|0;C=N<<1;y=aa(C,C)|0;C=r-(d[(c[u+4>>2]|0)+O|0]|0)|0;M=C*3|0;L=(aa(M,M)|0)+y|0;y=t-(d[(c[u+8>>2]|0)+O|0]|0)|0;O=(C*72|0)+144|0;C=y<<4;u=C+64|0;M=C+192|0;J=C+320|0;C=k;x=m;s=L+(aa(y,y)|0)|0;y=3;L=(N<<6)+256|0;while(1){N=C;B=x;G=s;I=7;H=O;while(1){if((G|0)<(c[N>>2]|0)){c[N>>2]=G;a[B]=Q}w=u+G|0;q=N+4|0;if((w|0)<(c[q>>2]|0)){c[q>>2]=w;a[B+1|0]=Q}q=M+w|0;w=N+8|0;if((q|0)<(c[w>>2]|0)){c[w>>2]=q;a[B+2|0]=Q}w=J+q|0;q=N+12|0;if((w|0)<(c[q>>2]|0)){c[q>>2]=w;a[B+3|0]=Q}if((I|0)>0){N=N+16|0;B=B+4|0;G=G+H|0;I=I+ -1|0;H=H+288|0}else{break}}if((y|0)>0){C=C+128|0;x=x+32|0;s=s+L|0;y=y+ -1|0;L=L+512|0}else{break}}e=e+1|0}while((e|0)!=(R|0))}R=o<<2;o=f<<3;f=g<<2;g=c[n+(R<<2)>>2]|0;e=m;k=0;while(1){t=k+o|0;r=f|1;b[g+(t<<6)+(f<<1)>>1]=(d[e]|0)+1;b[g+(t<<6)+(r<<1)>>1]=(d[e+1|0]|0)+1;b[g+(t<<6)+(r+1<<1)>>1]=(d[e+2|0]|0)+1;b[g+(t<<6)+((f|3)<<1)>>1]=(d[e+3|0]|0)+1;k=k+1|0;if((k|0)==8){break}else{e=e+4|0}}e=c[n+((R|1)<<2)>>2]|0;k=m+32|0;g=0;while(1){t=g+o|0;r=f|1;b[e+(t<<6)+(f<<1)>>1]=(d[k]|0)+1;b[e+(t<<6)+(r<<1)>>1]=(d[k+1|0]|0)+1;b[e+(t<<6)+(r+1<<1)>>1]=(d[k+2|0]|0)+1;b[e+(t<<6)+((f|3)<<1)>>1]=(d[k+3|0]|0)+1;g=g+1|0;if((g|0)==8){break}else{k=k+4|0}}k=c[n+((R|2)<<2)>>2]|0;g=m+64|0;e=0;while(1){t=e+o|0;r=f|1;b[k+(t<<6)+(f<<1)>>1]=(d[g]|0)+1;b[k+(t<<6)+(r<<1)>>1]=(d[g+1|0]|0)+1;b[k+(t<<6)+(r+1<<1)>>1]=(d[g+2|0]|0)+1;b[k+(t<<6)+((f|3)<<1)>>1]=(d[g+3|0]|0)+1;e=e+1|0;if((e|0)==8){break}else{g=g+4|0}}g=c[n+((R|3)<<2)>>2]|0;R=m+96|0;m=0;while(1){n=m+o|0;e=f|1;b[g+(n<<6)+(f<<1)>>1]=(d[R]|0)+1;b[g+(n<<6)+(e<<1)>>1]=(d[R+1|0]|0)+1;b[g+(n<<6)+(e+1<<1)>>1]=(d[R+2|0]|0)+1;b[g+(n<<6)+((f|3)<<1)>>1]=(d[R+3|0]|0)+1;m=m+1|0;if((m|0)==8){break}else{R=R+4|0}}i=j;return}function _i(a,d){a=a|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0;e=i;f=c[d>>2]|0;g=d+4|0;h=c[g>>2]|0;j=d+8|0;k=c[j>>2]|0;l=d+12|0;m=c[l>>2]|0;n=d+16|0;o=c[n>>2]|0;p=d+20|0;q=c[p>>2]|0;a:do{if((f|0)<(h|0)){r=(k|0)>(m|0);s=(o|0)>(q|0);t=f;b:while(1){if(!r){u=c[a+(t<<2)>>2]|0;v=k;while(1){if(!s){w=o;x=u+(v<<6)+(o<<1)|0;while(1){if((b[x>>1]|0)!=0){break b}if((w|0)<(q|0)){w=w+1|0;x=x+2|0}else{break}}}if((v|0)<(m|0)){v=v+1|0}else{break}}}if((t|0)<(h|0)){t=t+1|0}else{y=f;break a}}c[d>>2]=t;y=t}else{y=f}}while(0);c:do{if((h|0)>(y|0)){f=(k|0)>(m|0);s=(o|0)>(q|0);r=h;d:while(1){if(!f){v=c[a+(r<<2)>>2]|0;u=k;while(1){if(!s){x=o;w=v+(u<<6)+(o<<1)|0;while(1){if((b[w>>1]|0)!=0){break d}if((x|0)<(q|0)){x=x+1|0;w=w+2|0}else{break}}}if((u|0)<(m|0)){u=u+1|0}else{break}}}if((r|0)>(y|0)){r=r+ -1|0}else{z=h;break c}}c[g>>2]=r;z=r}else{z=h}}while(0);e:do{if((k|0)<(m|0)){h=(y|0)>(z|0);g=(o|0)>(q|0);s=k;f:while(1){if(!h){f=y;while(1){if(!g){t=o;u=(c[a+(f<<2)>>2]|0)+(s<<6)+(o<<1)|0;while(1){if((b[u>>1]|0)!=0){break f}if((t|0)<(q|0)){t=t+1|0;u=u+2|0}else{break}}}if((f|0)<(z|0)){f=f+1|0}else{break}}}if((s|0)<(m|0)){s=s+1|0}else{A=k;break e}}c[j>>2]=s;A=s}else{A=k}}while(0);g:do{if((m|0)>(A|0)){k=(y|0)>(z|0);j=(o|0)>(q|0);g=m;h:while(1){if(!k){h=y;while(1){if(!j){r=o;f=(c[a+(h<<2)>>2]|0)+(g<<6)+(o<<1)|0;while(1){if((b[f>>1]|0)!=0){break h}if((r|0)<(q|0)){r=r+1|0;f=f+2|0}else{break}}}if((h|0)<(z|0)){h=h+1|0}else{break}}}if((g|0)>(A|0)){g=g+ -1|0}else{B=m;break g}}c[l>>2]=g;B=g}else{B=m}}while(0);i:do{if((o|0)<(q|0)){m=(y|0)>(z|0);l=(A|0)>(B|0);j=o;j:while(1){if(!m){k=y;while(1){if(!l){s=A;h=(c[a+(k<<2)>>2]|0)+(A<<6)+(j<<1)|0;while(1){if((b[h>>1]|0)!=0){break j}if((s|0)<(B|0)){s=s+1|0;h=h+64|0}else{break}}}if((k|0)<(z|0)){k=k+1|0}else{break}}}if((j|0)<(q|0)){j=j+1|0}else{C=o;break i}}c[n>>2]=j;C=j}else{C=o}}while(0);k:do{if((q|0)>(C|0)){o=(y|0)>(z|0);n=(A|0)>(B|0);l=q;l:while(1){m:do{if(!o){if(n){m=y;while(1){if((m|0)<(z|0)){m=m+1|0}else{break m}}}else{D=y}while(1){m=A;g=(c[a+(D<<2)>>2]|0)+(A<<6)+(l<<1)|0;while(1){if((b[g>>1]|0)!=0){break l}if((m|0)<(B|0)){m=m+1|0;g=g+64|0}else{break}}if((D|0)<(z|0)){D=D+1|0}else{break}}}}while(0);if((l|0)>(C|0)){l=l+ -1|0}else{E=q;break k}}c[p>>2]=l;E=l}else{E=q}}while(0);q=z-y<<4;p=(B-A|0)*12|0;D=E-C<<3;c[d+24>>2]=(aa(p,p)|0)+(aa(q,q)|0)+(aa(D,D)|0);if((y|0)>(z|0)){F=0;G=d+28|0;c[G>>2]=F;i=e;return}D=(C|0)>(E|0);if((A|0)>(B|0)){F=0;G=d+28|0;c[G>>2]=F;i=e;return}else{H=y;I=0}while(1){y=c[a+(H<<2)>>2]|0;if(D){J=I}else{q=A;p=I;while(1){n=C;o=p;j=y+(q<<6)+(C<<1)|0;while(1){o=((b[j>>1]|0)!=0)+o|0;if((n|0)>=(E|0)){break}else{n=n+1|0;j=j+2|0}}if((q|0)<(B|0)){q=q+1|0;p=o}else{J=o;break}}}if((H|0)<(z|0)){H=H+1|0;I=J}else{F=J;break}}G=d+28|0;c[G>>2]=F;i=e;return}function $i(a,b){a=a|0;b=b|0;return(a+ -1+b|0)/(b|0)|0|0}function aj(a,b){a=a|0;b=b|0;var c=0;c=a+ -1+b|0;return c-((c|0)%(b|0)|0)|0}function bj(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0;h=i;if((f|0)<=0){i=h;return}j=d+(e<<2)|0;e=a+(b<<2)|0;b=f;while(1){Fm(c[j>>2]|0,c[e>>2]|0,g|0)|0;b=b+ -1|0;if((b|0)<=0){break}else{j=j+4|0;e=e+4|0}}i=h;return}function cj(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=i;Fm(b|0,a|0,c<<7|0)|0;i=d;return}function dj(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0;d=i;i=i+16|0;e=d;f=d+8|0;g=d+12|0;h=b+4|0;c[h>>2]=0;c[f>>2]=yj(b)|0;j=pj(b,84)|0;if((j|0)==0){zj(b);k=c[b>>2]|0;c[k+20>>2]=56;c[k+24>>2]=0;Oc[c[k>>2]&63](b)}c[j>>2]=11;c[j+4>>2]=12;c[j+8>>2]=2;c[j+12>>2]=3;c[j+16>>2]=1;c[j+20>>2]=2;c[j+24>>2]=42;c[j+28>>2]=1;c[j+32>>2]=2;c[j+36>>2]=18;c[j+40>>2]=43;c[j+48>>2]=1e9;b=j+44|0;c[b>>2]=c[f>>2];c[j+56>>2]=0;c[j+64>>2]=0;c[j+52>>2]=0;c[j+60>>2]=0;c[j+68>>2]=0;c[j+72>>2]=0;c[j+76>>2]=84;c[h>>2]=j;j=Yb(10744)|0;if((j|0)==0){i=d;return}a[g]=120;c[e>>2]=f;c[e+4>>2]=g;if((nc(j|0,10752,e|0)|0)<=0){i=d;return}e=a[g]|0;if(e<<24>>24==77|e<<24>>24==109){e=(c[f>>2]|0)*1e3|0;c[f>>2]=e;l=e}else{l=c[f>>2]|0}c[b>>2]=l*1e3;i=d;return}function ej(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;e=i;f=c[a+4>>2]|0;if(d>>>0>999999984){g=c[a>>2]|0;c[g+20>>2]=56;c[g+24>>2]=1;Oc[c[g>>2]&63](a)}g=d&7;if((g|0)==0){h=d}else{h=d+8-g|0}if(b>>>0>1){g=c[a>>2]|0;c[g+20>>2]=15;c[g+24>>2]=b;Oc[c[g>>2]&63](a)}g=f+52+(b<<2)|0;d=c[g>>2]|0;a:do{if((d|0)==0){j=0;k=10}else{l=d;while(1){if(!((c[l+8>>2]|0)>>>0<h>>>0)){m=l;break a}n=c[l>>2]|0;if((n|0)==0){j=l;k=10;break}else{l=n}}}}while(0);do{if((k|0)==10){d=h+16|0;l=(j|0)==0;n=c[(l?10760:10768)+(b<<2)>>2]|0;o=999999984-h|0;p=n>>>0>o>>>0?o:n;n=d+p|0;o=pj(a,n)|0;if((o|0)==0){q=p;while(1){r=q>>>1;if(q>>>0<100){s=c[a>>2]|0;c[s+20>>2]=56;c[s+24>>2]=2;Oc[c[s>>2]&63](a)}s=d+r|0;t=pj(a,s)|0;if((t|0)==0){q=r}else{u=s;v=t;w=r;break}}}else{u=n;v=o;w=p}q=f+76|0;c[q>>2]=(c[q>>2]|0)+u;c[v>>2]=0;c[v+4>>2]=0;c[v+8>>2]=w+h;if(l){c[g>>2]=v;m=v;break}else{c[j>>2]=v;m=v;break}}}while(0);v=m+4|0;j=c[v>>2]|0;c[v>>2]=j+h;v=m+8|0;c[v>>2]=(c[v>>2]|0)-h;i=e;return m+16+j|0}function fj(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=i;f=c[a+4>>2]|0;if(d>>>0>999999984){g=c[a>>2]|0;c[g+20>>2]=56;c[g+24>>2]=3;Oc[c[g>>2]&63](a)}g=d&7;if((g|0)==0){h=d}else{h=d+8-g|0}if(b>>>0>1){g=c[a>>2]|0;c[g+20>>2]=15;c[g+24>>2]=b;Oc[c[g>>2]&63](a)}g=h+16|0;d=rj(a,g)|0;if((d|0)==0){j=c[a>>2]|0;c[j+20>>2]=56;c[j+24>>2]=4;Oc[c[j>>2]&63](a)}a=f+76|0;c[a>>2]=(c[a>>2]|0)+g;g=f+60+(b<<2)|0;c[d>>2]=c[g>>2];c[d+4>>2]=h;c[d+8>>2]=0;c[g>>2]=d;i=e;return d+16|0}function gj(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;f=i;g=c[a+4>>2]|0;h=999999984/(d>>>0)|0;if((h|0)==0){j=c[a>>2]|0;c[j+20>>2]=72;Oc[c[j>>2]&63](a)}j=(h|0)<(e|0)?h:e;c[g+80>>2]=j;g=ej(a,b,e<<2)|0;if((e|0)==0){i=f;return g|0}h=~e;k=0;l=j;while(1){j=e-k|0;m=l>>>0<j>>>0?l:j;j=fj(a,b,aa(m,d)|0)|0;if((m|0)==0){n=k}else{o=~l;p=k+h|0;q=p>>>0<o>>>0?o:p;p=k;o=m;r=j;while(1){c[g+(p<<2)>>2]=r;o=o+ -1|0;if((o|0)==0){break}else{p=p+1|0;r=r+d|0}}n=k+ -1-q|0}if(n>>>0<e>>>0){k=n;l=m}else{break}}i=f;return g|0}function hj(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;f=i;g=c[a+4>>2]|0;h=d<<7;j=999999984/(h>>>0)|0;if((j|0)==0){k=c[a>>2]|0;c[k+20>>2]=72;Oc[c[k>>2]&63](a)}k=(j|0)<(e|0)?j:e;c[g+80>>2]=k;g=ej(a,b,e<<2)|0;if((e|0)==0){i=f;return g|0}j=~e;l=0;m=k;while(1){k=e-l|0;n=m>>>0<k>>>0?m:k;k=fj(a,b,aa(h,n)|0)|0;if((n|0)==0){o=l}else{p=~m;q=l+j|0;r=q>>>0<p>>>0?p:q;q=l;p=n;s=k;while(1){c[g+(q<<2)>>2]=s;p=p+ -1|0;if((p|0)==0){break}else{q=q+1|0;s=s+(d<<7)|0}}o=l+ -1-r|0}if(o>>>0<e>>>0){l=o;m=n}else{break}}i=f;return g|0}function ij(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0;h=i;j=c[a+4>>2]|0;if((b|0)!=1){k=c[a>>2]|0;c[k+20>>2]=15;c[k+24>>2]=b;Oc[c[k>>2]&63](a)}k=ej(a,b,128)|0;c[k>>2]=0;c[k+4>>2]=f;c[k+8>>2]=e;c[k+12>>2]=g;c[k+32>>2]=d;c[k+40>>2]=0;d=j+68|0;c[k+44>>2]=c[d>>2];c[d>>2]=k;i=h;return k|0}function jj(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0;h=i;j=c[a+4>>2]|0;if((b|0)!=1){k=c[a>>2]|0;c[k+20>>2]=15;c[k+24>>2]=b;Oc[c[k>>2]&63](a)}k=ej(a,b,128)|0;c[k>>2]=0;c[k+4>>2]=f;c[k+8>>2]=e;c[k+12>>2]=g;c[k+32>>2]=d;c[k+40>>2]=0;d=j+72|0;c[k+44>>2]=c[d>>2];c[d>>2]=k;i=h;return k|0}function kj(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;b=i;d=c[a+4>>2]|0;e=d+68|0;f=c[e>>2]|0;if((f|0)==0){g=0;h=0}else{j=0;k=0;l=f;while(1){if((c[l>>2]|0)==0){f=c[l+8>>2]|0;m=(aa(f,c[l+12>>2]|0)|0)+k|0;n=(aa(c[l+4>>2]|0,f)|0)+j|0;o=m}else{n=j;o=k}m=c[l+44>>2]|0;if((m|0)==0){g=n;h=o;break}else{j=n;k=o;l=m}}}l=d+72|0;o=c[l>>2]|0;if((o|0)==0){p=g;q=h}else{k=o;o=g;g=h;while(1){if((c[k>>2]|0)==0){h=c[k+8>>2]|0;n=(aa(c[k+12>>2]<<7,h)|0)+g|0;r=(aa(h<<7,c[k+4>>2]|0)|0)+o|0;s=n}else{r=o;s=g}n=c[k+44>>2]|0;if((n|0)==0){p=r;q=s;break}else{k=n;o=r;g=s}}}if((q|0)<1){i=b;return}s=tj(a,q,p,c[d+76>>2]|0)|0;if((s|0)<(p|0)){p=(s|0)/(q|0)|0;t=(p|0)<1?1:p}else{t=1e9}p=c[e>>2]|0;if((p|0)!=0){e=d+80|0;q=p;do{if((c[q>>2]|0)==0){p=c[q+4>>2]|0;s=c[q+12>>2]|0;if(((((p+ -1|0)>>>0)/(s>>>0)|0)+1|0)>(t|0)){g=q+16|0;c[g>>2]=aa(s,t)|0;s=q+8|0;uj(a,q+48|0,aa(c[s>>2]|0,p)|0);c[q+40>>2]=1;u=s;v=c[g>>2]|0}else{c[q+16>>2]=p;u=q+8|0;v=p}c[q>>2]=gj(a,1,c[u>>2]|0,v)|0;c[q+20>>2]=c[e>>2];c[q+24>>2]=0;c[q+28>>2]=0;c[q+36>>2]=0}q=c[q+44>>2]|0}while((q|0)!=0)}q=c[l>>2]|0;if((q|0)==0){i=b;return}l=d+80|0;d=q;do{if((c[d>>2]|0)==0){q=c[d+4>>2]|0;e=c[d+12>>2]|0;if(((((q+ -1|0)>>>0)/(e>>>0)|0)+1|0)>(t|0)){v=d+16|0;c[v>>2]=aa(e,t)|0;e=d+8|0;uj(a,d+48|0,aa(q<<7,c[e>>2]|0)|0);c[d+40>>2]=1;w=e;x=c[v>>2]|0}else{c[d+16>>2]=q;w=d+8|0;x=q}c[d>>2]=hj(a,1,c[w>>2]|0,x)|0;c[d+20>>2]=c[l>>2];c[d+24>>2]=0;c[d+28>>2]=0;c[d+36>>2]=0}d=c[d+44>>2]|0}while((d|0)!=0);i=b;return}function lj(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0;g=i;h=e+d|0;j=b+4|0;if(!((!(h>>>0>(c[j>>2]|0)>>>0)?!((c[b+12>>2]|0)>>>0<e>>>0):0)?(c[b>>2]|0)!=0:0)){e=c[a>>2]|0;c[e+20>>2]=23;Oc[c[e>>2]&63](a)}e=b+24|0;k=c[e>>2]|0;if(!(!(k>>>0>d>>>0)?!(h>>>0>((c[b+16>>2]|0)+k|0)>>>0):0)){l=7}a:do{if((l|0)==7){if((c[b+40>>2]|0)==0){k=c[a>>2]|0;c[k+20>>2]=71;Oc[c[k>>2]&63](a)}k=b+36|0;if((c[k>>2]|0)!=0){m=c[b+8>>2]|0;n=c[e>>2]|0;o=b+20|0;p=b+16|0;q=c[p>>2]|0;b:do{if((q|0)>0?(r=b+28|0,s=b+48|0,t=b+52|0,u=c[o>>2]|0,v=(u|0)<(q|0)?u:q,u=(c[r>>2]|0)-n|0,w=(v|0)<(u|0)?v:u,u=(c[j>>2]|0)-n|0,v=(w|0)<(u|0)?w:u,(v|0)>=1):0){u=v;v=aa(n,m)|0;w=0;while(1){x=aa(u,m)|0;Kc[c[t>>2]&63](a,s,c[(c[b>>2]|0)+(w<<2)>>2]|0,v,x);y=c[o>>2]|0;z=c[p>>2]|0;A=y+w|0;if((A|0)>=(z|0)){break b}B=z-A|0;z=(y|0)<(B|0)?y:B;B=A+(c[e>>2]|0)|0;y=(c[r>>2]|0)-B|0;C=(z|0)<(y|0)?z:y;y=(c[j>>2]|0)-B|0;B=(C|0)<(y|0)?C:y;if((B|0)<1){break b}u=B;v=x+v|0;w=A}}}while(0);c[k>>2]=0}p=c[b+16>>2]|0;if((c[e>>2]|0)>>>0<d>>>0){D=d}else{o=h-p|0;D=(o|0)<0?0:o}c[e>>2]=D;o=c[b+8>>2]|0;m=b+20|0;n=b+16|0;if((p|0)>0?(q=b+28|0,w=b+48|0,v=c[m>>2]|0,u=(v|0)<(p|0)?v:p,p=(c[q>>2]|0)-D|0,v=(u|0)<(p|0)?u:p,p=(c[j>>2]|0)-D|0,u=(v|0)<(p|0)?v:p,(u|0)>=1):0){p=u;u=aa(o,D)|0;v=0;while(1){r=aa(p,o)|0;Kc[c[w>>2]&63](a,w,c[(c[b>>2]|0)+(v<<2)>>2]|0,u,r);s=c[m>>2]|0;t=c[n>>2]|0;A=s+v|0;if((A|0)>=(t|0)){break a}x=t-A|0;t=(s|0)<(x|0)?s:x;x=A+(c[e>>2]|0)|0;s=(c[q>>2]|0)-x|0;B=(t|0)<(s|0)?t:s;s=(c[j>>2]|0)-x|0;x=(B|0)<(s|0)?B:s;if((x|0)<1){break a}p=x;u=r+u|0;v=A}}}}while(0);j=b+28|0;D=c[j>>2]|0;do{if(D>>>0<h>>>0){if(D>>>0<d>>>0){if((f|0)==0){E=0;F=d}else{v=c[a>>2]|0;c[v+20>>2]=23;Oc[c[v>>2]&63](a);G=d;l=29}}else{G=D;l=29}if((l|0)==29){if((f|0)==0){E=0;F=G}else{c[j>>2]=h;E=1;F=G}}if((c[b+32>>2]|0)==0){if(E){break}v=c[a>>2]|0;c[v+20>>2]=23;Oc[c[v>>2]&63](a);break}v=c[b+8>>2]|0;u=c[e>>2]|0;p=F-u|0;q=h-u|0;if(p>>>0<q>>>0){u=p;do{Gm(c[(c[b>>2]|0)+(u<<2)>>2]|0,0,v|0)|0;u=u+1|0}while((u|0)!=(q|0))}}}while(0);if((f|0)==0){H=c[b>>2]|0;I=c[e>>2]|0;J=d-I|0;K=H+(J<<2)|0;i=g;return K|0}c[b+36>>2]=1;H=c[b>>2]|0;I=c[e>>2]|0;J=d-I|0;K=H+(J<<2)|0;i=g;return K|0}function mj(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0;g=i;h=e+d|0;j=b+4|0;if(!((!(h>>>0>(c[j>>2]|0)>>>0)?!((c[b+12>>2]|0)>>>0<e>>>0):0)?(c[b>>2]|0)!=0:0)){e=c[a>>2]|0;c[e+20>>2]=23;Oc[c[e>>2]&63](a)}e=b+24|0;k=c[e>>2]|0;if(!(!(k>>>0>d>>>0)?!(h>>>0>((c[b+16>>2]|0)+k|0)>>>0):0)){l=7}a:do{if((l|0)==7){if((c[b+40>>2]|0)==0){k=c[a>>2]|0;c[k+20>>2]=71;Oc[c[k>>2]&63](a)}k=b+36|0;if((c[k>>2]|0)!=0){m=c[b+8>>2]<<7;n=c[e>>2]|0;o=b+20|0;p=b+16|0;q=c[p>>2]|0;b:do{if((q|0)>0?(r=b+28|0,s=b+48|0,t=b+52|0,u=c[o>>2]|0,v=(u|0)<(q|0)?u:q,u=(c[r>>2]|0)-n|0,w=(v|0)<(u|0)?v:u,u=(c[j>>2]|0)-n|0,v=(w|0)<(u|0)?w:u,(v|0)>=1):0){u=v;v=aa(n,m)|0;w=0;while(1){x=aa(u,m)|0;Kc[c[t>>2]&63](a,s,c[(c[b>>2]|0)+(w<<2)>>2]|0,v,x);y=c[o>>2]|0;z=c[p>>2]|0;A=y+w|0;if((A|0)>=(z|0)){break b}B=z-A|0;z=(y|0)<(B|0)?y:B;B=A+(c[e>>2]|0)|0;y=(c[r>>2]|0)-B|0;C=(z|0)<(y|0)?z:y;y=(c[j>>2]|0)-B|0;B=(C|0)<(y|0)?C:y;if((B|0)<1){break b}u=B;v=x+v|0;w=A}}}while(0);c[k>>2]=0}p=c[b+16>>2]|0;if((c[e>>2]|0)>>>0<d>>>0){D=d}else{o=h-p|0;D=(o|0)<0?0:o}c[e>>2]=D;o=c[b+8>>2]<<7;m=b+20|0;n=b+16|0;if((p|0)>0?(q=b+28|0,w=b+48|0,v=c[m>>2]|0,u=(v|0)<(p|0)?v:p,p=(c[q>>2]|0)-D|0,v=(u|0)<(p|0)?u:p,p=(c[j>>2]|0)-D|0,u=(v|0)<(p|0)?v:p,(u|0)>=1):0){p=u;u=aa(o,D)|0;v=0;while(1){r=aa(p,o)|0;Kc[c[w>>2]&63](a,w,c[(c[b>>2]|0)+(v<<2)>>2]|0,u,r);s=c[m>>2]|0;t=c[n>>2]|0;A=s+v|0;if((A|0)>=(t|0)){break a}x=t-A|0;t=(s|0)<(x|0)?s:x;x=A+(c[e>>2]|0)|0;s=(c[q>>2]|0)-x|0;B=(t|0)<(s|0)?t:s;s=(c[j>>2]|0)-x|0;x=(B|0)<(s|0)?B:s;if((x|0)<1){break a}p=x;u=r+u|0;v=A}}}}while(0);j=b+28|0;D=c[j>>2]|0;do{if(D>>>0<h>>>0){if(D>>>0<d>>>0){if((f|0)==0){E=0;F=d}else{v=c[a>>2]|0;c[v+20>>2]=23;Oc[c[v>>2]&63](a);G=d;l=29}}else{G=D;l=29}if((l|0)==29){if((f|0)==0){E=0;F=G}else{c[j>>2]=h;E=1;F=G}}if((c[b+32>>2]|0)==0){if(E){break}v=c[a>>2]|0;c[v+20>>2]=23;Oc[c[v>>2]&63](a);break}v=c[b+8>>2]<<7;u=c[e>>2]|0;p=F-u|0;q=h-u|0;if(p>>>0<q>>>0){u=p;do{Gm(c[(c[b>>2]|0)+(u<<2)>>2]|0,0,v|0)|0;u=u+1|0}while((u|0)!=(q|0))}}}while(0);if((f|0)==0){H=c[b>>2]|0;I=c[e>>2]|0;J=d-I|0;K=H+(J<<2)|0;i=g;return K|0}c[b+36>>2]=1;H=c[b>>2]|0;I=c[e>>2]|0;J=d-I|0;K=H+(J<<2)|0;i=g;return K|0}function nj(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;d=i;e=c[a+4>>2]|0;if(!(b>>>0>1)){if((b|0)==1){f=e+68|0;g=c[f>>2]|0;if((g|0)!=0){h=g;do{g=h+40|0;if((c[g>>2]|0)!=0){c[g>>2]=0;Qc[c[h+56>>2]&31](a,h+48|0)}h=c[h+44>>2]|0}while((h|0)!=0)}c[f>>2]=0;f=e+72|0;h=c[f>>2]|0;if((h|0)!=0){g=h;do{h=g+40|0;if((c[h>>2]|0)!=0){c[h>>2]=0;Qc[c[g+56>>2]&31](a,g+48|0)}g=c[g+44>>2]|0}while((g|0)!=0)}c[f>>2]=0}}else{f=c[a>>2]|0;c[f+20>>2]=15;c[f+24>>2]=b;Oc[c[f>>2]&63](a)}f=e+60+(b<<2)|0;g=c[f>>2]|0;c[f>>2]=0;if((g|0)!=0){f=e+76|0;h=g;while(1){g=c[h>>2]|0;j=(c[h+4>>2]|0)+16+(c[h+8>>2]|0)|0;sj(a,h,j);c[f>>2]=(c[f>>2]|0)-j;if((g|0)==0){break}else{h=g}}}h=e+52+(b<<2)|0;b=c[h>>2]|0;c[h>>2]=0;if((b|0)==0){i=d;return}h=e+76|0;e=b;while(1){b=c[e>>2]|0;f=(c[e+4>>2]|0)+16+(c[e+8>>2]|0)|0;qj(a,e,f);c[h>>2]=(c[h>>2]|0)-f;if((b|0)==0){break}else{e=b}}i=d;return}function oj(a){a=a|0;var b=0,d=0;b=i;nj(a,1);nj(a,0);d=a+4|0;qj(a,c[d>>2]|0,84);c[d>>2]=0;zj(a);i=b;return}function pj(a,b){a=a|0;b=b|0;var c=0;a=i;c=um(b)|0;i=a;return c|0}function qj(a,b,c){a=a|0;b=b|0;c=c|0;c=i;vm(b);i=c;return}function rj(a,b){a=a|0;b=b|0;var c=0;a=i;c=um(b)|0;i=a;return c|0}function sj(a,b,c){a=a|0;b=b|0;c=c|0;c=i;vm(b);i=c;return}function tj(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;return(c[(c[a+4>>2]|0)+44>>2]|0)-e|0}function uj(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0;e=i;f=cb()|0;c[d+12>>2]=f;if((f|0)==0){f=c[b>>2]|0;c[f+20>>2]=65;g=f+24|0;f=g+80|0;do{a[g]=0;g=g+1|0}while((g|0)<(f|0));Oc[c[c[b>>2]>>2]&63](b)}c[d>>2]=44;c[d+4>>2]=45;c[d+8>>2]=19;i=e;return}function vj(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=i;h=b+12|0;if((Xb(c[h>>2]|0,e|0,0)|0)!=0){e=c[a>>2]|0;c[e+20>>2]=67;Oc[c[e>>2]&63](a)}if((xa(d|0,1,f|0,c[h>>2]|0)|0)==(f|0)){i=g;return}f=c[a>>2]|0;c[f+20>>2]=66;Oc[c[f>>2]&63](a);i=g;return}function wj(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=i;h=b+12|0;if((Xb(c[h>>2]|0,e|0,0)|0)!=0){e=c[a>>2]|0;c[e+20>>2]=67;Oc[c[e>>2]&63](a)}if((zb(d|0,1,f|0,c[h>>2]|0)|0)==(f|0)){i=g;return}f=c[a>>2]|0;c[f+20>>2]=68;Oc[c[f>>2]&63](a);i=g;return}function xj(a,b){a=a|0;b=b|0;a=i;Zb(c[b+12>>2]|0)|0;i=a;return}function yj(a){a=a|0;return 1e6}function zj(a){a=a|0;return}function Aj(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=i;i=i+16|0;f=e;g=f;c[g>>2]=1196314761;c[g+4>>2]=169478669;if(!(d>>>0>8)){if((d|0)==0){h=-1;i=e;return h|0}else{j=d}}else{j=8}if(b>>>0>7){h=-1;i=e;return h|0}h=xm(a+b|0,f+b|0,(j+b|0)>>>0>8?8-b|0:j)|0;i=e;return h|0}function Bj(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=i;do{if((a|0)!=0){if((4294967295/(c>>>0)|0)>>>0>b>>>0){e=Ok(a,aa(c,b)|0)|0;break}else{ok(a,10776);e=0;break}}else{e=0}}while(0);i=d;return e|0}function Cj(a,b){a=a|0;b=b|0;var c=0;c=i;Ik(a,b);i=c;return}function Dj(a){a=a|0;var b=0;b=i;c[a+412>>2]=km(0,0,0)|0;i=b;return}function Ej(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;e=i;f=c[a+212>>2]|0;if((c[a+376>>2]&536870912|0)==0){g=(f&2048|0)==0}else{g=(f&768|0)!=768}if((d|0)==0|g^1){i=e;return}g=a+412|0;a=b;b=d;d=c[g>>2]|0;while(1){f=(b|0)==0?-1:b;d=km(d,a,f)|0;if((b|0)==(f|0)){break}else{a=a+f|0;b=b-f|0}}c[g>>2]=d;i=e;return}function Fj(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;e=i;i=i+128|0;f=e;g=(d|0)==0;h=b+212|0;if(!g){if((a[d]|0)!=49){c[h>>2]=c[h>>2]|131072}if((a[d+1|0]|0)!=46){c[h>>2]=c[h>>2]|131072}if((a[d+2|0]|0)!=54){c[h>>2]=c[h>>2]|131072}if((a[d+3|0]|0)!=46){c[h>>2]=c[h>>2]|131072}if((a[d+4|0]|0)!=49){c[h>>2]=c[h>>2]|131072}if((a[d+5|0]|0)!=48){c[h>>2]=c[h>>2]|131072}j=c[h>>2]|0;if((a[d+6|0]|0)==0){k=j}else{l=j|131072;c[h>>2]=l;k=l}}else{l=c[h>>2]|131072;c[h>>2]=l;k=l}if((k&131072|0)==0){m=1;i=e;return m|0}if(((!g?(a[d]|0)==49:0)?(a[d+2|0]|0)==54:0)?(a[d+3|0]|0)==46:0){m=1;i=e;return m|0}mk(f,128,mk(f,128,mk(f,128,mk(f,128,0,10816)|0,d)|0,10848)|0,10872)|0;ok(b,f);m=0;i=e;return m|0}function Gj(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;j=i;i=i+1056|0;k=i;i=i+168|0;c[k>>2]=0;l=j+156|0;m=j;Gm(l|0,0,900)|0;c[l+748>>2]=2147483647;c[l+752>>2]=2147483647;c[l+756>>2]=0;c[l+760>>2]=0;p=0;va(19,l|0,f|0,g|0,h|0);h=p;p=0;if((h|0)!=0&(q|0)!=0){n=Em(c[h>>2]|0,k)|0;if((n|0)==0){Ba(h|0,q|0)}E=q}else{n=-1}if((n|0)!=1){p=0;va(20,l|0,b|0,d|0,e|0);e=p;p=0;if((e|0)!=0&(q|0)!=0){o=Em(c[e>>2]|0,k)|0;if((o|0)==0){Ba(e|0,q|0)}E=q}else{o=-1}if((o|0)!=1){Dm(m,1,k|0)|0;p=0;o=p;p=0;if((o|0)!=0&(q|0)!=0){r=Em(c[o>>2]|0,k)|0;if((r|0)==0){Ba(o|0,q|0)}E=q}else{r=-1}if((r|0)!=1){s=0}else{s=E}}else{s=E}}else{s=E}while(1){if((s|0)!=0){t=0;u=11;break}v=l+160|0;c[v>>2]=m;w=l+164|0;c[w>>2]=0;x=l+156|0;c[x>>2]=6;p=0;r=ta(22,l|0,a|0)|0;o=p;p=0;if((o|0)!=0&(q|0)!=0){y=Em(c[o>>2]|0,k)|0;if((y|0)==0){Ba(o|0,q|0)}E=q}else{y=-1}if((y|0)==1){s=E;continue}if((r|0)==0){t=0;u=11;break}p=0;z=ta(23,l|0,900)|0;r=p;p=0;if((r|0)!=0&(q|0)!=0){A=Em(c[r>>2]|0,k)|0;if((A|0)==0){Ba(r|0,q|0)}E=q}else{A=-1}if((A|0)==1){s=E}else{u=9;break}}if((u|0)==9){if((z|0)==0){t=0;i=j;return t|0}c[l+256>>2]=13;c[l+260>>2]=20;c[l+264>>2]=z;c[v>>2]=0;c[w>>2]=0;c[x>>2]=0;Fm(z|0,l|0,900)|0;t=z;i=j;return t|0}else if((u|0)==11){i=j;return t|0}return 0}function Hj(a){a=a|0;var b=0,c=0,d=0;b=i;if((a|0)!=0){c=Lk(a,268)|0;if((c|0)==0){d=c}else{Gm(c|0,0,268)|0;d=c}}else{d=0}i=b;return d|0}function Ij(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;if((a|0)==0|(b|0)==0){i=d;return}e=c[b>>2]|0;if((e|0)==0){i=d;return}c[b>>2]=0;Jj(a,e,32767,-1);Gm(e|0,0,268)|0;Ik(a,e);i=d;return}function Jj(e,f,g,h){e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;j=i;if((e|0)==0|(f|0)==0){i=j;return}k=f+232|0;do{if((g&16384&c[k>>2]|0)!=0){if((h|0)==-1){l=f+128|0;if((c[l>>2]|0)>0){m=0;do{Jj(e,f,16384,m);m=m+1|0}while((m|0)<(c[l>>2]|0))}m=f+136|0;Ik(e,c[m>>2]|0);c[m>>2]=0;c[l>>2]=0;break}else{m=f+136|0;n=c[m>>2]|0;if((n|0)==0){break}o=c[n+(h*28|0)+4>>2]|0;if((o|0)==0){break}Ik(e,o);c[(c[m>>2]|0)+(h*28|0)+4>>2]=0;break}}}while(0);m=c[k>>2]|0;if((g&8192&m|0)==0){p=m}else{m=f+156|0;Ik(e,c[m>>2]|0);c[m>>2]=0;m=f+8|0;c[m>>2]=c[m>>2]&-17;p=c[k>>2]|0}if((g&256&p|0)==0){q=p}else{p=f+256|0;Ik(e,c[p>>2]|0);m=f+260|0;Ik(e,c[m>>2]|0);c[p>>2]=0;c[m>>2]=0;m=f+8|0;c[m>>2]=c[m>>2]&-16385;q=c[k>>2]|0}if((g&128&q|0)==0){r=q}else{q=f+208|0;Ik(e,c[q>>2]|0);m=f+220|0;Ik(e,c[m>>2]|0);c[q>>2]=0;c[m>>2]=0;m=f+224|0;q=c[m>>2]|0;if((q|0)!=0){p=f+229|0;if((a[p]|0)==0){s=q}else{o=q;q=0;while(1){Ik(e,c[o+(q<<2)>>2]|0);c[(c[m>>2]|0)+(q<<2)>>2]=0;n=q+1|0;t=c[m>>2]|0;if(n>>>0<(d[p]|0)>>>0){o=t;q=n}else{s=t;break}}}Ik(e,s);c[m>>2]=0}m=f+8|0;c[m>>2]=c[m>>2]&-1025;r=c[k>>2]|0}if((g&16&r|0)==0){u=r}else{r=f+116|0;Ik(e,c[r>>2]|0);m=f+120|0;Ik(e,c[m>>2]|0);c[r>>2]=0;c[m>>2]=0;m=f+8|0;c[m>>2]=c[m>>2]&-4097;u=c[k>>2]|0}do{if((g&32&u|0)!=0){if(!((h|0)==-1)){m=f+244|0;r=c[m>>2]|0;if((r|0)==0){break}Ik(e,c[r+(h<<4)>>2]|0);Ik(e,c[(c[m>>2]|0)+(h<<4)+8>>2]|0);c[(c[m>>2]|0)+(h<<4)>>2]=0;c[(c[m>>2]|0)+(h<<4)+8>>2]=0;break}m=f+248|0;r=c[m>>2]|0;if((r|0)!=0){if((r|0)>0){r=0;do{Jj(e,f,32,r);r=r+1|0}while((r|0)<(c[m>>2]|0))}r=f+244|0;Ik(e,c[r>>2]|0);c[r>>2]=0;c[m>>2]=0}r=f+8|0;c[r>>2]=c[r>>2]&-8193}}while(0);do{if((g&512&c[k>>2]|0)!=0){if(!((h|0)==-1)){u=f+236|0;r=c[u>>2]|0;if((r|0)==0){break}Ik(e,c[r+(h*20|0)+8>>2]|0);c[(c[u>>2]|0)+(h*20|0)+8>>2]=0;break}u=f+240|0;r=c[u>>2]|0;if((r|0)!=0){if((r|0)>0){r=0;do{Jj(e,f,512,r);r=r+1|0}while((r|0)<(c[u>>2]|0))}r=f+236|0;Ik(e,c[r>>2]|0);c[r>>2]=0;c[u>>2]=0}}}while(0);r=c[k>>2]|0;if((g&8&r|0)==0){v=r}else{r=f+204|0;Ik(e,c[r>>2]|0);c[r>>2]=0;r=f+8|0;c[r>>2]=c[r>>2]&-65;v=c[k>>2]|0}if((g&4096&v|0)==0){w=v}else{v=f+16|0;Ik(e,c[v>>2]|0);c[v>>2]=0;v=f+8|0;c[v>>2]=c[v>>2]&-9;b[f+20>>1]=0;w=c[k>>2]|0}if((g&64&w|0)==0){x=w}else{v=f+264|0;r=c[v>>2]|0;if((r|0)==0){y=w}else{w=f+4|0;if((c[w>>2]|0)==0){z=r}else{m=r;r=0;while(1){Ik(e,c[m+(r<<2)>>2]|0);c[(c[v>>2]|0)+(r<<2)>>2]=0;l=r+1|0;s=c[v>>2]|0;if(l>>>0<(c[w>>2]|0)>>>0){m=s;r=l}else{z=s;break}}}Ik(e,z);c[v>>2]=0;y=c[k>>2]|0}v=f+8|0;c[v>>2]=c[v>>2]&-32769;x=y}c[k>>2]=x&~((h|0)==-1?g:g&-16929);i=j;return}function Kj(a){a=a|0;var b=0;if((a|0)==0){b=0}else{b=c[a+188>>2]|0}return b|0}function Lj(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0;f=i;i=i+16|0;g=f;a[g]=e>>>24;a[g+1|0]=e>>>16;a[g+2|0]=e>>>8;a[g+3|0]=e;a[g+4|0]=0;if((b|0)==0){h=0;i=f;return h|0}e=c[b+692>>2]|0;if((e|0)==0){h=0;i=f;return h|0}j=c[b+696>>2]|0;b=j+(e*5|0)|0;while(1){e=b+ -5|0;if((xm(g,e,4)|0)==0){break}if(e>>>0>j>>>0){b=e}else{h=0;k=7;break}}if((k|0)==7){i=f;return h|0}h=d[b+ -1|0]|0;i=f;return h|0}function Mj(a,b){a=a|0;b=b|0;var d=0;d=a+248|0;a:do{if((c[d>>2]|0)==0){switch(b|0){case-1:{c[d>>2]=10968;break a;break};case-6:{c[d>>2]=11072;break a;break};case-2:{c[d>>2]=10984;break a;break};case 2:{c[d>>2]=10944;break a;break};case-4:{c[d>>2]=11032;break a;break};case-7:{c[d>>2]=11104;break a;break};case 1:{c[d>>2]=10912;break a;break};case-5:{c[d>>2]=11056;break a;break};case-3:{c[d>>2]=11008;break a;break};default:{c[d>>2]=10880;break a}}}}while(0);return}function Nj(a,d,e){a=a|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0.0;f=i;do{if((e+ -16|0)>>>0>624999984){g=b[d+74>>1]|0;h=11128}else{j=b[d+74>>1]|0;if((c[a+208>>2]&32768|0)!=0?!((j&8)==0):0){g=j;h=11160;break}k=d+74|0;if(j<<16>>16<0){i=f;return}do{if(!((j&1)==0)){l=c[d>>2]|0;if((!((e|0)==0|(l|0)==0)?(m=+O(+(+(l|0)*1.0e5/+(e|0)+.5)),m<=2147483647.0&m>=-2147483648.0):0)?!((~~m+ -95e3|0)>>>0>1e4):0){break}if((j&32)==0){wk(a,13200,0);break}wk(a,13168,2);i=f;return}}while(0);c[d>>2]=e;b[k>>1]=j&65535|9;i=f;return}}while(0);b[d+74>>1]=g&65535|32768;wk(a,h,1);i=f;return}function Oj(a,d){a=a|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0;e=i;f=b[d+114>>1]|0;g=f&65535;if((g&32768|0)==0){h=d+8|0;j=c[h>>2]|0;k=(g&128|0)==0?j&-2049:j|2048;j=(f&2)==0?k&-5:k|4;c[h>>2]=j;if((f&1)==0){c[h>>2]=j&-2;i=e;return}else{c[h>>2]=j|1;i=e;return}}j=d+8|0;h=c[j>>2]&-6150;c[j>>2]=h;if((a|0)==0){i=e;return}f=d+232|0;k=c[f>>2]|0;if((k&16|0)!=0){g=d+116|0;Ik(a,c[g>>2]|0);l=d+120|0;Ik(a,c[l>>2]|0);c[g>>2]=0;c[l>>2]=0;c[j>>2]=h}c[f>>2]=k&-17;i=e;return}function Pj(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;if((b|0)==0){i=d;return}e=b+40|0;f=a+824|0;g=e+76|0;do{c[e>>2]=c[f>>2];e=e+4|0;f=f+4|0}while((e|0)<(g|0));Oj(a,b);i=d;return}function Qj(a,d,f,g){a=a|0;d=d|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0;h=i;i=i+48|0;j=h;k=Rj(j,f)|0;if((k|0)==1){l=d+74|0;b[l>>1]=e[l>>1]|0|32768;pk(a,11176);m=0;i=h;return m|0}else if((k|0)==0){k=d+74|0;l=e[k>>1]|0;if((l&32768|0)!=0){m=0;i=h;return m|0}do{if((g|0)<2?(l&2|0)!=0:0){if((Uj(f,d+4|0,100)|0)==0){b[k>>1]=l|32768;pk(a,13136);m=0;i=h;return m|0}else{if((g|0)==0){m=1}else{break}i=h;return m|0}}}while(0);g=d+4|0;c[g+0>>2]=c[f+0>>2];c[g+4>>2]=c[f+4>>2];c[g+8>>2]=c[f+8>>2];c[g+12>>2]=c[f+12>>2];c[g+16>>2]=c[f+16>>2];c[g+20>>2]=c[f+20>>2];c[g+24>>2]=c[f+24>>2];c[g+28>>2]=c[f+28>>2];g=d+36|0;n=j+0|0;j=g+36|0;do{c[g>>2]=c[n>>2];g=g+4|0;n=n+4|0}while((g|0)<(j|0));n=(Uj(f,11392,1e3)|0)==0;b[k>>1]=n?l&65469|2:l|66;m=2;i=h;return m|0}else{m=d+74|0;b[m>>1]=e[m>>1]|0|32768;lk(a,11200)}return 0}function Rj(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0.0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0.0,N=0,P=0.0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0;d=i;i=i+32|0;e=d;f=c[b>>2]|0;if(f>>>0>1e5){g=1;i=d;return g|0}h=b+4|0;j=c[h>>2]|0;if((j|0)<0){g=1;i=d;return g|0}if((j|0)>(1e5-f|0)){g=1;i=d;return g|0}k=b+8|0;l=c[k>>2]|0;if(l>>>0>1e5){g=1;i=d;return g|0}m=b+12|0;n=c[m>>2]|0;if((n|0)<0){g=1;i=d;return g|0}if((n|0)>(1e5-l|0)){g=1;i=d;return g|0}o=b+16|0;p=c[o>>2]|0;if(p>>>0>1e5){g=1;i=d;return g|0}q=b+20|0;r=c[q>>2]|0;if((r|0)<0){g=1;i=d;return g|0}if((r|0)>(1e5-p|0)){g=1;i=d;return g|0}s=b+24|0;t=c[s>>2]|0;if(t>>>0>1e5){g=1;i=d;return g|0}u=b+28|0;v=c[u>>2]|0;if((v|0)<0){g=1;i=d;return g|0}if((v|0)>(1e5-t|0)){g=1;i=d;return g|0}w=(l|0)==(p|0);x=(j|0)==(r|0);do{if(!(w|x)){y=+O(+(+(l-p|0)*+(j-r|0)/7.0+.5));if(y<=2147483647.0&y>=-2147483648.0){z=~~y;break}else{g=2;i=d;return g|0}}else{z=0}}while(0);A=(n|0)==(r|0);B=(f|0)==(p|0);do{if(!(A|B)){y=+O(+(+(f-p|0)*+(n-r|0)/7.0+.5));if(y<=2147483647.0&y>=-2147483648.0){C=~~y;break}else{g=2;i=d;return g|0}}else{C=0}}while(0);D=z-C|0;E=(v|0)==(r|0);do{if(!(w|E)){y=+O(+(+(l-p|0)*+(v-r|0)/7.0+.5));if(y<=2147483647.0&y>=-2147483648.0){F=~~y;break}else{g=2;i=d;return g|0}}else{F=0}}while(0);l=(t|0)==(p|0);do{if(!(A|l)){y=+O(+(+(n-r|0)*+(t-p|0)/7.0+.5));if(y<=2147483647.0&y>=-2147483648.0){G=~~y;break}else{g=2;i=d;return g|0}}else{G=0}}while(0);if((F|0)==(G|0)){g=1;i=d;return g|0}n=(v|0)==0|(z|0)==(C|0);do{if(!n){y=+O(+(+(v|0)*+(D|0)/+(F-G|0)+.5));if(y<=2147483647.0&y>=-2147483648.0){H=~~y;break}else{g=1;i=d;return g|0}}else{H=0}}while(0);if((H|0)<=(v|0)){g=1;i=d;return g|0}do{if(!(x|l)){y=+O(+(+(j-r|0)*+(t-p|0)/7.0+.5));if(y<=2147483647.0&y>=-2147483648.0){I=~~y;break}else{g=2;i=d;return g|0}}else{I=0}}while(0);do{if(!(B|E)){y=+O(+(+(f-p|0)*+(v-r|0)/7.0+.5));if(y<=2147483647.0&y>=-2147483648.0){J=~~y;break}else{g=2;i=d;return g|0}}else{J=0}}while(0);if((I|0)==(J|0)){g=1;i=d;return g|0}do{if(!n){y=+O(+(+(v|0)*+(D|0)/+(I-J|0)+.5));if(y<=2147483647.0&y>=-2147483648.0){K=~~y;break}else{g=1;i=d;return g|0}}else{K=0}}while(0);if((K|0)<=(v|0)){g=1;i=d;return g|0}y=+O(+(1.0e10/+(v|0)+.5));if(y<=2147483647.0&y>=-2147483648.0){L=~~y}else{L=0}y=+(H|0);M=+O(+(1.0e10/y+.5));if(M<=2147483647.0&M>=-2147483648.0){N=~~M}else{N=0}v=L-N|0;M=+(K|0);P=+O(+(1.0e10/M+.5));if(P<=2147483647.0&P>=-2147483648.0){Q=~~P}else{Q=0}N=v-Q|0;if((N|0)<1){g=1;i=d;return g|0}if((H|0)==0){g=1;i=d;return g|0}do{if((f|0)!=0){P=+O(+(+(f|0)*1.0e5/y+.5));if(P<=2147483647.0&P>=-2147483648.0){R=~~P;break}else{g=1;i=d;return g|0}}else{R=0}}while(0);c[a>>2]=R;R=a+4|0;f=c[h>>2]|0;do{if((f|0)!=0){P=+O(+(+(f|0)*1.0e5/y+.5));if(P<=2147483647.0&P>=-2147483648.0){S=~~P;break}else{g=1;i=d;return g|0}}else{S=0}}while(0);c[R>>2]=S;S=a+8|0;R=1e5-(c[b>>2]|0)|0;f=c[h>>2]|0;do{if((R|0)!=(f|0)){P=+O(+(+(R-f|0)*1.0e5/y+.5));if(P<=2147483647.0&P>=-2147483648.0){T=~~P;break}else{g=1;i=d;return g|0}}else{T=0}}while(0);c[S>>2]=T;T=a+12|0;S=c[k>>2]|0;if((K|0)==0){g=1;i=d;return g|0}do{if((S|0)!=0){y=+O(+(+(S|0)*1.0e5/M+.5));if(y<=2147483647.0&y>=-2147483648.0){U=~~y;break}else{g=1;i=d;return g|0}}else{U=0}}while(0);c[T>>2]=U;U=a+16|0;T=c[m>>2]|0;do{if((T|0)!=0){y=+O(+(+(T|0)*1.0e5/M+.5));if(y<=2147483647.0&y>=-2147483648.0){V=~~y;break}else{g=1;i=d;return g|0}}else{V=0}}while(0);c[U>>2]=V;V=a+20|0;U=1e5-(c[k>>2]|0)|0;T=c[m>>2]|0;do{if((U|0)!=(T|0)){y=+O(+(+(U-T|0)*1.0e5/M+.5));if(y<=2147483647.0&y>=-2147483648.0){W=~~y;break}else{g=1;i=d;return g|0}}else{W=0}}while(0);c[V>>2]=W;W=a+24|0;V=c[o>>2]|0;T=(v|0)==(Q|0);do{if(!((V|0)==0|T)){M=+O(+(+(N|0)*+(V|0)/1.0e5+.5));if(M<=2147483647.0&M>=-2147483648.0){X=~~M;break}else{g=1;i=d;return g|0}}else{X=0}}while(0);c[W>>2]=X;X=a+28|0;W=c[q>>2]|0;do{if(!((W|0)==0|T)){M=+O(+(+(N|0)*+(W|0)/1.0e5+.5));if(M<=2147483647.0&M>=-2147483648.0){Y=~~M;break}else{g=1;i=d;return g|0}}else{Y=0}}while(0);c[X>>2]=Y;Y=a+32|0;X=1e5-(c[o>>2]|0)|0;W=c[q>>2]|0;do{if(!((X|0)==(W|0)|T)){M=+O(+(+(N|0)*+(X-W|0)/1.0e5+.5));if(M<=2147483647.0&M>=-2147483648.0){Z=~~M;break}else{g=1;i=d;return g|0}}else{Z=0}}while(0);c[Y>>2]=Z;Z=kk(e,a)|0;if((Z|0)!=0){g=Z;i=d;return g|0}Z=c[s>>2]|0;s=c[e+24>>2]|0;if(((((((!((Z|0)<(s+ -5|0)|(Z|0)>(s+5|0))?(s=c[u>>2]|0,u=c[e+28>>2]|0,!((s|0)<(u+ -5|0)|(s|0)>(u+5|0))):0)?(u=c[b>>2]|0,b=c[e>>2]|0,!((u|0)<(b+ -5|0)|(u|0)>(b+5|0))):0)?(b=c[h>>2]|0,h=c[e+4>>2]|0,!((b|0)<(h+ -5|0)|(b|0)>(h+5|0))):0)?(h=c[k>>2]|0,k=c[e+8>>2]|0,!((h|0)<(k+ -5|0)|(h|0)>(k+5|0))):0)?(k=c[m>>2]|0,m=c[e+12>>2]|0,!((k|0)<(m+ -5|0)|(k|0)>(m+5|0))):0)?(m=c[o>>2]|0,o=c[e+16>>2]|0,!((m|0)<(o+ -5|0)|(m|0)>(o+5|0))):0)?(o=c[q>>2]|0,q=c[e+20>>2]|0,(o|0)>=(q+ -5|0)):0){_=(o|0)>(q+5|0)}else{_=1}g=_&1;i=d;return g|0}function Sj(a,d,f){a=a|0;d=d|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0.0;g=i;h=d+74|0;j=b[h>>1]|0;k=j&65535;if((k&32768|0)!=0){l=0;i=g;return l|0}if(f>>>0>3){Tj(a,d,11280,f,11288);l=0;i=g;return l|0}if((k&4|0)!=0?(e[d+72>>1]|0|0)!=(f|0):0){Tj(a,d,11280,f,11320);l=0;i=g;return l|0}if((k&32|0)!=0){pk(a,11352);l=0;i=g;return l|0}if((k&2|0)!=0?(Uj(11392,d+4|0,100)|0)==0:0){wk(a,11424,2);m=b[h>>1]|0}else{m=j}do{if((m&1)==0){n=m}else{j=c[d>>2]|0;if(((j|0)!=0?(o=+O(+(+(j|0)*1.0e5/45455.0+.5)),o<=2147483647.0&o>=-2147483648.0):0)?!((~~o+ -95e3|0)>>>0>1e4):0){n=m;break}wk(a,13168,2);n=b[h>>1]|0}}while(0);b[d+72>>1]=f;f=n&65535;n=d+4|0;c[n+0>>2]=c[11392>>2];c[n+4>>2]=c[11396>>2];c[n+8>>2]=c[11400>>2];c[n+12>>2]=c[11404>>2];c[n+16>>2]=c[11408>>2];c[n+20>>2]=c[11412>>2];c[n+24>>2]=c[11416>>2];c[n+28>>2]=c[11420>>2];n=d+36|0;a=11240|0;m=n+36|0;do{c[n>>2]=c[a>>2];n=n+4|0;a=a+4|0}while((n|0)<(m|0));c[d>>2]=45455;b[h>>1]=f|231;l=1;i=g;return l|0}function Tj(c,d,f,g,h){c=c|0;d=d|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;j=i;i=i+224|0;k=j+24|0;l=j;m=(d|0)!=0;if(m){n=d+74|0;b[n>>1]=e[n>>1]|0|32768}n=mk(k,196,0,13104)|0;d=mk(k,196,mk(k,n+79|0,n,f)|0,13120)|0;f=g>>>24;if((((f|0)==32|(f+ -48|0)>>>0<10|(f+ -65|0)>>>0<26|(f+ -97|0)>>>0<26?(n=g>>>16,o=n&255,(o|0)==32|(o+ -48|0)>>>0<10|(o+ -65|0)>>>0<26|(o+ -97|0)>>>0<26):0)?(p=g>>>8,q=p&255,(q|0)==32|(q+ -48|0)>>>0<10|(q+ -65|0)>>>0<26|(q+ -97|0)>>>0<26):0)?(r=g&255,(r|0)==32|(r+ -48|0)>>>0<10|(r+ -65|0)>>>0<26|(r+ -97|0)>>>0<26):0){a[k+d|0]=39;a[k+(d+1)|0]=(f+ -32|0)>>>0<95?f&255:63;a[k+(d+2)|0]=(o+ -32|0)>>>0<95?n&255:63;a[k+(d+3)|0]=(q+ -32|0)>>>0<95?p&255:63;a[k+(d+4)|0]=(r+ -32|0)>>>0<95?g&255:63;a[k+(d+5)|0]=39;a[k+(d+6)|0]=58;a[k+(d+7)|0]=32;s=d+8|0;mk(k,196,s,h)|0;t=m?2:1;wk(c,k,t);i=j;return}s=mk(k,196,mk(k,196,d,nk(l,l+24|0,3,g)|0)|0,13128)|0;mk(k,196,s,h)|0;t=m?2:1;wk(c,k,t);i=j;return}function Uj(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=i;f=c[a+24>>2]|0;g=c[b+24>>2]|0;if(((((((!((f|0)<(g-d|0)|(f|0)>(g+d|0))?(g=c[a+28>>2]|0,f=c[b+28>>2]|0,!((g|0)<(f-d|0)|(g|0)>(f+d|0))):0)?(f=c[a>>2]|0,g=c[b>>2]|0,!((f|0)<(g-d|0)|(f|0)>(g+d|0))):0)?(g=c[a+4>>2]|0,f=c[b+4>>2]|0,!((g|0)<(f-d|0)|(g|0)>(f+d|0))):0)?(f=c[a+8>>2]|0,g=c[b+8>>2]|0,!((f|0)<(g-d|0)|(f|0)>(g+d|0))):0)?(g=c[a+12>>2]|0,f=c[b+12>>2]|0,!((g|0)<(f-d|0)|(g|0)>(f+d|0))):0)?(f=c[a+16>>2]|0,g=c[b+16>>2]|0,!((f|0)<(g-d|0)|(f|0)>(g+d|0))):0)?(g=c[a+20>>2]|0,a=c[b+20>>2]|0,(g|0)>=(a-d|0)):0){h=(g|0)<=(a+d|0)}else{h=0}i=e;return h&1|0}function Vj(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=i;if(!(d>>>0<132)){if((d&3|0)==0){f=1}else{Tj(a,b,c,d,11472);f=0}}else{Tj(a,b,c,d,11456);f=0}i=e;return f|0}function Wj(a,b,c,e,f,g){a=a|0;b=b|0;c=c|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0;h=i;i=i+224|0;j=h+24|0;k=h;l=(d[f+1|0]|0)<<16|(d[f]|0)<<24|(d[f+2|0]|0)<<8|(d[f+3|0]|0);if((l|0)!=(e|0)){Tj(a,b,c,l,11488);m=0;i=h;return m|0}l=(d[f+129|0]|0)<<16|(d[f+128|0]|0)<<24|(d[f+130|0]|0)<<8|(d[f+131|0]|0);if(!(l>>>0>357913930)?!(((l*12|0)+132|0)>>>0>e>>>0):0){e=(d[f+65|0]|0)<<16|(d[f+64|0]|0)<<24|(d[f+66|0]|0)<<8|(d[f+67|0]|0);if(e>>>0>65534){Tj(a,b,c,e,11544);m=0;i=h;return m|0}if(e>>>0>3){Tj(a,0,c,e,11576)}e=(d[f+37|0]|0)<<16|(d[f+36|0]|0)<<24|(d[f+38|0]|0)<<8|(d[f+39|0]|0);if((e|0)!=1633907568){Tj(a,b,c,e,11608);m=0;i=h;return m|0}if((xm(f+68|0,11632,12)|0)!=0){e=mk(j,196,0,13104)|0;n=mk(j,196,mk(j,e+79|0,e,c)|0,13120)|0;mk(j,196,mk(j,196,mk(j,196,n,nk(k,k+24|0,3,0)|0)|0,13128)|0,11648)|0;wk(a,j,1)}j=(d[f+17|0]|0)<<16|(d[f+16|0]|0)<<24|(d[f+18|0]|0)<<8|(d[f+19|0]|0);if((j|0)==1380401696){if((g&2|0)==0){Tj(a,b,c,1380401696,11680);m=0;i=h;return m|0}}else if((j|0)==1196573017){if((g&2|0)!=0){Tj(a,b,c,1196573017,11728);m=0;i=h;return m|0}}else{Tj(a,b,c,j,11776);m=0;i=h;return m|0}j=(d[f+13|0]|0)<<16|(d[f+12|0]|0)<<24|(d[f+14|0]|0)<<8|(d[f+15|0]|0);if((j|0)==1633842036){Tj(a,b,c,1633842036,11808);m=0;i=h;return m|0}else if((j|0)==1818848875){Tj(a,b,c,1818848875,11848);m=0;i=h;return m|0}else if((j|0)==1852662636){Tj(a,0,c,1852662636,11888)}else if(!((j|0)==1936744803|(j|0)==1886549106|(j|0)==1835955314|(j|0)==1935896178)){Tj(a,0,c,j,11928)}j=(d[f+21|0]|0)<<16|(d[f+20|0]|0)<<24|(d[f+22|0]|0)<<8|(d[f+23|0]|0);if((j|0)==1281450528|(j|0)==1482250784){m=1;i=h;return m|0}Tj(a,b,c,j,11960);m=0;i=h;return m|0}Tj(a,b,c,l,11520);m=0;i=h;return m|0}function Xj(a,b,c,e,f){a=a|0;b=b|0;c=c|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;g=i;h=(d[f+129|0]|0)<<16|(d[f+128|0]|0)<<24|(d[f+130|0]|0)<<8|(d[f+131|0]|0);if((h|0)==0){j=1;i=g;return j|0}k=0;l=f+132|0;while(1){m=(d[l+1|0]|0)<<16|(d[l]|0)<<24|(d[l+2|0]|0)<<8|(d[l+3|0]|0);f=d[l+7|0]|0;n=(d[l+5|0]|0)<<16|(d[l+4|0]|0)<<24|(d[l+6|0]|0)<<8|f;o=(d[l+9|0]|0)<<16|(d[l+8|0]|0)<<24|(d[l+10|0]|0)<<8|(d[l+11|0]|0);if((f&3|0)!=0){Tj(a,0,c,m,11992)}if(n>>>0>e>>>0|o>>>0>(e-n|0)>>>0){break}n=k+1|0;if(n>>>0<h>>>0){k=n;l=l+12|0}else{j=1;p=8;break}}if((p|0)==8){i=g;return j|0}Tj(a,b,c,m,12040);j=0;i=g;return j|0}function Yj(a,b,f,g){a=a|0;b=b|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;h=i;j=(d[f+85|0]|0)<<16|(d[f+84|0]|0)<<24|(d[f+86|0]|0)<<8|(d[f+87|0]|0);k=f+88|0;l=f+89|0;m=f+90|0;n=f+91|0;o=f+92|0;p=f+93|0;q=f+94|0;r=f+95|0;s=f+96|0;t=f+97|0;u=f+98|0;v=f+99|0;w=0;while(1){if((((j|0)==(c[12756+(w<<5)>>2]|0)?((d[l]|0)<<16|(d[k]|0)<<24|(d[m]|0)<<8|(d[n]|0)|0)==(c[12760+(w<<5)>>2]|0):0)?((d[p]|0)<<16|(d[o]|0)<<24|(d[q]|0)<<8|(d[r]|0)|0)==(c[12764+(w<<5)>>2]|0):0)?((d[t]|0)<<16|(d[s]|0)<<24|(d[u]|0)<<8|(d[v]|0)|0)==(c[12768+(w<<5)>>2]|0):0){break}x=w+1|0;if(x>>>0<7){w=x}else{y=19;break}}if((y|0)==19){i=h;return}y=(d[f+1|0]|0)<<16|(d[f]|0)<<24|(d[f+2|0]|0)<<8|(d[f+3|0]|0);if((y|0)==(c[12752+(w<<5)>>2]|0)?(v=f+65|0,u=f+64|0,s=f+66|0,t=f+67|0,((d[u]|0)<<24|(d[v]|0)<<16|(d[s]|0)<<8|(d[t]|0)|0)==(e[12774+(w<<5)>>1]|0|0)):0){if((g|0)==0){z=jm(jm(0,0,0)|0,f,y)|0}else{z=g}if((z|0)==(c[12744+(w<<5)>>2]|0)?(z=km(km(0,0,0)|0,f,y)|0,(z|0)==(c[12748+(w<<5)>>2]|0)):0){if(!((w+ -5|0)>>>0<2)){if(!(w>>>0<4)){wk(a,13e3,0)}}else{wk(a,12968,2)}Sj(a,b,(d[v]|0)<<16|(d[u]|0)<<24|(d[s]|0)<<8|(d[t]|0))|0;i=h;return}}wk(a,13048,0);i=h;return}function Zj(d){d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0.0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;e=i;if((a[d+701|0]|0)!=0){i=e;return}if((b[d+898>>1]&2)==0){i=e;return}f=c[d+864>>2]|0;g=c[d+876>>2]|0;h=c[d+888>>2]|0;j=g+f+h|0;if((f|0)<0|(j|0)<1|(j|0)==0){lk(d,12120)}do{if((f|0)!=0){k=+O(+(+(f|0)*32768.0/+(j|0)+.5));if(k<=2147483647.0&k>=-2147483648.0){l=~~k;break}else{lk(d,12120)}}else{l=0}}while(0);if((g|0)<0|l>>>0>32768){lk(d,12120)}do{if((g|0)!=0){k=+O(+(+(g|0)*32768.0/+(j|0)+.5));if(k<=2147483647.0&k>=-2147483648.0){m=~~k;break}else{lk(d,12120)}}else{m=0}}while(0);if((h|0)<0|m>>>0>32768){lk(d,12120)}if((h|0)!=0){k=+O(+(+(h|0)*32768.0/+(j|0)+.5));if(!(k<=2147483647.0&k>=-2147483648.0)){lk(d,12120)}j=~~k;if(j>>>0<32769){n=j}else{lk(d,12120)}}else{n=0}j=m+l+n|0;if((j|0)>=32770){lk(d,12120)}if((j|0)<=32768){if((j|0)<32768){o=1;p=18}else{q=m;r=l;s=n}}else{o=-1;p=18}do{if((p|0)==18){if(!((m|0)<(l|0)|(m|0)<(n|0))){q=o+m|0;r=l;s=n;break}if((l|0)<(m|0)|(l|0)<(n|0)){q=m;r=l;s=o+n|0;break}else{q=m;r=o+l|0;s=n;break}}}while(0);if((q+r+s|0)!=32768){lk(d,12072)}b[d+702>>1]=r;b[d+704>>1]=q;i=e;return}function _j(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0.0;f=i;do{if((e|0)!=0){if((b|0)==0|(d|0)==0){c[a>>2]=0;g=1;break}h=+O(+(+(b|0)*+(d|0)/+(e|0)+.5));if(h<=2147483647.0&h>=-2147483648.0){c[a>>2]=~~h;g=1}else{g=0}}else{g=0}}while(0);i=f;return g|0}function $j(a,b,d,e,f,g,h,j){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;k=i;if((b|0)==0){ok(a,12160);l=1}else{l=0}if((d|0)==0){ok(a,12192);m=1}else{m=l}if((c[a+748>>2]|0)>>>0<b>>>0){ok(a,12224);n=1}else{n=m}if((c[a+752>>2]|0)>>>0<d>>>0){ok(a,12264);o=1}else{o=n}if((b|0)<0){ok(a,12304);p=1}else{p=o}if((d|0)<0){ok(a,12336);q=1}else{q=p}if((e+ -1|0)>>>0>1&(e|0)!=4&(e|0)!=8&(e|0)!=16){ok(a,12368);r=1}else{r=q}if((f|0)<0|(f|0)==1|(f|0)==5|(f|0)>6){ok(a,12400);s=1}else{s=r}if(!((f|0)==3&(e|0)>8)){if((f|0)==2|(f|0)==4|(f|0)==6?(e|0)<8:0){t=20}else{u=s}}else{t=20}if((t|0)==20){ok(a,12432);u=1}if((g|0)>1){ok(a,12488);v=1}else{v=u}if((h|0)==0){w=v}else{ok(a,12528);w=1}v=a+208|0;if((c[v>>2]&4096|0)!=0?(c[a+708>>2]|0)!=0:0){ok(a,12568)}if((j|0)!=0){if(((c[a+708>>2]&4|0)!=0&(j|0)==64?(j=c[v>>2]|0,(j&4096|0)==0):0)?(f&-5|0)==2:0){x=j;y=w}else{ok(a,12624);x=c[v>>2]|0;y=1}if((x&4096|0)==0){z=y}else{ok(a,12656);lk(a,12688)}}else{z=w}if((z|0)==1){lk(a,12688)}else{i=k;return}}function ak(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;g=i;h=c[e>>2]|0;j=c[f>>2]|0;a:do{if(j>>>0<d>>>0){k=j;l=h;while(1){switch(a[b+k|0]|0){case 101:case 69:{m=32;break};case 48:{m=8;break};case 43:{m=4;break};case 46:{m=16;break};case 57:case 56:case 55:case 54:case 53:case 52:case 51:case 50:case 49:{m=264;break};case 45:{m=132;break};default:{n=k;o=l;break a}}b:do{switch(m&60|l&3|0){case 32:{if((l&8|0)==0){n=k;o=l;break a}p=l&448|2;break};case 6:{if((l&60|0)!=0){n=k;o=l;break a}p=l|4;break};case 8:{if((l&16|0)==0){q=l}else{q=l&448|17}p=m|q|64;break};case 16:{if((l&16|0)!=0){n=k;o=l;break a}if((l&8|0)==0){p=l&448|m|1;break b}else{p=m|l;break b}break};case 10:{p=l|72;break};case 9:{p=l|m|64;break};case 4:{if((l&60|0)!=0){n=k;o=l;break a}p=m|l;break};case 33:{if((l&8|0)==0){n=k;o=l;break a}p=l&448|2;break};default:{n=k;o=l;break a}}}while(0);r=k+1|0;if(r>>>0<d>>>0){k=r;l=p}else{n=r;o=p;break a}}}else{n=j;o=h}}while(0);c[e>>2]=o;c[f>>2]=n;i=g;return o>>>3&1|0}function bk(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=i;i=i+16|0;f=e+4|0;g=e;c[f>>2]=0;c[g>>2]=0;if((ak(b,d,f,g)|0)==0){h=0;i=e;return h|0}j=c[g>>2]|0;if((j|0)!=(d|0)?(a[b+j|0]|0)!=0:0){h=0;i=e;return h|0}h=c[f>>2]|0;i=e;return h|0}function ck(a){a=a|0;var b=0,c=0.0,d=0;b=i;c=+O(+(1.0e10/+(a|0)+.5));if(!(c<=2147483647.0&c>=-2147483648.0)){d=0;i=b;return d|0}d=~~c;i=b;return d|0}function dk(a){a=a|0;return(a+ -95e3|0)>>>0>1e4|0}function ek(a,b){a=a|0;b=b|0;var c=0,d=0.0,e=0;c=i;d=+O(+(1.0e15/+(a|0)/+(b|0)+.5));if(!(d<=2147483647.0&d>=-2147483648.0)){e=0;i=c;return e|0}e=~~d;i=c;return e|0}function fk(a,b){a=a|0;b=b|0;var c=0,d=0;c=i;if((a|0)!=0&a>>>0<255){d=~~+O(+(+R(+(+(a>>>0)/255.0),+(+(b|0)*1.0e-5))*255.0+.5))&255;i=c;return d|0}else{d=a&255;i=c;return d|0}return 0}function gk(b,c,d){b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;e=i;f=(c|0)!=0;if((a[b+436|0]|0)!=8){if(f&c>>>0<65535){g=~~+O(+(+R(+(+(c>>>0)/65535.0),+(+(d|0)*1.0e-5))*65535.0+.5))&65535;i=e;return g|0}else{g=c&65535;i=e;return g|0}}else{if(f&c>>>0<255){h=~~+O(+(+R(+(+(c>>>0)/255.0),+(+(d|0)*1.0e-5))*255.0+.5))&255}else{h=c&255}g=h&255;i=e;return g|0}return 0}function hk(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;b=i;d=a+492|0;Ik(a,c[d>>2]|0);c[d>>2]=0;d=a+496|0;e=c[d>>2]|0;if((e|0)!=0){f=1<<8-(c[a+484>>2]|0);if((f|0)>0){g=e;h=0;while(1){Ik(a,c[g+(h<<2)>>2]|0);j=h+1|0;k=c[d>>2]|0;if((j|0)==(f|0)){l=k;break}else{g=k;h=j}}}else{l=e}Ik(a,l);c[d>>2]=0}d=a+500|0;Ik(a,c[d>>2]|0);c[d>>2]=0;d=a+504|0;Ik(a,c[d>>2]|0);c[d>>2]=0;d=a+508|0;l=c[d>>2]|0;if((l|0)!=0){e=1<<8-(c[a+484>>2]|0);if((e|0)>0){h=l;g=0;while(1){Ik(a,c[h+(g<<2)>>2]|0);f=g+1|0;j=c[d>>2]|0;if((f|0)==(e|0)){m=j;break}else{h=j;g=f}}}else{m=l}Ik(a,m);c[d>>2]=0}d=a+512|0;m=c[d>>2]|0;if((m|0)==0){i=b;return}l=1<<8-(c[a+484>>2]|0);if((l|0)>0){g=m;h=0;while(1){Ik(a,c[g+(h<<2)>>2]|0);e=h+1|0;f=c[d>>2]|0;if((e|0)==(l|0)){n=f;break}else{g=f;h=e}}}else{n=m}Ik(a,n);c[d>>2]=0;i=b;return}function ik(d,e){d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0.0,p=0.0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0;f=i;g=d+492|0;if(!((c[g>>2]|0)==0?(c[d+496>>2]|0)==0:0)){ok(d,12712);hk(d)}if((e|0)>=9){if((a[d+435|0]&2)==0){h=a[d+519|0]|0}else{e=a[d+516|0]|0;j=a[d+517|0]|0;k=(j&255)>(e&255)?j:e;e=a[d+518|0]|0;h=(e&255)>(k&255)?e:k}if(h<<24>>24!=0&(h&255)<16){l=16-(h&255)&255}else{l=0}h=d+216|0;k=c[h>>2]&67109888;e=(k|0)!=0&(l&255)<5?5:l;l=(e&255)>8?8:e&255;c[d+484>>2]=l;e=d+496|0;j=d+488|0;m=c[j>>2]|0;n=(m|0)>0;if((k|0)!=0){if(n){o=+O(+(+(m|0)*+(c[d+824>>2]|0)*1.0e-5+.5));if(o<=2147483647.0&o>=-2147483648.0){p=+(~~o|0)*1.0e-5}else{p=0.0}}else{p=1.0}k=8-l|0;q=1<<k;r=16-l|0;s=Jk(d,q<<2)|0;c[e>>2]=s;t=0;do{c[s+(t<<2)>>2]=Kk(d,512)|0;t=t+1|0}while(t>>>0<q>>>0);t=(1<<r)+ -1|0;r=255>>>l;u=0;v=0;while(1){w=u*257|0;x=w&65535;y=((((aa(~~+O(+(+R(+(+((w+128|0)>>>0)/65535.0),+p)*65535.0+.5))&65535,t)|0)+32768|0)>>>0)/65535|0)+1|0;if(v>>>0<y>>>0){w=v;while(1){b[(c[s+((w&r)<<2)>>2]|0)+(w>>>k<<1)>>1]=x;z=w+1|0;if((z|0)==(y|0)){A=y;break}else{w=z}}}else{A=v}u=u+1|0;if((u|0)==255){break}else{v=A}}v=q<<8;if(A>>>0<v>>>0){q=A;do{b[(c[s+((q&r)<<2)>>2]|0)+(q>>>k<<1)>>1]=-1;q=q+1|0}while((q|0)!=(v|0))}}else{if(n){p=+O(+(1.0e15/+(c[d+824>>2]|0)/+(m|0)+.5));if(p<=2147483647.0&p>=-2147483648.0){B=~~p}else{B=0}}else{B=1e5}jk(d,e,l,B)}if((c[h>>2]&6291584|0)==0){i=f;return}h=d+824|0;p=+O(+(1.0e10/+(c[h>>2]|0)+.5));if(p<=2147483647.0&p>=-2147483648.0){C=~~p}else{C=0}jk(d,d+512|0,l,C);C=d+508|0;B=c[j>>2]|0;if((B|0)>0){p=+O(+(1.0e10/+(B|0)+.5));if(p<=2147483647.0&p>=-2147483648.0){D=~~p}else{D=0}}else{D=c[h>>2]|0}jk(d,C,l,D);i=f;return}D=d+488|0;l=c[D>>2]|0;if((l|0)>0){p=+O(+(1.0e15/+(c[d+824>>2]|0)/+(l|0)+.5));if(p<=2147483647.0&p>=-2147483648.0){E=~~p}else{E=0}}else{E=1e5}l=Kk(d,256)|0;c[g>>2]=l;if((E+ -95e3|0)>>>0>1e4){p=+(E|0)*1.0e-5;E=0;do{if((E|0)!=0&E>>>0<255){F=~~+O(+(+R(+(+(E>>>0)/255.0),+p)*255.0+.5))&255}else{F=E&255}a[l+E|0]=F;E=E+1|0}while((E|0)!=256)}else{E=0;do{a[l+E|0]=E;E=E+1|0}while((E|0)!=256)}if((c[d+216>>2]&6291584|0)==0){i=f;return}E=d+824|0;p=+O(+(1.0e10/+(c[E>>2]|0)+.5));if(p<=2147483647.0&p>=-2147483648.0){G=~~p}else{G=0}l=Kk(d,256)|0;c[d+504>>2]=l;if((G+ -95e3|0)>>>0>1e4){p=+(G|0)*1.0e-5;G=0;do{if((G|0)!=0&G>>>0<255){H=~~+O(+(+R(+(+(G>>>0)/255.0),+p)*255.0+.5))&255}else{H=G&255}a[l+G|0]=H;G=G+1|0}while((G|0)!=256)}else{G=0;do{a[l+G|0]=G;G=G+1|0}while((G|0)!=256)}G=d+500|0;l=c[D>>2]|0;if((l|0)>0){p=+O(+(1.0e10/+(l|0)+.5));if(p<=2147483647.0&p>=-2147483648.0){I=~~p}else{I=0}}else{I=c[E>>2]|0}E=Kk(d,256)|0;c[G>>2]=E;if(!((I+ -95e3|0)>>>0>1e4)){G=0;do{a[E+G|0]=G;G=G+1|0}while((G|0)!=256);i=f;return}p=+(I|0)*1.0e-5;I=0;do{if((I|0)!=0&I>>>0<255){J=~~+O(+(+R(+(+(I>>>0)/255.0),+p)*255.0+.5))&255}else{J=I&255}a[E+I|0]=J;I=I+1|0}while((I|0)!=256);i=f;return}function jk(a,d,e,f){a=a|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0.0,o=0.0,p=0,q=0;g=i;h=8-e|0;j=1<<h;k=(1<<16-e)+ -1|0;l=1<<15-e;m=Jk(a,j<<2)|0;c[d>>2]=m;d=(e|0)==0;n=+(k>>>0);o=+(f|0)*1.0e-5;if((f+ -95e3|0)>>>0>1e4){f=0;do{e=Kk(a,512)|0;c[m+(f<<2)>>2]=e;p=0;do{b[e+(p<<1)>>1]=~~+O(+(+R(+(+(((p<<h)+f|0)>>>0)/n),+o)*65535.0+.5));p=p+1|0}while((p|0)!=256);f=f+1|0}while(f>>>0<j>>>0);i=g;return}else{q=0}do{f=Kk(a,512)|0;c[m+(q<<2)>>2]=f;if(d){p=0;do{b[f+(p<<1)>>1]=(p<<h)+q;p=p+1|0}while((p|0)!=256)}else{p=0;do{b[f+(p<<1)>>1]=(((((p<<h)+q|0)*65535|0)+l|0)>>>0)/(k>>>0)|0;p=p+1|0}while((p|0)!=256)}q=q+1|0}while(q>>>0<j>>>0);i=g;return}function kk(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0.0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;d=i;e=c[b>>2]|0;f=b+4|0;g=(c[f>>2]|0)+e+(c[b+8>>2]|0)|0;if((g|0)==0){h=1;i=d;return h|0}do{if((e|0)!=0){j=+O(+(+(e|0)*1.0e5/+(g|0)+.5));if(j<=2147483647.0&j>=-2147483648.0){k=~~j;break}else{h=1;i=d;return h|0}}else{k=0}}while(0);c[a>>2]=k;k=a+4|0;e=c[f>>2]|0;do{if((e|0)!=0){j=+O(+(+(e|0)*1.0e5/+(g|0)+.5));if(j<=2147483647.0&j>=-2147483648.0){l=~~j;break}else{h=1;i=d;return h|0}}else{l=0}}while(0);c[k>>2]=l;l=c[b>>2]|0;k=c[f>>2]|0;f=b+12|0;e=c[f>>2]|0;m=b+16|0;n=(c[m>>2]|0)+e+(c[b+20>>2]|0)|0;o=a+8|0;if((n|0)==0){h=1;i=d;return h|0}do{if((e|0)!=0){j=+O(+(+(e|0)*1.0e5/+(n|0)+.5));if(j<=2147483647.0&j>=-2147483648.0){p=~~j;break}else{h=1;i=d;return h|0}}else{p=0}}while(0);c[o>>2]=p;p=a+12|0;o=c[m>>2]|0;do{if((o|0)!=0){j=+O(+(+(o|0)*1.0e5/+(n|0)+.5));if(j<=2147483647.0&j>=-2147483648.0){q=~~j;break}else{h=1;i=d;return h|0}}else{q=0}}while(0);c[p>>2]=q;q=n+g|0;g=(c[f>>2]|0)+l|0;l=(c[m>>2]|0)+k|0;k=b+24|0;m=c[k>>2]|0;f=b+28|0;n=(c[f>>2]|0)+m+(c[b+32>>2]|0)|0;b=a+16|0;if((n|0)==0){h=1;i=d;return h|0}do{if((m|0)!=0){j=+O(+(+(m|0)*1.0e5/+(n|0)+.5));if(j<=2147483647.0&j>=-2147483648.0){r=~~j;break}else{h=1;i=d;return h|0}}else{r=0}}while(0);c[b>>2]=r;r=a+20|0;b=c[f>>2]|0;do{if((b|0)!=0){j=+O(+(+(b|0)*1.0e5/+(n|0)+.5));if(j<=2147483647.0&j>=-2147483648.0){s=~~j;break}else{h=1;i=d;return h|0}}else{s=0}}while(0);c[r>>2]=s;s=q+n|0;n=g+(c[k>>2]|0)|0;k=c[f>>2]|0;f=a+24|0;if((s|0)==0){h=1;i=d;return h|0}do{if((n|0)!=0){j=+O(+(+(n|0)*1.0e5/+(s|0)+.5));if(j<=2147483647.0&j>=-2147483648.0){t=~~j;break}else{h=1;i=d;return h|0}}else{t=0}}while(0);c[f>>2]=t;t=l+k|0;k=a+28|0;if((t|0)==0){c[k>>2]=0;h=0;i=d;return h|0}j=+O(+(+(t|0)*1.0e5/+(s|0)+.5));if(!(j<=2147483647.0&j>=-2147483648.0)){h=1;i=d;return h|0}c[k>>2]=~~j;h=0;i=d;return h|0}function lk(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;i=i+16|0;e=d;if((a|0)!=0?(d=c[a+168>>2]|0,(d|0)!=0):0){Qc[d&31](a,b)}d=c[o>>2]|0;c[e>>2]=(b|0)!=0?b:13392;kc(d|0,13368,e|0)|0;Ac(10,d|0)|0;zk(a,1)}function mk(b,c,d,e){b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;f=i;if(!((b|0)!=0&d>>>0<c>>>0)){g=d;i=f;return g|0}if((e|0)!=0?(h=c+ -1|0,c=a[e]|0,c<<24>>24!=0&h>>>0>d>>>0):0){j=d;k=e;e=c;while(1){c=k+1|0;l=j+1|0;a[b+j|0]=e;m=a[c]|0;if(m<<24>>24!=0&l>>>0<h>>>0){j=l;k=c;e=m}else{n=l;break}}}else{n=d}a[b+n|0]=0;g=n;i=f;return g|0}function nk(b,c,d,e){b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;f=i;g=c+ -1|0;a[g]=0;if(!(g>>>0>b>>>0)){h=g;i=f;return h|0}if((d|0)==5){c=g;j=e;k=0;l=1;m=0;while(1){if(!((j|0)!=0|(k|0)<(l|0))){h=c;n=20;break}o=(j>>>0)%10|0;if((m|o|0)==0){p=c;q=0}else{r=c+ -1|0;a[r]=a[13248+o|0]|0;p=r;q=1}r=(j>>>0)/10|0;o=k+1|0;do{if((o|0)==5&p>>>0>b>>>0){if((q|0)!=0){s=p+ -1|0;a[s]=46;t=r;u=s;v=q;break}if(j>>>0<10){s=p+ -1|0;a[s]=48;t=0;u=s;v=0}else{t=r;u=p;v=0}}else{t=r;u=p;v=q}}while(0);if(u>>>0>b>>>0){c=u;j=t;k=o;l=5;m=v}else{h=u;n=20;break}}if((n|0)==20){i=f;return h|0}}else if((d|0)==2){u=g;v=e;m=0;l=1;while(1){if(!((v|0)!=0|(m|0)<(l|0))){h=u;n=20;break}k=u+ -1|0;a[k]=a[13248+((v>>>0)%10|0)|0]|0;if(k>>>0>b>>>0){u=k;v=(v>>>0)/10|0;m=m+1|0;l=2}else{h=k;n=20;break}}if((n|0)==20){i=f;return h|0}}else{l=g;g=e;e=0;m=1;while(1){if(!((g|0)!=0|(e|0)<(m|0))){h=l;n=20;break}if((d|0)==4){w=2;n=18}else if((d|0)==3){w=m;n=18}else if((d|0)==1){v=l+ -1|0;a[v]=a[13248+((g>>>0)%10|0)|0]|0;x=(g>>>0)/10|0;y=v;z=m}else{x=0;y=l;z=m}if((n|0)==18){n=0;v=l+ -1|0;a[v]=a[13248+(g&15)|0]|0;x=g>>>4;y=v;z=w}if(y>>>0>b>>>0){l=y;g=x;e=e+1|0;m=z}else{h=y;n=20;break}}if((n|0)==20){i=f;return h|0}}return 0}function ok(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;e=i;i=i+16|0;f=e;if((b|0)!=0){a:do{if((a[d]|0)==35){g=1;while(1){h=g+1|0;if((a[d+g|0]|0)==32){j=g;break a}if((h|0)<15){g=h}else{j=h;break}}}else{j=0}}while(0);g=c[b+172>>2]|0;if((g|0)==0){k=j}else{Qc[g&31](b,d+j|0);i=e;return}}else{k=0}j=c[o>>2]|0;c[f>>2]=d+k;kc(j|0,13344,f|0)|0;Ac(10,j|0)|0;i=e;return}function pk(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;e=i;i=i+16|0;f=e;g=(c[b+208>>2]&32768|0)!=0;if((c[b+212>>2]&1048576|0)==0){if(!g){lk(b,d)}if((c[b+376>>2]|0)==0){lk(b,d)}else{rk(b,d)}}if(g?(c[b+376>>2]|0)!=0:0){qk(b,d);i=e;return}if((b|0)!=0){a:do{if((a[d]|0)==35){g=1;while(1){h=g+1|0;if((a[d+g|0]|0)==32){j=g;break a}if((h|0)<15){g=h}else{j=h;break}}}else{j=0}}while(0);g=c[b+172>>2]|0;if((g|0)==0){k=j}else{Qc[g&31](b,d+j|0);i=e;return}}else{k=0}j=c[o>>2]|0;c[f>>2]=d+k;kc(j|0,13344,f|0)|0;Ac(10,j|0)|0;i=e;return}function qk(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=i;i=i+224|0;f=e;g=e+4|0;if((b|0)==0){h=c[o>>2]|0;c[f>>2]=d;kc(h|0,13344,f|0)|0;Ac(10,h|0)|0;i=e;return}uk(c[b+376>>2]|0,g,d);a:do{if((a[g]|0)==35){d=1;while(1){h=d+1|0;if((a[g+d|0]|0)==32){j=d;break a}if((h|0)<15){d=h}else{j=h;break}}}else{j=0}}while(0);d=c[b+172>>2]|0;h=g+j|0;if((d|0)==0){j=c[o>>2]|0;c[f>>2]=h;kc(j|0,13344,f|0)|0;Ac(10,j|0)|0;i=e;return}else{Qc[d&31](b,h);i=e;return}}function rk(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;i=i+224|0;e=d;if((a|0)==0){lk(0,b)}else{uk(c[a+376>>2]|0,e,b);lk(a,e)}}function sk(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=i;i=i+16|0;f=e;if((c[b+212>>2]&2097152|0)==0){lk(b,d)}a:do{if((a[d]|0)==35){g=1;while(1){h=g+1|0;if((a[d+g|0]|0)==32){j=g;break a}if((h|0)<15){g=h}else{j=h;break}}}else{j=0}}while(0);g=c[b+172>>2]|0;h=d+j|0;if((g|0)==0){j=c[o>>2]|0;c[f>>2]=h;kc(j|0,13344,f|0)|0;Ac(10,j|0)|0;i=e;return}else{Qc[g&31](b,h);i=e;return}}function tk(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=i;i=i+16|0;f=e;if((c[b+212>>2]&4194304|0)==0){lk(b,d)}a:do{if((a[d]|0)==35){g=1;while(1){h=g+1|0;if((a[d+g|0]|0)==32){j=g;break a}if((h|0)<15){g=h}else{j=h;break}}}else{j=0}}while(0);g=c[b+172>>2]|0;h=d+j|0;if((g|0)==0){j=c[o>>2]|0;c[f>>2]=h;kc(j|0,13344,f|0)|0;Ac(10,j|0)|0;i=e;return}else{Qc[g&31](b,h);i=e;return}}function uk(b,c,d){b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;e=i;f=b>>>24;if((f+ -65|0)>>>0>57|(f+ -91|0)>>>0<6){a[c]=91;a[c+1|0]=a[13408+(b>>>28)|0]|0;a[c+2|0]=a[13408+(f&15)|0]|0;a[c+3|0]=93;g=4}else{a[c]=f;g=1}f=b>>>16;h=f&255;if((h+ -65|0)>>>0>57|(h+ -91|0)>>>0<6){a[c+g|0]=91;a[c+(g+1)|0]=a[13408+(b>>>20&15)|0]|0;a[c+(g|2)|0]=a[13408+(f&15)|0]|0;a[c+(g+3)|0]=93;j=g+4|0}else{a[c+g|0]=f;j=g+1|0}g=b>>>8;f=g&255;if((f+ -65|0)>>>0>57|(f+ -91|0)>>>0<6){a[c+j|0]=91;a[c+(j+1)|0]=a[13408+(b>>>12&15)|0]|0;a[c+(j+2)|0]=a[13408+(g&15)|0]|0;a[c+(j+3)|0]=93;k=j+4|0}else{a[c+j|0]=g;k=j+1|0}j=b&255;if((j+ -65|0)>>>0>57|(j+ -91|0)>>>0<6){a[c+k|0]=91;a[c+(k+1)|0]=a[13408+(b>>>4&15)|0]|0;a[c+(k+2)|0]=a[13408+(b&15)|0]|0;a[c+(k+3)|0]=93;l=k+4|0}else{a[c+k|0]=b;l=k+1|0}if((d|0)==0){a[c+l|0]=0;i=e;return}a[c+l|0]=58;a[c+(l+1)|0]=32;k=0;b=l+2|0;while(1){l=a[d+k|0]|0;if(l<<24>>24==0){m=b;break}j=k+1|0;g=b+1|0;a[c+b|0]=l;if((j|0)<195){k=j;b=g}else{m=g;break}}a[c+m|0]=0;i=e;return}function vk(a,b){a=a|0;b=b|0;var d=0;d=i;if((c[a+212>>2]&1048576|0)==0){rk(a,b)}else{qk(a,b);i=d;return}}function wk(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0;f=i;i=i+16|0;g=f;if((c[b+208>>2]&32768|0)!=0){if((e|0)<2){qk(b,d);i=f;return}if((c[b+212>>2]&1048576|0)==0){rk(b,d)}qk(b,d);i=f;return}h=c[b+212>>2]|0;if((e|0)<1){if((h&2097152|0)==0){lk(b,d)}a:do{if((a[d]|0)==35){e=1;while(1){j=e+1|0;if((a[d+e|0]|0)==32){k=e;break a}if((j|0)<15){e=j}else{k=j;break}}}else{k=0}}while(0);e=c[b+172>>2]|0;j=d+k|0;if((e|0)==0){k=c[o>>2]|0;c[g>>2]=j;kc(k|0,13344,g|0)|0;Ac(10,k|0)|0;i=f;return}else{Qc[e&31](b,j);i=f;return}}else{if((h&4194304|0)==0){lk(b,d)}b:do{if((a[d]|0)==35){h=1;while(1){j=h+1|0;if((a[d+h|0]|0)==32){l=h;break b}if((j|0)<15){h=j}else{l=j;break}}}else{l=0}}while(0);h=c[b+172>>2]|0;j=d+l|0;if((h|0)==0){l=c[o>>2]|0;c[g>>2]=j;kc(l|0,13344,g|0)|0;Ac(10,l|0)|0;i=f;return}else{Qc[h&31](b,j);i=f;return}}}function xk(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,p=0;e=i;i=i+16|0;f=e;if((a|0)==0){g=0;i=e;return g|0}h=a+160|0;j=c[h>>2]|0;k=a+164|0;do{if((j|0)==0){c[k>>2]=0;if(d>>>0<157){c[h>>2]=a;l=a;break}m=Ok(a,d)|0;c[h>>2]=m;if((m|0)==0){g=0;i=e;return g|0}else{c[k>>2]=d;l=m;break}}else{m=c[k>>2]|0;if((m|0)==0){if((j|0)==(a|0)){n=156}else{lk(a,13272)}}else{n=m}if((n|0)!=(d|0)){m=c[a+172>>2]|0;if((m|0)==0){p=c[o>>2]|0;c[f>>2]=13304;kc(p|0,13344,f|0)|0;Ac(10,p|0)|0;g=0;i=e;return g|0}else{Qc[m&31](a,13304);g=0;i=e;return g|0}}else{l=j}}}while(0);c[a+156>>2]=b;g=l;i=e;return g|0}function yk(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;b=i;i=i+160|0;d=i;i=i+168|0;c[d>>2]=0;e=b;if((a|0)==0){i=b;return}f=a+160|0;g=c[f>>2]|0;h=a+164|0;a:do{if((g|0)!=0?!((c[h>>2]|0)==0|(g|0)==(a|0)):0){Dm(e,1,d|0)|0;p=0;j=p;p=0;if((j|0)!=0&(q|0)!=0){k=Em(c[j>>2]|0,d)|0;if((k|0)==0){Ba(j|0,q|0)}E=q}else{k=-1}if((k|0)==1){l=E}else{l=0}while(1){if((l|0)!=0){break a}c[f>>2]=e;c[h>>2]=0;c[a+156>>2]=6;p=0;na(21,a|0,g|0);j=p;p=0;if((j|0)!=0&(q|0)!=0){m=Em(c[j>>2]|0,d)|0;if((m|0)==0){Ba(j|0,q|0)}E=q}else{m=-1}if((m|0)==1){l=E}else{break}}}}while(0);c[h>>2]=0;c[f>>2]=0;c[a+156>>2]=0;i=b;return}function zk(a,b){a=a|0;b=b|0;var d=0,e=0;if(((a|0)!=0?(d=c[a+156>>2]|0,(d|0)!=0):0)?(e=c[a+160>>2]|0,(e|0)!=0):0){Qc[d&31](e,b)}dc()}function Ak(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;if((a|0)==0){i=f;return}c[a+176>>2]=b;c[a+168>>2]=d;c[a+172>>2]=e;i=f;return}function Bk(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;if((a|0)==0|(b|0)==0){f=0;i=e;return f|0}f=c[b+8>>2]&d;i=e;return f|0}function Ck(a,b){a=a|0;b=b|0;var d=0;if((a|0)==0|(b|0)==0){d=0}else{d=c[b>>2]|0}return d|0}function Dk(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;if((a|0)==0|(b|0)==0){e=0;i=d;return e|0}e=c[b+4>>2]|0;i=d;return e|0}function Ek(b,c){b=b|0;c=c|0;var d=0;if((b|0)==0|(c|0)==0){d=0}else{d=a[c+24|0]|0}return d|0}function Fk(b,c){b=b|0;c=c|0;var d=0;if((b|0)==0|(c|0)==0){d=0}else{d=a[c+25|0]|0}return d|0}function Gk(b,c){b=b|0;c=c|0;var d=0;if((b|0)==0|(c|0)==0){d=0}else{d=a[c+29|0]|0}return d|0}function Hk(a){a=a|0;var b=0,d=0,e=0;b=i;i=i+912|0;d=b;if((a|0)==0){i=b;return}Fm(d|0,a|0,900)|0;Gm(a|0,0,900)|0;e=c[d+724>>2]|0;if((e|0)==0){vm(a)}else{Qc[e&31](d,a)}yk(d);i=b;return}function Ik(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;if((a|0)==0|(b|0)==0){i=d;return}e=c[a+724>>2]|0;if((e|0)==0){vm(b);i=d;return}else{Qc[e&31](a,b);i=d;return}}function Jk(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;if((a|0)==0){e=0;i=d;return e|0}if((b|0)==0){lk(a,13488)}f=c[a+720>>2]|0;if((f|0)==0){g=um(b)|0}else{g=Wc[f&31](a,b)|0}if((g|0)==0){lk(a,13488)}Gm(g|0,0,b|0)|0;e=g;i=d;return e|0}function Kk(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;if((a|0)==0){e=0;i=d;return e|0}if((b|0)==0){lk(a,13488)}f=c[a+720>>2]|0;if((f|0)==0){g=um(b)|0}else{g=Wc[f&31](a,b)|0}if((g|0)==0){lk(a,13488)}else{e=g;i=d;return e|0}return 0}function Lk(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=i;do{if((b|0)==0){e=0}else{if((a|0)!=0?(f=c[a+720>>2]|0,(f|0)!=0):0){e=Wc[f&31](a,b)|0;break}e=um(b)|0}}while(0);i=d;return e|0}function Mk(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=i;if((b|0)<1|(d|0)==0){lk(a,13424)}do{if(!((4294967295/(d>>>0)|0)>>>0<b>>>0)?(f=aa(d,b)|0,(f|0)!=0):0){if((a|0)!=0?(g=c[a+720>>2]|0,(g|0)!=0):0){h=Wc[g&31](a,f)|0;break}h=um(f)|0}else{h=0}}while(0);i=e;return h|0}function Nk(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0;g=i;if((e|0)<1|(f|0)==0|(d|0)<0){lk(a,13456)}h=(d|0)>0;if((b|0)==0&h){lk(a,13456)}if((2147483647-d|0)<(e|0)){j=0;i=g;return j|0}k=e+d|0;if((4294967295/(f>>>0)|0)>>>0<k>>>0){j=0;i=g;return j|0}l=aa(k,f)|0;if((l|0)==0){j=0;i=g;return j|0}if((a|0)!=0?(k=c[a+720>>2]|0,(k|0)!=0):0){m=Wc[k&31](a,l)|0}else{m=um(l)|0}if((m|0)==0){j=0;i=g;return j|0}l=aa(f,d)|0;if(h){Fm(m|0,b|0,l|0)|0}Gm(m+l|0,0,aa(f,e)|0)|0;j=m;i=g;return j|0}function Ok(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;do{if((a|0)==0){e=0}else{if((b|0)!=0){f=c[a+720>>2]|0;if((f|0)==0){g=um(b)|0}else{g=Wc[f&31](a,b)|0}if((g|0)!=0){e=g;break}}ok(a,13488);e=0}}while(0);i=d;return e|0}function Pk(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;if((a|0)==0){i=f;return}c[a+716>>2]=b;c[a+720>>2]=d;c[a+724>>2]=e;i=f;return}function Qk(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=i;g=Gj(a,b,d,e,0,0,0)|0;if((g|0)==0){i=f;return g|0}c[g+208>>2]=32768;c[g+796>>2]=8192;e=g+212|0;c[e>>2]=c[e>>2]|3145728;Wk(g,0,0);i=f;return g|0}function Rk(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;e=i;if((b|0)==0|(d|0)==0){i=e;return}dl(b,d);f=b+376|0;g=b+208|0;h=b+435|0;while(1){j=el(b)|0;k=c[f>>2]|0;l=(k|0)==1229209940;m=c[g>>2]|0;if(!l){if((m&4|0)!=0){c[g>>2]=m|8}}else{if((m&1|0)==0){n=5;break}if((a[h]|0)==3?(m&2|0)==0:0){n=8;break}if((m&8|0)==0){o=m}else{vk(b,13568);o=c[g>>2]|0}c[g>>2]=o|4}if((k|0)==1229472850){gl(b,d,j);continue}else if((k|0)!=1229278788){m=Lj(b,k)|0;if((m|0)!=0){Dl(b,d,j,m);if((k|0)!=1347179589){if(l){n=21;break}else{continue}}else{c[g>>2]=c[g>>2]|2;continue}}if((k|0)==1347179589){hl(b,d,j);continue}if(l){n=25;break}if((k|0)==1866876531){vl(b,d,j);continue}else if((k|0)==1767135348){Cl(b,d,j);continue}else if((k|0)==1732332865){jl(b,d,j);continue}else if((k|0)==1749635924){tl(b,d,j);continue}else if((k|0)==1933723988){kl(b,d,j);continue}else if((k|0)==1665684045){ll(b,d,j);continue}else if((k|0)==1934772034){ml(b,d,j);continue}else if((k|0)==1883455820){wl(b,d,j);continue}else if((k|0)==1934642260){ql(b,d,j);continue}else if((k|0)==1649100612){sl(b,d,j);continue}else if((k|0)==1950701684){zl(b,d,j);continue}else if((k|0)==1950960965){yl(b,d,j);continue}else if((k|0)==2052348020){Al(b,d,j);continue}else if((k|0)==1933787468){xl(b,d,j);continue}else if((k|0)==1951551059){rl(b,d,j);continue}else if((k|0)==1883789683){ul(b,d,j);continue}else if((k|0)==1766015824){nl(b,d,j);continue}else{Dl(b,d,j,0);continue}}else{il(b,d,j);continue}}if((n|0)==5){rk(b,13504)}else if((n|0)==8){rk(b,13536)}else if((n|0)==21){c[b+408>>2]=0;i=e;return}else if((n|0)==25){c[b+408>>2]=j;i=e;return}}function Sk(e,f,g){e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0;h=i;i=i+16|0;j=h;if((e|0)==0){i=h;return}if((c[e+212>>2]&64|0)==0){Kl(e)}k=c[e+368>>2]|0;c[j>>2]=k;l=j+8|0;a[l]=a[e+435|0]|0;a[j+9|0]=a[e+436|0]|0;a[j+10|0]=a[e+439|0]|0;m=a[e+438|0]|0;n=j+11|0;a[n]=m;o=m&255;if((m&255)>7){p=aa(o>>>3,k)|0}else{p=((aa(k,o)|0)+7|0)>>>3}o=j+4|0;c[o>>2]=p;k=e+372|0;m=c[k>>2]|0;q=e+432|0;a:do{if((a[q]|0)!=0?(c[e+216>>2]&2|0)!=0:0){switch(d[e+433|0]|0){case 4:{if((m&3|0)==2){break a}if((g|0)!=0?(m&2|0)!=0:0){Fl(e,g,1)}Jl(e);i=h;return};case 2:{if((m&7|0)==4){break a}if((g|0)!=0?(m&4|0)!=0:0){Fl(e,g,1)}Jl(e);i=h;return};case 1:{if((m&7|0)==0?!((c[e+348>>2]|0)>>>0<5):0){break a}if((g|0)!=0){Fl(e,g,1)}Jl(e);i=h;return};case 3:{if((m&3|0)==0?!((c[e+348>>2]|0)>>>0<3):0){break a}if((g|0)!=0){Fl(e,g,1)}Jl(e);i=h;return};case 0:{if((m&7|0)==0){break a}if((g|0)!=0){Fl(e,g,1)}Jl(e);i=h;return};case 5:{if((m&1|0)==0?!((c[e+348>>2]|0)>>>0<2):0){break a}if((g|0)!=0){Fl(e,g,1)}Jl(e);i=h;return};default:{if((m&1|0)!=0){break a}Jl(e);i=h;return}}}}while(0);if((c[e+208>>2]&4|0)==0){lk(e,13592)}m=e+384|0;Il(e,c[m>>2]|0,p+1|0);p=c[m>>2]|0;r=a[p]|0;s=r&255;do{if(!(r<<24>>24==0)){if((r&255)<5){t=e+380|0;Hl(e,j,p+1|0,(c[t>>2]|0)+1|0,s);u=t;v=c[m>>2]|0;break}else{lk(e,13632)}}else{u=e+380|0;v=p}}while(0);Fm(c[u>>2]|0,v|0,(c[o>>2]|0)+1|0)|0;do{if(((c[e+708>>2]&4|0)!=0?(a[e+712|0]|0)==64:0)?(o=(c[m>>2]|0)+1|0,v=c[j>>2]|0,u=b[l>>1]|0,p=u&255,!((p&2)==0)):0){s=(u&65535)>>>8&255;if(s<<24>>24==8){if(p<<24>>24==6){w=4}else if(p<<24>>24==2){w=3}else{break}if((v|0)==0){break}else{x=0;y=o}while(1){u=d[y+1|0]|0;a[y]=u+(d[y]|0);r=y+2|0;a[r]=(d[r]|0)+u;x=x+1|0;if((x|0)==(v|0)){break}else{y=y+w|0}}}else if(s<<24>>24==16){if(p<<24>>24==6){z=8}else if(p<<24>>24==2){z=6}else{break}if((v|0)==0){break}else{A=0;B=o}while(1){u=B+1|0;r=d[B+2|0]<<8|d[B+3|0];t=B+4|0;C=B+5|0;D=r+(d[B]<<8|d[u])|0;E=(d[t]<<8|d[C])+r|0;a[B]=D>>>8;a[u]=D;a[t]=E>>>8;a[C]=E;A=A+1|0;if((A|0)==(v|0)){break}else{B=B+z|0}}}else{break}}}while(0);z=e+216|0;if((c[z>>2]|0)!=0){al(e,j)}B=e+443|0;A=a[B]|0;w=a[n]|0;if(A<<24>>24==0){a[B]=w;if((w&255)>(d[e+442|0]|0)){lk(e,13664)}}else{if(!(A<<24>>24==w<<24>>24)){lk(e,13688)}}if((a[q]|0)!=0?(q=c[z>>2]|0,(q&2|0)!=0):0){z=a[e+433|0]|0;if((z&255)<6){Gl(j,(c[m>>2]|0)+1|0,z&255,q)}if((g|0)!=0){Fl(e,g,1)}if((f|0)!=0){Fl(e,f,0)}}else{if((f|0)!=0){Fl(e,f,-1)}if((g|0)!=0){Fl(e,g,-1)}}Jl(e);g=c[e+544>>2]|0;if((g|0)==0){i=h;return}Tc[g&15](e,c[k>>2]|0,d[e+433|0]|0);i=h;return}function Tk(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=i;if((a|0)==0){i=e;return}f=c[a>>2]|0;if((f|0)==0){i=e;return}Ij(f,d);Ij(f,b);c[a>>2]=0;hk(f);Ik(f,c[f+728>>2]|0);Ik(f,c[f+804>>2]|0);Ik(f,c[f+788>>2]|0);Ik(f,c[f+612>>2]|0);Ik(f,c[f+616>>2]|0);a=f+676|0;b=c[a>>2]|0;if((b&4096|0)==0){g=b}else{Cj(f,c[f+416>>2]|0);g=c[a>>2]|0}b=g&-4097;c[a>>2]=b;if((g&8192|0)==0){h=b}else{Ik(f,c[f+528>>2]|0);h=c[a>>2]|0}c[a>>2]=h&-8193;pm(f+224|0)|0;Ik(f,c[f+568>>2]|0);Ik(f,c[f+772>>2]|0);Ik(f,c[f+696>>2]|0);Hk(f);i=e;return}function Uk(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;f=c[a+184>>2]|0;if((f|0)==0){lk(a,13736)}else{Tc[f&15](a,b,d);i=e;return}}function Vk(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;if((a|0)==0){i=e;return}if((xa(b|0,1,d|0,c[a+188>>2]|0)|0)==(d|0)){i=e;return}else{lk(a,13768)}}function Wk(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;if((a|0)==0){i=e;return}c[a+188>>2]=b;if((d|0)==0){f=6}else{f=d}c[a+184>>2]=f;f=a+180|0;if((c[f>>2]|0)!=0){c[f>>2]=0;ok(a,13784)}c[a+472>>2]=0;i=e;return}function Xk(a){a=a|0;var b=0,d=0,e=0;b=i;if((a|0)==0){i=b;return}d=a+212|0;e=c[d>>2]|0;if((e&64|0)==0){c[d>>2]=e|16384;e=a+216|0;c[e>>2]=c[e>>2]|1024;i=b;return}else{tk(a,14104);i=b;return}}function Yk(a){a=a|0;var b=0,d=0,e=0;b=i;if((a|0)==0){i=b;return}d=a+212|0;e=c[d>>2]|0;if((e&64|0)==0){c[d>>2]=e|16384;e=a+216|0;c[e>>2]=c[e>>2]|33558528;i=b;return}else{tk(a,14104);i=b;return}}function Zk(a){a=a|0;var b=0,d=0,e=0;b=i;if((a|0)==0){i=b;return}d=a+212|0;e=c[d>>2]|0;if((e&64|0)==0){c[d>>2]=e|16384;e=a+216|0;c[e>>2]=c[e>>2]|33558528;i=b;return}else{tk(a,14104);i=b;return}}function _k(a){a=a|0;var b=0,d=0,e=0;b=i;if((a|0)==0){i=b;return}d=a+212|0;e=c[d>>2]|0;if((e&64|0)==0){c[d>>2]=e|16384;c[a+216>>2]=c[a+216>>2]|20480;i=b;return}else{tk(a,14104);i=b;return}}function $k(f){f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0;g=i;i=i+16|0;h=g;j=f+824|0;k=c[j>>2]|0;l=f+488|0;m=c[l>>2]|0;n=(m|0)!=0;do{if((k|0)==0){if(n){c[j>>2]=ck(m)|0;o=0;break}else{c[j>>2]=1e5;c[l>>2]=1e5;o=0;break}}else{if(!n){c[l>>2]=ck(k)|0;o=0;break}if((_j(h,k,m,1e5)|0)==0){o=1}else{o=(dk(c[h>>2]|0)|0)!=0}}}while(0);h=f+898|0;b[h>>1]=e[h>>1]|1;h=f+216|0;m=c[h>>2]|0;k=o?m|8192:m&-8193;c[h>>2]=k;if((k&262272|0)==262144){c[h>>2]=k&-41943297;k=f+212|0;c[k>>2]=c[k>>2]&-8193;b[f+428>>1]=0}k=(dk(c[l>>2]|0)|0)==0;m=c[h>>2]|0;if(k){k=m&-8388609;c[h>>2]=k;o=f+212|0;c[o>>2]=c[o>>2]&-8193;p=k}else{p=m}if((p&6291456|0)==0){q=p}else{Zj(f);q=c[h>>2]|0}if((q&256|0)==0){if(((q&16512|0)==16512?(p=b[f+454>>1]|0,p<<16>>16==(b[f+456>>1]|0)):0)?p<<16>>16==(b[f+458>>1]|0):0){m=f+208|0;c[m>>2]=c[m>>2]|2048;b[f+460>>1]=p}}else{if((a[f+435|0]&2)==0){p=f+208|0;c[p>>2]=c[p>>2]|2048}}p=f+435|0;m=a[p]|0;if(m<<24>>24==3){k=b[f+428>>1]|0;a:do{if(k<<16>>16==0){r=0;s=0;t=28}else{o=c[f+528>>2]|0;n=k&65535;u=0;v=0;while(1){w=a[o+u|0]|0;if(!(w<<24>>24==-1)){if(w<<24>>24==0){x=1}else{y=k;z=q;break a}}else{x=v}w=u+1|0;if((w|0)<(n|0)){u=w;v=x}else{r=k;s=x;t=28;break}}}}while(0);if((t|0)==28){x=q&-8388609;c[h>>2]=x;k=f+212|0;c[k>>2]=c[k>>2]&-8193;if((s|0)==0){s=q&-8388993;c[h>>2]=s;y=r;z=s}else{y=r;z=x}}if(((z&4352|0)==4352?(x=d[f+452|0]|0,r=c[f+416>>2]|0,b[f+454>>1]=d[r+(x*3|0)|0]|0,b[f+456>>1]=d[r+(x*3|0)+1|0]|0,b[f+458>>1]=d[r+(x*3|0)+2|0]|0,(z&34078720|0)==524288):0)?(x=y&65535,!(y<<16>>16==0)):0){y=c[f+528>>2]|0;r=0;do{s=y+r|0;a[s]=d[s]^255;r=r+1|0}while((r|0)<(x|0));A=c[h>>2]|0}else{A=z}}else{if((m&4)==0){z=(b[f+428>>1]|0)==0;x=q&-8388609;c[h>>2]=x;r=f+212|0;c[r>>2]=c[r>>2]&-8193;if(z){z=q&-8388993;c[h>>2]=z;B=z}else{B=x}}else{B=q}if((B&4352|0)==4352?(m&2)==0:0){m=e[f+460>>1]|0;q=e[f+540>>1]|0;x=d[f+436|0]|0;if((x|0)==1){C=m*255|0;D=q*255|0}else if((x|0)==2){C=m*85|0;D=q*85|0}else if((x|0)==4){C=m*17|0;D=q*17|0}else{C=m;D=q}q=C&65535;b[f+458>>1]=q;b[f+456>>1]=q;b[f+454>>1]=q;if((B&33554432|0)==0){q=D&65535;b[f+538>>1]=q;b[f+536>>1]=q;b[f+534>>1]=q;A=B}else{A=B}}else{A=B}}if((A&896|0)==640?(a[f+436|0]|0)!=16:0){B=f+454|0;b[B>>1]=(((e[B>>1]|0)*255|0)+32895|0)>>>16;B=f+456|0;b[B>>1]=(((e[B>>1]|0)*255|0)+32895|0)>>>16;B=f+458|0;b[B>>1]=(((e[B>>1]|0)*255|0)+32895|0)>>>16;B=f+460|0;b[B>>1]=(((e[B>>1]|0)*255|0)+32895|0)>>>16}if((A&128|0)!=0&(A&67109888|0)!=0&(A&256|0)==0?(a[f+436|0]|0)==16:0){B=f+454|0;b[B>>1]=(e[B>>1]|0)*257;B=f+456|0;b[B>>1]=(e[B>>1]|0)*257;B=f+458|0;b[B>>1]=(e[B>>1]|0)*257;B=f+460|0;b[B>>1]=(e[B>>1]|0)*257}B=f+462|0;q=f+452|0;b[B+0>>1]=b[q+0>>1]|0;b[B+2>>1]=b[q+2>>1]|0;b[B+4>>1]=b[q+4>>1]|0;b[B+6>>1]=b[q+6>>1]|0;b[B+8>>1]=b[q+8>>1]|0;do{if((A&8192|0)==0){if((A&6291456|0)==0){E=A}else{if((dk(c[j>>2]|0)|0)!=0){t=66;break}if((dk(c[l>>2]|0)|0)!=0){t=66;break}E=c[h>>2]|0}if((E&128|0)!=0){if((dk(c[j>>2]|0)|0)!=0){t=66;break}if((dk(c[l>>2]|0)|0)!=0){t=66;break}if((a[f+446|0]|0)==3?(dk(c[f+448>>2]|0)|0)!=0:0){t=66;break}}q=c[h>>2]|0;if((q&8388608|0)==0){F=q}else{if((dk(c[l>>2]|0)|0)!=0){t=66;break}F=c[h>>2]|0}if((F&128|0)!=0?(a[p]|0)==3:0){q=b[f+428>>1]|0;B=q&65535;D=c[f+416>>2]|0;C=b[f+454>>1]|0;m=C&255;x=b[f+456>>1]|0;z=x&255;r=b[f+458>>1]|0;y=r&255;if(q<<16>>16==0){G=F}else{q=f+528|0;s=C&255;C=x&255;x=r&255;r=0;do{k=a[(c[q>>2]|0)+r|0]|0;if(k<<24>>24==0){a[D+(r*3|0)|0]=m;a[D+(r*3|0)+1|0]=z;a[D+(r*3|0)+2|0]=y}else if(!(k<<24>>24==-1)){v=D+(r*3|0)|0;u=k&255;k=(aa(u^255,s)|0)+128+(aa(d[v]|0,u)|0)|0;a[v]=((k>>>8&255)+k|0)>>>8;k=D+(r*3|0)+1|0;v=d[(c[q>>2]|0)+r|0]|0;u=(aa(v,d[k]|0)|0)+128+(aa(v^255,C)|0)|0;a[k]=((u>>>8&255)+u|0)>>>8;u=D+(r*3|0)+2|0;k=d[(c[q>>2]|0)+r|0]|0;v=(aa(k,d[u]|0)|0)+128+(aa(k^255,x)|0)|0;a[u]=((v>>>8&255)+v|0)>>>8}r=r+1|0}while((r|0)<(B|0));G=c[h>>2]|0}B=G&-129;c[h>>2]=B;H=B}else{H=F}}else{t=66}}while(0);do{if((t|0)==66){ik(f,d[f+436|0]|0);F=c[h>>2]|0;if((F&128|0)==0){if((a[p]|0)!=3){H=F;break}if(!((F&4096|0)==0|(F&6291456|0)==0)){H=F;break}G=c[f+416>>2]|0;E=b[f+420>>1]|0;A=E&65535;if(E<<16>>16==0){I=F}else{E=f+492|0;B=0;do{r=G+(B*3|0)|0;a[r]=a[(c[E>>2]|0)+(d[r]|0)|0]|0;r=G+(B*3|0)+1|0;a[r]=a[(c[E>>2]|0)+(d[r]|0)|0]|0;r=G+(B*3|0)+2|0;a[r]=a[(c[E>>2]|0)+(d[r]|0)|0]|0;B=B+1|0}while((B|0)<(A|0));I=c[h>>2]|0}A=I&-8193;c[h>>2]=A;H=A;break}if((F&6291456|0)!=0){ok(f,13856)}if((a[p]|0)!=3){A=f+446|0;B=d[A]|0;if((B|0)==1){J=c[l>>2]|0;K=1e5}else if((B|0)==3){E=f+448|0;G=ck(c[E>>2]|0)|0;J=G;K=ek(c[E>>2]|0,c[l>>2]|0)|0}else if((B|0)==2){B=ck(c[j>>2]|0)|0;J=B;K=ek(c[j>>2]|0,c[l>>2]|0)|0}else{lk(f,13912)}B=dk(J)|0;E=dk(K)|0;G=(B|0)!=0;if(G){b[f+470>>1]=gk(f,e[f+460>>1]|0,J)|0}B=(E|0)!=0;if(B){E=f+460|0;b[E>>1]=gk(f,e[E>>1]|0,K)|0}E=f+454|0;r=b[E>>1]|0;x=f+456|0;if((r<<16>>16==(b[x>>1]|0)?(q=f+458|0,r<<16>>16==(b[q>>1]|0)):0)?r<<16>>16==(b[f+460>>1]|0):0){D=b[f+470>>1]|0;b[f+468>>1]=D;b[f+466>>1]=D;b[f+464>>1]=D;b[q>>1]=r;b[x>>1]=r;b[E>>1]=r}else{if(G){b[f+464>>1]=gk(f,r&65535,J)|0;b[f+466>>1]=gk(f,e[x>>1]|0,J)|0;b[f+468>>1]=gk(f,e[f+458>>1]|0,J)|0}if(B){b[E>>1]=gk(f,e[E>>1]|0,K)|0;b[x>>1]=gk(f,e[x>>1]|0,K)|0;x=f+458|0;b[x>>1]=gk(f,e[x>>1]|0,K)|0}}a[A]=1;H=c[h>>2]|0;break}A=c[f+416>>2]|0;x=b[f+420>>1]|0;E=x&65535;B=a[f+446|0]|0;do{if(!(B<<24>>24==2)){r=B&255;if((r|0)==1){L=c[l>>2]|0;M=1e5}else if((r|0)==3){G=f+448|0;q=ck(c[G>>2]|0)|0;L=q;M=ek(c[G>>2]|0,c[l>>2]|0)|0}else if((r|0)==2){r=ck(c[j>>2]|0)|0;L=r;M=ek(c[j>>2]|0,c[l>>2]|0)|0}else{L=1e5;M=1e5}r=(dk(M)|0)==0;G=f+454|0;q=b[G>>1]|0;if(r){N=q&255;O=b[f+456>>1]&255;P=b[f+458>>1]&255}else{r=fk(q&65535,M)|0;q=fk(e[f+456>>1]|0,M)|0;N=r;O=q;P=fk(e[f+458>>1]|0,M)|0}q=(dk(L)|0)==0;r=b[G>>1]|0;if(q){Q=N;R=O;S=P;T=r&255;U=b[f+456>>1]&255;V=b[f+458>>1]&255;break}else{q=fk(r&65535,L)|0;r=fk(e[f+456>>1]|0,L)|0;Q=N;R=O;S=P;T=q;U=r;V=fk(e[f+458>>1]|0,L)|0;break}}else{r=e[f+454>>1]|0;q=c[f+492>>2]|0;G=e[f+456>>1]|0;D=e[f+458>>1]|0;C=c[f+504>>2]|0;Q=a[q+r|0]|0;R=a[q+G|0]|0;S=a[q+D|0]|0;T=a[C+r|0]|0;U=a[C+G|0]|0;V=a[C+D|0]|0}}while(0);if(!(x<<16>>16==0)){B=f+428|0;F=f+528|0;D=f+504|0;C=T&255;G=f+500|0;r=U&255;q=V&255;s=f+492|0;y=0;do{do{if((y|0)<(e[B>>1]|0)?(z=a[(c[F>>2]|0)+y|0]|0,!(z<<24>>24==-1)):0){m=A+(y*3|0)|0;if(z<<24>>24==0){a[m]=Q;a[A+(y*3|0)+1|0]=R;a[A+(y*3|0)+2|0]=S;break}else{v=z&255;z=(aa(v^255,C)|0)+128+(aa(d[(c[D>>2]|0)+(d[m]|0)|0]|0,v)|0)|0;a[m]=a[(c[G>>2]|0)+(((z>>>8&255)+z|0)>>>8&255)|0]|0;z=A+(y*3|0)+1|0;m=d[(c[F>>2]|0)+y|0]|0;v=(aa(m,d[(c[D>>2]|0)+(d[z]|0)|0]|0)|0)+128+(aa(m^255,r)|0)|0;a[z]=a[(c[G>>2]|0)+(((v>>>8&255)+v|0)>>>8&255)|0]|0;v=A+(y*3|0)+2|0;z=d[(c[F>>2]|0)+y|0]|0;m=(aa(z,d[(c[D>>2]|0)+(d[v]|0)|0]|0)|0)+128+(aa(z^255,q)|0)|0;a[v]=a[(c[G>>2]|0)+(((m>>>8&255)+m|0)>>>8&255)|0]|0;break}}else{t=89}}while(0);if((t|0)==89){t=0;m=A+(y*3|0)|0;a[m]=a[(c[s>>2]|0)+(d[m]|0)|0]|0;m=A+(y*3|0)+1|0;a[m]=a[(c[s>>2]|0)+(d[m]|0)|0]|0;m=A+(y*3|0)+2|0;a[m]=a[(c[s>>2]|0)+(d[m]|0)|0]|0}y=y+1|0}while((y|0)<(E|0))}E=c[h>>2]&-8321;c[h>>2]=E;H=E}}while(0);if((H&4104|0)!=8){i=g;return}if((a[p]|0)!=3){i=g;return}p=b[f+420>>1]|0;t=p&65535;S=a[f+516|0]|0;R=8-(S&255)|0;c[h>>2]=H&-9;if(!(S<<24>>24==0|(R|0)<1|p<<16>>16==0)){S=f+416|0;H=0;do{h=(c[S>>2]|0)+(H*3|0)|0;a[h]=(d[h]|0)>>>R;H=H+1|0}while((H|0)<(t|0))}H=a[f+517|0]|0;R=8-(H&255)|0;if(!(H<<24>>24==0|(R|0)<1|p<<16>>16==0)){H=f+416|0;S=0;do{h=(c[H>>2]|0)+(S*3|0)+1|0;a[h]=(d[h]|0)>>>R;S=S+1|0}while((S|0)<(t|0))}S=a[f+518|0]|0;R=8-(S&255)|0;if(S<<24>>24==0|(R|0)<1|p<<16>>16==0){i=g;return}p=f+416|0;f=0;do{S=(c[p>>2]|0)+(f*3|0)+2|0;a[S]=(d[S]|0)>>>R;f=f+1|0}while((f|0)<(t|0));i=g;return}



function al(f,g){f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,mb=0,nb=0,ob=0,pb=0,qb=0,rb=0,sb=0,tb=0,ub=0,vb=0,wb=0,xb=0,yb=0,zb=0,Ab=0,Bb=0,Cb=0,Db=0,Eb=0,Fb=0,Gb=0,Hb=0,Ib=0,Jb=0,Kb=0;h=i;i=i+16|0;j=h;k=f+384|0;l=c[k>>2]|0;if((l|0)==0){lk(f,13944)}m=f+212|0;if((c[m>>2]&16448|0)==16384){lk(f,13960)}n=f+216|0;o=c[n>>2]|0;do{if((o&4096|0)!=0){p=g+8|0;if((a[p]|0)!=3){if((b[f+428>>1]|0)!=0?(o&33554432|0)!=0:0){bl(g,l+1|0,f+532|0);break}bl(g,l+1|0,0);break}q=c[f+416>>2]|0;r=c[f+528>>2]|0;s=b[f+428>>1]|0;t=s&65535;u=c[g>>2]|0;v=g+9|0;w=a[v]|0;if(!((w&255)<8)){if(!(w<<24>>24==8)){break}}else{x=w&255;if((x|0)==1){if((u|0)!=0){w=l+u|0;y=0;z=u+7&7^7;A=l+(((u+ -1|0)>>>3)+1)|0;while(1){a[w]=(d[A]&1<<z|0)!=0|0;B=(z|0)==7;y=y+1|0;if((y|0)==(u|0)){break}else{w=w+ -1|0;z=B?0:z+1|0;A=B?A+ -1|0:A}}}}else if((x|0)==4){if((u|0)!=0){A=l+u|0;z=0;w=u<<2&4;y=l+(((u+ -1|0)>>>1)+1)|0;while(1){a[A]=(d[y]|0)>>>w&15;B=(w|0)==4;z=z+1|0;if((z|0)==(u|0)){break}else{A=A+ -1|0;w=B?0:w+4|0;y=B?y+ -1|0:y}}}}else if((x|0)==2?(u|0)!=0:0){y=l+u|0;w=0;A=(u<<1)+6&6^6;z=l+(((u+ -1|0)>>>2)+1)|0;while(1){a[y]=(d[z]|0)>>>A&3;B=(A|0)==6;w=w+1|0;if((w|0)==(u|0)){break}else{y=y+ -1|0;A=B?0:A+2|0;z=B?z+ -1|0:z}}}a[v]=8;a[g+11|0]=8;c[g+4>>2]=u}z=l+u|0;if(s<<16>>16==0){A=u*3|0;if((u|0)!=0){y=l+A|0;w=0;x=z;while(1){a[y]=a[q+((d[x]|0)*3|0)+2|0]|0;a[y+ -1|0]=a[q+((d[x]|0)*3|0)+1|0]|0;a[y+ -2|0]=a[q+((d[x]|0)*3|0)|0]|0;w=w+1|0;if((w|0)==(u|0)){break}else{y=y+ -3|0;x=x+ -1|0}}}a[v]=8;a[g+11|0]=24;c[g+4>>2]=A;a[p]=2;a[g+10|0]=3;break}x=u<<2;if((u|0)!=0){y=l+x|0;w=0;s=z;while(1){B=d[s]|0;if(B>>>0<t>>>0){C=a[r+B|0]|0}else{C=-1}a[y]=C;a[y+ -1|0]=a[q+((d[s]|0)*3|0)+2|0]|0;a[y+ -2|0]=a[q+((d[s]|0)*3|0)+1|0]|0;a[y+ -3|0]=a[q+((d[s]|0)*3|0)|0]|0;w=w+1|0;if((w|0)==(u|0)){break}else{y=y+ -4|0;s=s+ -1|0}}}a[v]=8;a[g+11|0]=32;c[g+4>>2]=x;a[p]=6;a[g+10|0]=4}}while(0);C=c[n>>2]|0;if((C&262272|0)==262144?(l=a[g+8|0]|0,l<<24>>24==4|l<<24>>24==6):0){gm(g,(c[k>>2]|0)+1|0,0);D=c[n>>2]|0}else{D=C}do{if((D&6291456|0)!=0?(C=(c[k>>2]|0)+1|0,l=g+8|0,o=d[l]|0,(o&3|0)==2):0){s=e[f+702>>1]|0;y=e[f+704>>1]|0;u=32768-s-y|0;w=c[g>>2]|0;q=(o&4|0)!=0;o=g+9|0;a:do{if((a[o]|0)==8){r=f+500|0;if((c[r>>2]|0)!=0?(t=f+504|0,(c[t>>2]|0)!=0):0){if((w|0)==0){E=0;break}z=f+492|0;A=C;B=0;F=0;G=C;while(1){H=a[G]|0;I=a[G+1|0]|0;J=G+3|0;K=a[G+2|0]|0;L=H&255;if(H<<24>>24==I<<24>>24&H<<24>>24==K<<24>>24){M=c[z>>2]|0;if((M|0)==0){N=F;O=H}else{N=F;O=a[M+L|0]|0}}else{M=c[t>>2]|0;H=((aa(d[M+L|0]|0,s)|0)+16384+(aa(d[M+(I&255)|0]|0,y)|0)+(aa(d[M+(K&255)|0]|0,u)|0)|0)>>>15;N=F|1;O=a[(c[r>>2]|0)+H|0]|0}H=A+1|0;a[A]=O;if(q){a[H]=a[J]|0;P=A+2|0;Q=G+4|0}else{P=H;Q=J}J=B+1|0;if((J|0)==(w|0)){E=N;break a}else{A=P;B=J;F=N;G=Q}}}if((w|0)!=0){if(q){G=C;F=0;B=0;A=C;while(1){r=a[A]|0;t=a[A+1|0]|0;z=a[A+2|0]|0;if(r<<24>>24==t<<24>>24&r<<24>>24==z<<24>>24){R=B;S=r}else{R=B|1;S=((aa(t&255,y)|0)+(aa(r&255,s)|0)+(aa(z&255,u)|0)|0)>>>15&255}a[G]=S;a[G+1|0]=a[A+3|0]|0;z=F+1|0;if((z|0)==(w|0)){E=R;break}else{G=G+2|0;F=z;B=R;A=A+4|0}}}else{A=C;B=0;F=0;G=C;while(1){z=a[G]|0;r=a[G+1|0]|0;t=a[G+2|0]|0;if(z<<24>>24==r<<24>>24&z<<24>>24==t<<24>>24){T=F;U=z}else{T=F|1;U=((aa(r&255,y)|0)+(aa(z&255,s)|0)+(aa(t&255,u)|0)|0)>>>15&255}a[A]=U;t=B+1|0;if((t|0)==(w|0)){E=T;break}else{A=A+1|0;B=t;F=T;G=G+3|0}}}}else{E=0}}else{G=f+512|0;if((c[G>>2]|0)!=0?(F=f+508|0,(c[F>>2]|0)!=0):0){if((w|0)==0){E=0;break}B=f+496|0;A=f+484|0;t=C;z=0;r=0;J=C;while(1){H=a[J]|0;K=H&255;M=a[J+1|0]|0;I=M&255;L=K<<8|I;V=d[J+2|0]|0;W=d[J+3|0]|0;X=d[J+4|0]|0;Y=d[J+5|0]|0;Z=J+6|0;if((L|0)==(V<<8|W|0)?(L|0)==(X<<8|Y|0):0){L=c[B>>2]|0;if((L|0)==0){_=r;$=M;ba=H}else{H=b[(c[L+(I>>>(c[A>>2]|0)<<2)>>2]|0)+(K<<1)>>1]|0;_=r;$=H&255;ba=(H&65535)>>>8&255}}else{H=c[A>>2]|0;L=c[G>>2]|0;M=(aa(e[(c[L+(I>>>H<<2)>>2]|0)+(K<<1)>>1]|0,s)|0)+16384+(aa(e[(c[L+(W>>>H<<2)>>2]|0)+(V<<1)>>1]|0,y)|0)+(aa(e[(c[L+(Y>>>H<<2)>>2]|0)+(X<<1)>>1]|0,u)|0)|0;X=b[(c[(c[F>>2]|0)+((M>>>15&255)>>>H<<2)>>2]|0)+((M>>>23&255)<<1)>>1]|0;_=r|1;$=X&255;ba=(X&65535)>>>8&255}a[t]=ba;X=t+2|0;a[t+1|0]=$;if(q){a[X]=a[Z]|0;a[t+3|0]=a[J+7|0]|0;ca=t+4|0;da=J+8|0}else{ca=X;da=Z}Z=z+1|0;if((Z|0)==(w|0)){E=_;break a}else{t=ca;z=Z;r=_;J=da}}}if((w|0)==0){E=0}else{J=C;r=0;z=0;t=C;while(1){F=d[t]<<8|d[t+1|0];G=d[t+2|0]<<8|d[t+3|0];A=d[t+4|0]<<8|d[t+5|0];B=t+6|0;Z=(F|0)==(G|0)&(F|0)==(A|0)&1^1|z;X=(aa(F,s)|0)+16384+(aa(G,y)|0)+(aa(A,u)|0)|0;a[J]=X>>>23;A=J+2|0;a[J+1|0]=X>>>15;if(q){a[A]=a[B]|0;a[J+3|0]=a[t+7|0]|0;ea=J+4|0;fa=t+8|0}else{ea=A;fa=B}B=r+1|0;if((B|0)==(w|0)){E=Z;break}else{J=ea;r=B;z=Z;t=fa}}}}}while(0);q=g+10|0;u=(d[q]|0)+254|0;a[q]=u;a[l]=a[l]&253;q=aa(d[o]|0,u&255)|0;a[g+11|0]=q;u=q&255;if(u>>>0>7){ga=aa(u>>>3,w)|0}else{ga=((aa(u,w)|0)+7|0)>>>3}c[g+4>>2]=ga;if((E|0)==0){ha=c[n>>2]|0;break}a[f+700|0]=1;u=c[n>>2]|0;if((u&6291456|0)==4194304){ok(f,13984);ia=c[n>>2]|0}else{ia=u}if((ia&6291456|0)==2097152){lk(f,13984)}else{ha=ia}}else{ha=D}}while(0);if((ha&16384|0)!=0?(c[f+208>>2]&2048|0)==0:0){cl(g,(c[k>>2]|0)+1|0);ja=c[n>>2]|0}else{ja=ha}b:do{if((ja&128|0)!=0){ha=(c[k>>2]|0)+1|0;D=c[f+492>>2]|0;ia=c[f+500>>2]|0;E=c[f+504>>2]|0;ga=c[f+496>>2]|0;fa=c[f+508>>2]|0;ea=c[f+512>>2]|0;da=c[f+484>>2]|0;_=(c[m>>2]&8192|0)!=0;ca=c[g>>2]|0;$=d[g+8|0]|0;if(($|0)==0){switch(d[g+9|0]|0){case 1:{if((ca|0)==0){break b}ba=f+540|0;T=f+460|0;U=1;R=7;S=ha;while(1){Q=d[S]|0;if((Q>>>R&1|0)==(e[ba>>1]|0)){a[S]=e[T>>1]<<R|Q&32639>>>(7-R|0)}Q=(R|0)==0;if((U|0)==(ca|0)){break b}U=U+1|0;R=Q?7:R+ -1|0;S=Q?S+1|0:S}break};case 2:{S=(ca|0)==0;if((D|0)==0){if(S){break b}R=f+540|0;U=f+460|0;T=1;ba=6;w=ha;while(1){o=d[w]|0;if((o>>>ba&3|0)==(e[R>>1]|0)){a[w]=e[U>>1]<<ba|o&16191>>>(6-ba|0)}o=(ba|0)==0;if((T|0)==(ca|0)){break b}T=T+1|0;ba=o?6:ba+ -2|0;w=o?w+1|0:w}}else{if(S){break b}w=f+540|0;ba=f+460|0;T=0;U=6;R=ha;while(1){o=d[R]|0;l=o>>>U&3;if((l|0)==(e[w>>1]|0)){ka=e[ba>>1]<<U&255|o&16191>>>(6-U|0)}else{ka=(d[D+(l<<2|l|l<<4|l<<6)|0]|0)>>>6<<U|o&16191>>>(6-U|0)}a[R]=ka;o=(U|0)==0;T=T+1|0;if((T|0)==(ca|0)){break}else{U=o?6:U+ -2|0;R=o?R+1|0:R}}}break};case 4:{R=(ca|0)==0;if((D|0)==0){if(R){break b}U=f+540|0;T=f+460|0;ba=1;w=4;S=ha;while(1){o=d[S]|0;if((o>>>w&15|0)==(e[U>>1]|0)){a[S]=e[T>>1]<<w|o&3855>>>(4-w|0)}o=(w|0)==0;if((ba|0)==(ca|0)){break b}ba=ba+1|0;w=o?4:w+ -4|0;S=o?S+1|0:S}}else{if(R){break b}S=f+540|0;w=f+460|0;ba=0;T=4;U=ha;while(1){o=d[U]|0;l=o>>>T&15;if((l|0)==(e[S>>1]|0)){la=e[w>>1]<<T&255|o&3855>>>(4-T|0)}else{la=(d[D+(l<<4|l)|0]|0)>>>4<<T|o&3855>>>(4-T|0)}a[U]=la;o=(T|0)==0;ba=ba+1|0;if((ba|0)==(ca|0)){break}else{T=o?4:T+ -4|0;U=o?U+1|0:U}}}break};case 8:{U=(ca|0)==0;if((D|0)==0){if(U){break b}T=f+540|0;ba=f+460|0;w=1;S=ha;while(1){if((d[S]|0)==(e[T>>1]|0)){a[S]=b[ba>>1]}if((w|0)==(ca|0)){break b}w=w+1|0;S=S+1|0}}else{if(U){break b}S=f+540|0;w=f+460|0;ba=0;T=ha;while(1){R=d[T]|0;if((R|0)==(e[S>>1]|0)){ma=b[w>>1]&255}else{ma=a[D+R|0]|0}a[T]=ma;ba=ba+1|0;if((ba|0)==(ca|0)){break}else{T=T+1|0}}}break};case 16:{T=(ca|0)==0;if((ga|0)==0){if(T){break b}ba=f+540|0;w=f+460|0;S=1;U=ha;while(1){R=U+1|0;if((d[U]<<8|d[R]|0)==(e[ba>>1]|0)){a[U]=(e[w>>1]|0)>>>8;a[R]=b[w>>1]}if((S|0)==(ca|0)){break b}S=S+1|0;U=U+2|0}}else{if(T){break b}U=f+540|0;S=f+460|0;w=0;ba=ha;while(1){R=d[ba]|0;o=ba+1|0;l=d[o]|0;if((R<<8|l|0)==(e[U>>1]|0)){a[ba]=(e[S>>1]|0)>>>8;na=b[S>>1]|0}else{Q=b[(c[ga+(l>>>da<<2)>>2]|0)+(R<<1)>>1]|0;a[ba]=(Q&65535)>>>8;na=Q}a[o]=na;w=w+1|0;if((w|0)==(ca|0)){break}else{ba=ba+2|0}}}break};default:{break b}}}else if(($|0)==2){if((a[g+9|0]|0)==8){ba=(ca|0)==0;if((D|0)==0){if(ba){break}w=f+534|0;S=f+536|0;U=f+538|0;T=f+454|0;o=f+456|0;Q=f+458|0;R=1;l=ha;while(1){if(((d[l]|0)==(e[w>>1]|0)?(N=l+1|0,(d[N]|0)==(e[S>>1]|0)):0)?(P=l+2|0,(d[P]|0)==(e[U>>1]|0)):0){a[l]=b[T>>1];a[N]=b[o>>1];a[P]=b[Q>>1]}if((R|0)==(ca|0)){break b}R=R+1|0;l=l+3|0}}else{if(ba){break}l=f+534|0;R=f+536|0;Q=f+538|0;o=f+454|0;T=f+456|0;U=f+458|0;S=0;w=ha;while(1){P=d[w]|0;N=w+1|0;O=d[N]|0;if(((P|0)==(e[l>>1]|0)?(O|0)==(e[R>>1]|0):0)?(u=w+2|0,(d[u]|0)==(e[Q>>1]|0)):0){a[w]=b[o>>1];a[N]=b[T>>1];a[u]=b[U>>1]}else{a[w]=a[D+P|0]|0;a[N]=a[D+O|0]|0;O=w+2|0;a[O]=a[D+(d[O]|0)|0]|0}S=S+1|0;if((S|0)==(ca|0)){break}else{w=w+3|0}}}}else{w=(ca|0)==0;if((ga|0)==0){if(w){break}S=f+534|0;U=f+536|0;T=f+538|0;o=f+454|0;Q=f+456|0;R=f+458|0;l=1;ba=ha;while(1){O=ba+1|0;N=ba+2|0;P=ba+3|0;u=ba+4|0;q=ba+5|0;y=d[u]<<8|d[q];if(((d[ba]<<8|d[O]|0)==(e[S>>1]|0)?(d[N]<<8|d[P]|0)==(e[U>>1]|0):0)?(y|0)==(e[T>>1]|0):0){a[ba]=(e[o>>1]|0)>>>8;a[O]=b[o>>1];a[N]=(e[Q>>1]|0)>>>8;a[P]=b[Q>>1];a[u]=(e[R>>1]|0)>>>8;a[q]=b[R>>1]}if((l|0)==(ca|0)){break b}l=l+1|0;ba=ba+6|0}}else{if(w){break}ba=f+534|0;l=f+536|0;R=f+538|0;Q=f+454|0;o=f+456|0;T=f+458|0;U=0;S=ha;while(1){q=d[S]|0;u=S+1|0;P=d[u]|0;N=S+2|0;O=S+3|0;y=S+4|0;s=d[y]|0;C=S+5|0;p=d[C]|0;x=s<<8|p;v=d[N]|0;t=d[O]|0;if(((q<<8|P|0)==(e[ba>>1]|0)?(v<<8|t|0)==(e[l>>1]|0):0)?(x|0)==(e[R>>1]|0):0){a[S]=(e[Q>>1]|0)>>>8;a[u]=b[Q>>1];a[N]=(e[o>>1]|0)>>>8;a[O]=b[o>>1];a[y]=(e[T>>1]|0)>>>8;oa=b[T>>1]|0}else{x=b[(c[ga+(P>>>da<<2)>>2]|0)+(q<<1)>>1]|0;a[S]=(x&65535)>>>8;a[u]=x;x=b[(c[ga+(t>>>da<<2)>>2]|0)+(v<<1)>>1]|0;a[N]=(x&65535)>>>8;a[O]=x;x=b[(c[ga+(p>>>da<<2)>>2]|0)+(s<<1)>>1]|0;a[y]=(x&65535)>>>8;oa=x}a[C]=oa;U=U+1|0;if((U|0)==(ca|0)){break}else{S=S+6|0}}}}}else if(($|0)==4){if((a[g+9|0]|0)==8){S=(ca|0)==0;if((E|0)==0|(ia|0)==0|(D|0)==0){if(S){break}U=f+460|0;T=0;o=ha;while(1){Q=a[o+1|0]|0;if(Q<<24>>24==0){a[o]=b[U>>1]}else if(!(Q<<24>>24==-1)){R=Q&255;Q=aa(d[o]|0,R)|0;l=Q+128+(aa(e[U>>1]|0,R^255)|0)|0;a[o]=((l>>>8&255)+l|0)>>>8}T=T+1|0;if((T|0)==(ca|0)){break b}else{o=o+2|0}}}if(S){break}o=f+470|0;T=f+460|0;U=0;l=ha;while(1){R=a[l+1|0]|0;Q=R&255;if(R<<24>>24==-1){a[l]=a[D+(d[l]|0)|0]|0}else if(R<<24>>24==0){a[l]=b[T>>1]}else{R=aa(d[E+(d[l]|0)|0]|0,Q)|0;ba=R+128+(aa(e[o>>1]|0,Q^255)|0)|0;Q=((ba>>>8&255)+ba|0)>>>8;if(_){pa=Q&255}else{pa=a[ia+(Q&255)|0]|0}a[l]=pa}U=U+1|0;if((U|0)==(ca|0)){break b}else{l=l+2|0}}}l=(ca|0)==0;if((ga|0)==0|(fa|0)==0|(ea|0)==0){if(l){break}U=f+460|0;o=0;T=ha;while(1){S=d[T+2|0]<<8|d[T+3|0];if((S|0)==0){a[T]=(e[U>>1]|0)>>>8;a[T+1|0]=b[U>>1]}else if((S|0)!=65535){Q=T+1|0;ba=aa(d[T]<<8|d[Q],S)|0;R=(aa(e[U>>1]|0,S^65535)|0)+32768+ba|0;ba=(R>>>16)+R|0;a[T]=ba>>>24;a[Q]=ba>>>16}o=o+1|0;if((o|0)==(ca|0)){break b}else{T=T+4|0}}}if(l){break}T=f+470|0;o=f+460|0;U=0;ba=ha;while(1){Q=d[ba+2|0]<<8|d[ba+3|0];if((Q|0)==65535){R=ba+1|0;S=b[(c[ga+((d[R]|0)>>>da<<2)>>2]|0)+(d[ba]<<1)>>1]|0;a[ba]=(S&65535)>>>8;a[R]=S}else if((Q|0)==0){a[ba]=(e[o>>1]|0)>>>8;a[ba+1|0]=b[o>>1]}else{S=ba+1|0;R=aa(e[(c[ea+((d[S]|0)>>>da<<2)>>2]|0)+(d[ba]<<1)>>1]|0,Q)|0;w=R+32768+(aa(e[T>>1]|0,Q^65535)|0)|0;Q=(w>>>16)+w|0;w=Q>>>16;if(_){qa=w&255;ra=Q>>>24&255}else{R=b[(c[fa+((w&255)>>>da<<2)>>2]|0)+(Q>>>24<<1)>>1]|0;qa=R&255;ra=(R&65535)>>>8&255}a[ba]=ra;a[S]=qa}U=U+1|0;if((U|0)==(ca|0)){break}else{ba=ba+4|0}}}else if(($|0)==6){if((a[g+9|0]|0)==8){ba=(ca|0)==0;if((E|0)==0|(ia|0)==0|(D|0)==0){if(ba){break}U=f+454|0;T=f+456|0;o=f+458|0;l=0;S=ha;while(1){R=a[S+3|0]|0;if(R<<24>>24==0){a[S]=b[U>>1];a[S+1|0]=b[T>>1];a[S+2|0]=b[o>>1]}else if(!(R<<24>>24==-1)){Q=R&255;R=aa(d[S]|0,Q)|0;w=Q^255;C=R+128+(aa(e[U>>1]|0,w)|0)|0;a[S]=((C>>>8&255)+C|0)>>>8;C=S+1|0;R=aa(d[C]|0,Q)|0;x=R+128+(aa(e[T>>1]|0,w)|0)|0;a[C]=((x>>>8&255)+x|0)>>>8;x=S+2|0;C=aa(d[x]|0,Q)|0;Q=C+128+(aa(e[o>>1]|0,w)|0)|0;a[x]=((Q>>>8&255)+Q|0)>>>8}l=l+1|0;if((l|0)==(ca|0)){break b}else{S=S+4|0}}}if(ba){break}S=f+464|0;l=f+466|0;o=f+468|0;T=f+454|0;U=f+456|0;$=f+458|0;Q=0;x=ha;while(1){w=a[x+3|0]|0;if(w<<24>>24==-1){a[x]=a[D+(d[x]|0)|0]|0;C=x+1|0;a[C]=a[D+(d[C]|0)|0]|0;C=x+2|0;a[C]=a[D+(d[C]|0)|0]|0}else if(w<<24>>24==0){a[x]=b[T>>1];a[x+1|0]=b[U>>1];a[x+2|0]=b[$>>1]}else{C=w&255;w=aa(d[E+(d[x]|0)|0]|0,C)|0;R=C^255;y=w+128+(aa(e[S>>1]|0,R)|0)|0;w=((y>>>8&255)+y|0)>>>8;if(_){sa=w&255}else{sa=a[ia+(w&255)|0]|0}a[x]=sa;w=x+1|0;y=aa(d[E+(d[w]|0)|0]|0,C)|0;s=y+128+(aa(e[l>>1]|0,R)|0)|0;y=((s>>>8&255)+s|0)>>>8;if(_){ta=y&255}else{ta=a[ia+(y&255)|0]|0}a[w]=ta;w=x+2|0;y=aa(d[E+(d[w]|0)|0]|0,C)|0;C=y+128+(aa(e[o>>1]|0,R)|0)|0;R=((C>>>8&255)+C|0)>>>8;if(_){ua=R&255}else{ua=a[ia+(R&255)|0]|0}a[w]=ua}Q=Q+1|0;if((Q|0)==(ca|0)){break}else{x=x+4|0}}}else{x=(ca|0)==0;if((ga|0)==0|(fa|0)==0|(ea|0)==0){if(x){break}Q=f+454|0;ia=f+456|0;o=f+458|0;E=0;l=ha;while(1){S=d[l+6|0]<<8|d[l+7|0];if((S|0)==0){a[l]=(e[Q>>1]|0)>>>8;a[l+1|0]=b[Q>>1];a[l+2|0]=(e[ia>>1]|0)>>>8;a[l+3|0]=b[ia>>1];a[l+4|0]=(e[o>>1]|0)>>>8;a[l+5|0]=b[o>>1]}else if((S|0)!=65535){$=l+1|0;U=l+2|0;T=l+3|0;D=d[U]<<8|d[T];ba=l+4|0;w=l+5|0;R=d[ba]<<8|d[w];C=aa(d[l]<<8|d[$],S)|0;y=S^65535;s=C+32768+(aa(e[Q>>1]|0,y)|0)|0;C=(s>>>16)+s|0;a[l]=C>>>24;a[$]=C>>>16;C=aa(D,S)|0;D=C+32768+(aa(e[ia>>1]|0,y)|0)|0;C=(D>>>16)+D|0;a[U]=C>>>24;a[T]=C>>>16;C=aa(R,S)|0;S=C+32768+(aa(e[o>>1]|0,y)|0)|0;y=(S>>>16)+S|0;a[ba]=y>>>24;a[w]=y>>>16}E=E+1|0;if((E|0)==(ca|0)){break b}else{l=l+8|0}}}if(x){break}l=f+464|0;E=f+466|0;o=f+468|0;ia=f+454|0;Q=f+456|0;y=f+458|0;w=0;ba=ha;while(1){S=d[ba+6|0]<<8|d[ba+7|0];if((S|0)==65535){C=ba+1|0;R=b[(c[ga+((d[C]|0)>>>da<<2)>>2]|0)+(d[ba]<<1)>>1]|0;a[ba]=(R&65535)>>>8;a[C]=R;R=ba+2|0;C=ba+3|0;T=b[(c[ga+((d[C]|0)>>>da<<2)>>2]|0)+(d[R]<<1)>>1]|0;a[R]=(T&65535)>>>8;a[C]=T;T=ba+4|0;C=ba+5|0;R=b[(c[ga+((d[C]|0)>>>da<<2)>>2]|0)+(d[T]<<1)>>1]|0;a[T]=(R&65535)>>>8;a[C]=R}else if((S|0)==0){a[ba]=(e[ia>>1]|0)>>>8;a[ba+1|0]=b[ia>>1];a[ba+2|0]=(e[Q>>1]|0)>>>8;a[ba+3|0]=b[Q>>1];a[ba+4|0]=(e[y>>1]|0)>>>8;a[ba+5|0]=b[y>>1]}else{R=ba+1|0;C=aa(e[(c[ea+((d[R]|0)>>>da<<2)>>2]|0)+(d[ba]<<1)>>1]|0,S)|0;T=S^65535;U=C+32768+(aa(e[l>>1]|0,T)|0)|0;C=(U>>>16)+U|0;U=C>>>16;D=C>>>24;if(_){va=U&255;wa=D&255}else{C=b[(c[fa+((U&255)>>>da<<2)>>2]|0)+(D<<1)>>1]|0;va=C&255;wa=(C&65535)>>>8&255}a[ba]=wa;a[R]=va;R=ba+2|0;C=ba+3|0;D=aa(e[(c[ea+((d[C]|0)>>>da<<2)>>2]|0)+(d[R]<<1)>>1]|0,S)|0;U=D+32768+(aa(e[E>>1]|0,T)|0)|0;D=(U>>>16)+U|0;U=D>>>16;$=D>>>24;if(_){xa=U&255;ya=$&255}else{D=b[(c[fa+((U&255)>>>da<<2)>>2]|0)+($<<1)>>1]|0;xa=D&255;ya=(D&65535)>>>8&255}a[R]=ya;a[C]=xa;C=ba+4|0;R=ba+5|0;D=aa(e[(c[ea+((d[R]|0)>>>da<<2)>>2]|0)+(d[C]<<1)>>1]|0,S)|0;S=D+32768+(aa(e[o>>1]|0,T)|0)|0;T=(S>>>16)+S|0;S=T>>>16;D=T>>>24;if(_){za=S&255;Aa=D&255}else{T=b[(c[fa+((S&255)>>>da<<2)>>2]|0)+(D<<1)>>1]|0;za=T&255;Aa=(T&65535)>>>8&255}a[C]=Aa;a[R]=za}w=w+1|0;if((w|0)==(ca|0)){break}else{ba=ba+8|0}}}}else{break}}}while(0);za=c[n>>2]|0;do{if((za&6299648|0)==8192){if((za&128|0)!=0){if((b[f+428>>1]|0)!=0){break}Aa=a[f+435|0]|0;if((Aa&4)==0){Ba=Aa}else{break}}else{Ba=a[f+435|0]|0}if(!(Ba<<24>>24==3)){Aa=(c[k>>2]|0)+1|0;xa=c[f+484>>2]|0;ya=c[f+492>>2]|0;va=c[f+496>>2]|0;wa=c[g>>2]|0;ua=g+9|0;ta=a[ua]|0;if((ta&255)>8|(ya|0)==0?ta<<24>>24!=16|(va|0)==0:0){break}sa=d[g+8|0]|0;if((sa|0)==2){qa=(wa|0)==0;if(ta<<24>>24==8){if(qa){break}else{Ca=0;Da=Aa}while(1){a[Da]=a[ya+(d[Da]|0)|0]|0;ra=Da+1|0;a[ra]=a[ya+(d[ra]|0)|0]|0;ra=Da+2|0;a[ra]=a[ya+(d[ra]|0)|0]|0;Ca=Ca+1|0;if((Ca|0)==(wa|0)){break}else{Da=Da+3|0}}}else{if(qa){break}else{Ea=0;Fa=Aa}while(1){ra=Fa+1|0;pa=b[(c[va+((d[ra]|0)>>>xa<<2)>>2]|0)+(d[Fa]<<1)>>1]|0;a[Fa]=(pa&65535)>>>8;a[ra]=pa;pa=Fa+2|0;ra=Fa+3|0;oa=b[(c[va+((d[ra]|0)>>>xa<<2)>>2]|0)+(d[pa]<<1)>>1]|0;a[pa]=(oa&65535)>>>8;a[ra]=oa;oa=Fa+4|0;ra=Fa+5|0;pa=b[(c[va+((d[ra]|0)>>>xa<<2)>>2]|0)+(d[oa]<<1)>>1]|0;a[oa]=(pa&65535)>>>8;a[ra]=pa;Ea=Ea+1|0;if((Ea|0)==(wa|0)){break}else{Fa=Fa+6|0}}}}else if((sa|0)==6){qa=(wa|0)==0;if(ta<<24>>24==8){if(qa){break}else{Ga=0;Ha=Aa}while(1){a[Ha]=a[ya+(d[Ha]|0)|0]|0;pa=Ha+1|0;a[pa]=a[ya+(d[pa]|0)|0]|0;pa=Ha+2|0;a[pa]=a[ya+(d[pa]|0)|0]|0;Ga=Ga+1|0;if((Ga|0)==(wa|0)){break}else{Ha=Ha+4|0}}}else{if(qa){break}else{Ia=0;Ja=Aa}while(1){pa=Ja+1|0;ra=b[(c[va+((d[pa]|0)>>>xa<<2)>>2]|0)+(d[Ja]<<1)>>1]|0;a[Ja]=(ra&65535)>>>8;a[pa]=ra;ra=Ja+2|0;pa=Ja+3|0;oa=b[(c[va+((d[pa]|0)>>>xa<<2)>>2]|0)+(d[ra]<<1)>>1]|0;a[ra]=(oa&65535)>>>8;a[pa]=oa;oa=Ja+4|0;pa=Ja+5|0;ra=b[(c[va+((d[pa]|0)>>>xa<<2)>>2]|0)+(d[oa]<<1)>>1]|0;a[oa]=(ra&65535)>>>8;a[pa]=ra;Ia=Ia+1|0;if((Ia|0)==(wa|0)){break}else{Ja=Ja+8|0}}}}else if((sa|0)==4){qa=(wa|0)==0;if(ta<<24>>24==8){if(qa){break}else{Ka=0;La=Aa}while(1){a[La]=a[ya+(d[La]|0)|0]|0;Ka=Ka+1|0;if((Ka|0)==(wa|0)){break}else{La=La+2|0}}}else{if(qa){break}else{Ma=0;Na=Aa}while(1){ra=Na+1|0;pa=b[(c[va+((d[ra]|0)>>>xa<<2)>>2]|0)+(d[Na]<<1)>>1]|0;a[Na]=(pa&65535)>>>8;a[ra]=pa;Ma=Ma+1|0;if((Ma|0)==(wa|0)){break}else{Na=Na+4|0}}}}else if((sa|0)==0){if(ta<<24>>24==2){if((wa|0)==0){break}else{Oa=0;Pa=Aa}while(1){qa=d[Pa]|0;pa=qa&192;ra=qa&48;oa=qa&12;na=qa&3;a[Pa]=(d[ya+(ra<<2|ra|ra>>>2|ra>>>4)|0]|0)>>>2&48|a[ya+(qa>>>6|pa|pa>>>2|pa>>>4)|0]&192|(d[ya+(oa<<2|oa|oa<<4|oa>>>2)|0]|0)>>>4&12|(d[ya+(na<<4|na|na<<6|na<<2)|0]|0)>>>6;Oa=Oa+4|0;if(!(Oa>>>0<wa>>>0)){break}else{Pa=Pa+1|0}}Qa=a[ua]|0}else{Qa=ta}if(Qa<<24>>24==16){if((wa|0)==0){break}else{Ra=0;Sa=Aa}while(1){sa=Sa+1|0;na=b[(c[va+((d[sa]|0)>>>xa<<2)>>2]|0)+(d[Sa]<<1)>>1]|0;a[Sa]=(na&65535)>>>8;a[sa]=na;Ra=Ra+1|0;if((Ra|0)==(wa|0)){break}else{Sa=Sa+2|0}}}else if(Qa<<24>>24==8){if((wa|0)==0){break}else{Ta=0;Ua=Aa}while(1){a[Ua]=a[ya+(d[Ua]|0)|0]|0;Ta=Ta+1|0;if((Ta|0)==(wa|0)){break}else{Ua=Ua+1|0}}}else if(Qa<<24>>24==4){if((wa|0)==0){break}else{Va=0;Wa=Aa}while(1){xa=d[Wa]|0;va=xa&15;a[Wa]=(d[ya+(va<<4|va)|0]|0)>>>4|a[ya+(xa&240|xa>>>4)|0]&240;Va=Va+2|0;if(!(Va>>>0<wa>>>0)){break}else{Wa=Wa+1|0}}}else{break}}else{break}}}}while(0);Wa=c[n>>2]|0;if((Wa&262272|0)==262272?(Va=a[g+8|0]|0,Va<<24>>24==4|Va<<24>>24==6):0){gm(g,(c[k>>2]|0)+1|0,0);Xa=c[n>>2]|0}else{Xa=Wa}c:do{if((Xa&8388608|0)!=0?(Wa=a[g+8|0]|0,!((Wa&4)==0)):0){Va=c[k>>2]|0;Qa=c[g>>2]|0;Ua=Wa&255;do{if((Ua&4|0)!=0){Wa=a[g+9|0]|0;if(Wa<<24>>24==8){Ta=c[f+500>>2]|0;if((Ta|0)==0){break}Sa=Ua&2;Ra=Sa+2|0;if((Qa|0)==0){break c}Pa=Va+((Sa|1)+1)|0;Sa=Qa;while(1){a[Pa]=a[Ta+(d[Pa]|0)|0]|0;Sa=Sa+ -1|0;if((Sa|0)==0){break c}else{Pa=Pa+Ra|0}}}else if(Wa<<24>>24==16){Ra=c[f+508>>2]|0;Pa=c[f+484>>2]|0;if((Ra|0)==0){break}Sa=Ua<<1&4;Ta=Sa+4|0;if((Qa|0)==0){break c}Oa=Va+(Sa|3)|0;Sa=Qa;while(1){Na=Oa+1|0;Ma=b[(c[Ra+((d[Na]|0)>>>Pa<<2)>>2]|0)+(d[Oa]<<1)>>1]|0;a[Oa]=(Ma&65535)>>>8;a[Na]=Ma;Sa=Sa+ -1|0;if((Sa|0)==0){break c}else{Oa=Oa+Ta|0}}}else{break}}}while(0);ok(f,14064)}}while(0);Xa=c[n>>2]|0;if((Xa&67108864|0)!=0?(Qa=c[k>>2]|0,Va=Qa+1|0,Ua=g+9|0,(a[Ua]|0)==16):0){Ta=g+4|0;Oa=c[Ta>>2]|0;Sa=Qa+(Oa+1)|0;if((Oa|0)>0){Oa=Va;Qa=Va;while(1){Va=d[Qa]|0;Pa=Qa+2|0;a[Oa]=(((((d[Qa+1|0]|0)-Va|0)*65535|0)+8388480|0)>>>24)+Va;if(Pa>>>0<Sa>>>0){Oa=Oa+1|0;Qa=Pa}else{break}}}a[Ua]=8;Ua=d[g+10|0]|0;a[g+11|0]=Ua<<3;c[Ta>>2]=aa(Ua,c[g>>2]|0)|0;Ya=c[n>>2]|0}else{Ya=Xa}if((Ya&1024|0)!=0?(Xa=c[k>>2]|0,Ua=Xa+1|0,Ta=g+9|0,(a[Ta]|0)==16):0){Qa=g+4|0;Oa=c[Qa>>2]|0;Sa=Xa+(Oa+1)|0;if((Oa|0)>0){Oa=Ua;Xa=Ua;while(1){a[Oa]=a[Xa]|0;Xa=Xa+2|0;if(!(Xa>>>0<Sa>>>0)){break}else{Oa=Oa+1|0}}}a[Ta]=8;Ta=d[g+10|0]|0;a[g+11|0]=Ta<<3;c[Qa>>2]=aa(Ta,c[g>>2]|0)|0;Za=c[n>>2]|0}else{Za=Ya}do{if((Za&64|0)!=0){Ya=(c[k>>2]|0)+1|0;Ta=c[f+612>>2]|0;Qa=c[f+616>>2]|0;Oa=c[g>>2]|0;Sa=g+9|0;d:do{if((a[Sa]|0)==8){Xa=g+8|0;Ua=a[Xa]|0;Pa=(Ta|0)==0;if(!(Ua<<24>>24!=2|Pa)){if((Oa|0)==0){_a=8}else{Va=Ya;Ra=0;Wa=Ya;while(1){a[Va]=a[Ta+((d[Wa+1|0]|0)>>>3<<5|(d[Wa]|0)>>>3<<10|(d[Wa+2|0]|0)>>>3)|0]|0;Ra=Ra+1|0;if((Ra|0)==(Oa|0)){break}else{Va=Va+1|0;Wa=Wa+3|0}}_a=a[Sa]|0}a[Xa]=3;a[g+10|0]=1;a[g+11|0]=_a;Wa=_a&255;if((_a&255)>7){$a=aa(Wa>>>3,Oa)|0}else{$a=((aa(Wa,Oa)|0)+7|0)>>>3}c[g+4>>2]=$a;break}if(Ua<<24>>24!=6|Pa){if(Ua<<24>>24!=3|(Qa|0)==0|(Oa|0)==0){break}else{ab=0;bb=Ya}while(1){a[bb]=a[Qa+(d[bb]|0)|0]|0;ab=ab+1|0;if((ab|0)==(Oa|0)){break d}else{bb=bb+1|0}}}if((Oa|0)==0){cb=8}else{Ua=Ya;Pa=0;Wa=Ya;while(1){a[Ua]=a[Ta+((d[Wa+1|0]|0)>>>3<<5|(d[Wa]|0)>>>3<<10|(d[Wa+2|0]|0)>>>3)|0]|0;Pa=Pa+1|0;if((Pa|0)==(Oa|0)){break}else{Ua=Ua+1|0;Wa=Wa+4|0}}cb=a[Sa]|0}a[Xa]=3;a[g+10|0]=1;a[g+11|0]=cb;Wa=cb&255;if((cb&255)>7){db=aa(Wa>>>3,Oa)|0}else{db=((aa(Wa,Oa)|0)+7|0)>>>3}c[g+4>>2]=db}}while(0);if((c[g+4>>2]|0)==0){lk(f,14024)}else{eb=c[n>>2]|0;break}}else{eb=Za}}while(0);if(((eb&512|0)!=0?(Za=c[k>>2]|0,db=g+9|0,(a[db]|0)==8):0)?(a[g+8|0]|0)!=3:0){cb=g+4|0;bb=c[cb>>2]|0;ab=bb<<1;if((ab|0)>(bb|0)){$a=Za+(ab|1)|0;ab=Za+(bb+1)|0;do{ab=ab+ -1|0;Za=a[ab]|0;a[$a+ -1|0]=Za;$a=$a+ -2|0;a[$a]=Za}while($a>>>0>ab>>>0);fb=c[cb>>2]|0}else{fb=bb}c[cb>>2]=fb<<1;a[db]=16;a[g+11|0]=d[g+10|0]<<4;gb=c[n>>2]|0}else{gb=eb}if((gb&16384|0)!=0?(c[f+208>>2]&2048|0)!=0:0){cl(g,(c[k>>2]|0)+1|0);hb=c[n>>2]|0}else{hb=gb}if((hb&32|0)==0){ib=hb}else{dm(g,(c[k>>2]|0)+1|0);ib=c[n>>2]|0}do{if((ib&524288|0)!=0){hb=c[k>>2]|0;gb=c[g>>2]|0;eb=a[g+8|0]|0;if(eb<<24>>24==6){db=hb+((c[g+4>>2]|0)+1)|0;fb=(gb|0)==0;if((a[g+9|0]|0)==8){if(fb){break}else{jb=0;kb=db}while(1){cb=kb+ -1|0;a[cb]=d[cb]^255;jb=jb+1|0;if((jb|0)==(gb|0)){break}else{kb=kb+ -4|0}}}else{if(fb){break}else{lb=0;mb=db}while(1){cb=mb+ -1|0;a[cb]=d[cb]^255;cb=mb+ -2|0;a[cb]=d[cb]^255;lb=lb+1|0;if((lb|0)==(gb|0)){break}else{mb=mb+ -8|0}}}}else if(eb<<24>>24==4){db=hb+((c[g+4>>2]|0)+1)|0;fb=(gb|0)==0;if((a[g+9|0]|0)==8){if(fb){break}else{nb=db;ob=0}while(1){cb=nb+ -1|0;a[cb]=d[cb]^255;ob=ob+1|0;if((ob|0)==(gb|0)){break}else{nb=nb+ -2|0}}}else{if(fb){break}else{pb=0;qb=db}while(1){hb=qb+ -1|0;a[hb]=d[hb]^255;hb=qb+ -2|0;a[hb]=d[hb]^255;pb=pb+1|0;if((pb|0)==(gb|0)){break}else{qb=qb+ -4|0}}}}else{break}}}while(0);e:do{if((c[n>>2]&8|0)!=0?(qb=c[k>>2]|0,pb=qb+1|0,nb=a[g+8|0]|0,ob=nb&255,!(nb<<24>>24==3)):0){nb=d[g+9|0]|0;if((ob&2|0)==0){c[j>>2]=nb-(d[f+524|0]|0);rb=1}else{c[j>>2]=nb-(d[f+521|0]|0);c[j+4>>2]=nb-(d[f+522|0]|0);c[j+8>>2]=nb-(d[f+523|0]|0);rb=3}if((ob&4|0)==0){sb=rb}else{c[j+(rb<<2)>>2]=nb-(d[f+525|0]|0);sb=rb+1|0}ob=0;mb=0;while(1){lb=j+(ob<<2)|0;kb=c[lb>>2]|0;if((kb|0)>0&(kb|0)<(nb|0)){tb=1}else{c[lb>>2]=0;tb=mb}ob=ob+1|0;if((ob|0)>=(sb|0)){break}else{mb=tb}}if((tb|0)!=0){if((nb|0)==2){mb=c[g+4>>2]|0;ob=qb+(mb+1)|0;if((mb|0)>0){ub=pb}else{break}while(1){mb=ub+1|0;a[ub]=(d[ub]|0)>>>1&85;if(mb>>>0<ob>>>0){ub=mb}else{break}}}else if((nb|0)==4){ob=c[g+4>>2]|0;mb=qb+(ob+1)|0;lb=c[j>>2]|0;kb=15>>>lb;jb=kb<<4|kb;if((ob|0)>0){vb=pb}else{break}while(1){ob=vb+1|0;a[vb]=(d[vb]|0)>>>lb&jb;if(ob>>>0<mb>>>0){vb=ob}else{break}}}else if((nb|0)==8){mb=c[g+4>>2]|0;jb=mb+1|0;lb=qb+jb|0;if((mb|0)<=0){break}a[pb]=(d[pb]|0)>>>(c[j>>2]|0);if((jb|0)<=2){break}jb=1;mb=qb+2|0;while(1){ob=(jb|0)>=(sb|0)?0:jb;kb=mb+1|0;a[mb]=(d[mb]|0)>>>(c[j+(ob<<2)>>2]|0);if(kb>>>0<lb>>>0){jb=ob+1|0;mb=kb}else{break}}}else if((nb|0)==16){mb=c[g+4>>2]|0;jb=qb+(mb+1)|0;if((mb|0)>0){wb=pb;xb=0}else{break}while(1){mb=wb+1|0;lb=(d[wb]<<8|d[mb])>>>(c[j+(xb<<2)>>2]|0);kb=xb+1|0;a[wb]=lb>>>8;ob=wb+2|0;a[mb]=lb;if(!(ob>>>0<jb>>>0)){break e}wb=ob;xb=(kb|0)>=(sb|0)?0:kb}}else{break}}}}while(0);if((c[n>>2]&4|0)!=0?(sb=c[k>>2]|0,xb=g+9|0,wb=a[xb]|0,(wb&255)<8):0){j=wb&255;wb=c[g>>2]|0;if((j|0)==1){if((wb|0)!=0){vb=sb+wb|0;ub=0;tb=wb+7&7^7;rb=sb+(((wb+ -1|0)>>>3)+1)|0;while(1){a[vb]=(d[rb]|0)>>>tb&1;jb=(tb|0)==7;ub=ub+1|0;if((ub|0)==(wb|0)){break}else{vb=vb+ -1|0;tb=jb?0:tb+1|0;rb=jb?rb+ -1|0:rb}}}}else if((j|0)==2){if((wb|0)!=0){rb=sb+wb|0;tb=0;vb=(wb<<1)+6&6^6;ub=sb+(((wb+ -1|0)>>>2)+1)|0;while(1){a[rb]=(d[ub]|0)>>>vb&3;jb=(vb|0)==6;tb=tb+1|0;if((tb|0)==(wb|0)){break}else{rb=rb+ -1|0;vb=jb?0:vb+2|0;ub=jb?ub+ -1|0:ub}}}}else if((j|0)==4?(wb|0)!=0:0){j=sb+wb|0;ub=0;vb=wb<<2&4;rb=sb+(((wb+ -1|0)>>>1)+1)|0;while(1){a[j]=(d[rb]|0)>>>vb&15;sb=(vb|0)==4;ub=ub+1|0;if((ub|0)==(wb|0)){break}else{j=j+ -1|0;vb=sb?0:4;rb=sb?rb+ -1|0:rb}}}a[xb]=8;xb=d[g+10|0]|0;a[g+11|0]=xb<<3;c[g+4>>2]=aa(xb,wb)|0}wb=g+8|0;if((a[wb]|0)==3?(c[f+424>>2]|0)>-1:0){im(f,g)}xb=c[n>>2]|0;if((xb&1|0)==0){yb=xb}else{hm(g,(c[k>>2]|0)+1|0);yb=c[n>>2]|0}if((yb&65536|0)==0){zb=yb}else{fm(g,(c[k>>2]|0)+1|0);zb=c[n>>2]|0}do{if((zb&32768|0)!=0){yb=c[k>>2]|0;xb=b[f+444>>1]|0;rb=c[m>>2]|0;vb=c[g>>2]|0;j=(xb&65535)>>>8&255;ub=xb&255;xb=a[wb]|0;if(xb<<24>>24==0){sb=a[g+9|0]|0;if(sb<<24>>24==8){tb=yb+(vb+1)|0;jb=vb<<1;pb=yb+(jb|1)|0;if((rb&128|0)==0){if((vb|0)!=0){qb=pb;nb=0;kb=tb;do{kb=kb+ -1|0;a[qb+ -1|0]=a[kb]|0;qb=qb+ -2|0;a[qb]=ub;nb=nb+1|0}while((nb|0)!=(vb|0))}a[g+10|0]=2;a[g+11|0]=16;c[g+4>>2]=jb;break}else{a[yb+jb|0]=ub;if(vb>>>0>1){nb=pb;qb=1;kb=tb;while(1){ob=kb+ -1|0;lb=nb+ -2|0;a[lb]=a[ob]|0;mb=qb+1|0;a[nb+ -3|0]=ub;if((mb|0)==(vb|0)){break}else{nb=lb;qb=mb;kb=ob}}}a[g+10|0]=2;a[g+11|0]=16;c[g+4>>2]=jb;break}}else if(sb<<24>>24==16){kb=yb+(vb<<1|1)|0;qb=vb<<2;nb=yb+(qb|1)|0;if((rb&128|0)==0){if((vb|0)!=0){tb=nb;pb=0;ob=kb;do{a[tb+ -1|0]=a[ob+ -1|0]|0;ob=ob+ -2|0;a[tb+ -2|0]=a[ob]|0;a[tb+ -3|0]=j;tb=tb+ -4|0;a[tb]=ub;pb=pb+1|0}while((pb|0)!=(vb|0))}a[g+10|0]=2;a[g+11|0]=32;c[g+4>>2]=qb;break}else{a[yb+qb|0]=j;a[yb+(qb+ -1)|0]=ub;if(vb>>>0>1){pb=nb;tb=1;ob=kb;while(1){a[pb+ -3|0]=a[ob+ -1|0]|0;sb=ob+ -2|0;jb=pb+ -4|0;a[jb]=a[sb]|0;mb=tb+1|0;a[pb+ -5|0]=j;a[pb+ -6|0]=ub;if((mb|0)==(vb|0)){break}else{pb=jb;tb=mb;ob=sb}}}a[g+10|0]=2;a[g+11|0]=32;c[g+4>>2]=qb;break}}else{break}}else if(xb<<24>>24==2){ob=a[g+9|0]|0;if(ob<<24>>24==8){tb=vb*3|0;pb=yb+(tb+1)|0;kb=yb+(vb+1+tb)|0;if((rb&128|0)==0){if((vb|0)!=0){nb=kb;sb=0;mb=pb;do{a[nb+ -1|0]=a[mb+ -1|0]|0;a[nb+ -2|0]=a[mb+ -2|0]|0;mb=mb+ -3|0;a[nb+ -3|0]=a[mb]|0;nb=nb+ -4|0;a[nb]=ub;sb=sb+1|0}while((sb|0)!=(vb|0))}a[g+10|0]=4;a[g+11|0]=32;c[g+4>>2]=vb<<2;break}else{a[yb+(tb+vb)|0]=ub;if(vb>>>0>1){sb=kb;nb=1;mb=pb;while(1){a[sb+ -2|0]=a[mb+ -1|0]|0;a[sb+ -3|0]=a[mb+ -2|0]|0;xb=mb+ -3|0;qb=sb+ -4|0;a[qb]=a[xb]|0;jb=nb+1|0;a[sb+ -5|0]=ub;if((jb|0)==(vb|0)){break}else{sb=qb;nb=jb;mb=xb}}}a[g+10|0]=4;a[g+11|0]=32;c[g+4>>2]=vb<<2;break}}else if(ob<<24>>24==16){mb=vb*6|0;nb=yb+(mb|1)|0;sb=mb+(vb<<1)|0;mb=yb+(sb|1)|0;if((rb&128|0)==0){if((vb|0)!=0){pb=mb;kb=0;tb=nb;do{a[pb+ -1|0]=a[tb+ -1|0]|0;a[pb+ -2|0]=a[tb+ -2|0]|0;a[pb+ -3|0]=a[tb+ -3|0]|0;a[pb+ -4|0]=a[tb+ -4|0]|0;a[pb+ -5|0]=a[tb+ -5|0]|0;tb=tb+ -6|0;a[pb+ -6|0]=a[tb]|0;a[pb+ -7|0]=j;pb=pb+ -8|0;a[pb]=ub;kb=kb+1|0}while((kb|0)!=(vb|0))}a[g+10|0]=4;a[g+11|0]=64;c[g+4>>2]=vb<<3;break}else{a[yb+sb|0]=j;a[yb+(sb+ -1)|0]=ub;if(vb>>>0>1){kb=mb;pb=1;tb=nb;while(1){a[kb+ -3|0]=a[tb+ -1|0]|0;a[kb+ -4|0]=a[tb+ -2|0]|0;a[kb+ -5|0]=a[tb+ -3|0]|0;a[kb+ -6|0]=a[tb+ -4|0]|0;a[kb+ -7|0]=a[tb+ -5|0]|0;rb=tb+ -6|0;ob=kb+ -8|0;a[ob]=a[rb]|0;xb=pb+1|0;a[kb+ -9|0]=j;a[kb+ -10|0]=ub;if((xb|0)==(vb|0)){break}else{kb=ob;pb=xb;tb=rb}}}a[g+10|0]=4;a[g+11|0]=64;c[g+4>>2]=vb<<3;break}}else{break}}else{break}}}while(0);do{if((c[n>>2]&131072|0)!=0){m=c[k>>2]|0;zb=c[g>>2]|0;tb=a[wb]|0;if(tb<<24>>24==6){pb=m+((c[g+4>>2]|0)+1)|0;kb=(zb|0)==0;if((a[g+9|0]|0)==8){if(kb){break}else{Ab=0;Bb=pb}do{ub=Bb+ -1|0;j=a[ub]|0;nb=Bb+ -2|0;a[ub]=a[nb]|0;ub=Bb+ -3|0;a[nb]=a[ub]|0;Bb=Bb+ -4|0;a[ub]=a[Bb]|0;a[Bb]=j;Ab=Ab+1|0}while((Ab|0)!=(zb|0))}else{if(kb){break}else{Cb=0;Db=pb}do{vb=Db+ -1|0;j=a[vb]|0;ub=Db+ -2|0;nb=a[ub]|0;mb=Db+ -3|0;a[vb]=a[mb]|0;vb=Db+ -4|0;a[ub]=a[vb]|0;ub=Db+ -5|0;a[mb]=a[ub]|0;mb=Db+ -6|0;a[vb]=a[mb]|0;vb=Db+ -7|0;a[ub]=a[vb]|0;Db=Db+ -8|0;a[mb]=a[Db]|0;a[vb]=j;a[Db]=nb;Cb=Cb+1|0}while((Cb|0)!=(zb|0))}}else if(tb<<24>>24==4){pb=m+((c[g+4>>2]|0)+1)|0;kb=(zb|0)==0;if((a[g+9|0]|0)==8){if(kb){break}else{Eb=pb;Fb=0}do{nb=Eb+ -1|0;j=a[nb]|0;Eb=Eb+ -2|0;a[nb]=a[Eb]|0;a[Eb]=j;Fb=Fb+1|0}while((Fb|0)!=(zb|0))}else{if(kb){break}else{Gb=pb;Hb=0}do{m=Gb+ -1|0;tb=a[m]|0;j=Gb+ -2|0;nb=a[j]|0;vb=Gb+ -3|0;a[m]=a[vb]|0;Gb=Gb+ -4|0;a[j]=a[Gb]|0;a[vb]=tb;a[Gb]=nb;Hb=Hb+1|0}while((Hb|0)!=(zb|0))}}else{break}}}while(0);Hb=c[n>>2]|0;if((Hb&16|0)==0){Ib=Hb}else{em(g,(c[k>>2]|0)+1|0);Ib=c[n>>2]|0}if((Ib&1048576|0)==0){i=h;return}Ib=c[f+192>>2]|0;if((Ib|0)!=0){Tc[Ib&15](f,g,(c[k>>2]|0)+1|0)}k=a[f+204|0]|0;if(!(k<<24>>24==0)){a[g+9|0]=k}k=a[f+205|0]|0;f=g+10|0;if(k<<24>>24==0){Jb=a[f]|0}else{a[f]=k;Jb=k}k=aa(Jb&255,d[g+9|0]|0)|0;a[g+11|0]=k;Jb=k&255;k=c[g>>2]|0;if(Jb>>>0>7){Kb=aa(Jb>>>3,k)|0}else{Kb=((aa(Jb,k)|0)+7|0)>>>3}c[g+4>>2]=Kb;i=h;return}function bl(f,g,h){f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0;j=i;k=c[f>>2]|0;l=f+8|0;m=a[l]|0;if(m<<24>>24==2){if((h|0)==0){i=j;return}n=f+9|0;o=a[n]|0;if(o<<24>>24==16){p=b[h+2>>1]|0;q=(p&65535)>>>8&65535;r=b[h+4>>1]|0;s=(r&65535)>>>8&65535;t=b[h+6>>1]|0;u=(t&65535)>>>8&65535;if((k|0)!=0){v=p&255;p=r&255;r=t&255;t=g+((k<<3)+ -1)|0;w=0;x=g+((c[f+4>>2]|0)+ -1)|0;while(1){y=x+ -5|0;z=x+ -4|0;if((((((d[y]|0)==(q|0)?(a[z]|0)==v<<24>>24:0)?(A=x+ -3|0,(d[A]|0)==(s|0)):0)?(B=x+ -2|0,(a[B]|0)==p<<24>>24):0)?(C=x+ -1|0,(d[C]|0)==(u|0)):0)?(a[x]|0)==r<<24>>24:0){a[t]=0;a[t+ -1|0]=0;D=C;E=B;F=A}else{a[t]=-1;a[t+ -1|0]=-1;D=x+ -1|0;E=x+ -2|0;F=x+ -3|0}a[t+ -2|0]=a[x]|0;a[t+ -3|0]=a[D]|0;a[t+ -4|0]=a[E]|0;a[t+ -5|0]=a[F]|0;a[t+ -6|0]=a[z]|0;a[t+ -7|0]=a[y]|0;w=w+1|0;if((w|0)==(k|0)){break}else{t=t+ -8|0;x=x+ -6|0}}}}else if(o<<24>>24==8?(k|0)!=0:0){o=b[h+2>>1]&255;x=b[h+4>>1]&255;t=b[h+6>>1]&255;w=g+((k<<2)+ -1)|0;F=0;E=g+((c[f+4>>2]|0)+ -1)|0;while(1){D=E+ -2|0;r=E+ -1|0;if(((a[D]|0)==o<<24>>24?(a[r]|0)==x<<24>>24:0)?(a[E]|0)==t<<24>>24:0){G=0}else{G=-1}a[w]=G;a[w+ -1|0]=a[E]|0;a[w+ -2|0]=a[r]|0;a[w+ -3|0]=a[D]|0;F=F+1|0;if((F|0)==(k|0)){break}else{w=w+ -4|0;E=E+ -3|0}}}a[l]=6;a[f+10|0]=4;E=d[n]<<2;a[f+11|0]=E;n=E&252;if(n>>>0>7){H=aa(n>>>3,k)|0}else{H=((aa(n,k)|0)+7|0)>>>3}c[f+4>>2]=H;i=j;return}else if(m<<24>>24==0){m=(h|0)!=0;if(m){I=e[h+8>>1]|0}else{I=0}h=f+9|0;H=a[h]|0;if((H&255)<8){n=H&255;if((n|0)==2){E=(I&3)*85|0;w=k+ -1|0;if((k|0)==0){J=E}else{F=g+w|0;G=0;t=(k<<1)+6&6^6;x=g+(w>>>2)|0;while(1){w=(d[x]|0)>>>t&3;a[F]=w<<2|w|w<<4|w<<6;w=(t|0)==6;o=G+1|0;if((o|0)==(k|0)){J=E;break}else{F=F+ -1|0;G=o;t=w?0:t+2|0;x=w?x+ -1|0:x}}}}else if((n|0)==4){x=(I&15)*17|0;t=k+ -1|0;if((k|0)==0){J=x}else{G=g+t|0;F=0;E=k<<2&4;w=g+(t>>>1)|0;while(1){t=(d[w]|0)>>>E&15;a[G]=t<<4|t;t=(E|0)==4;o=F+1|0;if((o|0)==(k|0)){J=x;break}else{G=G+ -1|0;F=o;E=t?0:4;w=t?w+ -1|0:w}}}}else if((n|0)==1){n=0-(I&1)&255;w=k+ -1|0;if((k|0)==0){J=n}else{E=g+w|0;F=0;G=k+7&7^7;x=g+(w>>>3)|0;while(1){a[E]=((d[x]&1<<G|0)!=0)<<31>>31;w=(G|0)==7;t=F+1|0;if((t|0)==(k|0)){J=n;break}else{E=E+ -1|0;F=t;G=w?0:G+1|0;x=w?x+ -1|0:x}}}}else{J=I}a[h]=8;a[f+11|0]=8;c[f+4>>2]=k;K=8;L=J}else{K=H;L=I}if(!m){i=j;return}if(K<<24>>24==16){m=c[f+4>>2]|0;if((k|0)!=0){I=L>>>8&255;H=L&255;J=g+((m<<1)+ -1)|0;x=0;G=g+(m+ -1)|0;while(1){m=G+ -1|0;if((a[m]|0)==I<<24>>24?(a[G]|0)==H<<24>>24:0){a[J]=0;a[J+ -1|0]=0}else{a[J]=-1;a[J+ -1|0]=-1}a[J+ -2|0]=a[G]|0;a[J+ -3|0]=a[m]|0;x=x+1|0;if((x|0)==(k|0)){break}else{J=J+ -4|0;G=G+ -2|0}}}}else if(K<<24>>24==8?(k|0)!=0:0){K=L&255;L=g+((k<<1)+ -1)|0;G=0;J=g+(k+ -1)|0;while(1){a[L]=((a[J]|0)!=K<<24>>24)<<31>>31;a[L+ -1|0]=a[J]|0;G=G+1|0;if((G|0)==(k|0)){break}else{L=L+ -2|0;J=J+ -1|0}}}a[l]=4;a[f+10|0]=2;l=d[h]<<1;a[f+11|0]=l;h=l&254;if(h>>>0>7){M=aa(h>>>3,k)|0}else{M=((aa(h,k)|0)+7|0)>>>3}c[f+4>>2]=M;i=j;return}else{i=j;return}}function cl(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;f=i;g=c[b>>2]|0;h=b+9|0;j=a[h]|0;if(!((j&255)>7)){i=f;return}k=b+8|0;l=a[k]|0;if(!((l&2)==0)){i=f;return}do{if(l<<24>>24==0){if(j<<24>>24==8){m=g+ -1|0;if((g|0)==0){break}n=e+(m+(g<<1))|0;o=0;p=e+m|0;while(1){a[n]=a[p]|0;a[n+ -1|0]=a[p]|0;a[n+ -2|0]=a[p]|0;o=o+1|0;if((o|0)==(g|0)){break}else{n=n+ -3|0;p=p+ -1|0}}}else{p=(g<<1)+ -1|0;if((g|0)==0){break}n=e+(p+(g<<2))|0;o=0;m=e+p|0;while(1){a[n]=a[m]|0;p=m+ -1|0;a[n+ -1|0]=a[p]|0;a[n+ -2|0]=a[m]|0;a[n+ -3|0]=a[p]|0;a[n+ -4|0]=a[m]|0;a[n+ -5|0]=a[p]|0;o=o+1|0;if((o|0)==(g|0)){break}else{n=n+ -6|0;m=m+ -2|0}}}}else if(l<<24>>24==4){if(j<<24>>24==8){m=g<<1;n=m+ -1|0;if((g|0)==0){break}o=e+(n+m)|0;m=0;p=e+n|0;while(1){n=p+ -1|0;a[o]=a[p]|0;a[o+ -1|0]=a[n]|0;a[o+ -2|0]=a[n]|0;a[o+ -3|0]=a[n]|0;m=m+1|0;if((m|0)==(g|0)){break}else{o=o+ -4|0;p=p+ -2|0}}}else{p=g<<2;o=p+ -1|0;if((g|0)==0){break}m=e+(o+p)|0;p=0;n=e+o|0;while(1){a[m]=a[n]|0;o=n+ -2|0;a[m+ -1|0]=a[n+ -1|0]|0;a[m+ -2|0]=a[o]|0;q=n+ -3|0;a[m+ -3|0]=a[q]|0;a[m+ -4|0]=a[o]|0;a[m+ -5|0]=a[q]|0;a[m+ -6|0]=a[o]|0;a[m+ -7|0]=a[q]|0;p=p+1|0;if((p|0)==(g|0)){break}else{m=m+ -8|0;n=n+ -4|0}}}}}while(0);e=b+10|0;j=(d[e]|0)+2|0;a[e]=j;a[k]=d[k]|0|2;k=aa(d[h]|0,j&255)|0;a[b+11|0]=k;j=k&255;if(j>>>0>7){r=aa(j>>>3,g)|0}else{r=((aa(j,g)|0)+7|0)>>>3}c[b+4>>2]=r;i=f;return}function dl(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=i;f=b+441|0;g=a[f]|0;h=g&255;if((g&255)>7){i=e;return}j=8-h|0;c[b+800>>2]=17;Uk(b,d+h+32|0,j);a[f]=8;f=d+32|0;if((Aj(f,h,j)|0)==0){if(!((g&255)<3)){i=e;return}d=b+208|0;c[d>>2]=c[d>>2]|4096;i=e;return}if(!((g&255)<4)){lk(b,14224)}if((Aj(f,h,j+ -4|0)|0)==0){lk(b,14224)}else{lk(b,14208)}}function el(a){a=a|0;var b=0,e=0,f=0,g=0,h=0,j=0,k=0;b=i;i=i+16|0;e=b;f=a+800|0;c[f>>2]=33;Uk(a,e,8);g=(d[e+1|0]|0)<<16|(d[e]|0)<<24|(d[e+2|0]|0)<<8|(d[e+3|0]|0);if((g|0)<0){lk(a,14168)}h=e+4|0;j=a+376|0;c[j>>2]=(d[e+5|0]|0)<<16|(d[h]|0)<<24|(d[e+6|0]|0)<<8|(d[e+7|0]|0);Dj(a);Ej(a,h,4);h=c[j>>2]|0;j=1;while(1){e=h&255;if((e+ -65|0)>>>0>57|(e+ -91|0)>>>0<6){k=5;break}e=j+1|0;if((e|0)<5){h=h>>>8;j=e}else{k=7;break}}if((k|0)==5){rk(a,15296)}else if((k|0)==7){c[f>>2]=65;i=b;return g|0}return 0}function fl(a,b){a=a|0;b=b|0;var e=0,f=0,g=0,h=0,j=0,k=0;e=i;i=i+1040|0;f=e+1024|0;g=e;if((b|0)!=0){if((a|0)==0){h=b;while(1){j=h>>>0<1024?h:1024;if((h|0)==(j|0)){break}else{h=h-j|0}}}else{h=b;while(1){b=h>>>0<1024?h:1024;Uk(a,g,b);Ej(a,g,b);if((h|0)==(b|0)){break}else{h=h-b|0}}}}h=a+376|0;g=a+212|0;b=c[g>>2]|0;if((c[h>>2]&536870912|0)==0){c[a+800>>2]=129;Uk(a,f,4);if((b&2048|0)!=0){k=0;i=e;return k|0}}else{c[a+800>>2]=129;Uk(a,f,4);if((b&768|0)==768){k=0;i=e;return k|0}}if(((d[f+1|0]|0)<<16|(d[f]|0)<<24|(d[f+2|0]|0)<<8|(d[f+3|0]|0)|0)==(c[a+412>>2]|0)){k=0;i=e;return k|0}f=c[g>>2]|0;if((c[h>>2]&536870912|0)==0){if((f&1024|0)==0){rk(a,14264)}}else{if((f&512|0)!=0){rk(a,14264)}}qk(a,14264);k=1;i=e;return k|0}function gl(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;g=i;i=i+16|0;h=g;j=b+208|0;k=c[j>>2]|0;if((k&1|0)!=0){rk(b,14280)}if((f|0)!=13){rk(b,14296)}c[j>>2]=k|1;if((b|0)!=0){Uk(b,h,13);Ej(b,h,13)}fl(b,0)|0;k=(d[h+1|0]|0)<<16|(d[h]|0)<<24|(d[h+2|0]|0)<<8|(d[h+3|0]|0);if((k|0)<0){lk(b,14168)}j=(d[h+5|0]|0)<<16|(d[h+4|0]|0)<<24|(d[h+6|0]|0)<<8|(d[h+7|0]|0);if((j|0)<0){lk(b,14168)}f=a[h+8|0]|0;l=f&255;m=a[h+9|0]|0;n=m&255;o=a[h+10|0]|0;p=o&255;q=a[h+11|0]|0;r=q&255;s=a[h+12|0]|0;h=s&255;c[b+348>>2]=k;c[b+352>>2]=j;a[b+436|0]=f;a[b+432|0]=s;a[b+435|0]=m;a[b+712|0]=q;a[b+744|0]=o;if((n|0)==2){a[b+439|0]=3;t=3}else if((n|0)==6){a[b+439|0]=4;t=4}else if((n|0)==4){a[b+439|0]=2;t=2}else{a[b+439|0]=1;t=1}o=aa(t,l)|0;a[b+438|0]=o;t=o&255;if(t>>>0>7){u=aa(t>>>3,k)|0;v=b+364|0;c[v>>2]=u;Tl(b,e,k,j,l,n,h,p,r);i=g;return}else{u=((aa(t,k)|0)+7|0)>>>3;v=b+364|0;c[v>>2]=u;Tl(b,e,k,j,l,n,h,p,r);i=g;return}}function hl(d,e,f){d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;g=i;i=i+784|0;h=g+8|0;j=g;k=d+208|0;l=c[k>>2]|0;if((l&1|0)==0){rk(d,14304)}if((l&2|0)!=0){rk(d,14320)}if((l&4|0)!=0){fl(d,f)|0;vk(d,14280);i=g;return}c[k>>2]=l|2;l=d+435|0;if((a[l]&2)==0){fl(d,f)|0;vk(d,14336);i=g;return}if(!(f>>>0<769&((f>>>0)%3|0|0)==0)){fl(d,f)|0;if((a[l]|0)==3){rk(d,14296)}vk(d,14296);i=g;return}l=(f|0)/3|0;if((f|0)>2){f=j+1|0;k=j+2|0;if((d|0)==0){m=0;n=h;while(1){a[n]=a[j]|0;a[n+1|0]=a[f]|0;a[n+2|0]=a[k]|0;m=m+1|0;if((m|0)>=(l|0)){break}else{n=n+3|0}}}else{n=0;m=h;while(1){Uk(d,j,3);Ej(d,j,3);a[m]=a[j]|0;a[m+1|0]=a[f]|0;a[m+2|0]=a[k]|0;n=n+1|0;if((n|0)>=(l|0)){break}else{m=m+3|0}}}}fl(d,0)|0;Yl(d,e,h,l);l=d+428|0;do{if((b[l>>1]|0)==0){if((e|0)==0){i=g;return}h=e+8|0;m=c[h>>2]|0;if((m&16|0)==0){o=m}else{b[l>>1]=0;p=h;q=24}}else{b[l>>1]=0;if((e|0)!=0){p=e+8|0;q=24;break}vk(d,14368);i=g;return}}while(0);if((q|0)==24){b[e+22>>1]=0;vk(d,14368);o=c[p>>2]|0}if((o&64|0)!=0){vk(d,14392)}if((c[e+8>>2]&32|0)==0){i=g;return}vk(d,14416);i=g;return}function il(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;b=i;e=a+208|0;f=c[e>>2]|0;if((f&5|0)!=5){rk(a,14280)}c[e>>2]=f|24;fl(a,d)|0;if((d|0)==0){i=b;return}vk(a,14296);i=b;return}function jl(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,g=0,h=0;f=i;i=i+16|0;g=f;h=c[a+208>>2]|0;if((h&1|0)==0){rk(a,14304)}if((h&6|0)!=0){fl(a,e)|0;vk(a,14280);i=f;return}if((e|0)!=4){fl(a,e)|0;vk(a,14296);i=f;return}if((a|0)!=0){Uk(a,g,4);Ej(a,g,4)}if((fl(a,0)|0)!=0){i=f;return}e=(d[g+1|0]|0)<<16|(d[g]|0)<<24|(d[g+2|0]|0)<<8|(d[g+3|0]|0);Nj(a,a+824|0,(e|0)>-1?e:-1);Pj(a,b);i=f;return}function kl(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;g=i;i=i+16|0;h=g;j=c[b+208>>2]|0;if((j&1|0)==0){rk(b,14304)}if((j&6|0)!=0){fl(b,f)|0;vk(b,14280);i=g;return}if((e|0)!=0?(c[e+8>>2]&2|0)!=0:0){fl(b,f)|0;vk(b,14320);i=g;return}j=b+435|0;if((a[j]|0)==3){k=8;l=3}else{k=a[b+436|0]|0;l=d[b+439|0]|0}if((l|0)!=(f|0)|f>>>0>4){vk(b,14296);fl(b,f)|0;i=g;return}l=h+3|0;m=h+2|0;n=h+1|0;Gm(h|0,k|0,4)|0;if((b|0)!=0){Uk(b,h,f);Ej(b,h,f)}if((fl(b,0)|0)!=0){i=g;return}a:do{if((f|0)!=0){o=0;while(1){p=a[h+o|0]|0;o=o+1|0;if(p<<24>>24==0|(p&255)>(k&255)){break}if(!(o>>>0<f>>>0)){break a}}vk(b,14296);i=g;return}}while(0);f=a[h]|0;h=b+516|0;if((a[j]&2)==0){Gm(h|0,f|0,4)|0;a[b+520|0]=a[n]|0}else{a[h]=f;a[b+517|0]=a[n]|0;a[b+518|0]=a[m]|0;a[b+520|0]=a[l]|0}Zl(b,e,h);i=g;return}function ll(a,f,g){a=a|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;h=i;i=i+64|0;j=h+32|0;k=h;l=c[a+208>>2]|0;if((l&1|0)==0){rk(a,14304)}if((l&6|0)!=0){fl(a,g)|0;vk(a,14280);i=h;return}if((g|0)!=32){fl(a,g)|0;vk(a,14296);i=h;return}if((a|0)!=0){Uk(a,j,32);Ej(a,j,32)}if((fl(a,0)|0)!=0){i=h;return}g=(d[j+1|0]|0)<<16|(d[j]|0)<<24|(d[j+2|0]|0)<<8|(d[j+3|0]|0);l=k+24|0;c[l>>2]=(g|0)>-1?g:-1;g=(d[j+5|0]|0)<<16|(d[j+4|0]|0)<<24|(d[j+6|0]|0)<<8|(d[j+7|0]|0);m=k+28|0;c[m>>2]=(g|0)>-1?g:-1;g=(d[j+9|0]|0)<<16|(d[j+8|0]|0)<<24|(d[j+10|0]|0)<<8|(d[j+11|0]|0);c[k>>2]=(g|0)>-1?g:-1;g=(d[j+13|0]|0)<<16|(d[j+12|0]|0)<<24|(d[j+14|0]|0)<<8|(d[j+15|0]|0);n=(g|0)>-1?g:-1;c[k+4>>2]=n;g=(d[j+17|0]|0)<<16|(d[j+16|0]|0)<<24|(d[j+18|0]|0)<<8|(d[j+19|0]|0);o=(g|0)>-1?g:-1;c[k+8>>2]=o;g=(d[j+21|0]|0)<<16|(d[j+20|0]|0)<<24|(d[j+22|0]|0)<<8|(d[j+23|0]|0);p=(g|0)>-1?g:-1;c[k+12>>2]=p;g=(d[j+25|0]|0)<<16|(d[j+24|0]|0)<<24|(d[j+26|0]|0)<<8|(d[j+27|0]|0);q=(g|0)>-1?g:-1;c[k+16>>2]=q;g=(d[j+29|0]|0)<<16|(d[j+28|0]|0)<<24|(d[j+30|0]|0)<<8|(d[j+31|0]|0);j=(g|0)>-1?g:-1;c[k+20>>2]=j;if(((!((c[l>>2]|0)==-1)?!((c[m>>2]|0)==-1):0)?!((c[k>>2]|0)==-1|(n|0)==-1|(o|0)==-1|(p|0)==-1):0)?!((q|0)==-1|(j|0)==-1):0){j=a+898|0;q=e[j>>1]|0;if((q&32768|0)!=0){i=h;return}if((q&16|0)==0){b[j>>1]=q|16;Qj(a,a+824|0,k,1)|0;Pj(a,f);i=h;return}else{b[j>>1]=q|32768;Pj(a,f);vk(a,14320);i=h;return}}vk(a,14440);i=h;return}function ml(a,f,g){a=a|0;f=f|0;g=g|0;var h=0,j=0,k=0;h=i;i=i+16|0;j=h;k=c[a+208>>2]|0;if((k&1|0)==0){rk(a,14304)}if((k&6|0)!=0){fl(a,g)|0;vk(a,14280);i=h;return}if((g|0)!=1){fl(a,g)|0;vk(a,14296);i=h;return}if((a|0)!=0){Uk(a,j,1);Ej(a,j,1)}if((fl(a,0)|0)!=0){i=h;return}g=a+898|0;k=e[g>>1]|0;if((k&32768|0)!=0){i=h;return}if((k&4|0)==0){Sj(a,a+824|0,d[j]|0)|0;Pj(a,f);i=h;return}else{b[g>>1]=k|32768;Pj(a,f);vk(a,14456);i=h;return}}function nl(f,g,h){f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0;j=i;i=i+1248|0;k=j+4|0;l=j+1164|0;m=j+1032|0;n=j+8|0;o=j;c[k>>2]=h;p=c[f+208>>2]|0;if((p&1|0)==0){rk(f,14304)}if((p&6|0)!=0){fl(f,h)|0;vk(f,14280);i=j;return}if(h>>>0<9){fl(f,h)|0;vk(f,14480);i=j;return}p=f+824|0;q=f+898|0;r=e[q>>1]|0;if((r&32768|0)!=0){fl(f,h)|0;i=j;return}do{if((r&4|0)==0){s=h>>>0<81?h:81;if((f|0)!=0){Uk(f,l,s);Ej(f,l,s)}t=h-s|0;c[k>>2]=t;if((s|0)!=0){u=0;while(1){v=u+1|0;if((a[l+u|0]|0)==0){w=1;x=u;break}y=v>>>0<80;if(y&v>>>0<s>>>0){u=v}else{w=y;x=v;break}}if((x|0)!=0&w){u=x+1|0;if(u>>>0<s>>>0?(a[l+u|0]|0)==0:0){v=x+2|0;if((ol(f,1766015824)|0)!=0){z=t;A=c[f+248>>2]|0;B=44;break}c[o>>2]=132;c[f+224>>2]=l+v;c[f+228>>2]=s-v;pl(f,n,k,m,o,0);a:do{if((c[o>>2]|0)==0){v=d[m+1|0]<<16|d[m]<<24|d[m+2|0]<<8|d[m+3|0];if((Vj(f,p,l,v)|0)!=0?(Wj(f,p,l,v,m,d[f+435|0]|0)|0)!=0:0){y=a[m+128|0]|0;C=a[m+129|0]|0;D=a[m+130|0]|0;E=a[m+131|0]|0;F=f+788|0;G=c[F>>2]|0;if((G|0)!=0){H=f+792|0;if((c[H>>2]|0)>>>0<v>>>0){c[F>>2]=0;c[H>>2]=0;Ik(f,G);B=25}else{I=G}}else{B=25}if((B|0)==25){G=Lk(f,v)|0;if((G|0)==0){J=14520;K=1;break}c[F>>2]=G;c[f+792>>2]=v;I=G}Fm(I|0,m|0,132)|0;G=((C&255)<<16|(y&255)<<24|(D&255)<<8|E&255)*12|0;c[o>>2]=G;pl(f,n,k,I+132|0,o,0);if((c[o>>2]|0)!=0){J=c[f+248>>2]|0;K=1;break}if((Xj(f,p,l,v,I)|0)!=0){c[o>>2]=v+ -132-G;pl(f,n,k,I+(G+132)|0,o,1);G=c[k>>2]|0;E=(G|0)==0;if(!E?(c[f+212>>2]&1048576|0)==0:0){J=14496;K=1;break}if((c[o>>2]|0)==0){if(!E){qk(f,14496)}fl(f,G)|0;Yj(f,p,I,c[f+272>>2]|0);do{if((g|0)!=0){Jj(f,g,16,0);G=Lk(f,u)|0;c[g+116>>2]=G;if((G|0)==0){b[q>>1]=e[q>>1]|32768;Pj(f,g);J=14520;K=0;break a}else{Fm(G|0,l|0,u|0)|0;c[g+124>>2]=v;c[g+120>>2]=I;c[F>>2]=0;G=g+232|0;c[G>>2]=c[G>>2]|16;G=g+8|0;c[G>>2]=c[G>>2]|4096;Pj(f,g);break}}}while(0);c[f+220>>2]=0;i=j;return}else{J=14536;K=1}}else{J=0;K=1}}else{J=0;K=1}}else{J=c[f+248>>2]|0;K=1}}while(0);c[f+220>>2]=0;if(K){z=c[k>>2]|0;A=J;B=44}else{L=J}}else{z=t;A=14552;B=44}}else{z=t;A=14576;B=44}}else{z=t;A=14576;B=44}}else{z=h;A=14456;B=44}}while(0);if((B|0)==44){fl(f,z)|0;L=A}b[q>>1]=e[q>>1]|32768;Pj(f,g);if((L|0)==0){i=j;return}vk(f,L);i=j;return}function ol(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;e=i;i=i+64|0;f=e;g=b+220|0;h=c[g>>2]|0;if((h|0)!=0){a[f]=h>>>24;a[f+1|0]=h>>>16;a[f+2|0]=h>>>8;a[f+3|0]=h;mk(f,64,4,15968)|0;qk(b,f);c[g>>2]=0}f=b+224|0;c[f>>2]=0;c[b+228>>2]=0;c[b+236>>2]=0;c[b+240>>2]=0;h=b+212|0;if((c[h>>2]&2|0)==0){j=mm(f,15984,56)|0;if((j|0)==0){c[h>>2]=c[h>>2]|2;k=7}else{l=j;k=8}}else{j=lm(f)|0;if((j|0)==0){k=7}else{l=j;k=8}}if((k|0)==7){c[g>>2]=d;m=0;i=e;return m|0}else if((k|0)==8){Mj(b,l);m=l;i=e;return m|0}return 0}function pl(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;h=i;if((c[a+220>>2]|0)!=(c[a+376>>2]|0)){c[a+248>>2]=15904;i=h;return}j=a+224|0;c[a+236>>2]=e;e=a+240|0;c[e>>2]=0;k=a+228|0;l=(g|0)!=0?4:2;g=1024;while(1){if((c[k>>2]|0)==0){m=c[d>>2]|0;n=g>>>0>m>>>0?m:g;c[d>>2]=m-n;if((n|0)!=0){Uk(a,b,n);Ej(a,b,n)}c[j>>2]=b;c[k>>2]=n;o=n}else{o=g}if((c[e>>2]|0)==0){n=c[f>>2]|0;c[f>>2]=0;c[e>>2]=n}n=nm(j,(c[d>>2]|0)==0?l:0)|0;if((n|0)!=0){p=n;break}if((c[f>>2]|0)!=0){g=o;continue}if((c[e>>2]|0)==0){p=0;break}else{g=o}}c[f>>2]=(c[f>>2]|0)+(c[e>>2]|0);c[e>>2]=0;Mj(a,p);i=h;return}function ql(e,f,g){e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;h=i;i=i+16|0;j=h;k=e+756|0;l=c[k>>2]|0;if((l|0)==1){fl(e,g)|0;i=h;return}else if((l|0)!=0){m=3}if((m|0)==3?(n=l+ -1|0,c[k>>2]=n,(n|0)==1):0){ok(e,14592);fl(e,g)|0;i=h;return}n=c[e+208>>2]|0;if((n&1|0)==0){rk(e,14304)}if((n&4|0)!=0){fl(e,g)|0;vk(e,14280);i=h;return}n=g+1|0;k=e+788|0;l=c[k>>2]|0;if((l|0)!=0){o=e+792|0;if((c[o>>2]|0)>>>0<n>>>0){c[k>>2]=0;c[o>>2]=0;Ik(e,l);m=12}else{p=l;m=15}}else{m=12}do{if((m|0)==12){l=Lk(e,n)|0;if((l|0)!=0){c[k>>2]=l;c[e+792>>2]=n;if((e|0)==0){q=l;break}else{p=l;m=15;break}}fl(e,g)|0;vk(e,14520);i=h;return}}while(0);if((m|0)==15){Uk(e,p,g);Ej(e,p,g);q=p}if((fl(e,0)|0)!=0){i=h;return}a[q+g|0]=0;p=q;while(1){r=p+1|0;if((a[p]|0)==0){break}else{p=r}}if(r>>>0>(q+(g+ -2)|0)>>>0){ok(e,14632);i=h;return}m=p+2|0;p=a[r]|0;a[j+4|0]=p;r=p<<24>>24==8;p=r?6:10;n=q-m+g|0;if(((n>>>0)%(p>>>0)|0|0)!=0){ok(e,14656);i=h;return}g=(n>>>0)/(p>>>0)|0;if(g>>>0>429496729){ok(e,14688);i=h;return}c[j+12>>2]=g;p=Ok(e,g*10|0)|0;n=j+8|0;c[n>>2]=p;if((p|0)==0){ok(e,14712);i=h;return}if((g|0)!=0){k=m;m=0;while(1){l=p+(m*10|0)|0;if(r){b[l>>1]=d[k]|0;b[p+(m*10|0)+2>>1]=d[k+1|0]|0;b[p+(m*10|0)+4>>1]=d[k+2|0]|0;b[p+(m*10|0)+6>>1]=d[k+3|0]|0;s=k+4|0}else{b[l>>1]=d[k]<<8|d[k+1|0];b[p+(m*10|0)+2>>1]=d[k+2|0]<<8|d[k+3|0];b[p+(m*10|0)+4>>1]=d[k+4|0]<<8|d[k+5|0];b[p+(m*10|0)+6>>1]=d[k+6|0]<<8|d[k+7|0];s=k+8|0}b[p+(m*10|0)+8>>1]=d[s]<<8|d[s+1|0];m=m+1|0;if((m|0)>=(g|0)){break}else{k=s+2|0}}}c[j>>2]=q;bm(e,f,j,1);Ik(e,c[n>>2]|0);i=h;return}function rl(d,f,g){d=d|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;h=i;i=i+272|0;j=h+8|0;k=h;l=h+2|0;m=c[d+208>>2]|0;if((m&1|0)==0){rk(d,14304)}if((m&4|0)!=0){fl(d,g)|0;vk(d,14280);i=h;return}if((f|0)!=0?(c[f+8>>2]&16|0)!=0:0){fl(d,g)|0;vk(d,14320);i=h;return}n=a[d+435|0]|0;if(n<<24>>24==3){if((m&2|0)==0){fl(d,g)|0;vk(d,14280);i=h;return}if((e[d+420>>1]|0)>>>0<g>>>0|g>>>0>256|(g|0)==0){fl(d,g)|0;vk(d,14296);i=h;return}if((d|0)!=0){Uk(d,j,g);Ej(d,j,g)}b[d+428>>1]=g}else if(n<<24>>24==0){if((g|0)!=2){fl(d,g)|0;vk(d,14296);i=h;return}if((d|0)==0){o=0;p=0}else{Uk(d,k,2);Ej(d,k,2);o=a[k]|0;p=a[k+1|0]|0}b[d+428>>1]=1;b[d+540>>1]=(o&255)<<8|p&255}else if(n<<24>>24==2){if((g|0)!=6){fl(d,g)|0;vk(d,14296);i=h;return}if((d|0)==0){q=0;r=0;s=0;t=0;u=0;v=0}else{Uk(d,l,6);Ej(d,l,6);q=a[l]|0;r=a[l+1|0]|0;s=a[l+2|0]|0;t=a[l+3|0]|0;u=a[l+4|0]|0;v=a[l+5|0]|0}b[d+428>>1]=1;b[d+534>>1]=(q&255)<<8|r&255;b[d+536>>1]=(s&255)<<8|t&255;b[d+538>>1]=(u&255)<<8|v&255}else{fl(d,g)|0;vk(d,14752);i=h;return}g=d+428|0;if((fl(d,0)|0)==0){am(d,f,j,e[g>>1]|0,d+532|0);i=h;return}else{b[g>>1]=0;i=h;return}}function sl(e,f,g){e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;h=i;i=i+16|0;j=h+10|0;k=h;l=c[e+208>>2]|0;if((l&1|0)==0){rk(e,14304)}do{if((l&4|0)==0){m=e+435|0;n=a[m]|0;o=n<<24>>24==3;if(o?(l&2|0)==0:0){break}p=(f|0)!=0;if(p?(c[f+8>>2]&32|0)!=0:0){fl(e,g)|0;vk(e,14320);i=h;return}if(o){q=1}else{q=(n&2)==0?2:6}if((q|0)!=(g|0)){fl(e,g)|0;vk(e,14296);i=h;return}if((e|0)!=0){Uk(e,j,g);Ej(e,j,g)}if((fl(e,0)|0)!=0){i=h;return}n=a[m]|0;do{if(!(n<<24>>24==3)){a[k]=0;m=((d[j]|0)<<8|(d[j+1|0]|0))&65535;if((n&2)==0){b[k+8>>1]=m;b[k+6>>1]=m;b[k+4>>1]=m;b[k+2>>1]=m;break}else{b[k+2>>1]=m;b[k+4>>1]=(d[j+2|0]|0)<<8|(d[j+3|0]|0);b[k+6>>1]=(d[j+4|0]|0)<<8|(d[j+5|0]|0);b[k+8>>1]=0;break}}else{m=a[j]|0;a[k]=m;do{if(p?(o=b[f+20>>1]|0,!(o<<16>>16==0)):0){r=m&255;if(r>>>0<(o&65535)>>>0){o=c[e+416>>2]|0;b[k+2>>1]=d[o+(r*3|0)|0]|0;b[k+4>>1]=d[o+(r*3|0)+1|0]|0;b[k+6>>1]=d[o+(r*3|0)+2|0]|0;break}vk(e,14784);i=h;return}else{s=23}}while(0);if((s|0)==23){b[k+6>>1]=0;b[k+4>>1]=0;b[k+2>>1]=0}b[k+8>>1]=0}}while(0);Rl(e,f,k);i=h;return}}while(0);fl(e,g)|0;vk(e,14280);i=h;return}function tl(a,f,g){a=a|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0;h=i;i=i+528|0;j=h;k=h+512|0;l=c[a+208>>2]|0;if((l&1|0)==0){rk(a,14304)}if((l&6|0)!=2){fl(a,g)|0;vk(a,14280);i=h;return}if((f|0)!=0?(c[f+8>>2]&64|0)!=0:0){fl(a,g)|0;vk(a,14320);i=h;return}l=g>>>1;if((l|0)!=(e[a+420>>1]|0|0)|g>>>0>513){fl(a,g)|0;vk(a,14296);i=h;return}if((l|0)!=0){g=k+1|0;if((a|0)==0){m=0;do{b[j+(m<<1)>>1]=0;m=m+1|0}while(m>>>0<l>>>0)}else{m=0;do{Uk(a,k,2);Ej(a,k,2);b[j+(m<<1)>>1]=(d[k]|0)<<8|(d[g]|0);m=m+1|0}while(m>>>0<l>>>0)}}if((fl(a,0)|0)!=0){i=h;return}Sl(a,f,j);i=h;return}function ul(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,g=0,h=0;f=i;i=i+16|0;g=f;h=c[a+208>>2]|0;if((h&1|0)==0){rk(a,14304)}if((h&4|0)!=0){fl(a,e)|0;vk(a,14280);i=f;return}if((b|0)!=0?(c[b+8>>2]&128|0)!=0:0){fl(a,e)|0;vk(a,14320);i=f;return}if((e|0)!=9){fl(a,e)|0;vk(a,14296);i=f;return}if((a|0)!=0){Uk(a,g,9);Ej(a,g,9)}if((fl(a,0)|0)!=0){i=f;return}Xl(a,b,(d[g+1|0]|0)<<16|(d[g]|0)<<24|(d[g+2|0]|0)<<8|(d[g+3|0]|0),(d[g+5|0]|0)<<16|(d[g+4|0]|0)<<24|(d[g+6|0]|0)<<8|(d[g+7|0]|0),d[g+8|0]|0);i=f;return}function vl(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,g=0,h=0;f=i;i=i+16|0;g=f;h=c[a+208>>2]|0;if((h&1|0)==0){rk(a,14304)}if((h&4|0)!=0){fl(a,e)|0;vk(a,14280);i=f;return}if((b|0)!=0?(c[b+8>>2]&256|0)!=0:0){fl(a,e)|0;vk(a,14320);i=f;return}if((e|0)!=9){fl(a,e)|0;vk(a,14296);i=f;return}if((a|0)!=0){Uk(a,g,9);Ej(a,g,9)}if((fl(a,0)|0)!=0){i=f;return}Ul(a,b,(d[g+1|0]|0)<<16|(d[g]|0)<<24|(d[g+2|0]|0)<<8|(d[g+3|0]|0),(d[g+5|0]|0)<<16|(d[g+4|0]|0)<<24|(d[g+6|0]|0)<<8|(d[g+7|0]|0),d[g+8|0]|0);i=f;return}function wl(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;g=i;h=c[b+208>>2]|0;if((h&1|0)==0){rk(b,14304)}if((h&4|0)!=0){fl(b,f)|0;vk(b,14280);i=g;return}if((e|0)!=0?(c[e+8>>2]&1024|0)!=0:0){fl(b,f)|0;vk(b,14320);i=g;return}h=f+1|0;j=b+788|0;k=c[j>>2]|0;if((k|0)!=0){l=b+792|0;if((c[l>>2]|0)>>>0<h>>>0){c[j>>2]=0;c[l>>2]=0;Ik(b,k);m=11}else{n=k;m=14}}else{m=11}do{if((m|0)==11){k=Lk(b,h)|0;if((k|0)!=0){c[j>>2]=k;c[b+792>>2]=h;if((b|0)==0){o=k;break}else{n=k;m=14;break}}fl(b,f)|0;vk(b,14520);i=g;return}}while(0);if((m|0)==14){Uk(b,n,f);Ej(b,n,f);o=n}if((fl(b,0)|0)!=0){i=g;return}n=o+f|0;a[n]=0;f=o;while(1){p=f+1|0;if((a[f]|0)==0){break}else{f=p}}if(!(n>>>0>(f+12|0)>>>0)){vk(b,14296);i=g;return}m=d[f+2|0]<<16|d[p]<<24|d[f+3|0]<<8|d[f+4|0];p=d[f+6|0]<<16|d[f+5|0]<<24|d[f+7|0]<<8|d[f+8|0];h=a[f+9|0]|0;j=a[f+10|0]|0;k=f+11|0;f=h&255;if((h<<24>>24!=0|j<<24>>24==2?(h+ -1<<24>>24&255)>1|j<<24>>24==3:0)?h<<24>>24!=3|j<<24>>24==4:0){if((h&255)>3){vk(b,14824);q=k}else{q=k}while(1){if((a[q]|0)==0){break}else{q=q+1|0}}h=j&255;l=Ok(b,h<<2)|0;if((l|0)==0){vk(b,14520);i=g;return}a:do{if(!(j<<24>>24==0)){r=q;s=0;b:while(1){t=r+1|0;c[l+(s<<2)>>2]=t;if(t>>>0>n>>>0){break}else{u=t}while(1){t=u+1|0;if((a[u]|0)==0){break}if(t>>>0>n>>>0){break b}else{u=t}}s=s+1|0;if((s|0)>=(h|0)){break a}else{r=u}}Ik(b,l);vk(b,14856);i=g;return}}while(0);Vl(b,e,o,m,p,f,h,k,l);Ik(b,l);i=g;return}vk(b,14800);i=g;return}function xl(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;g=i;i=i+16|0;h=g+4|0;j=g;k=c[b+208>>2]|0;if((k&1|0)==0){rk(b,14304)}if((k&4|0)!=0){fl(b,f)|0;vk(b,14280);i=g;return}if((e|0)!=0?(c[e+8>>2]&16384|0)!=0:0){fl(b,f)|0;vk(b,14320);i=g;return}if(f>>>0<4){fl(b,f)|0;vk(b,14296);i=g;return}k=f+1|0;l=b+788|0;m=c[l>>2]|0;if((m|0)!=0){n=b+792|0;if((c[n>>2]|0)>>>0<k>>>0){c[l>>2]=0;c[n>>2]=0;Ik(b,m);o=13}else{p=m;o=16}}else{o=13}do{if((o|0)==13){m=Lk(b,k)|0;if((m|0)!=0){c[l>>2]=m;c[b+792>>2]=k;if((b|0)==0){q=m;break}else{p=m;o=16;break}}vk(b,14520);fl(b,f)|0;i=g;return}}while(0);if((o|0)==16){Uk(b,p,f);Ej(b,p,f);q=p}a[q+f|0]=0;if((fl(b,0)|0)!=0){i=g;return}if(!(((a[q]|0)+ -1<<24>>24&255)<2)){vk(b,14872);i=g;return}c[h>>2]=1;c[j>>2]=0;if(((ak(q,f,j,h)|0)!=0?(p=c[h>>2]|0,p>>>0<f>>>0):0)?(o=p+1|0,c[h>>2]=o,(a[q+p|0]|0)==0):0){if((c[j>>2]&392|0)!=264){vk(b,14912);i=g;return}c[j>>2]=0;p=(ak(q,f,j,h)|0)!=0;if(!(p&(c[h>>2]|0)==(f|0))){vk(b,14936);i=g;return}if((c[j>>2]&392|0)==264){Wl(b,e,d[q]|0,q+1|0,q+o|0);i=g;return}else{vk(b,14960);i=g;return}}vk(b,14888);i=g;return}function yl(e,f,g){e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0;h=i;i=i+16|0;j=h+8|0;k=h;l=e+208|0;m=c[l>>2]|0;if((m&1|0)==0){rk(e,14304)}if((f|0)!=0?(c[f+8>>2]&512|0)!=0:0){fl(e,g)|0;vk(e,14320);i=h;return}if((m&4|0)!=0){c[l>>2]=m|8}if((g|0)!=7){fl(e,g)|0;vk(e,14296);i=h;return}if((e|0)!=0){Uk(e,j,7);Ej(e,j,7)}if((fl(e,0)|0)!=0){i=h;return}a[k+6|0]=a[j+6|0]|0;a[k+5|0]=a[j+5|0]|0;a[k+4|0]=a[j+4|0]|0;a[k+3|0]=a[j+3|0]|0;a[k+2|0]=a[j+2|0]|0;b[k>>1]=(d[j]|0)<<8|(d[j+1|0]|0);$l(e,f,k);i=h;return}function zl(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;f=i;i=i+32|0;g=f;h=b+756|0;j=c[h>>2]|0;if((j|0)==1){fl(b,e)|0;i=f;return}else if((j|0)!=0){k=3}if((k|0)==3?(l=j+ -1|0,c[h>>2]=l,(l|0)==1):0){fl(b,e)|0;vk(b,14984);i=f;return}l=b+208|0;h=c[l>>2]|0;if((h&1|0)==0){rk(b,14304)}if((h&4|0)!=0){c[l>>2]=h|8}h=e+1|0;l=b+788|0;j=c[l>>2]|0;if((j|0)!=0){m=b+792|0;if((c[m>>2]|0)>>>0<h>>>0){c[l>>2]=0;c[m>>2]=0;Ik(b,j);k=12}else{n=j;k=15}}else{k=12}do{if((k|0)==12){j=Lk(b,h)|0;if((j|0)!=0){c[l>>2]=j;c[b+792>>2]=h;if((b|0)==0){o=j;break}else{n=j;k=15;break}}qk(b,15928);vk(b,14520);i=f;return}}while(0);if((k|0)==15){Uk(b,n,e);Ej(b,n,e);o=n}if((fl(b,0)|0)!=0){i=f;return}n=o+e|0;a[n]=0;e=o;while(1){p=e+1|0;if((a[e]|0)==0){break}else{e=p}}k=(e|0)==(n|0)?e:p;c[g>>2]=-1;c[g+4>>2]=o;c[g+20>>2]=0;c[g+24>>2]=0;c[g+16>>2]=0;c[g+8>>2]=k;c[g+12>>2]=Am(k|0)|0;if((_l(b,d,g,1)|0)==0){i=f;return}ok(b,15008);i=f;return}function Al(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;f=i;i=i+32|0;g=f+28|0;h=f;j=b+756|0;k=c[j>>2]|0;if((k|0)==1){fl(b,e)|0;i=f;return}else if((k|0)!=0){l=3}if((l|0)==3?(m=k+ -1|0,c[j>>2]=m,(m|0)==1):0){fl(b,e)|0;vk(b,14984);i=f;return}m=b+208|0;j=c[m>>2]|0;if((j&1|0)==0){rk(b,14304)}if((j&4|0)!=0){c[m>>2]=j|8}j=b+788|0;m=c[j>>2]|0;if((m|0)!=0){k=b+792|0;if((c[k>>2]|0)>>>0<e>>>0){c[j>>2]=0;c[k>>2]=0;Ik(b,m);l=12}else{n=m;l=15}}else{l=12}do{if((l|0)==12){m=Lk(b,e)|0;if((m|0)!=0){c[j>>2]=m;c[b+792>>2]=e;if((b|0)==0){o=m;break}else{n=m;l=15;break}}fl(b,e)|0;vk(b,14520);i=f;return}}while(0);if((l|0)==15){Uk(b,n,e);Ej(b,n,e);o=n}if((fl(b,0)|0)!=0){i=f;return}if((e|0)!=0){n=0;while(1){l=n+1|0;if((a[o+n|0]|0)==0){p=n;break}if(l>>>0<e>>>0){n=l}else{p=l;break}}if(!(p>>>0>79|(p|0)==0)){if(!((p+3|0)>>>0>e>>>0)){if((a[o+(p+1)|0]|0)==0){c[g>>2]=-1;o=p+2|0;if((Bl(b,e,o,g)|0)==1){e=c[j>>2]|0;j=c[g>>2]|0;a[e+(j+o)|0]=0;c[h>>2]=0;c[h+4>>2]=e;c[h+8>>2]=e+o;c[h+12>>2]=j;c[h+16>>2]=0;c[h+20>>2]=0;c[h+24>>2]=0;j=(_l(b,d,h,1)|0)==0;q=j?0:15088}else{q=c[b+248>>2]|0}if((q|0)==0){i=f;return}else{r=q}}else{r=15056}}else{r=14536}}else{r=14576}}else{r=14576}vk(b,r);i=f;return}function Bl(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;g=i;i=i+16|0;h=g;j=c[b+760>>2]|0;if(!((j|0)==-1|(j|0)==0)){k=e+1|0;if(j>>>0<k>>>0){Mj(b,-4);l=-4;i=g;return l|0}else{m=k;n=j}}else{m=e+1|0;n=-1}j=n-m|0;if(j>>>0<(c[f>>2]|0)>>>0){c[f>>2]=j}j=b+376|0;m=ol(b,c[j>>2]|0)|0;if((m|0)==1){l=-7;i=g;return l|0}else if((m|0)==0){n=d-e|0;c[h>>2]=n;d=b+788|0;k=Ql(b,c[j>>2]|0,(c[d>>2]|0)+e|0,h,0,f)|0;do{if((k|0)==1){if((lm(b+224|0)|0)!=0){Mj(b,1);o=-7;break}p=c[f>>2]|0;q=e+1+p|0;r=Lk(b,q)|0;if((r|0)==0){Mj(b,-4);o=-4;break}s=Ql(b,c[j>>2]|0,(c[d>>2]|0)+e|0,h,r+e|0,f)|0;if((s|0)==1){if((p|0)==(c[f>>2]|0)){a[r+(p+e)|0]=0;p=c[d>>2]|0;if((e|0)!=0){Fm(r|0,p|0,e|0)|0}c[d>>2]=r;c[b+792>>2]=q;t=1;u=p}else{t=-7;u=r}}else if((s|0)==0){t=-7;u=r}else{t=s;u=r}Ik(b,u);if((t|0)!=1|(n|0)==(c[h>>2]|0)){o=t}else{vk(b,14496);o=1}}else{o=(k|0)==0?-7:k}}while(0);c[b+220>>2]=0;l=o;i=g;return l|0}else{l=m;i=g;return l|0}return 0}function Cl(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;f=i;i=i+32|0;g=f+28|0;h=f;j=b+756|0;k=c[j>>2]|0;if((k|0)==1){fl(b,e)|0;i=f;return}else if((k|0)!=0){l=3}if((l|0)==3?(m=k+ -1|0,c[j>>2]=m,(m|0)==1):0){fl(b,e)|0;vk(b,14984);i=f;return}m=b+208|0;j=c[m>>2]|0;if((j&1|0)==0){rk(b,14304)}if((j&4|0)!=0){c[m>>2]=j|8}j=e+1|0;m=b+788|0;k=c[m>>2]|0;if((k|0)!=0){n=b+792|0;if((c[n>>2]|0)>>>0<j>>>0){c[m>>2]=0;c[n>>2]=0;Ik(b,k);l=12}else{o=k;l=15}}else{l=12}do{if((l|0)==12){k=Lk(b,j)|0;if((k|0)!=0){c[m>>2]=k;c[b+792>>2]=j;if((b|0)==0){p=k;break}else{o=k;l=15;break}}qk(b,15928);fl(b,e)|0;vk(b,14520);i=f;return}}while(0);if((l|0)==15){Uk(b,o,e);Ej(b,o,e);p=o}if((fl(b,0)|0)!=0){i=f;return}a:do{if((e|0)!=0){o=0;while(1){l=o+1|0;if((a[p+o|0]|0)==0){q=o;break}if(l>>>0<e>>>0){o=l}else{q=l;break}}if(!(q>>>0>79|(q|0)==0)){if(!((q+5|0)>>>0>e>>>0)){o=a[p+(q+1)|0]|0;if(o<<24>>24==1){if((a[p+(q+2)|0]|0)!=0){r=15112;break}}else if(!(o<<24>>24==0)){r=15112;break}l=o<<24>>24!=0;c[g>>2]=0;o=q+3|0;b:do{if(o>>>0<e>>>0){j=o;while(1){k=j+1|0;if((a[p+j|0]|0)==0){s=j;break b}if(k>>>0<e>>>0){j=k}else{s=k;break}}}else{s=o}}while(0);j=s+1|0;c:do{if(j>>>0<e>>>0){k=j;while(1){n=k+1|0;if((a[p+k|0]|0)==0){t=k;break c}if(n>>>0<e>>>0){k=n}else{t=n;break}}}else{t=j}}while(0);k=t+1|0;do{if(l|k>>>0>e>>>0){if(!(l&k>>>0<e>>>0)){r=14536;break a}c[g>>2]=-1;if((Bl(b,e,k,g)|0)!=1){n=c[b+248>>2]|0;if((n|0)==0){u=p;break}else{r=n;break a}}else{u=c[m>>2]|0;break}}else{c[g>>2]=e-k;u=p}}while(0);a[u+((c[g>>2]|0)+k)|0]=0;c[h>>2]=l?1:2;c[h+4>>2]=u;c[h+20>>2]=u+o;c[h+24>>2]=u+j;c[h+8>>2]=u+k;c[h+12>>2]=0;c[h+16>>2]=c[g>>2];n=(_l(b,d,h,1)|0)==0;if(n){i=f;return}else{r=n?0:15088}}else{r=14536}}else{r=14576}}else{r=14576}}while(0);vk(b,r);i=f;return}function Dl(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0;f=i;g=a+684|0;do{if((c[g>>2]|0)==0){if((e|0)==0){h=c[a+688>>2]|0}else{h=e}if((h|0)==2){if((c[a+376>>2]&536870912|0)==0){j=14}else{j=13}}else if((h|0)==3){j=13}else{j=14}if((j|0)==13){k=(El(a,d)|0)==0;l=k?1:h;j=15;break}else if((j|0)==14){fl(a,d)|0;l=h;j=15;break}}else{if((El(a,d)|0)!=0){k=Wc[c[g>>2]&31](a,a+764|0)|0;if((k|0)<0){rk(a,15136)}if((k|0)==0){if((e|0)<2){if((c[a+688>>2]|0)<2){qk(a,15160);sk(a,15184);j=16}else{j=16}}else{l=e;j=15}}else{m=1}}else{m=0}}}while(0);if((j|0)==15){if((l|0)==2){j=16}else if((l|0)==3){j=17}else{m=0}}if((j|0)==16){if((c[a+376>>2]&536870912|0)==0){m=0}else{j=17}}do{if((j|0)==17){l=a+756|0;e=c[l>>2]|0;if((e|0)==2){c[l>>2]=1;vk(a,14984);m=0;break}else if((e|0)==1){m=0;break}else if((e|0)!=0){c[l>>2]=e+ -1}cm(a,b,a+764|0,1);m=1}}while(0);b=a+772|0;j=c[b>>2]|0;if((j|0)!=0){Ik(a,j)}c[b>>2]=0;if((m|0)!=0){i=f;return}if((c[a+376>>2]&536870912|0)==0){rk(a,15264)}else{i=f;return}}function El(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;e=i;f=b+772|0;g=c[f>>2]|0;if((g|0)!=0){Ik(b,g);c[f>>2]=0}g=c[b+760>>2]|0;if(!((g|0)==-1|(g|0)==0)?g>>>0<d>>>0:0){h=0;j=8}else{j=5}do{if((j|0)==5){g=c[b+376>>2]|0;a[b+764|0]=g>>>24;a[b+765|0]=g>>>16;a[b+766|0]=g>>>8;a[b+767|0]=g;a[b+768|0]=0;c[b+776>>2]=d;a[b+780|0]=c[b+208>>2];if((d|0)==0){c[f>>2]=0;break}else{g=Ok(b,d)|0;c[f>>2]=g;h=g;j=8;break}}}while(0);do{if((j|0)==8){f=(d|0)==0;if((h|0)!=0|f){if(f|(b|0)==0){break}Uk(b,h,d);Ej(b,h,d);break}else{fl(b,d)|0;vk(b,15864);k=0;i=e;return k|0}}}while(0);fl(b,0)|0;k=1;i=e;return k|0}function Fl(e,f,g){e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0;h=i;j=a[e+443|0]|0;k=j&255;l=c[e+384>>2]|0;m=l+1|0;n=c[e+348>>2]|0;o=a[e+433|0]|0;p=o&255;if(j<<24>>24==0){lk(e,15320)}q=c[e+404>>2]|0;if((q|0)!=0){if((j&255)>7){r=aa(n,k>>>3)|0}else{r=((aa(n,k)|0)+7|0)>>>3}if((q|0)!=(r|0)){lk(e,15352)}}if((n|0)==0){lk(e,15392)}r=aa(n,k)|0;q=r&7;do{if((q|0)!=0){if((j&255)>7){s=aa(n,k>>>3)|0}else{s=(r+7|0)>>>3}t=f+(s+ -1)|0;u=a[t]|0;if((c[e+216>>2]&65536|0)==0){v=u;w=255>>>q;x=t;break}else{v=u;w=255<<q;x=t;break}}else{v=0;w=0;x=0}}while(0);a:do{if((a[e+432|0]|0)!=0?(q=c[e+216>>2]|0,(q&2|0)!=0&(o&255)<6):0){if((g|0)==1){s=p&1;if((s|0)==0){y=83;break}else{z=s}}else if((g|0)==0){z=p&1}else{y=83;break}s=z<<3-((p+1|0)>>>1)&7;if(!(n>>>0>s>>>0)){i=h;return}if((j&255)<8){t=8/(k>>>0)|0;u=(g|0)!=0;do{if((q&65536|0)==0){if(u){if(j<<24>>24==1){A=0}else{A=j<<24>>24==2?1:2}B=15568+(A*12|0)+(p>>>1<<2)+36|0;break}else{if(j<<24>>24==1){C=0}else{C=j<<24>>24==2?1:2}B=15424+(C*24|0)+(p<<2)+72|0;break}}else{if(u){if(j<<24>>24==1){D=0}else{D=j<<24>>24==2?1:2}B=15568+(D*12|0)+(p>>>1<<2)|0;break}else{if(j<<24>>24==1){E=0}else{E=j<<24>>24==2?1:2}B=15424+(E*24|0)+(p<<2)|0;break}}}while(0);u=f;q=c[B>>2]|0;F=n;G=m;while(1){H=q>>>8|q<<24;I=q&255;if((I|0)==255){a[u]=a[G]|0}else if((I|0)!=0){a[u]=d[G]&q|d[u]&(q^255)}if(!(F>>>0>t>>>0)){break a}u=u+1|0;q=H;F=F-t|0;G=G+1|0}}if((k&7|0)!=0){lk(e,15640)}G=k>>>3;t=aa(s,G)|0;F=(aa(n,G)|0)-t|0;q=f+t|0;u=t+1|0;H=l+u|0;if((g|0)==0){J=G}else{I=G<<((6-p|0)>>>1);J=I>>>0>F>>>0?F:I}I=G<<((7-p|0)>>>1);if((J|0)==3){a[q]=a[H]|0;G=t+2|0;a[f+u|0]=a[l+G|0]|0;a[f+G|0]=a[l+(t+3)|0]|0;if(F>>>0>I>>>0){K=q;L=F;M=H}else{i=h;return}while(1){t=M+I|0;G=K+I|0;u=L-I|0;a[G]=a[t]|0;N=I+1|0;a[K+N|0]=a[M+N|0]|0;N=I+2|0;a[K+N|0]=a[M+N|0]|0;if(u>>>0>I>>>0){K=G;L=u;M=t}else{break}}i=h;return}else if((J|0)==1){a[q]=a[H]|0;if(F>>>0>I>>>0){O=q;P=F;Q=H}else{i=h;return}do{O=O+I|0;Q=Q+I|0;P=P-I|0;a[O]=a[Q]|0}while(P>>>0>I>>>0);i=h;return}else if((J|0)==2){s=q;t=F;u=H;do{a[s]=a[u]|0;a[s+1|0]=a[u+1|0]|0;if(!(t>>>0>I>>>0)){y=89;break}u=u+I|0;s=s+I|0;t=t-I|0}while(t>>>0>1);if((y|0)==89){i=h;return}a[s]=a[u]|0;i=h;return}else{if((((J>>>0<16?(t=q,(t&1|0)==0):0)?(G=H,(G&1|0)==0):0)?(J&1|0)==0:0)?(I&1|0)==0:0){if((((t&3|0)==0?(G&3|0)==0:0)?(J&3|0)==0:0)?(I&3|0)==0:0){G=((I-J|0)>>>2)+1|0;t=q;N=F;R=H;do{S=J;T=t;U=R;while(1){c[T>>2]=c[U>>2];S=S+ -4|0;if((S|0)==0){break}else{T=T+4|0;U=U+4|0}}if(!(N>>>0>I>>>0)){y=89;break}t=T+(G<<2)|0;R=U+(G<<2)|0;N=N-I|0}while(!(J>>>0>N>>>0));if((y|0)==89){i=h;return}G=t;u=N;s=R;while(1){a[G]=a[s]|0;u=u+ -1|0;if((u|0)==0){break}else{G=G+1|0;s=s+1|0}}i=h;return}s=((I-J|0)>>>1)+1|0;G=q;u=F;R=H;do{N=J;t=G;S=R;while(1){b[t>>1]=b[S>>1]|0;N=N+ -2|0;if((N|0)==0){break}else{t=t+2|0;S=S+2|0}}if(!(u>>>0>I>>>0)){y=89;break}G=t+(s<<1)|0;R=S+(s<<1)|0;u=u-I|0}while(!(J>>>0>u>>>0));if((y|0)==89){i=h;return}s=G;N=u;U=R;while(1){a[s]=a[U]|0;N=N+ -1|0;if((N|0)==0){break}else{s=s+1|0;U=U+1|0}}i=h;return}Fm(q|0,H|0,J|0)|0;if(F>>>0>I>>>0){V=q;W=J;X=F;Y=H}else{i=h;return}do{Y=Y+I|0;V=V+I|0;X=X-I|0;W=W>>>0>X>>>0?X:W;Fm(V|0,Y|0,W|0)|0}while(X>>>0>I>>>0);i=h;return}}else{y=83}}while(0);if((y|0)==83){if((j&255)>7){Z=aa(n,k>>>3)|0}else{Z=(r+7|0)>>>3}Fm(f|0,m|0,Z|0)|0}if((x|0)==0){i=h;return}a[x]=d[x]&(w^255)|v&255&w;i=h;return}function Gl(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0;h=i;i=i+16|0;j=h;if((e|0)==0|(b|0)==0){i=h;return}k=c[b>>2]|0;l=c[15680+(f<<2)>>2]|0;f=aa(l,k)|0;m=b+11|0;n=d[m]|0;if((n|0)==4){o=k&1;if((g&65536|0)==0){p=f&1;q=4;r=4;s=0;t=o}else{p=f&1^1;q=0;r=-4;s=4;t=o^1}if((k|0)!=0){o=e+((f+ -1|0)>>>1)|0;u=p<<2;p=0;v=e+((k+ -1|0)>>>1)|0;w=t<<2;while(1){t=(d[v]|0)>>>w&15;x=o;y=u;z=0;do{a[x]=(d[x]|0)&3855>>>(4-y|0)|t<<y;A=(y|0)==(q|0);x=A?x+ -1|0:x;y=A?s:y+r|0;z=z+1|0}while((z|0)<(l|0));z=(w|0)==(q|0);p=p+1|0;if(!(p>>>0<(c[b>>2]|0)>>>0)){break}else{o=x;u=y;v=z?v+ -1|0:v;w=z?s:w+r|0}}}}else if((n|0)==2){r=(k<<1)+6&6;if((g&65536|0)==0){B=(f<<1)+6&6^6;C=6;D=2;E=0;F=r^6}else{B=(f<<1)+6&6;C=0;D=-2;E=6;F=r}if((k|0)!=0){r=e+((f+ -1|0)>>>2)|0;w=B;B=0;s=e+((k+ -1|0)>>>2)|0;v=F;while(1){F=(d[s]|0)>>>v&3;u=r;o=w;p=0;do{a[u]=(d[u]|0)&16191>>>(6-o|0)|F<<o;q=(o|0)==(C|0);u=q?u+ -1|0:u;o=q?E:o+D|0;p=p+1|0}while((p|0)<(l|0));p=(v|0)==(C|0);B=B+1|0;if(!(B>>>0<(c[b>>2]|0)>>>0)){break}else{r=u;w=o;s=p?s+ -1|0:s;v=p?E:v+D|0}}}}else if((n|0)==1){D=k+7&7;if((g&65536|0)==0){G=f+7&7^7;H=7;I=1;J=0;K=D^7}else{G=f+7&7;H=0;I=-1;J=7;K=D}if((k|0)!=0){D=e+((f+ -1|0)>>>3)|0;g=G;G=0;v=e+((k+ -1|0)>>>3)|0;E=K;while(1){K=(d[v]|0)>>>E&1;s=D;w=g;r=0;do{a[s]=(d[s]|0)&32639>>>(7-w|0)|K<<w;B=(w|0)==(H|0);w=B?J:w+I|0;s=B?s+ -1|0:s;r=r+1|0}while((r|0)<(l|0));r=(E|0)==(H|0);G=G+1|0;if(!(G>>>0<(c[b>>2]|0)>>>0)){break}else{D=s;g=w;v=r?v+ -1|0:v;E=r?J:E+I|0}}}}else{I=n>>>3;if((k|0)!=0){n=e+(aa(I,f+ -1|0)|0)|0;E=e+(aa(I,k+ -1|0)|0)|0;k=0-I|0;e=0-(aa((l|0)>1?l:1,I)|0)|0;J=n;n=0;v=E;while(1){Fm(j|0,v|0,I|0)|0;E=J;g=0;while(1){Fm(E|0,j|0,I|0)|0;g=g+1|0;if((g|0)>=(l|0)){break}else{E=E+k|0}}n=n+1|0;if(!(n>>>0<(c[b>>2]|0)>>>0)){break}else{J=J+e|0;v=v+k|0}}}}c[b>>2]=f;k=a[m]|0;m=k&255;if((k&255)>7){L=aa(m>>>3,f)|0}else{L=((aa(m,f)|0)+7|0)>>>3}c[b+4>>2]=L;i=h;return}function Hl(a,b,e,f,g){a=a|0;b=b|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0;h=i;j=g+ -1|0;if(!(j>>>0<4)){i=h;return}g=a+808|0;if((c[g>>2]|0)==0){k=(d[a+438|0]|0)+7|0;c[g>>2]=7;c[a+812>>2]=8;c[a+816>>2]=9;c[a+820>>2]=(k&504|0)==8?10:11}Tc[c[a+(j<<2)+808>>2]&15](b,e,f);i=h;return}function Il(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;e=i;i=i+1024|0;f=e;g=a+224|0;h=a+236|0;c[h>>2]=b;j=a+240|0;c[j>>2]=0;k=a+228|0;l=(b|0)!=0;m=a+408|0;n=a+376|0;o=a+796|0;p=a+788|0;q=a+792|0;r=(a|0)==0;s=(b|0)==0?0:d;a:while(1){if((c[k>>2]|0)==0){d=c[m>>2]|0;while(1){if((d|0)!=0){break}fl(a,0)|0;b=el(a)|0;c[m>>2]=b;if((c[n>>2]|0)==1229209940){d=b}else{t=6;break a}}b=c[o>>2]|0;u=b>>>0>d>>>0?d:b;b=c[p>>2]|0;if((b|0)!=0){if((c[q>>2]|0)>>>0<u>>>0){c[p>>2]=0;c[q>>2]=0;Ik(a,b);t=10}else{v=b}}else{t=10}if((t|0)==10){t=0;b=Lk(a,u)|0;if((b|0)==0){t=12;break}c[p>>2]=b;c[q>>2]=u;v=b}if(!r){Uk(a,v,u);Ej(a,v,u)}c[m>>2]=(c[m>>2]|0)-u;c[g>>2]=v;c[k>>2]=u}if(l){w=0;x=s}else{c[h>>2]=f;w=s;x=1024}c[j>>2]=x;y=nm(g,0)|0;u=c[j>>2]|0;z=(l?u:1024-u|0)+w|0;c[j>>2]=0;if((y|0)==1){t=19;break}else if((y|0)!=0){t=22;break}if((z|0)==0){t=30;break}else{s=z}}if((t|0)==6){lk(a,15712)}else if((t|0)==12){rk(a,15928)}else if((t|0)==19){c[h>>2]=0;h=a+208|0;c[h>>2]=c[h>>2]|8;h=a+212|0;c[h>>2]=c[h>>2]|8;if(!((c[k>>2]|0)==0?(c[m>>2]|0)==0:0)){vk(a,15736)}if((z|0)==0){i=e;return}if(l){lk(a,15712)}vk(a,15760);i=e;return}else if((t|0)==22){Mj(a,y);y=c[a+248>>2]|0;if(l){rk(a,y)}vk(a,y);i=e;return}else if((t|0)==30){i=e;return}}function Jl(b){b=b|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;e=i;f=b+372|0;g=(c[f>>2]|0)+1|0;c[f>>2]=g;h=b+356|0;if(g>>>0<(c[h>>2]|0)>>>0){i=e;return}do{if((a[b+432|0]|0)!=0?(c[f>>2]=0,Gm(c[b+380>>2]|0,0,(c[b+364>>2]|0)+1|0)|0,g=b+433|0,j=(a[g]|0)+1<<24>>24,a[g]=j,!((j&255)>6)):0){k=(c[b+348>>2]|0)+ -1|0;l=b+368|0;m=(c[b+216>>2]&2|0)==0;n=b+352|0;o=j;p=j&255;while(1){j=d[15808+p|0]|0;q=((k+j-(d[15800+p|0]|0)|0)>>>0)/(j>>>0)|0;if(!m){break}j=o&255;r=d[15792+j|0]|0;s=(((c[n>>2]|0)+ -1+r-(d[15784+j|0]|0)|0)>>>0)/(r>>>0)|0;c[h>>2]=s;if(!((s|0)==0|(q|0)==0)){break}s=o+1<<24>>24;a[g]=s;if((s&255)>6){t=9;break}else{o=s;p=s&255}}if((t|0)==9){c[l>>2]=q;break}c[l>>2]=q;if((o&255)<7){i=e;return}}}while(0);q=b+212|0;if((c[q>>2]&8|0)==0?(Il(b,0,0),c[b+236>>2]=0,t=c[q>>2]|0,(t&8|0)==0):0){h=b+208|0;c[h>>2]=c[h>>2]|8;c[q>>2]=t|8}t=b+220|0;if((c[t>>2]|0)!=1229209940){i=e;return}c[b+224>>2]=0;c[b+228>>2]=0;c[t>>2]=0;fl(b,c[b+408>>2]|0)|0;i=e;return}function Kl(e){e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;f=i;$k(e);g=e+432|0;if((a[g]|0)==0){c[e+356>>2]=c[e+352>>2];h=c[e+348>>2]|0;c[e+368>>2]=h;j=h;k=c[e+216>>2]|0}else{h=c[e+216>>2]|0;l=c[e+352>>2]|0;if((h&2|0)==0){c[e+356>>2]=(l+7|0)>>>3}else{c[e+356>>2]=l}l=c[e+348>>2]|0;m=d[e+433|0]|0;n=d[15808+m|0]|0;c[e+368>>2]=((l+ -1+n-(d[15800+m|0]|0)|0)>>>0)/(n>>>0)|0;j=l;k=h}h=d[e+438|0]|0;l=e+216|0;if((k&4|0)==0){o=h}else{o=(d[e+436|0]|0)<8?8:h}h=c[l>>2]|0;k=(h&4096|0)==0;do{if(!k){n=a[e+435|0]|0;if(n<<24>>24==2){if((b[e+428>>1]|0)==0){p=o;break}p=(o<<2>>>0)/3|0;break}else if(n<<24>>24==0){p=(o>>>0<8?8:o)<<((b[e+428>>1]|0)!=0);break}else if(n<<24>>24==3){p=(b[e+428>>1]|0)==0?24:32;break}else{p=o;break}}else{p=o}}while(0);do{if((h&512|0)!=0){if(k){o=h&-513;c[l>>2]=o;q=o;r=p;break}else{q=h;r=p<<((d[e+436|0]|0)<16);break}}else{q=h;r=p}}while(0);p=(q&32768|0)==0;do{if(!p){h=a[e+435|0]|0;if(h<<24>>24==3|h<<24>>24==2){s=(r|0)<33?32:64;break}else if(h<<24>>24==0){s=(r|0)<9?16:32;break}else{s=r;break}}else{s=r}}while(0);do{if((q&16384|0)==0){t=s}else{if((b[e+428>>1]|0)==0){if(p){u=27}}else{if(!((q&4096|0)!=0|p^1)){u=27}}if((u|0)==27?(r=a[e+435|0]|0,!(r<<24>>24==4)):0){h=r<<24>>24==6;if((s|0)<9){t=h?32:24;break}else{t=h?64:48;break}}t=(s|0)<17?32:64}}while(0);if((q&1048576|0)==0){v=t}else{q=aa(d[e+205|0]|0,d[e+204|0]|0)|0;v=(q|0)>(t|0)?q:t}a[e+442|0]=v;a[e+443|0]=0;t=j+7&-8;if((v|0)>7){w=aa(t,v>>>3)|0}else{w=(aa(t,v)|0)>>>3}t=(v+7>>3)+49+w|0;w=e+784|0;if(t>>>0>(c[w>>2]|0)>>>0){v=e+728|0;Ik(e,c[v>>2]|0);j=e+804|0;Ik(e,c[j>>2]|0);if((a[g]|0)==0){x=Kk(e,t)|0}else{x=Jk(e,t)|0}c[v>>2]=x;x=Kk(e,t)|0;c[j>>2]=x;j=c[v>>2]|0;c[e+384>>2]=j+(j+32&15^31);c[e+380>>2]=x+(x+32&15^31);c[w>>2]=t}t=c[e+364>>2]|0;if((t|0)==-1){lk(e,15816)}Gm(c[e+380>>2]|0,0,t+1|0)|0;t=e+788|0;w=c[t>>2]|0;if((w|0)!=0){c[e+792>>2]=0;c[t>>2]=0;Ik(e,w)}if((ol(e,1229209940)|0)==0){w=e+212|0;c[w>>2]=c[w>>2]|64;i=f;return}else{lk(e,c[e+248>>2]|0)}}function Ll(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0;f=i;g=c[b+4>>2]|0;h=((d[b+11|0]|0)+7|0)>>>3;if(!(h>>>0<g>>>0)){i=f;return}b=0-h|0;j=h;k=e+h|0;while(1){a[k]=(d[k+b|0]|0)+(d[k]|0);j=j+1|0;if((j|0)==(g|0)){break}else{k=k+1|0}}i=f;return}function Ml(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0;g=i;h=c[b+4>>2]|0;if((h|0)==0){i=g;return}else{j=0;k=f;l=e}while(1){a[l]=(d[k]|0)+(d[l]|0);j=j+1|0;if((j|0)==(h|0)){break}else{k=k+1|0;l=l+1|0}}i=g;return}function Nl(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;g=i;h=((d[b+11|0]|0)+7|0)>>>3;j=c[b+4>>2]|0;if((h|0)==0){k=f;l=e}else{b=e+h|0;m=0;n=f;o=e;while(1){a[o]=((d[n]|0)>>>1)+(d[o]|0);m=m+1|0;if(!(m>>>0<h>>>0)){break}else{n=n+1|0;o=o+1|0}}k=f+h|0;l=b}if((j|0)==(h|0)){i=g;return}b=0-h|0;f=j-h|0;h=0;j=k;k=l;while(1){a[k]=(((d[k+b|0]|0)+(d[j]|0)|0)>>>1)+(d[k]|0);h=h+1|0;if((h|0)==(f|0)){break}else{j=j+1|0;k=k+1|0}}i=g;return}function Ol(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;g=i;h=c[b+4>>2]|0;b=e+h|0;j=d[f]|0;k=(d[e]|0)+j|0;a[e]=k;if((h|0)<=1){i=g;return}h=e+1|0;e=k;k=j;j=f;while(1){f=j+1|0;l=e&255;m=d[f]|0;n=m-k|0;o=l-k|0;p=(n|0)<0?0-n|0:n;q=(o|0)<0?0-o|0:o;r=n+o|0;o=(q|0)<(p|0);n=((((r|0)<0?0-r|0:r)|0)<((o?q:p)|0)?k:o?m:l)+(d[h]|0)|0;a[h]=n;l=h+1|0;if(l>>>0<b>>>0){h=l;e=n;k=m;j=f}else{break}}i=g;return}function Pl(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;g=i;h=((d[b+11|0]|0)+7|0)>>>3;j=e+h|0;if((h|0)==0){k=e;l=f}else{m=e+1|0;n=(j>>>0>m>>>0?j:m)+(0-e)|0;m=f;o=e;while(1){p=o+1|0;a[o]=(d[m]|0)+(d[o]|0);if(p>>>0<j>>>0){m=m+1|0;o=p}else{break}}k=p;l=f+n|0}n=e+(c[b+4>>2]|0)|0;if(!(k>>>0<n>>>0)){i=g;return}b=0-h|0;h=l;l=k;while(1){k=d[h+b|0]|0;e=d[l+b|0]|0;f=d[h]|0;p=f-k|0;o=e-k|0;m=(p|0)<0?0-p|0:p;j=(o|0)<0?0-o|0:o;q=p+o|0;o=(j|0)<(m|0);p=l+1|0;a[l]=((((q|0)<0?0-q|0:q)|0)<((o?j:m)|0)?k:o?f:e)+(d[l]|0);if((p|0)==(n|0)){break}else{h=h+1|0;l=p}}i=g;return}function Ql(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;h=i;i=i+1024|0;j=h;if((c[a+220>>2]|0)!=(b|0)){c[a+248>>2]=15904;k=-2;i=h;return k|0}b=c[g>>2]|0;l=c[e>>2]|0;m=a+224|0;c[m>>2]=d;d=a+228|0;c[d>>2]=0;n=a+240|0;c[n>>2]=0;o=(f|0)==0;p=a+236|0;if(!o){c[p>>2]=f}f=0;q=0;r=l;l=b;while(1){c[d>>2]=f+r;b=q+l|0;if(o){c[p>>2]=j;s=1024}else{s=-1}t=b>>>0<s>>>0?b:s;c[n>>2]=t;u=b-t|0;v=nm(m,(b|0)==(t|0)?4:0)|0;if((v|0)!=0){break}f=c[d>>2]|0;q=c[n>>2]|0;r=0;l=u}if(o){c[p>>2]=0}p=c[d>>2]|0;d=(c[n>>2]|0)+u|0;if((d|0)!=0){c[g>>2]=(c[g>>2]|0)-d}if((p|0)!=0){c[e>>2]=(c[e>>2]|0)-p}Mj(a,v);k=v;i=h;return k|0}function Rl(a,d,e){a=a|0;d=d|0;e=e|0;var f=0;f=i;if((a|0)==0|(d|0)==0|(e|0)==0){i=f;return}a=d+170|0;b[a+0>>1]=b[e+0>>1]|0;b[a+2>>1]=b[e+2>>1]|0;b[a+4>>1]=b[e+4>>1]|0;b[a+6>>1]=b[e+6>>1]|0;b[a+8>>1]=b[e+8>>1]|0;e=d+8|0;c[e>>2]=c[e>>2]|32;i=f;return}function Sl(a,d,e){a=a|0;d=d|0;e=e|0;var f=0,g=0,h=0;f=i;if((a|0)==0|(d|0)==0){i=f;return}g=d+20|0;h=b[g>>1]|0;if(h<<16>>16==0|(h&65535)>256){ok(a,15992);i=f;return}Jj(a,d,8,0);h=Ok(a,512)|0;c[d+204>>2]=h;if((h|0)==0){ok(a,16040);i=f;return}a=d+232|0;c[a>>2]=c[a>>2]|8;a=b[g>>1]|0;if(!(a<<16>>16==0)){g=0;do{b[h+(g<<1)>>1]=b[e+(g<<1)>>1]|0;g=g+1|0}while((g|0)<(a&65535|0))}a=d+8|0;c[a>>2]=c[a>>2]|64;i=f;return}function Tl(b,e,f,g,h,j,k,l,m){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0;n=i;if((b|0)==0|(e|0)==0){i=n;return}c[e>>2]=f;c[e+4>>2]=g;o=e+24|0;a[o]=h;p=e+25|0;a[p]=j;a[e+26|0]=l;a[e+27|0]=m;a[e+28|0]=k;$j(b,f,g,h&255,j&255,k&255,l&255,m&255);m=a[p]|0;if(!(m<<24>>24==3)){p=(m&2)==0?1:3;a[e+29|0]=p;if((m&4)==0){q=p}else{m=p+1<<24>>24;a[e+29|0]=m;q=m}}else{a[e+29|0]=1;q=1}m=aa(d[o]|0,q&255)|0;a[e+30|0]=m;q=m&255;if(q>>>0>7){r=aa(q>>>3,f)|0}else{r=((aa(q,f)|0)+7|0)>>>3}c[e+12>>2]=r;i=n;return}function Ul(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;h=i;if((b|0)==0|(d|0)==0){i=h;return}c[d+180>>2]=e;c[d+184>>2]=f;a[d+188|0]=g;g=d+8|0;c[g>>2]=c[g>>2]|256;i=h;return}function Vl(b,d,e,f,g,h,j,k,l){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0;m=i;if((b|0)==0|(d|0)==0|(e|0)==0|(k|0)==0){i=m;return}n=(j|0)>0;if(n&(l|0)==0){i=m;return}o=(Am(e|0)|0)+1|0;if(h>>>0>3){lk(b,16080)}if(j>>>0>255){lk(b,16112)}a:do{if(n){p=0;while(1){q=c[l+(p<<2)>>2]|0;if((q|0)==0){r=11;break}p=p+1|0;if((bk(q,Am(q|0)|0)|0)==0){r=11;break}if((p|0)>=(j|0)){break a}}if((r|0)==11){lk(b,16144)}}}while(0);r=Ok(b,o)|0;c[d+208>>2]=r;if((r|0)==0){ok(b,16184);i=m;return}Fm(r|0,e|0,o|0)|0;c[d+212>>2]=f;c[d+216>>2]=g;a[d+228|0]=h;a[d+229|0]=j;h=(Am(k|0)|0)+1|0;g=Ok(b,h)|0;c[d+220>>2]=g;if((g|0)==0){ok(b,16224);i=m;return}Fm(g|0,k|0,h|0)|0;h=(j<<2)+4|0;k=Ok(b,h)|0;g=d+224|0;c[g>>2]=k;if((k|0)==0){ok(b,16264);i=m;return}Gm(k|0,0,h|0)|0;b:do{if(n){h=0;while(1){k=l+(h<<2)|0;f=(Am(c[k>>2]|0)|0)+1|0;o=Ok(b,f)|0;c[(c[g>>2]|0)+(h<<2)>>2]=o;o=c[(c[g>>2]|0)+(h<<2)>>2]|0;if((o|0)==0){break}Fm(o|0,c[k>>2]|0,f|0)|0;h=h+1|0;if((h|0)>=(j|0)){break b}}ok(b,16304);i=m;return}}while(0);b=d+8|0;c[b>>2]=c[b>>2]|1024;b=d+232|0;c[b>>2]=c[b>>2]|128;i=m;return}function Wl(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0;h=i;if((b|0)==0|(d|0)==0){i=h;return}if((e+ -1|0)>>>0>1){lk(b,16344)}if((f|0)==0){lk(b,16368)}j=Am(f|0)|0;if((j|0)==0){lk(b,16368)}if((a[f]|0)==45){lk(b,16368)}if((bk(f,j)|0)==0){lk(b,16368)}if((g|0)==0){lk(b,16392)}k=Am(g|0)|0;if((k|0)==0){lk(b,16392)}if((a[g]|0)==45){lk(b,16392)}if((bk(g,k)|0)==0){lk(b,16392)}a[d+252|0]=e;e=j+1|0;j=Ok(b,e)|0;l=d+256|0;c[l>>2]=j;if((j|0)==0){ok(b,16416);i=h;return}Fm(j|0,f|0,e|0)|0;e=k+1|0;k=Ok(b,e)|0;c[d+260>>2]=k;if((k|0)==0){Ik(b,c[l>>2]|0);c[l>>2]=0;ok(b,16416);i=h;return}else{Fm(k|0,g|0,e|0)|0;e=d+8|0;c[e>>2]=c[e>>2]|16384;e=d+232|0;c[e>>2]=c[e>>2]|256;i=h;return}}function Xl(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;h=i;if((b|0)==0|(d|0)==0){i=h;return}c[d+192>>2]=e;c[d+196>>2]=f;a[d+200|0]=g;g=d+8|0;c[g>>2]=c[g>>2]|128;i=h;return}function Yl(d,e,f,g){d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0;h=i;if((d|0)==0|(e|0)==0){i=h;return}if(g>>>0>256){if((a[e+25|0]|0)==3){lk(d,16464)}ok(d,16464);i=h;return}j=(g|0)>0;if(j&(f|0)==0){lk(d,16488)}if((g|0)==0?(c[d+708>>2]&1|0)==0:0){lk(d,16488)}Jj(d,e,4096,0);k=Jk(d,768)|0;c[d+416>>2]=k;if(j){Fm(k|0,f|0,g*3|0)|0}c[e+16>>2]=k;k=g&65535;b[d+420>>1]=k;b[e+20>>1]=k;k=e+232|0;c[k>>2]=c[k>>2]|4096;k=e+8|0;c[k>>2]=c[k>>2]|8;i=h;return}function Zl(b,d,e){b=b|0;d=d|0;e=e|0;var f=0;f=i;if((b|0)==0|(d|0)==0|(e|0)==0){i=f;return}b=d+148|0;a[b+0|0]=a[e+0|0]|0;a[b+1|0]=a[e+1|0]|0;a[b+2|0]=a[e+2|0]|0;a[b+3|0]=a[e+3|0]|0;a[b+4|0]=a[e+4|0]|0;e=d+8|0;c[e>>2]=c[e>>2]|2;i=f;return}function _l(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;g=i;if((b|0)==0|(d|0)==0|(f|0)<1|(e|0)==0){h=0;i=g;return h|0}j=d+132|0;k=d+128|0;l=c[k>>2]|0;do{if(((c[j>>2]|0)-l|0)<(f|0)){if((2147483647-l|0)>=(f|0)){m=l+f|0;if((m|0)<2147483639){n=m+8&-8}else{n=2147483647}m=d+136|0;o=Nk(b,c[m>>2]|0,l,n-l|0,28)|0;if((o|0)!=0){Ik(b,c[m>>2]|0);c[m>>2]=o;o=d+232|0;c[o>>2]=c[o>>2]|16384;c[j>>2]=n;break}}wk(b,16504,1);h=1;i=g;return h|0}}while(0);if((f|0)<=0){h=0;i=g;return h|0}n=d+136|0;d=0;a:while(1){j=c[k>>2]|0;l=c[n>>2]|0;o=l+(j*28|0)|0;m=e+(d*28|0)+4|0;p=c[m>>2]|0;do{if((p|0)!=0){q=e+(d*28|0)|0;r=c[q>>2]|0;if((r+1|0)>>>0>3){wk(b,16528,1);break}s=Am(p|0)|0;if((r|0)>=1){t=c[e+(d*28|0)+20>>2]|0;if((t|0)==0){u=0}else{u=Am(t|0)|0}t=c[e+(d*28|0)+24>>2]|0;if((t|0)==0){v=0;w=u}else{v=Am(t|0)|0;w=u}}else{v=0;w=0}t=e+(d*28|0)+8|0;x=c[t>>2]|0;if((x|0)!=0?(a[x]|0)!=0:0){y=Am(x|0)|0;c[o>>2]=r;z=y}else{A=21}do{if((A|0)==21){A=0;if((r|0)>0){c[o>>2]=1;z=0;break}else{c[o>>2]=-1;z=0;break}}}while(0);r=Lk(b,s+4+w+v+z|0)|0;y=l+(j*28|0)+4|0;c[y>>2]=r;if((r|0)==0){break a}Fm(r|0,c[m>>2]|0,s|0)|0;a[(c[y>>2]|0)+s|0]=0;if((c[q>>2]|0)>0){r=(c[y>>2]|0)+(s+1)|0;x=l+(j*28|0)+20|0;c[x>>2]=r;Fm(r|0,c[e+(d*28|0)+20>>2]|0,w|0)|0;a[(c[x>>2]|0)+w|0]=0;r=(c[x>>2]|0)+(w+1)|0;x=l+(j*28|0)+24|0;c[x>>2]=r;Fm(r|0,c[e+(d*28|0)+24>>2]|0,v|0)|0;a[(c[x>>2]|0)+v|0]=0;r=(c[x>>2]|0)+(v+1)|0;c[l+(j*28|0)+8>>2]=r;B=r}else{c[l+(j*28|0)+20>>2]=0;c[l+(j*28|0)+24>>2]=0;r=(c[y>>2]|0)+(s+1)|0;c[l+(j*28|0)+8>>2]=r;B=r}if((z|0)==0){C=B}else{Fm(B|0,c[t>>2]|0,z|0)|0;C=c[l+(j*28|0)+8>>2]|0}a[C+z|0]=0;r=l+(j*28|0)+12|0;if((c[o>>2]|0)>0){c[r>>2]=0;c[l+(j*28|0)+16>>2]=z}else{c[r>>2]=z;c[l+(j*28|0)+16>>2]=0}c[k>>2]=(c[k>>2]|0)+1}}while(0);j=d+1|0;if((j|0)<(f|0)){d=j}else{h=0;A=37;break}}if((A|0)==37){i=g;return h|0}wk(b,16568,1);h=1;i=g;return h|0}function $l(f,g,h){f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0;j=i;if((f|0)==0|(g|0)==0|(h|0)==0){i=j;return}if((c[f+208>>2]&512|0)!=0){i=j;return}k=a[h+2|0]|0;if((((!(k<<24>>24==0|(k&255)>12)?(k=a[h+3|0]|0,!(k<<24>>24==0|(k&255)>31)):0)?(d[h+4|0]|0)<=23:0)?(d[h+5|0]|0)<=59:0)?(d[h+6|0]|0)<=60:0){k=h;h=k;l=e[h>>1]|e[h+2>>1]<<16;h=k+4|0;k=e[h>>1]|e[h+2>>1]<<16;h=g+140|0;m=h;b[m>>1]=l;b[m+2>>1]=l>>>16;l=h+4|0;b[l>>1]=k;b[l+2>>1]=k>>>16;k=g+8|0;c[k>>2]=c[k>>2]|512;i=j;return}ok(f,16600);i=j;return}function am(f,g,h,j,k){f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0;l=i;if((f|0)==0|(g|0)==0){i=l;return}if((h|0)!=0?(Jj(f,g,8192,0),m=Kk(f,256)|0,c[g+156>>2]=m,c[f+528>>2]=m,(j+ -1|0)>>>0<256):0){Fm(m|0,h|0,j|0)|0}if((k|0)==0){b[g+22>>1]=j;if((j|0)==0){i=l;return}}else{h=1<<(d[g+24|0]|0);m=a[g+25|0]|0;if(m<<24>>24==0){if((e[k+8>>1]|0|0)>(h|0)){n=11}}else if(m<<24>>24==2){if(!(((e[k+2>>1]|0|0)<=(h|0)?(e[k+4>>1]|0|0)<=(h|0):0)?(e[k+6>>1]|0|0)<=(h|0):0)){n=11}}if((n|0)==11){ok(f,16632)}f=g+160|0;b[f+0>>1]=b[k+0>>1]|0;b[f+2>>1]=b[k+2>>1]|0;b[f+4>>1]=b[k+4>>1]|0;b[f+6>>1]=b[k+6>>1]|0;b[f+8>>1]=b[k+8>>1]|0;b[g+22>>1]=(j|0)==0?1:j&65535}j=g+8|0;c[j>>2]=c[j>>2]|16;j=g+232|0;c[j>>2]=c[j>>2]|8192;i=l;return}function bm(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;g=i;if((b|0)==0|(d|0)==0|(f|0)<1|(e|0)==0){i=g;return}h=d+244|0;j=d+248|0;k=Nk(b,c[h>>2]|0,c[j>>2]|0,f,16)|0;if((k|0)==0){wk(b,16688,1);i=g;return}Ik(b,c[h>>2]|0);c[h>>2]=k;h=d+232|0;c[h>>2]=c[h>>2]|32;h=d+8|0;d=e;e=f;f=k+(c[j>>2]<<4)|0;while(1){if((c[d>>2]|0)!=0?(k=d+8|0,(c[k>>2]|0)!=0):0){a[f+4|0]=a[d+4|0]|0;l=(Am(c[d>>2]|0)|0)+1|0;m=Lk(b,l)|0;c[f>>2]=m;if((m|0)==0){break}Fm(m|0,c[d>>2]|0,l|0)|0;l=d+12|0;m=Mk(b,c[l>>2]|0,10)|0;c[f+8>>2]=m;if((m|0)==0){n=10;break}c[f+12>>2]=c[l>>2];Fm(m|0,c[k>>2]|0,(c[l>>2]|0)*10|0)|0;c[h>>2]=c[h>>2]|8192;c[j>>2]=(c[j>>2]|0)+1;o=f+16|0}else{tk(b,16712);o=f}l=e+ -1|0;if((l|0)==0){n=15;break}else{d=d+16|0;e=l;f=o}}if((n|0)==10){Ik(b,c[f>>2]|0)}else if((n|0)==15){i=g;return}if((e|0)<=0){i=g;return}wk(b,16744,1);i=g;return}function cm(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;h=i;if((b|0)==0|(e|0)==0|(g|0)<1|(f|0)==0){i=h;return}j=e+236|0;k=e+240|0;l=Nk(b,c[j>>2]|0,c[k>>2]|0,g,20)|0;if((l|0)==0){wk(b,16768,1);i=h;return}Ik(b,c[j>>2]|0);c[j>>2]=l;j=e+232|0;c[j>>2]=c[j>>2]|512;if((g|0)<=0){i=h;return}j=b+208|0;e=f;f=g;g=l+((c[k>>2]|0)*20|0)|0;while(1){l=d[e]|d[e+1|0]<<8|d[e+2|0]<<16|d[e+3|0]<<24;a[g]=l;a[g+1|0]=l>>8;a[g+2|0]=l>>16;a[g+3|0]=l>>24;a[g+4|0]=0;l=a[e+16|0]&11;if((l|0)==0){if((c[j>>2]&32768|0)!=0){m=9;break}sk(b,16824);n=c[j>>2]&11;if((n|0)==0){m=9;break}else{o=n}}else{o=l}while(1){l=o&0-o;if((o|0)==(l|0)){break}else{o=l^o}}a[g+16|0]=o;l=e+12|0;n=c[l>>2]|0;do{if((n|0)!=0){p=Lk(b,n)|0;c[g+8>>2]=p;if((p|0)==0){wk(b,16792,1);q=g;break}else{Fm(p|0,c[e+8>>2]|0,c[l>>2]|0)|0;c[g+12>>2]=c[l>>2];m=16;break}}else{c[g+8>>2]=0;c[g+12>>2]=0;m=16}}while(0);if((m|0)==16){m=0;c[k>>2]=(c[k>>2]|0)+1;q=g+20|0}l=f+ -1|0;if((l|0)>0){e=e+20|0;f=l;g=q}else{m=18;break}}if((m|0)==9){lk(b,16880)}else if((m|0)==18){i=h;return}}function dm(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;f=i;g=a[b+8|0]|0;if(g<<24>>24==0){h=c[b+4>>2]|0;if((h|0)==0){i=f;return}else{j=0;k=e}while(1){a[k]=(d[k]|0)^255;j=j+1|0;if((j|0)==(h|0)){break}else{k=k+1|0}}i=f;return}else if(g<<24>>24==4){g=a[b+9|0]|0;if(g<<24>>24==16){k=c[b+4>>2]|0;if((k|0)==0){i=f;return}else{l=0;m=e}while(1){a[m]=(d[m]|0)^255;h=m+1|0;a[h]=(d[h]|0)^255;l=l+4|0;if(!(l>>>0<k>>>0)){break}else{m=m+4|0}}i=f;return}else if(g<<24>>24==8){g=c[b+4>>2]|0;if((g|0)==0){i=f;return}else{n=0;o=e}while(1){a[o]=(d[o]|0)^255;n=n+2|0;if(!(n>>>0<g>>>0)){break}else{o=o+2|0}}i=f;return}else{i=f;return}}else{i=f;return}}function em(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0;f=i;if((a[b+9|0]|0)!=16){i=f;return}g=aa(d[b+10|0]|0,c[b>>2]|0)|0;if((g|0)==0){i=f;return}else{h=0;j=e}while(1){e=a[j]|0;b=j+1|0;a[j]=a[b]|0;a[b]=e;h=h+1|0;if((h|0)==(g|0)){break}else{j=j+2|0}}i=f;return}function fm(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0;f=i;g=a[b+9|0]|0;do{if((g&255)<8){h=c[b+4>>2]|0;j=e+h|0;if(g<<24>>24==1){k=16928}else if(g<<24>>24==4){k=17440}else if(g<<24>>24==2){k=17184}else{break}if((h|0)>0){h=e;do{a[h]=a[k+(d[h]|0)|0]|0;h=h+1|0}while(h>>>0<j>>>0)}}}while(0);i=f;return}function gm(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;f=i;g=b+4|0;h=d+(c[g>>2]|0)|0;j=b+10|0;k=a[j]|0;if(k<<24>>24==4){l=a[b+9|0]|0;if(l<<24>>24==8){if((e|0)==0){m=d+3|0;n=d+4|0}else{m=d;n=d+1|0}if(n>>>0<h>>>0){o=m;p=n;while(1){a[o]=a[p]|0;a[o+1|0]=a[p+1|0]|0;n=o+3|0;a[o+2|0]=a[p+2|0]|0;q=p+4|0;if(q>>>0<h>>>0){o=n;p=q}else{r=n;break}}}else{r=m}a[b+11|0]=24;s=r}else if(l<<24>>24==16){if((e|0)==0){t=d+6|0;u=d+8|0}else{t=d;u=d+2|0}if(u>>>0<h>>>0){l=t;r=u;while(1){a[l]=a[r]|0;a[l+1|0]=a[r+1|0]|0;a[l+2|0]=a[r+2|0]|0;a[l+3|0]=a[r+3|0]|0;a[l+4|0]=a[r+4|0]|0;u=l+6|0;a[l+5|0]=a[r+5|0]|0;m=r+8|0;if(m>>>0<h>>>0){l=u;r=m}else{v=u;break}}}else{v=t}a[b+11|0]=48;s=v}else{i=f;return}a[j]=3;v=b+8|0;if((a[v]|0)==6){a[v]=2;w=s}else{w=s}}else if(k<<24>>24==2){k=a[b+9|0]|0;if(k<<24>>24==16){if((e|0)==0){x=d+2|0;y=d+4|0}else{x=d;y=d+2|0}if(y>>>0<h>>>0){s=x;v=y;while(1){a[s]=a[v]|0;y=s+2|0;a[s+1|0]=a[v+1|0]|0;t=v+4|0;if(t>>>0<h>>>0){s=y;v=t}else{z=y;break}}}else{z=x}a[b+11|0]=16;A=z}else if(k<<24>>24==8){if((e|0)==0){B=d+1|0;C=d+2|0}else{B=d;C=d+1|0}if(C>>>0<h>>>0){e=B;k=C;while(1){C=e+1|0;a[e]=a[k]|0;z=k+2|0;if(z>>>0<h>>>0){e=C;k=z}else{D=C;break}}}else{D=B}a[b+11|0]=8;A=D}else{i=f;return}a[j]=1;j=b+8|0;if((a[j]|0)==4){a[j]=0;w=A}else{w=A}}else{i=f;return}c[g>>2]=w-d;i=f;return}function hm(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;e=i;f=a[b+8|0]|0;if((f&2)==0){i=e;return}g=c[b>>2]|0;h=a[b+9|0]|0;if(h<<24>>24==16){if(f<<24>>24==6){if((g|0)==0){i=e;return}else{j=0;k=d}while(1){b=a[k]|0;l=k+4|0;a[k]=a[l]|0;a[l]=b;b=k+1|0;l=a[b]|0;m=k+5|0;a[b]=a[m]|0;a[m]=l;j=j+1|0;if((j|0)==(g|0)){break}else{k=k+8|0}}i=e;return}else if(f<<24>>24==2){if((g|0)==0){i=e;return}else{n=0;o=d}while(1){k=a[o]|0;j=o+4|0;a[o]=a[j]|0;a[j]=k;k=o+1|0;j=a[k]|0;l=o+5|0;a[k]=a[l]|0;a[l]=j;n=n+1|0;if((n|0)==(g|0)){break}else{o=o+6|0}}i=e;return}else{i=e;return}}else if(h<<24>>24==8){if(f<<24>>24==2){if((g|0)==0){i=e;return}else{p=0;q=d}while(1){h=a[q]|0;o=q+2|0;a[q]=a[o]|0;a[o]=h;p=p+1|0;if((p|0)==(g|0)){break}else{q=q+3|0}}i=e;return}else if(f<<24>>24==6){if((g|0)==0){i=e;return}else{r=0;s=d}while(1){d=a[s]|0;f=s+2|0;a[s]=a[f]|0;a[f]=d;r=r+1|0;if((r|0)==(g|0)){break}else{s=s+4|0}}i=e;return}else{i=e;return}}else{i=e;return}}function im(e,f){e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;g=i;h=b[e+420>>1]|0;j=d[f+9|0]|0;if((h&65535|0)>=(1<<j|0)|h<<16>>16==0){i=g;return}h=(aa(c[f>>2]|0,0-(d[f+11|0]|0)|0)|0)&7;k=c[e+384>>2]|0;l=c[f+4>>2]|0;f=k+l|0;if((j|0)==4){if((l|0)<=0){i=g;return}m=e+424|0;n=c[m>>2]|0;o=h;p=f;while(1){q=a[p]|0;r=(q&255)>>>o&15;if((r|0)>(n|0)){c[m>>2]=r;s=a[p]|0;t=r}else{s=q;t=n}q=(s&255)>>>o>>>4&15;if((q|0)>(t|0)){c[m>>2]=q;u=q}else{u=t}p=p+ -1|0;if(!(p>>>0>k>>>0)){break}else{n=u;o=0}}i=g;return}else if((j|0)==1){if((l|0)<=0){i=g;return}o=e+424|0;u=h;n=f;while(1){if(((d[n]|0)>>>u|0)!=0){c[o>>2]=1}n=n+ -1|0;if(!(n>>>0>k>>>0)){break}else{u=0}}i=g;return}else if((j|0)==8){if((l|0)<=0){i=g;return}u=e+424|0;n=c[u>>2]|0;o=f;while(1){p=d[o]|0;if((p|0)>(n|0)){c[u>>2]=p;v=p}else{v=n}o=o+ -1|0;if(!(o>>>0>k>>>0)){break}else{n=v}}i=g;return}else if((j|0)==2){if((l|0)<=0){i=g;return}l=e+424|0;e=c[l>>2]|0;j=h;h=f;while(1){f=a[h]|0;v=(f&255)>>>j&3;if((v|0)>(e|0)){c[l>>2]=v;w=a[h]|0;x=v}else{w=f;x=e}f=(w&255)>>>j>>>2&3;if((f|0)>(x|0)){c[l>>2]=f;y=a[h]|0;z=f}else{y=w;z=x}f=(y&255)>>>j>>>4&3;if((f|0)>(z|0)){c[l>>2]=f;A=a[h]|0;B=f}else{A=y;B=z}f=(A&255)>>>j>>>6&3;if((f|0)>(B|0)){c[l>>2]=f;C=f}else{C=B}h=h+ -1|0;if(!(h>>>0>k>>>0)){break}else{e=C;j=0}}i=g;return}else{i=g;return}}function jm(a,b,c){a=a|0;b=b|0;c=c|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0;e=i;f=a>>>16;g=a&65535;if((c|0)==1){a=(d[b]|0)+g|0;h=a>>>0>65520?a+ -65521|0:a;a=h+f|0;j=(a>>>0>65520?a+15|0:a)<<16|h;i=e;return j|0}if((b|0)==0){j=1;i=e;return j|0}if(c>>>0<16){if((c|0)==0){k=g;l=f}else{h=b;a=c;m=g;n=f;while(1){o=a+ -1|0;p=(d[h]|0)+m|0;q=p+n|0;if((o|0)==0){k=p;l=q;break}else{h=h+1|0;a=o;m=p;n=q}}}j=((l>>>0)%65521|0)<<16|(k>>>0>65520?k+ -65521|0:k);i=e;return j|0}if(c>>>0>5551){k=b;l=c;n=g;m=f;do{l=l+ -5552|0;a=k;h=n;q=347;p=m;while(1){o=(d[a]|0)+h|0;r=o+(d[a+1|0]|0)|0;s=r+(d[a+2|0]|0)|0;t=s+(d[a+3|0]|0)|0;u=t+(d[a+4|0]|0)|0;v=u+(d[a+5|0]|0)|0;w=v+(d[a+6|0]|0)|0;x=w+(d[a+7|0]|0)|0;y=x+(d[a+8|0]|0)|0;z=y+(d[a+9|0]|0)|0;A=z+(d[a+10|0]|0)|0;B=A+(d[a+11|0]|0)|0;C=B+(d[a+12|0]|0)|0;D=C+(d[a+13|0]|0)|0;E=D+(d[a+14|0]|0)|0;h=E+(d[a+15|0]|0)|0;p=o+p+r+s+t+u+v+w+x+y+z+A+B+C+D+E+h|0;q=q+ -1|0;if((q|0)==0){break}else{a=a+16|0}}k=k+5552|0;n=(h>>>0)%65521|0;m=(p>>>0)%65521|0}while(l>>>0>5551);if((l|0)!=0){if(l>>>0>15){F=l;G=k;H=n;I=m;J=15}else{K=l;L=k;M=n;N=m;J=16}}else{O=n;P=m}}else{F=c;G=b;H=g;I=f;J=15}if((J|0)==15){while(1){J=0;F=F+ -16|0;f=(d[G]|0)+H|0;g=f+(d[G+1|0]|0)|0;b=g+(d[G+2|0]|0)|0;c=b+(d[G+3|0]|0)|0;m=c+(d[G+4|0]|0)|0;n=m+(d[G+5|0]|0)|0;k=n+(d[G+6|0]|0)|0;l=k+(d[G+7|0]|0)|0;a=l+(d[G+8|0]|0)|0;q=a+(d[G+9|0]|0)|0;E=q+(d[G+10|0]|0)|0;D=E+(d[G+11|0]|0)|0;C=D+(d[G+12|0]|0)|0;B=C+(d[G+13|0]|0)|0;A=B+(d[G+14|0]|0)|0;H=A+(d[G+15|0]|0)|0;I=f+I+g+b+c+m+n+k+l+a+q+E+D+C+B+A+H|0;G=G+16|0;if(!(F>>>0>15)){break}else{J=15}}if((F|0)==0){Q=H;R=I;J=17}else{K=F;L=G;M=H;N=I;J=16}}if((J|0)==16){while(1){J=0;I=K+ -1|0;H=(d[L]|0)+M|0;G=H+N|0;if((I|0)==0){Q=H;R=G;J=17;break}else{K=I;L=L+1|0;M=H;N=G;J=16}}}if((J|0)==17){O=(Q>>>0)%65521|0;P=(R>>>0)%65521|0}j=P<<16|O;i=e;return j|0}function km(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;f=i;if((b|0)==0){g=0;i=f;return g|0}h=~a;a:do{if((e|0)!=0){a=b;j=e;k=h;while(1){if((a&3|0)==0){break}l=c[17696+(((d[a]|0)^k&255)<<2)>>2]^k>>>8;m=j+ -1|0;if((m|0)==0){n=l;break a}else{a=a+1|0;j=m;k=l}}if(j>>>0>31){l=j;m=a;o=k;while(1){p=c[m>>2]^o;q=c[19744+((p>>>8&255)<<2)>>2]^c[20768+((p&255)<<2)>>2]^c[18720+((p>>>16&255)<<2)>>2]^c[17696+(p>>>24<<2)>>2]^c[m+4>>2];p=c[19744+((q>>>8&255)<<2)>>2]^c[20768+((q&255)<<2)>>2]^c[18720+((q>>>16&255)<<2)>>2]^c[17696+(q>>>24<<2)>>2]^c[m+8>>2];q=c[19744+((p>>>8&255)<<2)>>2]^c[20768+((p&255)<<2)>>2]^c[18720+((p>>>16&255)<<2)>>2]^c[17696+(p>>>24<<2)>>2]^c[m+12>>2];p=c[19744+((q>>>8&255)<<2)>>2]^c[20768+((q&255)<<2)>>2]^c[18720+((q>>>16&255)<<2)>>2]^c[17696+(q>>>24<<2)>>2]^c[m+16>>2];q=c[19744+((p>>>8&255)<<2)>>2]^c[20768+((p&255)<<2)>>2]^c[18720+((p>>>16&255)<<2)>>2]^c[17696+(p>>>24<<2)>>2]^c[m+20>>2];p=c[19744+((q>>>8&255)<<2)>>2]^c[20768+((q&255)<<2)>>2]^c[18720+((q>>>16&255)<<2)>>2]^c[17696+(q>>>24<<2)>>2]^c[m+24>>2];q=m+32|0;r=c[19744+((p>>>8&255)<<2)>>2]^c[20768+((p&255)<<2)>>2]^c[18720+((p>>>16&255)<<2)>>2]^c[17696+(p>>>24<<2)>>2]^c[m+28>>2];p=c[19744+((r>>>8&255)<<2)>>2]^c[20768+((r&255)<<2)>>2]^c[18720+((r>>>16&255)<<2)>>2]^c[17696+(r>>>24<<2)>>2];r=l+ -32|0;if(r>>>0>31){l=r;m=q;o=p}else{s=r;t=q;u=p;break}}}else{s=j;t=a;u=k}if(s>>>0>3){o=s;m=t;l=u;while(1){p=m+4|0;q=c[m>>2]^l;r=c[19744+((q>>>8&255)<<2)>>2]^c[20768+((q&255)<<2)>>2]^c[18720+((q>>>16&255)<<2)>>2]^c[17696+(q>>>24<<2)>>2];q=o+ -4|0;if(q>>>0>3){o=q;m=p;l=r}else{v=q;w=p;x=r;break}}}else{v=s;w=t;x=u}if((v|0)==0){n=x}else{l=w;m=v;o=x;while(1){k=c[17696+(((d[l]|0)^o&255)<<2)>>2]^o>>>8;a=m+ -1|0;if((a|0)==0){n=k;break}else{l=l+1|0;m=a;o=k}}}}else{n=h}}while(0);g=~n;i=f;return g|0}function lm(a){a=a|0;var b=0,d=0,e=0;b=i;if((a|0)==0){d=-2;i=b;return d|0}e=c[a+28>>2]|0;if((e|0)==0){d=-2;i=b;return d|0}c[e+28>>2]=0;c[a+20>>2]=0;c[a+8>>2]=0;c[a+24>>2]=0;c[a+48>>2]=1;c[e>>2]=0;c[e+4>>2]=0;c[e+12>>2]=0;c[e+20>>2]=32768;c[e+32>>2]=0;c[e+40>>2]=0;c[e+44>>2]=0;c[e+48>>2]=0;c[e+56>>2]=0;c[e+60>>2]=0;a=e+1328|0;c[e+108>>2]=a;c[e+80>>2]=a;c[e+76>>2]=a;c[e+7104>>2]=1;c[e+7108>>2]=-1;d=0;i=b;return d|0}function mm(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;f=i;if((d|0)==0){g=-6;i=f;return g|0}if(!((a[d]|0)==49&(e|0)==56)){g=-6;i=f;return g|0}if((b|0)==0){g=-2;i=f;return g|0}e=b+24|0;c[e>>2]=0;d=b+32|0;h=c[d>>2]|0;if((h|0)==0){c[d>>2]=14;c[b+40>>2]=0;j=14}else{j=h}h=b+36|0;if((c[h>>2]|0)==0){c[h>>2]=22}d=b+40|0;k=Jc[j&15](c[d>>2]|0,1,7116)|0;if((k|0)==0){g=-4;i=f;return g|0}j=b+28|0;c[j>>2]=k;c[k+52>>2]=0;l=c[j>>2]|0;do{if((l|0)!=0){m=l+52|0;n=c[m>>2]|0;o=l+36|0;if((n|0)!=0){if((c[o>>2]|0)==15){p=l}else{Qc[c[h>>2]&31](c[d>>2]|0,n);c[m>>2]=0;p=c[j>>2]|0}c[l+8>>2]=1;c[o>>2]=15;if((p|0)==0){break}else{q=p}}else{c[l+8>>2]=1;c[o>>2]=15;q=l}c[q+28>>2]=0;c[b+20>>2]=0;c[b+8>>2]=0;c[e>>2]=0;c[b+48>>2]=1;c[q>>2]=0;c[q+4>>2]=0;c[q+12>>2]=0;c[q+20>>2]=32768;c[q+32>>2]=0;c[q+40>>2]=0;c[q+44>>2]=0;c[q+48>>2]=0;c[q+56>>2]=0;c[q+60>>2]=0;o=q+1328|0;c[q+108>>2]=o;c[q+80>>2]=o;c[q+76>>2]=o;c[q+7104>>2]=1;c[q+7108>>2]=-1;g=0;i=f;return g|0}}while(0);Qc[c[h>>2]&31](c[d>>2]|0,k);c[j>>2]=0;g=-2;i=f;return g|0}



function nm(f,g){f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,mb=0,nb=0,ob=0,pb=0,qb=0,rb=0,sb=0,tb=0,ub=0,vb=0,xb=0,yb=0,zb=0,Ab=0,Bb=0,Cb=0,Db=0,Eb=0,Fb=0,Gb=0,Hb=0,Ib=0,Jb=0,Kb=0,Lb=0,Mb=0,Nb=0,Ob=0,Pb=0,Qb=0,Rb=0,Sb=0,Tb=0,Ub=0,Vb=0,Wb=0,Xb=0,Yb=0,Zb=0,_b=0,$b=0,ac=0,bc=0,cc=0,dc=0,ec=0,fc=0,gc=0,hc=0,ic=0,jc=0,kc=0,lc=0,mc=0,nc=0,oc=0,pc=0,qc=0,rc=0,sc=0,tc=0,uc=0,vc=0,wc=0,xc=0,yc=0,zc=0,Ac=0,Bc=0,Cc=0,Dc=0,Ec=0,Fc=0,Gc=0,Hc=0,Ic=0,Jc=0,Kc=0,Lc=0,Mc=0,Nc=0,Oc=0,Pc=0,Qc=0,Rc=0,Sc=0,Tc=0,Uc=0,Vc=0,Wc=0,Xc=0,Yc=0,Zc=0,_c=0,$c=0,ad=0,bd=0,cd=0,dd=0,ed=0,fd=0,gd=0,hd=0,id=0,jd=0,kd=0,ld=0,md=0,nd=0,od=0,pd=0,qd=0,rd=0,sd=0,td=0,ud=0,vd=0,wd=0,xd=0,yd=0,zd=0,Ad=0,Bd=0,Cd=0,Dd=0,Ed=0,Fd=0,Gd=0,Hd=0,Id=0,Jd=0,Kd=0,Ld=0,Md=0,Nd=0,Od=0,Pd=0,Qd=0,Rd=0,Sd=0,Td=0,Ud=0,Vd=0,Wd=0,Xd=0,Yd=0,Zd=0,_d=0,$d=0,ae=0,be=0,ce=0,de=0,ee=0,fe=0,ge=0,he=0,ie=0,je=0,ke=0,le=0,me=0,ne=0,oe=0,pe=0,qe=0,re=0,se=0,te=0,ue=0,ve=0,we=0,xe=0,ye=0,ze=0,Ae=0,Be=0,Ce=0,De=0,Ee=0,Fe=0,Ge=0,He=0,Ie=0,Je=0,Ke=0,Le=0,Me=0,Ne=0,Oe=0,Pe=0,Qe=0,Re=0,Se=0,Te=0,Ue=0,Ve=0,We=0,Xe=0,Ye=0,Ze=0,_e=0,$e=0,af=0,bf=0,cf=0,df=0,ef=0,ff=0,gf=0,hf=0,jf=0,kf=0,lf=0,mf=0,nf=0,of=0,pf=0,qf=0,rf=0,sf=0,tf=0,uf=0,vf=0,wf=0,xf=0,yf=0,zf=0,Af=0,Bf=0,Cf=0,Df=0,Ef=0,Ff=0,Gf=0,Hf=0,If=0,Jf=0,Kf=0,Lf=0,Mf=0,Nf=0,Of=0,Pf=0,Qf=0,Rf=0,Sf=0,Tf=0,Uf=0,Vf=0,Wf=0,Xf=0,Yf=0,Zf=0,_f=0,$f=0,ag=0,bg=0,cg=0,dg=0,eg=0,fg=0,gg=0,hg=0,ig=0,jg=0,kg=0,lg=0,mg=0,ng=0,og=0,pg=0,qg=0,rg=0,sg=0,tg=0,ug=0,vg=0,wg=0,xg=0,yg=0,zg=0,Ag=0,Bg=0,Cg=0,Dg=0,Eg=0;h=i;i=i+16|0;j=h;if((f|0)==0){k=-2;i=h;return k|0}l=c[f+28>>2]|0;if((l|0)==0){k=-2;i=h;return k|0}m=f+12|0;n=c[m>>2]|0;if((n|0)==0){k=-2;i=h;return k|0}o=c[f>>2]|0;if((o|0)==0?(c[f+4>>2]|0)!=0:0){k=-2;i=h;return k|0}p=c[l>>2]|0;if((p|0)==11){c[l>>2]=12;q=12;r=c[f>>2]|0;s=c[m>>2]|0}else{q=p;r=o;s=n}n=f+16|0;o=c[n>>2]|0;p=f+4|0;t=c[p>>2]|0;u=l+56|0;v=l+60|0;w=l+8|0;x=l+24|0;y=j+1|0;z=l+16|0;A=l+32|0;B=f+24|0;C=l+36|0;D=l+20|0;E=f+48|0;F=l+64|0;G=l+12|0;H=(g+ -5|0)>>>0<2;I=l+4|0;J=l+76|0;K=l+84|0;L=l+80|0;M=l+88|0;N=(g|0)==6;O=l+7108|0;P=l+72|0;Q=l+7112|0;R=l+68|0;S=l+44|0;T=l+7104|0;U=l+48|0;V=l+52|0;W=l+40|0;X=f+20|0;Y=l+28|0;Z=l+96|0;_=l+100|0;$=l+92|0;aa=l+104|0;ba=l+1328|0;ca=l+108|0;da=l+112|0;ea=l+752|0;fa=l+624|0;ga=j+2|0;ha=j+3|0;ia=q;q=c[v>>2]|0;ja=t;ka=c[u>>2]|0;la=o;ma=r;r=o;o=s;s=0;a:while(1){b:do{switch(ia|0){case 18:{na=c[aa>>2]|0;oa=q;pa=ja;qa=ka;ra=ma;sa=s;ta=164;break};case 23:{ua=c[P>>2]|0;va=q;wa=ja;xa=ka;ya=ma;za=s;ta=240;break};case 16:{if(q>>>0<14){Aa=q;Ba=ja;Ca=ka;Da=ma;while(1){if((Ba|0)==0){Ea=Aa;Fa=0;Ga=Ca;Ha=la;Ia=Da;Ja=r;Ka=s;break a}La=Ba+ -1|0;Ma=Da+1|0;Na=(d[Da]<<Aa)+Ca|0;Oa=Aa+8|0;if(Oa>>>0<14){Aa=Oa;Ba=La;Ca=Na;Da=Ma}else{Pa=Oa;Qa=La;Ra=Na;Sa=Ma;break}}}else{Pa=q;Qa=ja;Ra=ka;Sa=ma}Da=(Ra&31)+257|0;c[Z>>2]=Da;Ca=(Ra>>>5&31)+1|0;c[_>>2]=Ca;c[$>>2]=(Ra>>>10&15)+4;Ba=Ra>>>14;Aa=Pa+ -14|0;if(Da>>>0>286|Ca>>>0>30){c[B>>2]=26120;c[l>>2]=29;Ta=Aa;Ua=Qa;Va=Ba;Wa=la;Xa=Sa;Ya=r;Za=o;_a=s;break b}else{c[aa>>2]=0;c[l>>2]=17;$a=0;ab=Aa;bb=Qa;cb=Ba;db=Sa;ta=154;break b}break};case 2:{if(q>>>0<32){eb=q;fb=ja;gb=ka;hb=ma;ta=47}else{ib=ja;jb=ka;kb=ma;ta=49}break};case 1:{if(q>>>0<16){Ba=q;Aa=ja;Ca=ka;Da=ma;while(1){if((Aa|0)==0){Ea=Ba;Fa=0;Ga=Ca;Ha=la;Ia=Da;Ja=r;Ka=s;break a}Ma=Aa+ -1|0;Na=Da+1|0;La=(d[Da]<<Ba)+Ca|0;Oa=Ba+8|0;if(Oa>>>0<16){Ba=Oa;Aa=Ma;Ca=La;Da=Na}else{lb=Oa;mb=Ma;nb=La;ob=Na;break}}}else{lb=q;mb=ja;nb=ka;ob=ma}c[z>>2]=nb;if((nb&255|0)!=8){c[B>>2]=25952;c[l>>2]=29;Ta=lb;Ua=mb;Va=nb;Wa=la;Xa=ob;Ya=r;Za=o;_a=s;break b}if((nb&57344|0)!=0){c[B>>2]=26008;c[l>>2]=29;Ta=lb;Ua=mb;Va=nb;Wa=la;Xa=ob;Ya=r;Za=o;_a=s;break b}Da=c[A>>2]|0;if((Da|0)==0){pb=nb}else{c[Da>>2]=nb>>>8&1;pb=c[z>>2]|0}if((pb&512|0)!=0){a[j]=nb;a[y]=nb>>>8;c[x>>2]=km(c[x>>2]|0,j,2)|0}c[l>>2]=2;eb=0;fb=mb;gb=0;hb=ob;ta=47;break};case 0:{Da=c[w>>2]|0;if((Da|0)==0){c[l>>2]=12;Ta=q;Ua=ja;Va=ka;Wa=la;Xa=ma;Ya=r;Za=o;_a=s;break b}if(q>>>0<16){Ca=q;Aa=ja;Ba=ka;Na=ma;while(1){if((Aa|0)==0){Ea=Ca;Fa=0;Ga=Ba;Ha=la;Ia=Na;Ja=r;Ka=s;break a}La=Aa+ -1|0;Ma=Na+1|0;Oa=(d[Na]<<Ca)+Ba|0;qb=Ca+8|0;if(qb>>>0<16){Ca=qb;Aa=La;Ba=Oa;Na=Ma}else{rb=qb;sb=La;tb=Oa;ub=Ma;break}}}else{rb=q;sb=ja;tb=ka;ub=ma}if((Da&2|0)!=0&(tb|0)==35615){c[x>>2]=km(0,0,0)|0;a[j]=31;a[y]=-117;c[x>>2]=km(c[x>>2]|0,j,2)|0;c[l>>2]=1;Ta=0;Ua=sb;Va=0;Wa=la;Xa=ub;Ya=r;Za=o;_a=s;break b}c[z>>2]=0;Na=c[A>>2]|0;if((Na|0)==0){vb=Da}else{c[Na+48>>2]=-1;vb=c[w>>2]|0}if((vb&1|0)!=0?((((tb<<8&65280)+(tb>>>8)|0)>>>0)%31|0|0)==0:0){if((tb&15|0)!=8){c[B>>2]=25952;c[l>>2]=29;Ta=rb;Ua=sb;Va=tb;Wa=la;Xa=ub;Ya=r;Za=o;_a=s;break b}Na=tb>>>4;Ba=rb+ -4|0;Aa=(Na&15)+8|0;Ca=c[C>>2]|0;if((Ca|0)!=0){if(Aa>>>0>Ca>>>0){c[B>>2]=25984;c[l>>2]=29;Ta=Ba;Ua=sb;Va=Na;Wa=la;Xa=ub;Ya=r;Za=o;_a=s;break b}}else{c[C>>2]=Aa}c[D>>2]=1<<Aa;Aa=jm(0,0,0)|0;c[x>>2]=Aa;c[E>>2]=Aa;c[l>>2]=tb>>>12&2^11;Ta=0;Ua=sb;Va=0;Wa=la;Xa=ub;Ya=r;Za=o;_a=s;break b}c[B>>2]=25928;c[l>>2]=29;Ta=rb;Ua=sb;Va=tb;Wa=la;Xa=ub;Ya=r;Za=o;_a=s;break};case 21:{xb=c[P>>2]|0;yb=q;zb=ja;Ab=ka;Bb=ma;Cb=s;ta=221;break};case 9:{if(q>>>0<32){Aa=q;Na=ja;Ba=ka;Ca=ma;while(1){if((Na|0)==0){Ea=Aa;Fa=0;Ga=Ba;Ha=la;Ia=Ca;Ja=r;Ka=s;break a}Ma=Na+ -1|0;Oa=Ca+1|0;La=(d[Ca]<<Aa)+Ba|0;qb=Aa+8|0;if(qb>>>0<32){Aa=qb;Na=Ma;Ba=La;Ca=Oa}else{Db=Ma;Eb=La;Fb=Oa;break}}}else{Db=ja;Eb=ka;Fb=ma}Ca=wb(Eb|0)|0;c[x>>2]=Ca;c[E>>2]=Ca;c[l>>2]=10;Gb=0;Hb=Db;Ib=0;Jb=Fb;ta=121;break};case 3:{if(q>>>0<16){Kb=q;Lb=ja;Mb=ka;Nb=ma;ta=55}else{Ob=ja;Pb=ka;Qb=ma;ta=57}break};case 4:{Rb=q;Sb=ja;Tb=ka;Ub=ma;ta=62;break};case 5:{Vb=q;Wb=ja;Xb=ka;Yb=ma;ta=73;break};case 6:{Zb=q;_b=ja;$b=ka;ac=ma;ta=83;break};case 7:{bc=q;cc=ja;dc=ka;ec=ma;ta=96;break};case 8:{fc=q;gc=ja;hc=ka;ic=ma;ta=109;break};case 10:{Gb=q;Hb=ja;Ib=ka;Jb=ma;ta=121;break};case 11:{jc=q;kc=ja;lc=ka;mc=ma;ta=124;break};case 12:{nc=q;oc=ja;pc=ka;qc=ma;ta=125;break};case 13:{Ca=q&7;Ba=ka>>>Ca;Na=q-Ca|0;if(Na>>>0<32){Ca=Na;Aa=ja;Da=Ba;Oa=ma;while(1){if((Aa|0)==0){Ea=Ca;Fa=0;Ga=Da;Ha=la;Ia=Oa;Ja=r;Ka=s;break a}La=Aa+ -1|0;Ma=Oa+1|0;qb=(d[Oa]<<Ca)+Da|0;rc=Ca+8|0;if(rc>>>0<32){Ca=rc;Aa=La;Da=qb;Oa=Ma}else{sc=rc;tc=La;uc=qb;vc=Ma;break}}}else{sc=Na;tc=ja;uc=Ba;vc=ma}Oa=uc&65535;if((Oa|0)==(uc>>>16^65535|0)){c[F>>2]=Oa;c[l>>2]=14;if(N){wc=0;xc=tc;yc=0;zc=la;Ac=vc;Bc=s;ta=285;break a}else{Cc=0;Dc=tc;Ec=0;Fc=vc;ta=143;break b}}else{c[B>>2]=26088;c[l>>2]=29;Ta=sc;Ua=tc;Va=uc;Wa=la;Xa=vc;Ya=r;Za=o;_a=s;break b}break};case 14:{Cc=q;Dc=ja;Ec=ka;Fc=ma;ta=143;break};case 15:{Gc=q;Hc=ja;Ic=ka;Jc=ma;ta=144;break};case 17:{Oa=c[aa>>2]|0;if(Oa>>>0<(c[$>>2]|0)>>>0){$a=Oa;ab=q;bb=ja;cb=ka;db=ma;ta=154}else{Kc=Oa;Lc=q;Mc=ja;Nc=ka;Oc=ma;ta=158}break};case 19:{Pc=q;Qc=ja;Rc=ka;Sc=ma;Tc=s;ta=201;break};case 20:{Uc=q;Vc=ja;Wc=ka;Xc=ma;Yc=s;ta=202;break};case 22:{Zc=q;_c=ja;$c=ka;ad=ma;bd=s;ta=228;break};case 24:{cd=q;dd=ja;ed=ka;fd=ma;gd=s;ta=246;break};case 25:{if((la|0)==0){wc=q;xc=ja;yc=ka;zc=0;Ac=ma;Bc=s;ta=285;break a}a[o]=c[F>>2];c[l>>2]=20;Ta=q;Ua=ja;Va=ka;Wa=la+ -1|0;Xa=ma;Ya=r;Za=o+1|0;_a=s;break};case 26:{if((c[w>>2]|0)!=0){if(q>>>0<32){Oa=q;Da=ja;Aa=ka;Ca=ma;while(1){if((Da|0)==0){Ea=Oa;Fa=0;Ga=Aa;Ha=la;Ia=Ca;Ja=r;Ka=s;break a}Ma=Da+ -1|0;qb=Ca+1|0;La=(d[Ca]<<Oa)+Aa|0;rc=Oa+8|0;if(rc>>>0<32){Oa=rc;Da=Ma;Aa=La;Ca=qb}else{hd=rc;id=Ma;jd=La;kd=qb;break}}}else{hd=q;id=ja;jd=ka;kd=ma}Ca=r-la|0;c[X>>2]=(c[X>>2]|0)+Ca;c[Y>>2]=(c[Y>>2]|0)+Ca;if((r|0)!=(la|0)){Aa=c[x>>2]|0;Da=o+(0-Ca)|0;if((c[z>>2]|0)==0){ld=jm(Aa,Da,Ca)|0}else{ld=km(Aa,Da,Ca)|0}c[x>>2]=ld;c[E>>2]=ld}if((c[z>>2]|0)==0){md=wb(jd|0)|0}else{md=jd}if((md|0)==(c[x>>2]|0)){nd=0;od=id;pd=0;qd=kd;rd=la}else{c[B>>2]=26408;c[l>>2]=29;Ta=hd;Ua=id;Va=jd;Wa=la;Xa=kd;Ya=la;Za=o;_a=s;break b}}else{nd=q;od=ja;pd=ka;qd=ma;rd=r}c[l>>2]=27;sd=nd;td=od;ud=pd;vd=qd;wd=rd;ta=277;break};case 27:{sd=q;td=ja;ud=ka;vd=ma;wd=r;ta=277;break};case 28:{wc=q;xc=ja;yc=ka;zc=la;Ac=ma;Bc=1;ta=285;break a;break};case 29:{Ea=q;Fa=ja;Ga=ka;Ha=la;Ia=ma;Ja=r;Ka=-3;break a;break};case 30:{ta=299;break a;break};default:{k=-2;ta=300;break a}}}while(0);if((ta|0)==47){while(1){ta=0;if((fb|0)==0){Ea=eb;Fa=0;Ga=gb;Ha=la;Ia=hb;Ja=r;Ka=s;break a}Ca=fb+ -1|0;Da=hb+1|0;Aa=(d[hb]<<eb)+gb|0;Oa=eb+8|0;if(Oa>>>0<32){eb=Oa;fb=Ca;gb=Aa;hb=Da;ta=47}else{ib=Ca;jb=Aa;kb=Da;ta=49;break}}}else if((ta|0)==121){ta=0;if((c[G>>2]|0)==0){ta=122;break}Da=jm(0,0,0)|0;c[x>>2]=Da;c[E>>2]=Da;c[l>>2]=11;jc=Gb;kc=Hb;lc=Ib;mc=Jb;ta=124}else if((ta|0)==143){ta=0;c[l>>2]=15;Gc=Cc;Hc=Dc;Ic=Ec;Jc=Fc;ta=144}else if((ta|0)==154){while(1){ta=0;if(ab>>>0<3){Da=ab;Aa=bb;Ca=cb;Oa=db;while(1){if((Aa|0)==0){Ea=Da;Fa=0;Ga=Ca;Ha=la;Ia=Oa;Ja=r;Ka=s;break a}Ba=Aa+ -1|0;Na=Oa+1|0;qb=(d[Oa]<<Da)+Ca|0;La=Da+8|0;if(La>>>0<3){Da=La;Aa=Ba;Ca=qb;Oa=Na}else{xd=La;yd=Ba;zd=qb;Ad=Na;break}}}else{xd=ab;yd=bb;zd=cb;Ad=db}c[aa>>2]=$a+1;b[l+(e[25888+($a<<1)>>1]<<1)+112>>1]=zd&7;Oa=zd>>>3;Ca=xd+ -3|0;Aa=c[aa>>2]|0;if(Aa>>>0<(c[$>>2]|0)>>>0){$a=Aa;ab=Ca;bb=yd;cb=Oa;db=Ad;ta=154}else{Kc=Aa;Lc=Ca;Mc=yd;Nc=Oa;Oc=Ad;ta=158;break}}}else if((ta|0)==277){ta=0;if((c[w>>2]|0)==0){Bd=sd;Cd=td;Dd=ud;Ed=vd;ta=284;break}if((c[z>>2]|0)==0){Bd=sd;Cd=td;Dd=ud;Ed=vd;ta=284;break}if(sd>>>0<32){Oa=sd;Ca=td;Aa=ud;Da=vd;while(1){if((Ca|0)==0){Ea=Oa;Fa=0;Ga=Aa;Ha=la;Ia=Da;Ja=wd;Ka=s;break a}Na=Ca+ -1|0;qb=Da+1|0;Ba=(d[Da]<<Oa)+Aa|0;La=Oa+8|0;if(La>>>0<32){Oa=La;Ca=Na;Aa=Ba;Da=qb}else{Fd=La;Gd=Na;Hd=Ba;Id=qb;break}}}else{Fd=sd;Gd=td;Hd=ud;Id=vd}if((Hd|0)==(c[Y>>2]|0)){Bd=0;Cd=Gd;Dd=0;Ed=Id;ta=284;break}c[B>>2]=26432;c[l>>2]=29;Ta=Fd;Ua=Gd;Va=Hd;Wa=la;Xa=Id;Ya=wd;Za=o;_a=s}do{if((ta|0)==49){ta=0;Da=c[A>>2]|0;if((Da|0)!=0){c[Da+4>>2]=jb}if((c[z>>2]&512|0)!=0){a[j]=jb;a[y]=jb>>>8;a[ga]=jb>>>16;a[ha]=jb>>>24;c[x>>2]=km(c[x>>2]|0,j,4)|0}c[l>>2]=3;Kb=0;Lb=ib;Mb=0;Nb=kb;ta=55}else if((ta|0)==124){ta=0;if(H){wc=jc;xc=kc;yc=lc;zc=la;Ac=mc;Bc=s;ta=285;break a}else{nc=jc;oc=kc;pc=lc;qc=mc;ta=125}}else if((ta|0)==144){ta=0;Da=c[F>>2]|0;if((Da|0)==0){c[l>>2]=11;Ta=Gc;Ua=Hc;Va=Ic;Wa=la;Xa=Jc;Ya=r;Za=o;_a=s;break}Aa=Da>>>0>Hc>>>0?Hc:Da;Da=Aa>>>0>la>>>0?la:Aa;if((Da|0)==0){wc=Gc;xc=Hc;yc=Ic;zc=la;Ac=Jc;Bc=s;ta=285;break a}Fm(o|0,Jc|0,Da|0)|0;c[F>>2]=(c[F>>2]|0)-Da;Ta=Gc;Ua=Hc-Da|0;Va=Ic;Wa=la-Da|0;Xa=Jc+Da|0;Ya=r;Za=o+Da|0;_a=s}else if((ta|0)==158){ta=0;if(Kc>>>0<19){Da=Kc;while(1){Aa=Da+1|0;b[l+(e[25888+(Da<<1)>>1]<<1)+112>>1]=0;if((Aa|0)==19){break}else{Da=Aa}}c[aa>>2]=19}c[ca>>2]=ba;c[J>>2]=ba;c[K>>2]=7;Da=qm(0,da,19,ca,K,ea)|0;if((Da|0)==0){c[aa>>2]=0;c[l>>2]=18;na=0;oa=Lc;pa=Mc;qa=Nc;ra=Oc;sa=0;ta=164;break}else{c[B>>2]=26160;c[l>>2]=29;Ta=Lc;Ua=Mc;Va=Nc;Wa=la;Xa=Oc;Ya=r;Za=o;_a=Da;break}}}while(0);c:do{if((ta|0)==55){while(1){ta=0;if((Lb|0)==0){Ea=Kb;Fa=0;Ga=Mb;Ha=la;Ia=Nb;Ja=r;Ka=s;break a}Da=Lb+ -1|0;Aa=Nb+1|0;Ca=(d[Nb]<<Kb)+Mb|0;Oa=Kb+8|0;if(Oa>>>0<16){Kb=Oa;Lb=Da;Mb=Ca;Nb=Aa;ta=55}else{Ob=Da;Pb=Ca;Qb=Aa;ta=57;break}}}else if((ta|0)==125){ta=0;if((c[I>>2]|0)!=0){Aa=nc&7;c[l>>2]=26;Ta=nc-Aa|0;Ua=oc;Va=pc>>>Aa;Wa=la;Xa=qc;Ya=r;Za=o;_a=s;break}if(nc>>>0<3){Aa=nc;Ca=oc;Da=pc;Oa=qc;while(1){if((Ca|0)==0){Ea=Aa;Fa=0;Ga=Da;Ha=la;Ia=Oa;Ja=r;Ka=s;break a}qb=Ca+ -1|0;Ba=Oa+1|0;Na=(d[Oa]<<Aa)+Da|0;La=Aa+8|0;if(La>>>0<3){Aa=La;Ca=qb;Da=Na;Oa=Ba}else{Jd=La;Kd=qb;Ld=Na;Md=Ba;break}}}else{Jd=nc;Kd=oc;Ld=pc;Md=qc}c[I>>2]=Ld&1;Oa=Ld>>>1&3;if((Oa|0)==0){c[l>>2]=13}else if((Oa|0)==1){c[J>>2]=26456;c[K>>2]=9;c[L>>2]=28504;c[M>>2]=5;c[l>>2]=19;if(N){ta=133;break a}}else if((Oa|0)==2){c[l>>2]=16}else if((Oa|0)==3){c[B>>2]=26064;c[l>>2]=29}Ta=Jd+ -3|0;Ua=Kd;Va=Ld>>>3;Wa=la;Xa=Md;Ya=r;Za=o;_a=s}else if((ta|0)==164){ta=0;Oa=c[Z>>2]|0;Da=c[_>>2]|0;do{if(na>>>0<(Da+Oa|0)>>>0){Ca=na;Aa=Da;Ba=Oa;Na=oa;qb=pa;La=qa;Ma=ra;d:while(1){rc=(1<<c[K>>2])+ -1|0;Nd=rc&La;Od=c[J>>2]|0;Pd=d[Od+(Nd<<2)+1|0]|0;if(Pd>>>0>Na>>>0){Qd=Na;Rd=qb;Sd=La;Td=Ma;while(1){if((Rd|0)==0){Ea=Qd;Fa=0;Ga=Sd;Ha=la;Ia=Td;Ja=r;Ka=sa;break a}Ud=Rd+ -1|0;Vd=Td+1|0;Wd=(d[Td]<<Qd)+Sd|0;Xd=Qd+8|0;Yd=rc&Wd;Zd=d[Od+(Yd<<2)+1|0]|0;if(Zd>>>0>Xd>>>0){Qd=Xd;Rd=Ud;Sd=Wd;Td=Vd}else{_d=Zd;$d=Yd;ae=Xd;be=Ud;ce=Wd;de=Vd;break}}}else{_d=Pd;$d=Nd;ae=Na;be=qb;ce=La;de=Ma}Td=b[Od+($d<<2)+2>>1]|0;e:do{if((Td&65535)<16){if(ae>>>0<_d>>>0){Sd=ae;Rd=be;Qd=ce;rc=de;while(1){if((Rd|0)==0){Ea=Sd;Fa=0;Ga=Qd;Ha=la;Ia=rc;Ja=r;Ka=sa;break a}Vd=Rd+ -1|0;Wd=rc+1|0;Ud=(d[rc]<<Sd)+Qd|0;Xd=Sd+8|0;if(Xd>>>0<_d>>>0){Sd=Xd;Rd=Vd;Qd=Ud;rc=Wd}else{ee=Xd;fe=Vd;ge=Ud;he=Wd;break}}}else{ee=ae;fe=be;ge=ce;he=de}c[aa>>2]=Ca+1;b[l+(Ca<<1)+112>>1]=Td;ie=ee-_d|0;je=fe;ke=ge>>>_d;le=he}else{if(Td<<16>>16==16){rc=_d+2|0;if(ae>>>0<rc>>>0){Qd=ae;Rd=be;Sd=ce;Wd=de;while(1){if((Rd|0)==0){Ea=Qd;Fa=0;Ga=Sd;Ha=la;Ia=Wd;Ja=r;Ka=sa;break a}Ud=Rd+ -1|0;Vd=Wd+1|0;Xd=(d[Wd]<<Qd)+Sd|0;Yd=Qd+8|0;if(Yd>>>0<rc>>>0){Qd=Yd;Rd=Ud;Sd=Xd;Wd=Vd}else{me=Yd;ne=Ud;oe=Xd;pe=Vd;break}}}else{me=ae;ne=be;oe=ce;pe=de}qe=oe>>>_d;re=me-_d|0;if((Ca|0)==0){ta=181;break d}se=re+ -2|0;te=(qe&3)+3|0;ue=ne;ve=qe>>>2;we=b[l+(Ca+ -1<<1)+112>>1]|0;xe=pe}else if(Td<<16>>16==17){Wd=_d+3|0;if(ae>>>0<Wd>>>0){Sd=ae;Rd=be;Qd=ce;rc=de;while(1){if((Rd|0)==0){Ea=Sd;Fa=0;Ga=Qd;Ha=la;Ia=rc;Ja=r;Ka=sa;break a}Vd=Rd+ -1|0;Xd=rc+1|0;Ud=(d[rc]<<Sd)+Qd|0;Yd=Sd+8|0;if(Yd>>>0<Wd>>>0){Sd=Yd;Rd=Vd;Qd=Ud;rc=Xd}else{ye=Yd;ze=Vd;Ae=Ud;Be=Xd;break}}}else{ye=ae;ze=be;Ae=ce;Be=de}rc=Ae>>>_d;se=-3-_d+ye|0;te=(rc&7)+3|0;ue=ze;ve=rc>>>3;we=0;xe=Be}else{rc=_d+7|0;if(ae>>>0<rc>>>0){Qd=ae;Rd=be;Sd=ce;Wd=de;while(1){if((Rd|0)==0){Ea=Qd;Fa=0;Ga=Sd;Ha=la;Ia=Wd;Ja=r;Ka=sa;break a}Xd=Rd+ -1|0;Ud=Wd+1|0;Vd=(d[Wd]<<Qd)+Sd|0;Yd=Qd+8|0;if(Yd>>>0<rc>>>0){Qd=Yd;Rd=Xd;Sd=Vd;Wd=Ud}else{Ce=Yd;De=Xd;Ee=Vd;Fe=Ud;break}}}else{Ce=ae;De=be;Ee=ce;Fe=de}Wd=Ee>>>_d;se=-7-_d+Ce|0;te=(Wd&127)+11|0;ue=De;ve=Wd>>>7;we=0;xe=Fe}if((Ca+te|0)>>>0>(Aa+Ba|0)>>>0){ta=190;break d}else{Ge=Ca;He=te}while(1){Wd=He+ -1|0;c[aa>>2]=Ge+1;b[l+(Ge<<1)+112>>1]=we;if((Wd|0)==0){ie=se;je=ue;ke=ve;le=xe;break e}Ge=c[aa>>2]|0;He=Wd}}}while(0);Td=c[aa>>2]|0;Ie=c[Z>>2]|0;Od=c[_>>2]|0;if(Td>>>0<(Od+Ie|0)>>>0){Ca=Td;Aa=Od;Ba=Ie;Na=ie;qb=je;La=ke;Ma=le}else{ta=193;break}}if((ta|0)==181){ta=0;c[B>>2]=26192;c[l>>2]=29;Ta=re;Ua=ne;Va=qe;Wa=la;Xa=pe;Ya=r;Za=o;_a=sa;break c}else if((ta|0)==190){ta=0;c[B>>2]=26192;c[l>>2]=29;Ta=se;Ua=ue;Va=ve;Wa=la;Xa=xe;Ya=r;Za=o;_a=sa;break c}else if((ta|0)==193){ta=0;if((c[l>>2]|0)==29){Ta=ie;Ua=je;Va=ke;Wa=la;Xa=le;Ya=r;Za=o;_a=sa;break c}else{Je=Ie;Ke=ie;Le=je;Me=ke;Ne=le;break}}}else{Je=Oa;Ke=oa;Le=pa;Me=qa;Ne=ra}}while(0);if((b[fa>>1]|0)==0){c[B>>2]=26224;c[l>>2]=29;Ta=Ke;Ua=Le;Va=Me;Wa=la;Xa=Ne;Ya=r;Za=o;_a=sa;break}c[ca>>2]=ba;c[J>>2]=ba;c[K>>2]=9;Oa=qm(1,da,Je,ca,K,ea)|0;if((Oa|0)!=0){c[B>>2]=26264;c[l>>2]=29;Ta=Ke;Ua=Le;Va=Me;Wa=la;Xa=Ne;Ya=r;Za=o;_a=Oa;break}c[L>>2]=c[ca>>2];c[M>>2]=6;Oa=qm(2,l+(c[Z>>2]<<1)+112|0,c[_>>2]|0,ca,M,ea)|0;if((Oa|0)==0){c[l>>2]=19;if(N){wc=Ke;xc=Le;yc=Me;zc=la;Ac=Ne;Bc=0;ta=285;break a}else{Pc=Ke;Qc=Le;Rc=Me;Sc=Ne;Tc=0;ta=201;break}}else{c[B>>2]=26296;c[l>>2]=29;Ta=Ke;Ua=Le;Va=Me;Wa=la;Xa=Ne;Ya=r;Za=o;_a=Oa;break}}}while(0);if((ta|0)==57){ta=0;Oa=c[A>>2]|0;if((Oa|0)!=0){c[Oa+8>>2]=Pb&255;c[Oa+12>>2]=Pb>>>8}if((c[z>>2]&512|0)!=0){a[j]=Pb;a[y]=Pb>>>8;c[x>>2]=km(c[x>>2]|0,j,2)|0}c[l>>2]=4;Rb=0;Sb=Ob;Tb=0;Ub=Qb;ta=62}else if((ta|0)==201){ta=0;c[l>>2]=20;Uc=Pc;Vc=Qc;Wc=Rc;Xc=Sc;Yc=Tc;ta=202}do{if((ta|0)==62){ta=0;Oa=c[z>>2]|0;if((Oa&1024|0)==0){Da=c[A>>2]|0;if((Da|0)==0){Oe=Rb;Pe=Sb;Qe=Tb;Re=Ub}else{c[Da+16>>2]=0;Oe=Rb;Pe=Sb;Qe=Tb;Re=Ub}}else{if(Rb>>>0<16){Da=Rb;Ma=Sb;La=Tb;qb=Ub;while(1){if((Ma|0)==0){Ea=Da;Fa=0;Ga=La;Ha=la;Ia=qb;Ja=r;Ka=s;break a}Na=Ma+ -1|0;Ba=qb+1|0;Aa=(d[qb]<<Da)+La|0;Ca=Da+8|0;if(Ca>>>0<16){Da=Ca;Ma=Na;La=Aa;qb=Ba}else{Se=Na;Te=Aa;Ue=Ba;break}}}else{Se=Sb;Te=Tb;Ue=Ub}c[F>>2]=Te;qb=c[A>>2]|0;if((qb|0)==0){Ve=Oa}else{c[qb+20>>2]=Te;Ve=c[z>>2]|0}if((Ve&512|0)==0){Oe=0;Pe=Se;Qe=0;Re=Ue}else{a[j]=Te;a[y]=Te>>>8;c[x>>2]=km(c[x>>2]|0,j,2)|0;Oe=0;Pe=Se;Qe=0;Re=Ue}}c[l>>2]=5;Vb=Oe;Wb=Pe;Xb=Qe;Yb=Re;ta=73}else if((ta|0)==202){ta=0;if(Vc>>>0>5&la>>>0>257){c[m>>2]=o;c[n>>2]=la;c[f>>2]=Xc;c[p>>2]=Vc;c[u>>2]=Wc;c[v>>2]=Uc;rm(f,r);qb=c[m>>2]|0;La=c[n>>2]|0;Ma=c[f>>2]|0;Da=c[p>>2]|0;Ba=c[u>>2]|0;Aa=c[v>>2]|0;if((c[l>>2]|0)!=11){Ta=Aa;Ua=Da;Va=Ba;Wa=La;Xa=Ma;Ya=r;Za=qb;_a=Yc;break}c[O>>2]=-1;Ta=Aa;Ua=Da;Va=Ba;Wa=La;Xa=Ma;Ya=r;Za=qb;_a=Yc;break}c[O>>2]=0;qb=(1<<c[K>>2])+ -1|0;Ma=qb&Wc;La=c[J>>2]|0;Ba=a[La+(Ma<<2)+1|0]|0;Da=Ba&255;if(Da>>>0>Uc>>>0){Aa=Uc;Na=Vc;Ca=Wc;Od=Xc;while(1){if((Na|0)==0){Ea=Aa;Fa=0;Ga=Ca;Ha=la;Ia=Od;Ja=r;Ka=Yc;break a}Td=Na+ -1|0;Nd=Od+1|0;Pd=(d[Od]<<Aa)+Ca|0;Wd=Aa+8|0;Sd=qb&Pd;Rd=a[La+(Sd<<2)+1|0]|0;Qd=Rd&255;if(Qd>>>0>Wd>>>0){Aa=Wd;Na=Td;Ca=Pd;Od=Nd}else{We=Rd;Xe=Qd;Ye=Sd;Ze=Wd;_e=Td;$e=Pd;af=Nd;break}}}else{We=Ba;Xe=Da;Ye=Ma;Ze=Uc;_e=Vc;$e=Wc;af=Xc}Od=a[La+(Ye<<2)|0]|0;Ca=b[La+(Ye<<2)+2>>1]|0;Na=Od&255;if(!(Od<<24>>24==0)){if((Na&240|0)==0){Aa=Ca&65535;qb=(1<<Xe+Na)+ -1|0;Na=(($e&qb)>>>Xe)+Aa|0;Oa=a[La+(Na<<2)+1|0]|0;if(((Oa&255)+Xe|0)>>>0>Ze>>>0){Nd=Ze;Pd=_e;Td=$e;Wd=af;while(1){if((Pd|0)==0){Ea=Nd;Fa=0;Ga=Td;Ha=la;Ia=Wd;Ja=r;Ka=Yc;break a}Sd=Pd+ -1|0;Qd=Wd+1|0;Rd=(d[Wd]<<Nd)+Td|0;rc=Nd+8|0;Ud=((Rd&qb)>>>Xe)+Aa|0;Vd=a[La+(Ud<<2)+1|0]|0;if(((Vd&255)+Xe|0)>>>0>rc>>>0){Nd=rc;Pd=Sd;Td=Rd;Wd=Qd}else{bf=Ud;cf=Vd;df=rc;ef=Sd;ff=Rd;gf=Qd;break}}}else{bf=Na;cf=Oa;df=Ze;ef=_e;ff=$e;gf=af}Wd=b[La+(bf<<2)+2>>1]|0;Td=a[La+(bf<<2)|0]|0;c[O>>2]=Xe;hf=Xe;jf=df-Xe|0;kf=ef;lf=Td;mf=cf;nf=Wd;of=ff>>>Xe;pf=gf}else{hf=0;jf=Ze;kf=_e;lf=Od;mf=We;nf=Ca;of=$e;pf=af}}else{hf=0;jf=Ze;kf=_e;lf=0;mf=We;nf=Ca;of=$e;pf=af}Wd=mf&255;Td=of>>>Wd;Pd=jf-Wd|0;c[O>>2]=hf+Wd;c[F>>2]=nf&65535;Wd=lf&255;if(lf<<24>>24==0){c[l>>2]=25;Ta=Pd;Ua=kf;Va=Td;Wa=la;Xa=pf;Ya=r;Za=o;_a=Yc;break}if((Wd&32|0)!=0){c[O>>2]=-1;c[l>>2]=11;Ta=Pd;Ua=kf;Va=Td;Wa=la;Xa=pf;Ya=r;Za=o;_a=Yc;break}if((Wd&64|0)==0){Nd=Wd&15;c[P>>2]=Nd;c[l>>2]=21;xb=Nd;yb=Pd;zb=kf;Ab=Td;Bb=pf;Cb=Yc;ta=221;break}else{c[B>>2]=26320;c[l>>2]=29;Ta=Pd;Ua=kf;Va=Td;Wa=la;Xa=pf;Ya=r;Za=o;_a=Yc;break}}}while(0);if((ta|0)==73){ta=0;Td=c[z>>2]|0;if((Td&1024|0)!=0){Pd=c[F>>2]|0;Nd=Pd>>>0>Wb>>>0?Wb:Pd;if((Nd|0)==0){qf=Pd;rf=Wb;sf=Yb}else{Wd=c[A>>2]|0;if((Wd|0)!=0?(Aa=c[Wd+16>>2]|0,(Aa|0)!=0):0){qb=(c[Wd+20>>2]|0)-Pd|0;Pd=c[Wd+24>>2]|0;Fm(Aa+qb|0,Yb|0,((qb+Nd|0)>>>0>Pd>>>0?Pd-qb|0:Nd)|0)|0;tf=c[z>>2]|0}else{tf=Td}if((tf&512|0)!=0){c[x>>2]=km(c[x>>2]|0,Yb,Nd)|0}Td=(c[F>>2]|0)-Nd|0;c[F>>2]=Td;qf=Td;rf=Wb-Nd|0;sf=Yb+Nd|0}if((qf|0)==0){uf=rf;vf=sf}else{wc=Vb;xc=rf;yc=Xb;zc=la;Ac=sf;Bc=s;ta=285;break}}else{uf=Wb;vf=Yb}c[F>>2]=0;c[l>>2]=6;Zb=Vb;_b=uf;$b=Xb;ac=vf;ta=83}else if((ta|0)==221){ta=0;if((xb|0)==0){wf=c[F>>2]|0;xf=yb;yf=zb;zf=Ab;Af=Bb}else{if(yb>>>0<xb>>>0){Nd=yb;Td=zb;qb=Ab;Pd=Bb;while(1){if((Td|0)==0){Ea=Nd;Fa=0;Ga=qb;Ha=la;Ia=Pd;Ja=r;Ka=Cb;break a}Aa=Td+ -1|0;Wd=Pd+1|0;Ma=(d[Pd]<<Nd)+qb|0;Da=Nd+8|0;if(Da>>>0<xb>>>0){Nd=Da;Td=Aa;qb=Ma;Pd=Wd}else{Bf=Da;Cf=Aa;Df=Ma;Ef=Wd;break}}}else{Bf=yb;Cf=zb;Df=Ab;Ef=Bb}Pd=(c[F>>2]|0)+((1<<xb)+ -1&Df)|0;c[F>>2]=Pd;c[O>>2]=(c[O>>2]|0)+xb;wf=Pd;xf=Bf-xb|0;yf=Cf;zf=Df>>>xb;Af=Ef}c[Q>>2]=wf;c[l>>2]=22;Zc=xf;_c=yf;$c=zf;ad=Af;bd=Cb;ta=228}do{if((ta|0)==83){ta=0;if((c[z>>2]&2048|0)==0){Pd=c[A>>2]|0;if((Pd|0)==0){Ff=_b;Gf=ac}else{c[Pd+28>>2]=0;Ff=_b;Gf=ac}}else{if((_b|0)==0){wc=Zb;xc=0;yc=$b;zc=la;Ac=ac;Bc=s;ta=285;break a}else{Hf=0}while(1){If=Hf+1|0;Pd=a[ac+Hf|0]|0;qb=c[A>>2]|0;if(((qb|0)!=0?(Td=c[qb+28>>2]|0,(Td|0)!=0):0)?(Nd=c[F>>2]|0,Nd>>>0<(c[qb+32>>2]|0)>>>0):0){c[F>>2]=Nd+1;a[Td+Nd|0]=Pd}Jf=Pd<<24>>24!=0;if(Jf&If>>>0<_b>>>0){Hf=If}else{break}}if((c[z>>2]&512|0)!=0){c[x>>2]=km(c[x>>2]|0,ac,If)|0}Ca=_b-If|0;Od=ac+If|0;if(Jf){wc=Zb;xc=Ca;yc=$b;zc=la;Ac=Od;Bc=s;ta=285;break a}else{Ff=Ca;Gf=Od}}c[F>>2]=0;c[l>>2]=7;bc=Zb;cc=Ff;dc=$b;ec=Gf;ta=96}else if((ta|0)==228){ta=0;Od=(1<<c[M>>2])+ -1|0;Ca=Od&$c;La=c[L>>2]|0;Oa=a[La+(Ca<<2)+1|0]|0;Na=Oa&255;if(Na>>>0>Zc>>>0){Pd=Zc;Nd=_c;Td=$c;qb=ad;while(1){if((Nd|0)==0){Ea=Pd;Fa=0;Ga=Td;Ha=la;Ia=qb;Ja=r;Ka=bd;break a}Wd=Nd+ -1|0;Ma=qb+1|0;Aa=(d[qb]<<Pd)+Td|0;Da=Pd+8|0;Ba=Od&Aa;Qd=a[La+(Ba<<2)+1|0]|0;Rd=Qd&255;if(Rd>>>0>Da>>>0){Pd=Da;Nd=Wd;Td=Aa;qb=Ma}else{Kf=Qd;Lf=Rd;Mf=Ba;Nf=Da;Of=Wd;Pf=Aa;Qf=Ma;break}}}else{Kf=Oa;Lf=Na;Mf=Ca;Nf=Zc;Of=_c;Pf=$c;Qf=ad}qb=a[La+(Mf<<2)|0]|0;Td=b[La+(Mf<<2)+2>>1]|0;Nd=qb&255;if((Nd&240|0)==0){Pd=Td&65535;Od=(1<<Lf+Nd)+ -1|0;Nd=((Pf&Od)>>>Lf)+Pd|0;Ma=a[La+(Nd<<2)+1|0]|0;if(((Ma&255)+Lf|0)>>>0>Nf>>>0){Aa=Nf;Wd=Of;Da=Pf;Ba=Qf;while(1){if((Wd|0)==0){Ea=Aa;Fa=0;Ga=Da;Ha=la;Ia=Ba;Ja=r;Ka=bd;break a}Rd=Wd+ -1|0;Qd=Ba+1|0;Sd=(d[Ba]<<Aa)+Da|0;rc=Aa+8|0;Vd=((Sd&Od)>>>Lf)+Pd|0;Ud=a[La+(Vd<<2)+1|0]|0;if(((Ud&255)+Lf|0)>>>0>rc>>>0){Aa=rc;Wd=Rd;Da=Sd;Ba=Qd}else{Rf=Vd;Sf=Ud;Tf=rc;Uf=Rd;Vf=Sd;Wf=Qd;break}}}else{Rf=Nd;Sf=Ma;Tf=Nf;Uf=Of;Vf=Pf;Wf=Qf}Ba=b[La+(Rf<<2)+2>>1]|0;Da=a[La+(Rf<<2)|0]|0;Wd=(c[O>>2]|0)+Lf|0;c[O>>2]=Wd;Xf=Wd;Yf=Tf-Lf|0;Zf=Uf;_f=Da;$f=Sf;ag=Ba;bg=Vf>>>Lf;cg=Wf}else{Xf=c[O>>2]|0;Yf=Nf;Zf=Of;_f=qb;$f=Kf;ag=Td;bg=Pf;cg=Qf}Ba=$f&255;Da=bg>>>Ba;Wd=Yf-Ba|0;c[O>>2]=Xf+Ba;Ba=_f&255;if((Ba&64|0)==0){c[R>>2]=ag&65535;Aa=Ba&15;c[P>>2]=Aa;c[l>>2]=23;ua=Aa;va=Wd;wa=Zf;xa=Da;ya=cg;za=bd;ta=240;break}else{c[B>>2]=26352;c[l>>2]=29;Ta=Wd;Ua=Zf;Va=Da;Wa=la;Xa=cg;Ya=r;Za=o;_a=bd;break}}}while(0);if((ta|0)==96){ta=0;if((c[z>>2]&4096|0)==0){Da=c[A>>2]|0;if((Da|0)==0){dg=cc;eg=ec}else{c[Da+36>>2]=0;dg=cc;eg=ec}}else{if((cc|0)==0){wc=bc;xc=0;yc=dc;zc=la;Ac=ec;Bc=s;ta=285;break}else{fg=0}while(1){gg=fg+1|0;Da=a[ec+fg|0]|0;Wd=c[A>>2]|0;if(((Wd|0)!=0?(Aa=c[Wd+36>>2]|0,(Aa|0)!=0):0)?(Ba=c[F>>2]|0,Ba>>>0<(c[Wd+40>>2]|0)>>>0):0){c[F>>2]=Ba+1;a[Aa+Ba|0]=Da}hg=Da<<24>>24!=0;if(hg&gg>>>0<cc>>>0){fg=gg}else{break}}if((c[z>>2]&512|0)!=0){c[x>>2]=km(c[x>>2]|0,ec,gg)|0}Da=cc-gg|0;Ba=ec+gg|0;if(hg){wc=bc;xc=Da;yc=dc;zc=la;Ac=Ba;Bc=s;ta=285;break}else{dg=Da;eg=Ba}}c[l>>2]=8;fc=bc;gc=dg;hc=dc;ic=eg;ta=109}else if((ta|0)==240){ta=0;if((ua|0)==0){ig=va;jg=wa;kg=xa;lg=ya}else{if(va>>>0<ua>>>0){Ba=va;Da=wa;Aa=xa;Wd=ya;while(1){if((Da|0)==0){Ea=Ba;Fa=0;Ga=Aa;Ha=la;Ia=Wd;Ja=r;Ka=za;break a}Pd=Da+ -1|0;Od=Wd+1|0;Ca=(d[Wd]<<Ba)+Aa|0;Na=Ba+8|0;if(Na>>>0<ua>>>0){Ba=Na;Da=Pd;Aa=Ca;Wd=Od}else{mg=Na;ng=Pd;og=Ca;pg=Od;break}}}else{mg=va;ng=wa;og=xa;pg=ya}c[R>>2]=(c[R>>2]|0)+((1<<ua)+ -1&og);c[O>>2]=(c[O>>2]|0)+ua;ig=mg-ua|0;jg=ng;kg=og>>>ua;lg=pg}c[l>>2]=24;cd=ig;dd=jg;ed=kg;fd=lg;gd=za;ta=246}do{if((ta|0)==109){ta=0;Wd=c[z>>2]|0;if((Wd&512|0)!=0){if(fc>>>0<16){Aa=fc;Da=gc;Ba=hc;Od=ic;while(1){if((Da|0)==0){Ea=Aa;Fa=0;Ga=Ba;Ha=la;Ia=Od;Ja=r;Ka=s;break a}Ca=Da+ -1|0;Pd=Od+1|0;Na=(d[Od]<<Aa)+Ba|0;Oa=Aa+8|0;if(Oa>>>0<16){Aa=Oa;Da=Ca;Ba=Na;Od=Pd}else{qg=Oa;rg=Ca;sg=Na;tg=Pd;break}}}else{qg=fc;rg=gc;sg=hc;tg=ic}if((sg|0)==(c[x>>2]&65535|0)){ug=0;vg=rg;wg=0;xg=tg}else{c[B>>2]=26040;c[l>>2]=29;Ta=qg;Ua=rg;Va=sg;Wa=la;Xa=tg;Ya=r;Za=o;_a=s;break}}else{ug=fc;vg=gc;wg=hc;xg=ic}Od=c[A>>2]|0;if((Od|0)!=0){c[Od+44>>2]=Wd>>>9&1;c[Od+48>>2]=1}Od=km(0,0,0)|0;c[x>>2]=Od;c[E>>2]=Od;c[l>>2]=11;Ta=ug;Ua=vg;Va=wg;Wa=la;Xa=xg;Ya=r;Za=o;_a=s}else if((ta|0)==246){ta=0;if((la|0)==0){wc=cd;xc=dd;yc=ed;zc=0;Ac=fd;Bc=gd;ta=285;break a}Od=r-la|0;Ba=c[R>>2]|0;if(Ba>>>0>Od>>>0){Da=Ba-Od|0;if(Da>>>0>(c[S>>2]|0)>>>0?(c[T>>2]|0)!=0:0){c[B>>2]=26376;c[l>>2]=29;Ta=cd;Ua=dd;Va=ed;Wa=la;Xa=fd;Ya=r;Za=o;_a=gd;break}Od=c[U>>2]|0;if(Da>>>0>Od>>>0){Aa=Da-Od|0;yg=Aa;zg=(c[V>>2]|0)+((c[W>>2]|0)-Aa)|0}else{yg=Da;zg=(c[V>>2]|0)+(Od-Da)|0}Da=c[F>>2]|0;Ag=Da;Bg=yg>>>0>Da>>>0?Da:yg;Cg=zg}else{Da=c[F>>2]|0;Ag=Da;Bg=Da;Cg=o+(0-Ba)|0}Ba=Bg>>>0>la>>>0?la:Bg;c[F>>2]=Ag-Ba;Da=~la;Od=~Bg;Aa=Da>>>0>Od>>>0?Da:Od;Od=Ba;Da=Cg;Td=o;while(1){a[Td]=a[Da]|0;Od=Od+ -1|0;if((Od|0)==0){break}else{Da=Da+1|0;Td=Td+1|0}}Td=la-Ba|0;Da=o+~Aa|0;if((c[F>>2]|0)==0){c[l>>2]=20;Ta=cd;Ua=dd;Va=ed;Wa=Td;Xa=fd;Ya=r;Za=Da;_a=gd}else{Ta=cd;Ua=dd;Va=ed;Wa=Td;Xa=fd;Ya=r;Za=Da;_a=gd}}}while(0);ia=c[l>>2]|0;q=Ta;ja=Ua;ka=Va;la=Wa;ma=Xa;r=Ya;o=Za;s=_a}if((ta|0)==122){c[m>>2]=o;c[n>>2]=la;c[f>>2]=Jb;c[p>>2]=Hb;c[u>>2]=Ib;c[v>>2]=Gb;k=2;i=h;return k|0}else if((ta|0)==133){Ea=Jd+ -3|0;Fa=Kd;Ga=Ld>>>3;Ha=la;Ia=Md;Ja=r;Ka=s}else if((ta|0)==284){c[l>>2]=28;Ea=Bd;Fa=Cd;Ga=Dd;Ha=la;Ia=Ed;Ja=wd;Ka=1}else if((ta|0)==285){Ea=wc;Fa=xc;Ga=yc;Ha=zc;Ia=Ac;Ja=r;Ka=Bc}else if((ta|0)==299){k=-4;i=h;return k|0}else if((ta|0)==300){i=h;return k|0}c[m>>2]=o;c[n>>2]=Ha;c[f>>2]=Ia;c[p>>2]=Fa;c[u>>2]=Ga;c[v>>2]=Ea;if((c[W>>2]|0)==0){if((c[l>>2]|0)>>>0<26?(Ja|0)!=(c[n>>2]|0):0){ta=289}}else{ta=289}if((ta|0)==289?(om(f,Ja)|0)!=0:0){c[l>>2]=30;k=-4;i=h;return k|0}ta=c[p>>2]|0;p=c[n>>2]|0;n=Ja-p|0;W=f+8|0;c[W>>2]=t-ta+(c[W>>2]|0);c[X>>2]=(c[X>>2]|0)+n;c[Y>>2]=(c[Y>>2]|0)+n;Y=(Ja|0)==(p|0);if(!((c[w>>2]|0)==0|Y)){w=c[x>>2]|0;p=(c[m>>2]|0)+(0-n)|0;if((c[z>>2]|0)==0){Dg=jm(w,p,n)|0}else{Dg=km(w,p,n)|0}c[x>>2]=Dg;c[E>>2]=Dg}Dg=c[l>>2]|0;if((Dg|0)==19){Eg=256}else{Eg=(Dg|0)==14?256:0}c[f+44>>2]=((c[I>>2]|0)!=0?64:0)+(c[v>>2]|0)+((Dg|0)==11?128:0)+Eg;k=((t|0)==(ta|0)&Y|(g|0)==4)&(Ka|0)==0?-5:Ka;i=h;return k|0}function om(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;d=i;e=c[a+28>>2]|0;f=e+52|0;g=c[f>>2]|0;if((g|0)==0){h=Jc[c[a+32>>2]&15](c[a+40>>2]|0,1<<c[e+36>>2],1)|0;c[f>>2]=h;if((h|0)==0){j=1;i=d;return j|0}else{k=h}}else{k=g}g=e+40|0;h=c[g>>2]|0;if((h|0)==0){l=1<<c[e+36>>2];c[g>>2]=l;c[e+48>>2]=0;c[e+44>>2]=0;m=l}else{m=h}h=b-(c[a+16>>2]|0)|0;if(!(h>>>0<m>>>0)){Fm(k|0,(c[a+12>>2]|0)+(0-m)|0,m|0)|0;c[e+48>>2]=0;c[e+44>>2]=c[g>>2];j=0;i=d;return j|0}b=e+48|0;l=c[b>>2]|0;n=m-l|0;m=n>>>0>h>>>0?h:n;n=a+12|0;Fm(k+l|0,(c[n>>2]|0)+(0-h)|0,m|0)|0;l=h-m|0;if((h|0)!=(m|0)){Fm(c[f>>2]|0,(c[n>>2]|0)+(0-l)|0,l|0)|0;c[b>>2]=l;c[e+44>>2]=c[g>>2];j=0;i=d;return j|0}l=(c[b>>2]|0)+h|0;n=c[g>>2]|0;c[b>>2]=(l|0)==(n|0)?0:l;l=e+44|0;e=c[l>>2]|0;if(!(e>>>0<n>>>0)){j=0;i=d;return j|0}c[l>>2]=e+h;j=0;i=d;return j|0}function pm(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;b=i;if((a|0)==0){d=-2;i=b;return d|0}e=a+28|0;f=c[e>>2]|0;if((f|0)==0){d=-2;i=b;return d|0}g=a+36|0;h=c[g>>2]|0;if((h|0)==0){d=-2;i=b;return d|0}j=c[f+52>>2]|0;k=a+40|0;if((j|0)==0){l=h;m=f}else{Qc[h&31](c[k>>2]|0,j);l=c[g>>2]|0;m=c[e>>2]|0}Qc[l&31](c[k>>2]|0,m);c[e>>2]=0;d=0;i=b;return d|0}function qm(d,f,g,h,j,k){d=d|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0;l=i;i=i+64|0;m=l+32|0;n=l;o=m+0|0;p=o+32|0;do{b[o>>1]=0;o=o+2|0}while((o|0)<(p|0));o=(g|0)==0;if(!o){p=0;do{q=m+(e[f+(p<<1)>>1]<<1)|0;b[q>>1]=(b[q>>1]|0)+1<<16>>16;p=p+1|0}while((p|0)!=(g|0))}p=c[j>>2]|0;q=15;while(1){r=q+ -1|0;if((b[m+(q<<1)>>1]|0)!=0){break}if((r|0)==0){s=7;break}else{q=r}}if((s|0)==7){r=c[h>>2]|0;c[h>>2]=r+4;a[r]=64;a[r+1|0]=1;b[r+2>>1]=0;r=c[h>>2]|0;c[h>>2]=r+4;a[r]=64;a[r+1|0]=1;b[r+2>>1]=0;c[j>>2]=1;t=0;i=l;return t|0}r=p>>>0>q>>>0?q:p;a:do{if(q>>>0>1){p=1;while(1){u=p+1|0;if((b[m+(p<<1)>>1]|0)!=0){v=p;break a}if(u>>>0<q>>>0){p=u}else{v=u;break}}}else{v=1}}while(0);p=r>>>0<v>>>0?v:r;r=1;u=1;do{r=(r<<1)-(e[m+(u<<1)>>1]|0)|0;u=u+1|0;if((r|0)<0){t=-1;s=56;break}}while(u>>>0<16);if((s|0)==56){i=l;return t|0}if((r|0)>0?!((d|0)!=0&(q|0)==1):0){t=-1;i=l;return t|0}b[n+2>>1]=0;r=0;u=1;do{r=(e[m+(u<<1)>>1]|0)+(r&65535)|0;u=u+1|0;b[n+(u<<1)>>1]=r}while((u|0)!=15);if(!o){o=0;do{u=b[f+(o<<1)>>1]|0;if(!(u<<16>>16==0)){r=n+((u&65535)<<1)|0;u=b[r>>1]|0;b[r>>1]=u+1<<16>>16;b[k+((u&65535)<<1)>>1]=o}o=o+1|0}while((o|0)!=(g|0))}if((d|0)==1){g=1<<p;if(g>>>0>851){t=1;i=l;return t|0}else{w=0;x=g;y=1;z=28632+ -514|0;A=256;B=28696+ -514|0}}else if((d|0)!=0){g=1<<p;o=(d|0)==2;if(o&g>>>0>591){t=1;i=l;return t|0}else{w=o;x=g;y=0;z=28760;A=-1;B=28824}}else{w=0;x=1<<p;y=0;z=k;A=19;B=k}g=x+ -1|0;o=p&255;d=p;n=0;u=0;r=v;v=-1;C=c[h>>2]|0;D=0;E=x;b:while(1){x=1<<d;F=u;G=r;H=D;while(1){I=G-n|0;J=I&255;K=b[k+(H<<1)>>1]|0;L=K&65535;if((L|0)>=(A|0)){if((L|0)>(A|0)){M=b[B+(L<<1)>>1]&255;N=b[z+(L<<1)>>1]|0}else{M=96;N=0}}else{M=0;N=K}K=1<<I;I=F>>>n;L=x;while(1){O=L-K|0;P=O+I|0;a[C+(P<<2)|0]=M;a[C+(P<<2)+1|0]=J;b[C+(P<<2)+2>>1]=N;if((L|0)==(K|0)){break}else{L=O}}L=1<<G+ -1;while(1){if((L&F|0)==0){break}else{L=L>>>1}}if((L|0)==0){Q=0}else{Q=(L+ -1&F)+L|0}R=H+1|0;K=m+(G<<1)|0;I=(b[K>>1]|0)+ -1<<16>>16;b[K>>1]=I;if(I<<16>>16==0){if((G|0)==(q|0)){break b}S=e[f+(e[k+(R<<1)>>1]<<1)>>1]|0}else{S=G}if(!(S>>>0>p>>>0)){F=Q;G=S;H=R;continue}T=Q&g;if((T|0)==(v|0)){F=Q;G=S;H=R}else{break}}H=(n|0)==0?p:n;G=C+(x<<2)|0;F=S-H|0;c:do{if(S>>>0<q>>>0){I=S;K=F;O=1<<F;while(1){P=O-(e[m+(I<<1)>>1]|0)|0;if((P|0)<1){U=K;break c}V=K+1|0;W=V+H|0;if(W>>>0<q>>>0){I=W;K=V;O=P<<1}else{U=V;break}}}else{U=F}}while(0);F=(1<<U)+E|0;if(y&F>>>0>851|w&F>>>0>591){t=1;s=56;break}a[(c[h>>2]|0)+(T<<2)|0]=U;a[(c[h>>2]|0)+(T<<2)+1|0]=o;x=c[h>>2]|0;b[x+(T<<2)+2>>1]=(G-x|0)>>>2;d=U;n=H;u=Q;r=S;v=T;C=G;D=R;E=F}if((s|0)==56){i=l;return t|0}d:do{if((Q|0)!=0){s=n;R=J;D=Q;T=q;S=C;while(1){if((s|0)!=0){if((D&g|0)==(v|0)){X=s;Y=R;Z=T;_=S}else{X=0;Y=o;Z=p;_=c[h>>2]|0}}else{X=0;Y=R;Z=T;_=S}r=D>>>X;a[_+(r<<2)|0]=64;a[_+(r<<2)+1|0]=Y;b[_+(r<<2)+2>>1]=0;r=1<<Z+ -1;while(1){if((r&D|0)==0){break}else{r=r>>>1}}if((r|0)==0){break d}D=(r+ -1&D)+r|0;if((D|0)==0){break}else{s=X;R=Y;T=Z;S=_}}}}while(0);c[h>>2]=(c[h>>2]|0)+(E<<2);c[j>>2]=p;t=0;i=l;return t|0}function rm(e,f){e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0;g=i;h=c[e+28>>2]|0;j=c[e>>2]|0;k=e+4|0;l=j+((c[k>>2]|0)+ -6)|0;m=e+12|0;n=c[m>>2]|0;o=e+16|0;p=c[o>>2]|0;q=n+(p+ -258)|0;r=c[h+44>>2]|0;s=c[h+48>>2]|0;t=c[h+52>>2]|0;u=h+56|0;v=h+60|0;w=c[h+76>>2]|0;x=c[h+80>>2]|0;y=(1<<c[h+84>>2])+ -1|0;z=(1<<c[h+88>>2])+ -1|0;A=n+(p+~f)|0;f=h+7104|0;p=t+ -1|0;B=(s|0)==0;C=(c[h+40>>2]|0)+ -1|0;D=C+s|0;E=s+ -1|0;F=A+ -1|0;G=A-s|0;H=c[v>>2]|0;I=c[u>>2]|0;J=j+ -1|0;j=n+ -1|0;a:while(1){if(H>>>0<15){n=J+2|0;K=H+16|0;L=((d[J+1|0]|0)<<H)+I+((d[n]|0)<<H+8)|0;M=n}else{K=H;L=I;M=J}n=L&y;N=a[w+(n<<2)|0]|0;O=b[w+(n<<2)+2>>1]|0;P=d[w+(n<<2)+1|0]|0;n=L>>>P;Q=K-P|0;do{if(!(N<<24>>24==0)){R=N&255;S=Q;T=n;P=O;while(1){if((R&16|0)!=0){break}if((R&64|0)!=0){U=55;break a}V=(T&(1<<R)+ -1)+(P&65535)|0;W=a[w+(V<<2)|0]|0;X=b[w+(V<<2)+2>>1]|0;Y=d[w+(V<<2)+1|0]|0;Z=T>>>Y;_=S-Y|0;if(W<<24>>24==0){U=6;break}else{R=W&255;S=_;T=Z;P=X}}if((U|0)==6){U=0;$=Z;aa=_;ba=X&255;U=7;break}W=P&65535;Y=R&15;if((Y|0)==0){ca=S;da=T;ea=M;fa=W}else{if(S>>>0<Y>>>0){V=M+1|0;ga=S+8|0;ha=((d[V]|0)<<S)+T|0;ia=V}else{ga=S;ha=T;ia=M}ca=ga-Y|0;da=ha>>>Y;ea=ia;fa=(ha&(1<<Y)+ -1)+W|0}if(ca>>>0<15){W=ea+2|0;ja=ca+16|0;ka=((d[ea+1|0]|0)<<ca)+da+((d[W]|0)<<ca+8)|0;la=W}else{ja=ca;ka=da;la=ea}W=ka&z;Y=b[x+(W<<2)+2>>1]|0;V=d[x+(W<<2)+1|0]|0;ma=ka>>>V;na=ja-V|0;V=d[x+(W<<2)|0]|0;if((V&16|0)==0){W=V;oa=ma;pa=na;qa=Y;while(1){if((W&64|0)!=0){U=52;break a}ra=(oa&(1<<W)+ -1)+(qa&65535)|0;sa=b[x+(ra<<2)+2>>1]|0;ta=d[x+(ra<<2)+1|0]|0;ua=oa>>>ta;va=pa-ta|0;ta=d[x+(ra<<2)|0]|0;if((ta&16|0)==0){W=ta;oa=ua;pa=va;qa=sa}else{wa=ua;xa=va;ya=ta;za=sa;break}}}else{wa=ma;xa=na;ya=V;za=Y}qa=za&65535;W=ya&15;if(xa>>>0<W>>>0){P=la+1|0;sa=((d[P]|0)<<xa)+wa|0;ta=xa+8|0;if(ta>>>0<W>>>0){va=la+2|0;Aa=xa+16|0;Ba=((d[va]|0)<<ta)+sa|0;Ca=va}else{Aa=ta;Ba=sa;Ca=P}}else{Aa=xa;Ba=wa;Ca=la}P=(Ba&(1<<W)+ -1)+qa|0;Da=Ba>>>W;Ea=Aa-W|0;W=j;qa=W-A|0;if(!(P>>>0>qa>>>0)){sa=j+(0-P)|0;ta=fa;va=j;while(1){a[va+1|0]=a[sa+1|0]|0;a[va+2|0]=a[sa+2|0]|0;ua=sa+3|0;Fa=va+3|0;a[Fa]=a[ua]|0;ta=ta+ -3|0;if(!(ta>>>0>2)){break}else{sa=ua;va=Fa}}if((ta|0)==0){Ga=Ea;Ha=Da;Ia=Ca;Ja=Fa;break}Y=va+4|0;a[Y]=a[sa+4|0]|0;if(!(ta>>>0>1)){Ga=Ea;Ha=Da;Ia=Ca;Ja=Y;break}Y=va+5|0;a[Y]=a[sa+5|0]|0;Ga=Ea;Ha=Da;Ia=Ca;Ja=Y;break}Y=P-qa|0;if(Y>>>0>r>>>0?(c[f>>2]|0)!=0:0){U=22;break a}do{if(B){V=t+(C-Y)|0;if(Y>>>0<fa>>>0){na=fa-Y|0;ma=P-W|0;ua=V;ra=Y;Ka=j;do{ua=ua+1|0;Ka=Ka+1|0;a[Ka]=a[ua]|0;ra=ra+ -1|0}while((ra|0)!=0);La=j+(F+ma+(1-P))|0;Ma=na;Na=j+(A+ma)|0}else{La=V;Ma=fa;Na=j}}else{if(!(s>>>0<Y>>>0)){ra=t+(E-Y)|0;if(!(Y>>>0<fa>>>0)){La=ra;Ma=fa;Na=j;break}ua=fa-Y|0;Ka=P-W|0;Oa=ra;ra=Y;Pa=j;do{Oa=Oa+1|0;Pa=Pa+1|0;a[Pa]=a[Oa]|0;ra=ra+ -1|0}while((ra|0)!=0);La=j+(F+Ka+(1-P))|0;Ma=ua;Na=j+(A+Ka)|0;break}ra=t+(D-Y)|0;Oa=Y-s|0;if(Oa>>>0<fa>>>0){Pa=fa-Oa|0;V=P-W|0;ma=ra;na=Oa;Oa=j;do{ma=ma+1|0;Oa=Oa+1|0;a[Oa]=a[ma]|0;na=na+ -1|0}while((na|0)!=0);na=j+(G+V)|0;if(s>>>0<Pa>>>0){ma=Pa-s|0;Oa=p;Ka=s;ua=na;do{Oa=Oa+1|0;ua=ua+1|0;a[ua]=a[Oa]|0;Ka=Ka+ -1|0}while((Ka|0)!=0);La=j+(F+V+(1-P))|0;Ma=ma;Na=j+(A+V)|0}else{La=p;Ma=Pa;Na=na}}else{La=ra;Ma=fa;Na=j}}}while(0);if(Ma>>>0>2){P=La;W=Ma;Y=Na;while(1){a[Y+1|0]=a[P+1|0]|0;a[Y+2|0]=a[P+2|0]|0;qa=P+3|0;sa=Y+3|0;a[sa]=a[qa]|0;va=W+ -3|0;if(va>>>0>2){P=qa;W=va;Y=sa}else{Qa=qa;Ra=va;Sa=sa;break}}}else{Qa=La;Ra=Ma;Sa=Na}if((Ra|0)!=0){Y=Sa+1|0;a[Y]=a[Qa+1|0]|0;if(Ra>>>0>1){W=Sa+2|0;a[W]=a[Qa+2|0]|0;Ga=Ea;Ha=Da;Ia=Ca;Ja=W}else{Ga=Ea;Ha=Da;Ia=Ca;Ja=Y}}else{Ga=Ea;Ha=Da;Ia=Ca;Ja=Sa}}else{$=n;aa=Q;ba=O&255;U=7}}while(0);if((U|0)==7){U=0;O=j+1|0;a[O]=ba;Ga=aa;Ha=$;Ia=M;Ja=O}if(Ia>>>0<l>>>0&Ja>>>0<q>>>0){H=Ga;I=Ha;J=Ia;j=Ja}else{Ta=Ga;Ua=Ha;Va=Ia;Wa=Ja;break}}do{if((U|0)==22){c[e+24>>2]=28888;c[h>>2]=29;Ta=Ea;Ua=Da;Va=Ca;Wa=j}else if((U|0)==52){c[e+24>>2]=28920;c[h>>2]=29;Ta=pa;Ua=oa;Va=la;Wa=j}else if((U|0)==55){if((R&32|0)==0){c[e+24>>2]=28944;c[h>>2]=29;Ta=S;Ua=T;Va=M;Wa=j;break}else{c[h>>2]=11;Ta=S;Ua=T;Va=M;Wa=j;break}}}while(0);j=Ta>>>3;M=Va+(0-j)|0;T=Ta-(j<<3)|0;Ta=(1<<T)+ -1&Ua;c[e>>2]=Va+(1-j);c[m>>2]=Wa+1;if(M>>>0<l>>>0){Xa=l-M|0}else{Xa=l-M|0}c[k>>2]=Xa+5;if(Wa>>>0<q>>>0){Ya=q-Wa|0;Za=Ya+257|0;c[o>>2]=Za;c[u>>2]=Ta;c[v>>2]=T;i=g;return}else{Ya=q-Wa|0;Za=Ya+257|0;c[o>>2]=Za;c[u>>2]=Ta;c[v>>2]=T;i=g;return}}function sm(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;a=i;d=um(aa(c,b)|0)|0;i=a;return d|0}function tm(a,b){a=a|0;b=b|0;a=i;vm(b);i=a;return}function um(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ia=0,Ja=0,Ka=0,Ma=0;b=i;do{if(a>>>0<245){if(a>>>0<11){d=16}else{d=a+11&-8}e=d>>>3;f=c[7244]|0;g=f>>>e;if((g&3|0)!=0){h=(g&1^1)+e|0;j=h<<1;k=29016+(j<<2)|0;l=29016+(j+2<<2)|0;j=c[l>>2]|0;m=j+8|0;n=c[m>>2]|0;do{if((k|0)!=(n|0)){if(n>>>0<(c[28992>>2]|0)>>>0){dc()}o=n+12|0;if((c[o>>2]|0)==(j|0)){c[o>>2]=k;c[l>>2]=n;break}else{dc()}}else{c[7244]=f&~(1<<h)}}while(0);n=h<<3;c[j+4>>2]=n|3;l=j+(n|4)|0;c[l>>2]=c[l>>2]|1;p=m;i=b;return p|0}if(d>>>0>(c[28984>>2]|0)>>>0){if((g|0)!=0){l=2<<e;n=g<<e&(l|0-l);l=(n&0-n)+ -1|0;n=l>>>12&16;k=l>>>n;l=k>>>5&8;o=k>>>l;k=o>>>2&4;q=o>>>k;o=q>>>1&2;r=q>>>o;q=r>>>1&1;s=(l|n|k|o|q)+(r>>>q)|0;q=s<<1;r=29016+(q<<2)|0;o=29016+(q+2<<2)|0;q=c[o>>2]|0;k=q+8|0;n=c[k>>2]|0;do{if((r|0)!=(n|0)){if(n>>>0<(c[28992>>2]|0)>>>0){dc()}l=n+12|0;if((c[l>>2]|0)==(q|0)){c[l>>2]=r;c[o>>2]=n;break}else{dc()}}else{c[7244]=f&~(1<<s)}}while(0);f=s<<3;n=f-d|0;c[q+4>>2]=d|3;o=q+d|0;c[q+(d|4)>>2]=n|1;c[q+f>>2]=n;f=c[28984>>2]|0;if((f|0)!=0){r=c[28996>>2]|0;e=f>>>3;f=e<<1;g=29016+(f<<2)|0;m=c[7244]|0;j=1<<e;if((m&j|0)!=0){e=29016+(f+2<<2)|0;h=c[e>>2]|0;if(h>>>0<(c[28992>>2]|0)>>>0){dc()}else{t=e;u=h}}else{c[7244]=m|j;t=29016+(f+2<<2)|0;u=g}c[t>>2]=r;c[u+12>>2]=r;c[r+8>>2]=u;c[r+12>>2]=g}c[28984>>2]=n;c[28996>>2]=o;p=k;i=b;return p|0}o=c[28980>>2]|0;if((o|0)!=0){n=(o&0-o)+ -1|0;o=n>>>12&16;g=n>>>o;n=g>>>5&8;r=g>>>n;g=r>>>2&4;f=r>>>g;r=f>>>1&2;j=f>>>r;f=j>>>1&1;m=c[29280+((n|o|g|r|f)+(j>>>f)<<2)>>2]|0;f=(c[m+4>>2]&-8)-d|0;j=m;r=m;while(1){m=c[j+16>>2]|0;if((m|0)==0){g=c[j+20>>2]|0;if((g|0)==0){break}else{v=g}}else{v=m}m=(c[v+4>>2]&-8)-d|0;g=m>>>0<f>>>0;f=g?m:f;j=v;r=g?v:r}j=c[28992>>2]|0;if(r>>>0<j>>>0){dc()}k=r+d|0;if(!(r>>>0<k>>>0)){dc()}q=c[r+24>>2]|0;s=c[r+12>>2]|0;do{if((s|0)==(r|0)){g=r+20|0;m=c[g>>2]|0;if((m|0)==0){o=r+16|0;n=c[o>>2]|0;if((n|0)==0){w=0;break}else{x=n;y=o}}else{x=m;y=g}while(1){g=x+20|0;m=c[g>>2]|0;if((m|0)!=0){x=m;y=g;continue}g=x+16|0;m=c[g>>2]|0;if((m|0)==0){break}else{x=m;y=g}}if(y>>>0<j>>>0){dc()}else{c[y>>2]=0;w=x;break}}else{g=c[r+8>>2]|0;if(g>>>0<j>>>0){dc()}m=g+12|0;if((c[m>>2]|0)!=(r|0)){dc()}o=s+8|0;if((c[o>>2]|0)==(r|0)){c[m>>2]=s;c[o>>2]=g;w=s;break}else{dc()}}}while(0);do{if((q|0)!=0){s=c[r+28>>2]|0;j=29280+(s<<2)|0;if((r|0)==(c[j>>2]|0)){c[j>>2]=w;if((w|0)==0){c[28980>>2]=c[28980>>2]&~(1<<s);break}}else{if(q>>>0<(c[28992>>2]|0)>>>0){dc()}s=q+16|0;if((c[s>>2]|0)==(r|0)){c[s>>2]=w}else{c[q+20>>2]=w}if((w|0)==0){break}}if(w>>>0<(c[28992>>2]|0)>>>0){dc()}c[w+24>>2]=q;s=c[r+16>>2]|0;do{if((s|0)!=0){if(s>>>0<(c[28992>>2]|0)>>>0){dc()}else{c[w+16>>2]=s;c[s+24>>2]=w;break}}}while(0);s=c[r+20>>2]|0;if((s|0)!=0){if(s>>>0<(c[28992>>2]|0)>>>0){dc()}else{c[w+20>>2]=s;c[s+24>>2]=w;break}}}}while(0);if(f>>>0<16){q=f+d|0;c[r+4>>2]=q|3;s=r+(q+4)|0;c[s>>2]=c[s>>2]|1}else{c[r+4>>2]=d|3;c[r+(d|4)>>2]=f|1;c[r+(f+d)>>2]=f;s=c[28984>>2]|0;if((s|0)!=0){q=c[28996>>2]|0;j=s>>>3;s=j<<1;g=29016+(s<<2)|0;o=c[7244]|0;m=1<<j;if((o&m|0)!=0){j=29016+(s+2<<2)|0;n=c[j>>2]|0;if(n>>>0<(c[28992>>2]|0)>>>0){dc()}else{z=j;A=n}}else{c[7244]=o|m;z=29016+(s+2<<2)|0;A=g}c[z>>2]=q;c[A+12>>2]=q;c[q+8>>2]=A;c[q+12>>2]=g}c[28984>>2]=f;c[28996>>2]=k}p=r+8|0;i=b;return p|0}else{B=d}}else{B=d}}else{if(!(a>>>0>4294967231)){g=a+11|0;q=g&-8;s=c[28980>>2]|0;if((s|0)!=0){m=0-q|0;o=g>>>8;if((o|0)!=0){if(q>>>0>16777215){C=31}else{g=(o+1048320|0)>>>16&8;n=o<<g;o=(n+520192|0)>>>16&4;j=n<<o;n=(j+245760|0)>>>16&2;h=14-(o|g|n)+(j<<n>>>15)|0;C=q>>>(h+7|0)&1|h<<1}}else{C=0}h=c[29280+(C<<2)>>2]|0;a:do{if((h|0)==0){D=m;E=0;F=0}else{if((C|0)==31){G=0}else{G=25-(C>>>1)|0}n=m;j=0;g=q<<G;o=h;e=0;while(1){l=c[o+4>>2]&-8;H=l-q|0;if(H>>>0<n>>>0){if((l|0)==(q|0)){D=H;E=o;F=o;break a}else{I=H;J=o}}else{I=n;J=e}H=c[o+20>>2]|0;l=c[o+(g>>>31<<2)+16>>2]|0;K=(H|0)==0|(H|0)==(l|0)?j:H;if((l|0)==0){D=I;E=K;F=J;break}else{n=I;j=K;g=g<<1;o=l;e=J}}}}while(0);if((E|0)==0&(F|0)==0){h=2<<C;m=s&(h|0-h);if((m|0)==0){B=q;break}h=(m&0-m)+ -1|0;m=h>>>12&16;r=h>>>m;h=r>>>5&8;k=r>>>h;r=k>>>2&4;f=k>>>r;k=f>>>1&2;e=f>>>k;f=e>>>1&1;L=c[29280+((h|m|r|k|f)+(e>>>f)<<2)>>2]|0}else{L=E}if((L|0)==0){M=D;N=F}else{f=D;e=L;k=F;while(1){r=(c[e+4>>2]&-8)-q|0;m=r>>>0<f>>>0;h=m?r:f;r=m?e:k;m=c[e+16>>2]|0;if((m|0)!=0){f=h;e=m;k=r;continue}m=c[e+20>>2]|0;if((m|0)==0){M=h;N=r;break}else{f=h;e=m;k=r}}}if((N|0)!=0?M>>>0<((c[28984>>2]|0)-q|0)>>>0:0){k=c[28992>>2]|0;if(N>>>0<k>>>0){dc()}e=N+q|0;if(!(N>>>0<e>>>0)){dc()}f=c[N+24>>2]|0;s=c[N+12>>2]|0;do{if((s|0)==(N|0)){r=N+20|0;m=c[r>>2]|0;if((m|0)==0){h=N+16|0;o=c[h>>2]|0;if((o|0)==0){O=0;break}else{P=o;Q=h}}else{P=m;Q=r}while(1){r=P+20|0;m=c[r>>2]|0;if((m|0)!=0){P=m;Q=r;continue}r=P+16|0;m=c[r>>2]|0;if((m|0)==0){break}else{P=m;Q=r}}if(Q>>>0<k>>>0){dc()}else{c[Q>>2]=0;O=P;break}}else{r=c[N+8>>2]|0;if(r>>>0<k>>>0){dc()}m=r+12|0;if((c[m>>2]|0)!=(N|0)){dc()}h=s+8|0;if((c[h>>2]|0)==(N|0)){c[m>>2]=s;c[h>>2]=r;O=s;break}else{dc()}}}while(0);do{if((f|0)!=0){s=c[N+28>>2]|0;k=29280+(s<<2)|0;if((N|0)==(c[k>>2]|0)){c[k>>2]=O;if((O|0)==0){c[28980>>2]=c[28980>>2]&~(1<<s);break}}else{if(f>>>0<(c[28992>>2]|0)>>>0){dc()}s=f+16|0;if((c[s>>2]|0)==(N|0)){c[s>>2]=O}else{c[f+20>>2]=O}if((O|0)==0){break}}if(O>>>0<(c[28992>>2]|0)>>>0){dc()}c[O+24>>2]=f;s=c[N+16>>2]|0;do{if((s|0)!=0){if(s>>>0<(c[28992>>2]|0)>>>0){dc()}else{c[O+16>>2]=s;c[s+24>>2]=O;break}}}while(0);s=c[N+20>>2]|0;if((s|0)!=0){if(s>>>0<(c[28992>>2]|0)>>>0){dc()}else{c[O+20>>2]=s;c[s+24>>2]=O;break}}}}while(0);b:do{if(!(M>>>0<16)){c[N+4>>2]=q|3;c[N+(q|4)>>2]=M|1;c[N+(M+q)>>2]=M;f=M>>>3;if(M>>>0<256){s=f<<1;k=29016+(s<<2)|0;r=c[7244]|0;h=1<<f;if((r&h|0)!=0){f=29016+(s+2<<2)|0;m=c[f>>2]|0;if(m>>>0<(c[28992>>2]|0)>>>0){dc()}else{R=f;S=m}}else{c[7244]=r|h;R=29016+(s+2<<2)|0;S=k}c[R>>2]=e;c[S+12>>2]=e;c[N+(q+8)>>2]=S;c[N+(q+12)>>2]=k;break}k=M>>>8;if((k|0)!=0){if(M>>>0>16777215){T=31}else{s=(k+1048320|0)>>>16&8;h=k<<s;k=(h+520192|0)>>>16&4;r=h<<k;h=(r+245760|0)>>>16&2;m=14-(k|s|h)+(r<<h>>>15)|0;T=M>>>(m+7|0)&1|m<<1}}else{T=0}m=29280+(T<<2)|0;c[N+(q+28)>>2]=T;c[N+(q+20)>>2]=0;c[N+(q+16)>>2]=0;h=c[28980>>2]|0;r=1<<T;if((h&r|0)==0){c[28980>>2]=h|r;c[m>>2]=e;c[N+(q+24)>>2]=m;c[N+(q+12)>>2]=e;c[N+(q+8)>>2]=e;break}r=c[m>>2]|0;if((T|0)==31){U=0}else{U=25-(T>>>1)|0}c:do{if((c[r+4>>2]&-8|0)!=(M|0)){m=M<<U;h=r;while(1){V=h+(m>>>31<<2)+16|0;s=c[V>>2]|0;if((s|0)==0){break}if((c[s+4>>2]&-8|0)==(M|0)){W=s;break c}else{m=m<<1;h=s}}if(V>>>0<(c[28992>>2]|0)>>>0){dc()}else{c[V>>2]=e;c[N+(q+24)>>2]=h;c[N+(q+12)>>2]=e;c[N+(q+8)>>2]=e;break b}}else{W=r}}while(0);r=W+8|0;m=c[r>>2]|0;s=c[28992>>2]|0;if(W>>>0<s>>>0){dc()}if(m>>>0<s>>>0){dc()}else{c[m+12>>2]=e;c[r>>2]=e;c[N+(q+8)>>2]=m;c[N+(q+12)>>2]=W;c[N+(q+24)>>2]=0;break}}else{m=M+q|0;c[N+4>>2]=m|3;r=N+(m+4)|0;c[r>>2]=c[r>>2]|1}}while(0);p=N+8|0;i=b;return p|0}else{B=q}}else{B=q}}else{B=-1}}}while(0);N=c[28984>>2]|0;if(!(B>>>0>N>>>0)){M=N-B|0;W=c[28996>>2]|0;if(M>>>0>15){c[28996>>2]=W+B;c[28984>>2]=M;c[W+(B+4)>>2]=M|1;c[W+N>>2]=M;c[W+4>>2]=B|3}else{c[28984>>2]=0;c[28996>>2]=0;c[W+4>>2]=N|3;M=W+(N+4)|0;c[M>>2]=c[M>>2]|1}p=W+8|0;i=b;return p|0}W=c[28988>>2]|0;if(B>>>0<W>>>0){M=W-B|0;c[28988>>2]=M;W=c[29e3>>2]|0;c[29e3>>2]=W+B;c[W+(B+4)>>2]=M|1;c[W+4>>2]=B|3;p=W+8|0;i=b;return p|0}do{if((c[7362]|0)==0){W=La(30)|0;if((W+ -1&W|0)==0){c[29456>>2]=W;c[29452>>2]=W;c[29460>>2]=-1;c[29464>>2]=-1;c[29468>>2]=0;c[29420>>2]=0;c[7362]=(Ab(0)|0)&-16^1431655768;break}else{dc()}}}while(0);W=B+48|0;M=c[29456>>2]|0;N=B+47|0;V=M+N|0;U=0-M|0;M=V&U;if(!(M>>>0>B>>>0)){p=0;i=b;return p|0}T=c[29416>>2]|0;if((T|0)!=0?(S=c[29408>>2]|0,R=S+M|0,R>>>0<=S>>>0|R>>>0>T>>>0):0){p=0;i=b;return p|0}d:do{if((c[29420>>2]&4|0)==0){T=c[29e3>>2]|0;e:do{if((T|0)!=0){R=29424|0;while(1){S=c[R>>2]|0;if(!(S>>>0>T>>>0)?(X=R+4|0,(S+(c[X>>2]|0)|0)>>>0>T>>>0):0){break}S=c[R+8>>2]|0;if((S|0)==0){Y=182;break e}else{R=S}}if((R|0)!=0){S=V-(c[28988>>2]|0)&U;if(S>>>0<2147483647){O=Ha(S|0)|0;P=(O|0)==((c[R>>2]|0)+(c[X>>2]|0)|0);Z=O;_=S;$=P?O:-1;aa=P?S:0;Y=191}else{ba=0}}else{Y=182}}else{Y=182}}while(0);do{if((Y|0)==182){T=Ha(0)|0;if((T|0)!=(-1|0)){q=T;S=c[29452>>2]|0;P=S+ -1|0;if((P&q|0)==0){ca=M}else{ca=M-q+(P+q&0-S)|0}S=c[29408>>2]|0;q=S+ca|0;if(ca>>>0>B>>>0&ca>>>0<2147483647){P=c[29416>>2]|0;if((P|0)!=0?q>>>0<=S>>>0|q>>>0>P>>>0:0){ba=0;break}P=Ha(ca|0)|0;q=(P|0)==(T|0);Z=P;_=ca;$=q?T:-1;aa=q?ca:0;Y=191}else{ba=0}}else{ba=0}}}while(0);f:do{if((Y|0)==191){q=0-_|0;if(($|0)!=(-1|0)){da=$;ea=aa;Y=202;break d}do{if((Z|0)!=(-1|0)&_>>>0<2147483647&_>>>0<W>>>0?(T=c[29456>>2]|0,P=N-_+T&0-T,P>>>0<2147483647):0){if((Ha(P|0)|0)==(-1|0)){Ha(q|0)|0;ba=aa;break f}else{fa=P+_|0;break}}else{fa=_}}while(0);if((Z|0)==(-1|0)){ba=aa}else{da=Z;ea=fa;Y=202;break d}}}while(0);c[29420>>2]=c[29420>>2]|4;ga=ba;Y=199}else{ga=0;Y=199}}while(0);if((((Y|0)==199?M>>>0<2147483647:0)?(ba=Ha(M|0)|0,M=Ha(0)|0,(M|0)!=(-1|0)&(ba|0)!=(-1|0)&ba>>>0<M>>>0):0)?(fa=M-ba|0,M=fa>>>0>(B+40|0)>>>0,M):0){da=ba;ea=M?fa:ga;Y=202}if((Y|0)==202){ga=(c[29408>>2]|0)+ea|0;c[29408>>2]=ga;if(ga>>>0>(c[29412>>2]|0)>>>0){c[29412>>2]=ga}ga=c[29e3>>2]|0;g:do{if((ga|0)!=0){fa=29424|0;while(1){ha=c[fa>>2]|0;ia=fa+4|0;ja=c[ia>>2]|0;if((da|0)==(ha+ja|0)){Y=214;break}M=c[fa+8>>2]|0;if((M|0)==0){break}else{fa=M}}if(((Y|0)==214?(c[fa+12>>2]&8|0)==0:0)?ga>>>0>=ha>>>0&ga>>>0<da>>>0:0){c[ia>>2]=ja+ea;M=(c[28988>>2]|0)+ea|0;ba=ga+8|0;if((ba&7|0)==0){ka=0}else{ka=0-ba&7}ba=M-ka|0;c[29e3>>2]=ga+ka;c[28988>>2]=ba;c[ga+(ka+4)>>2]=ba|1;c[ga+(M+4)>>2]=40;c[29004>>2]=c[29464>>2];break}if(da>>>0<(c[28992>>2]|0)>>>0){c[28992>>2]=da}M=da+ea|0;ba=29424|0;while(1){if((c[ba>>2]|0)==(M|0)){Y=224;break}Z=c[ba+8>>2]|0;if((Z|0)==0){break}else{ba=Z}}if((Y|0)==224?(c[ba+12>>2]&8|0)==0:0){c[ba>>2]=da;M=ba+4|0;c[M>>2]=(c[M>>2]|0)+ea;M=da+8|0;if((M&7|0)==0){la=0}else{la=0-M&7}M=da+(ea+8)|0;if((M&7|0)==0){ma=0}else{ma=0-M&7}M=da+(ma+ea)|0;fa=la+B|0;Z=da+fa|0;aa=M-(da+la)-B|0;c[da+(la+4)>>2]=B|3;h:do{if((M|0)!=(c[29e3>>2]|0)){if((M|0)==(c[28996>>2]|0)){_=(c[28984>>2]|0)+aa|0;c[28984>>2]=_;c[28996>>2]=Z;c[da+(fa+4)>>2]=_|1;c[da+(_+fa)>>2]=_;break}_=ea+4|0;N=c[da+(_+ma)>>2]|0;if((N&3|0)==1){W=N&-8;$=N>>>3;do{if(!(N>>>0<256)){ca=c[da+((ma|24)+ea)>>2]|0;X=c[da+(ea+12+ma)>>2]|0;do{if((X|0)==(M|0)){U=ma|16;V=da+(_+U)|0;q=c[V>>2]|0;if((q|0)==0){R=da+(U+ea)|0;U=c[R>>2]|0;if((U|0)==0){na=0;break}else{oa=U;pa=R}}else{oa=q;pa=V}while(1){V=oa+20|0;q=c[V>>2]|0;if((q|0)!=0){oa=q;pa=V;continue}V=oa+16|0;q=c[V>>2]|0;if((q|0)==0){break}else{oa=q;pa=V}}if(pa>>>0<(c[28992>>2]|0)>>>0){dc()}else{c[pa>>2]=0;na=oa;break}}else{V=c[da+((ma|8)+ea)>>2]|0;if(V>>>0<(c[28992>>2]|0)>>>0){dc()}q=V+12|0;if((c[q>>2]|0)!=(M|0)){dc()}R=X+8|0;if((c[R>>2]|0)==(M|0)){c[q>>2]=X;c[R>>2]=V;na=X;break}else{dc()}}}while(0);if((ca|0)!=0){X=c[da+(ea+28+ma)>>2]|0;h=29280+(X<<2)|0;if((M|0)==(c[h>>2]|0)){c[h>>2]=na;if((na|0)==0){c[28980>>2]=c[28980>>2]&~(1<<X);break}}else{if(ca>>>0<(c[28992>>2]|0)>>>0){dc()}X=ca+16|0;if((c[X>>2]|0)==(M|0)){c[X>>2]=na}else{c[ca+20>>2]=na}if((na|0)==0){break}}if(na>>>0<(c[28992>>2]|0)>>>0){dc()}c[na+24>>2]=ca;X=ma|16;h=c[da+(X+ea)>>2]|0;do{if((h|0)!=0){if(h>>>0<(c[28992>>2]|0)>>>0){dc()}else{c[na+16>>2]=h;c[h+24>>2]=na;break}}}while(0);h=c[da+(_+X)>>2]|0;if((h|0)!=0){if(h>>>0<(c[28992>>2]|0)>>>0){dc()}else{c[na+20>>2]=h;c[h+24>>2]=na;break}}}}else{h=c[da+((ma|8)+ea)>>2]|0;ca=c[da+(ea+12+ma)>>2]|0;V=29016+($<<1<<2)|0;if((h|0)!=(V|0)){if(h>>>0<(c[28992>>2]|0)>>>0){dc()}if((c[h+12>>2]|0)!=(M|0)){dc()}}if((ca|0)==(h|0)){c[7244]=c[7244]&~(1<<$);break}if((ca|0)!=(V|0)){if(ca>>>0<(c[28992>>2]|0)>>>0){dc()}V=ca+8|0;if((c[V>>2]|0)==(M|0)){qa=V}else{dc()}}else{qa=ca+8|0}c[h+12>>2]=ca;c[qa>>2]=h}}while(0);ra=da+((W|ma)+ea)|0;sa=W+aa|0}else{ra=M;sa=aa}$=ra+4|0;c[$>>2]=c[$>>2]&-2;c[da+(fa+4)>>2]=sa|1;c[da+(sa+fa)>>2]=sa;$=sa>>>3;if(sa>>>0<256){_=$<<1;N=29016+(_<<2)|0;h=c[7244]|0;ca=1<<$;if((h&ca|0)!=0){$=29016+(_+2<<2)|0;V=c[$>>2]|0;if(V>>>0<(c[28992>>2]|0)>>>0){dc()}else{ta=$;ua=V}}else{c[7244]=h|ca;ta=29016+(_+2<<2)|0;ua=N}c[ta>>2]=Z;c[ua+12>>2]=Z;c[da+(fa+8)>>2]=ua;c[da+(fa+12)>>2]=N;break}N=sa>>>8;if((N|0)!=0){if(sa>>>0>16777215){va=31}else{_=(N+1048320|0)>>>16&8;ca=N<<_;N=(ca+520192|0)>>>16&4;h=ca<<N;ca=(h+245760|0)>>>16&2;V=14-(N|_|ca)+(h<<ca>>>15)|0;va=sa>>>(V+7|0)&1|V<<1}}else{va=0}V=29280+(va<<2)|0;c[da+(fa+28)>>2]=va;c[da+(fa+20)>>2]=0;c[da+(fa+16)>>2]=0;ca=c[28980>>2]|0;h=1<<va;if((ca&h|0)==0){c[28980>>2]=ca|h;c[V>>2]=Z;c[da+(fa+24)>>2]=V;c[da+(fa+12)>>2]=Z;c[da+(fa+8)>>2]=Z;break}h=c[V>>2]|0;if((va|0)==31){wa=0}else{wa=25-(va>>>1)|0}i:do{if((c[h+4>>2]&-8|0)!=(sa|0)){V=sa<<wa;ca=h;while(1){xa=ca+(V>>>31<<2)+16|0;_=c[xa>>2]|0;if((_|0)==0){break}if((c[_+4>>2]&-8|0)==(sa|0)){ya=_;break i}else{V=V<<1;ca=_}}if(xa>>>0<(c[28992>>2]|0)>>>0){dc()}else{c[xa>>2]=Z;c[da+(fa+24)>>2]=ca;c[da+(fa+12)>>2]=Z;c[da+(fa+8)>>2]=Z;break h}}else{ya=h}}while(0);h=ya+8|0;W=c[h>>2]|0;V=c[28992>>2]|0;if(ya>>>0<V>>>0){dc()}if(W>>>0<V>>>0){dc()}else{c[W+12>>2]=Z;c[h>>2]=Z;c[da+(fa+8)>>2]=W;c[da+(fa+12)>>2]=ya;c[da+(fa+24)>>2]=0;break}}else{W=(c[28988>>2]|0)+aa|0;c[28988>>2]=W;c[29e3>>2]=Z;c[da+(fa+4)>>2]=W|1}}while(0);p=da+(la|8)|0;i=b;return p|0}fa=29424|0;while(1){za=c[fa>>2]|0;if(!(za>>>0>ga>>>0)?(Aa=c[fa+4>>2]|0,Ba=za+Aa|0,Ba>>>0>ga>>>0):0){break}fa=c[fa+8>>2]|0}fa=za+(Aa+ -39)|0;if((fa&7|0)==0){Ca=0}else{Ca=0-fa&7}fa=za+(Aa+ -47+Ca)|0;Z=fa>>>0<(ga+16|0)>>>0?ga:fa;fa=Z+8|0;aa=da+8|0;if((aa&7|0)==0){Da=0}else{Da=0-aa&7}aa=ea+ -40-Da|0;c[29e3>>2]=da+Da;c[28988>>2]=aa;c[da+(Da+4)>>2]=aa|1;c[da+(ea+ -36)>>2]=40;c[29004>>2]=c[29464>>2];c[Z+4>>2]=27;c[fa+0>>2]=c[29424>>2];c[fa+4>>2]=c[29428>>2];c[fa+8>>2]=c[29432>>2];c[fa+12>>2]=c[29436>>2];c[29424>>2]=da;c[29428>>2]=ea;c[29436>>2]=0;c[29432>>2]=fa;fa=Z+28|0;c[fa>>2]=7;if((Z+32|0)>>>0<Ba>>>0){aa=fa;while(1){fa=aa+4|0;c[fa>>2]=7;if((aa+8|0)>>>0<Ba>>>0){aa=fa}else{break}}}if((Z|0)!=(ga|0)){aa=Z-ga|0;fa=ga+(aa+4)|0;c[fa>>2]=c[fa>>2]&-2;c[ga+4>>2]=aa|1;c[ga+aa>>2]=aa;fa=aa>>>3;if(aa>>>0<256){M=fa<<1;ba=29016+(M<<2)|0;W=c[7244]|0;h=1<<fa;if((W&h|0)!=0){fa=29016+(M+2<<2)|0;V=c[fa>>2]|0;if(V>>>0<(c[28992>>2]|0)>>>0){dc()}else{Ea=fa;Fa=V}}else{c[7244]=W|h;Ea=29016+(M+2<<2)|0;Fa=ba}c[Ea>>2]=ga;c[Fa+12>>2]=ga;c[ga+8>>2]=Fa;c[ga+12>>2]=ba;break}ba=aa>>>8;if((ba|0)!=0){if(aa>>>0>16777215){Ga=31}else{M=(ba+1048320|0)>>>16&8;h=ba<<M;ba=(h+520192|0)>>>16&4;W=h<<ba;h=(W+245760|0)>>>16&2;V=14-(ba|M|h)+(W<<h>>>15)|0;Ga=aa>>>(V+7|0)&1|V<<1}}else{Ga=0}V=29280+(Ga<<2)|0;c[ga+28>>2]=Ga;c[ga+20>>2]=0;c[ga+16>>2]=0;h=c[28980>>2]|0;W=1<<Ga;if((h&W|0)==0){c[28980>>2]=h|W;c[V>>2]=ga;c[ga+24>>2]=V;c[ga+12>>2]=ga;c[ga+8>>2]=ga;break}W=c[V>>2]|0;if((Ga|0)==31){Ia=0}else{Ia=25-(Ga>>>1)|0}j:do{if((c[W+4>>2]&-8|0)!=(aa|0)){V=aa<<Ia;h=W;while(1){Ja=h+(V>>>31<<2)+16|0;M=c[Ja>>2]|0;if((M|0)==0){break}if((c[M+4>>2]&-8|0)==(aa|0)){Ka=M;break j}else{V=V<<1;h=M}}if(Ja>>>0<(c[28992>>2]|0)>>>0){dc()}else{c[Ja>>2]=ga;c[ga+24>>2]=h;c[ga+12>>2]=ga;c[ga+8>>2]=ga;break g}}else{Ka=W}}while(0);W=Ka+8|0;aa=c[W>>2]|0;Z=c[28992>>2]|0;if(Ka>>>0<Z>>>0){dc()}if(aa>>>0<Z>>>0){dc()}else{c[aa+12>>2]=ga;c[W>>2]=ga;c[ga+8>>2]=aa;c[ga+12>>2]=Ka;c[ga+24>>2]=0;break}}}else{aa=c[28992>>2]|0;if((aa|0)==0|da>>>0<aa>>>0){c[28992>>2]=da}c[29424>>2]=da;c[29428>>2]=ea;c[29436>>2]=0;c[29012>>2]=c[7362];c[29008>>2]=-1;aa=0;do{W=aa<<1;Z=29016+(W<<2)|0;c[29016+(W+3<<2)>>2]=Z;c[29016+(W+2<<2)>>2]=Z;aa=aa+1|0}while((aa|0)!=32);aa=da+8|0;if((aa&7|0)==0){Ma=0}else{Ma=0-aa&7}aa=ea+ -40-Ma|0;c[29e3>>2]=da+Ma;c[28988>>2]=aa;c[da+(Ma+4)>>2]=aa|1;c[da+(ea+ -36)>>2]=40;c[29004>>2]=c[29464>>2]}}while(0);ea=c[28988>>2]|0;if(ea>>>0>B>>>0){da=ea-B|0;c[28988>>2]=da;ea=c[29e3>>2]|0;c[29e3>>2]=ea+B;c[ea+(B+4)>>2]=da|1;c[ea+4>>2]=B|3;p=ea+8|0;i=b;return p|0}}c[(zc()|0)>>2]=12;p=0;i=b;return p|0}function vm(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0;b=i;if((a|0)==0){i=b;return}d=a+ -8|0;e=c[28992>>2]|0;if(d>>>0<e>>>0){dc()}f=c[a+ -4>>2]|0;g=f&3;if((g|0)==1){dc()}h=f&-8;j=a+(h+ -8)|0;do{if((f&1|0)==0){k=c[d>>2]|0;if((g|0)==0){i=b;return}l=-8-k|0;m=a+l|0;n=k+h|0;if(m>>>0<e>>>0){dc()}if((m|0)==(c[28996>>2]|0)){o=a+(h+ -4)|0;if((c[o>>2]&3|0)!=3){p=m;q=n;break}c[28984>>2]=n;c[o>>2]=c[o>>2]&-2;c[a+(l+4)>>2]=n|1;c[j>>2]=n;i=b;return}o=k>>>3;if(k>>>0<256){k=c[a+(l+8)>>2]|0;r=c[a+(l+12)>>2]|0;s=29016+(o<<1<<2)|0;if((k|0)!=(s|0)){if(k>>>0<e>>>0){dc()}if((c[k+12>>2]|0)!=(m|0)){dc()}}if((r|0)==(k|0)){c[7244]=c[7244]&~(1<<o);p=m;q=n;break}if((r|0)!=(s|0)){if(r>>>0<e>>>0){dc()}s=r+8|0;if((c[s>>2]|0)==(m|0)){t=s}else{dc()}}else{t=r+8|0}c[k+12>>2]=r;c[t>>2]=k;p=m;q=n;break}k=c[a+(l+24)>>2]|0;r=c[a+(l+12)>>2]|0;do{if((r|0)==(m|0)){s=a+(l+20)|0;o=c[s>>2]|0;if((o|0)==0){u=a+(l+16)|0;v=c[u>>2]|0;if((v|0)==0){w=0;break}else{x=v;y=u}}else{x=o;y=s}while(1){s=x+20|0;o=c[s>>2]|0;if((o|0)!=0){x=o;y=s;continue}s=x+16|0;o=c[s>>2]|0;if((o|0)==0){break}else{x=o;y=s}}if(y>>>0<e>>>0){dc()}else{c[y>>2]=0;w=x;break}}else{s=c[a+(l+8)>>2]|0;if(s>>>0<e>>>0){dc()}o=s+12|0;if((c[o>>2]|0)!=(m|0)){dc()}u=r+8|0;if((c[u>>2]|0)==(m|0)){c[o>>2]=r;c[u>>2]=s;w=r;break}else{dc()}}}while(0);if((k|0)!=0){r=c[a+(l+28)>>2]|0;s=29280+(r<<2)|0;if((m|0)==(c[s>>2]|0)){c[s>>2]=w;if((w|0)==0){c[28980>>2]=c[28980>>2]&~(1<<r);p=m;q=n;break}}else{if(k>>>0<(c[28992>>2]|0)>>>0){dc()}r=k+16|0;if((c[r>>2]|0)==(m|0)){c[r>>2]=w}else{c[k+20>>2]=w}if((w|0)==0){p=m;q=n;break}}if(w>>>0<(c[28992>>2]|0)>>>0){dc()}c[w+24>>2]=k;r=c[a+(l+16)>>2]|0;do{if((r|0)!=0){if(r>>>0<(c[28992>>2]|0)>>>0){dc()}else{c[w+16>>2]=r;c[r+24>>2]=w;break}}}while(0);r=c[a+(l+20)>>2]|0;if((r|0)!=0){if(r>>>0<(c[28992>>2]|0)>>>0){dc()}else{c[w+20>>2]=r;c[r+24>>2]=w;p=m;q=n;break}}else{p=m;q=n}}else{p=m;q=n}}else{p=d;q=h}}while(0);if(!(p>>>0<j>>>0)){dc()}d=a+(h+ -4)|0;w=c[d>>2]|0;if((w&1|0)==0){dc()}if((w&2|0)==0){if((j|0)==(c[29e3>>2]|0)){e=(c[28988>>2]|0)+q|0;c[28988>>2]=e;c[29e3>>2]=p;c[p+4>>2]=e|1;if((p|0)!=(c[28996>>2]|0)){i=b;return}c[28996>>2]=0;c[28984>>2]=0;i=b;return}if((j|0)==(c[28996>>2]|0)){e=(c[28984>>2]|0)+q|0;c[28984>>2]=e;c[28996>>2]=p;c[p+4>>2]=e|1;c[p+e>>2]=e;i=b;return}e=(w&-8)+q|0;x=w>>>3;do{if(!(w>>>0<256)){y=c[a+(h+16)>>2]|0;t=c[a+(h|4)>>2]|0;do{if((t|0)==(j|0)){g=a+(h+12)|0;f=c[g>>2]|0;if((f|0)==0){r=a+(h+8)|0;k=c[r>>2]|0;if((k|0)==0){z=0;break}else{A=k;B=r}}else{A=f;B=g}while(1){g=A+20|0;f=c[g>>2]|0;if((f|0)!=0){A=f;B=g;continue}g=A+16|0;f=c[g>>2]|0;if((f|0)==0){break}else{A=f;B=g}}if(B>>>0<(c[28992>>2]|0)>>>0){dc()}else{c[B>>2]=0;z=A;break}}else{g=c[a+h>>2]|0;if(g>>>0<(c[28992>>2]|0)>>>0){dc()}f=g+12|0;if((c[f>>2]|0)!=(j|0)){dc()}r=t+8|0;if((c[r>>2]|0)==(j|0)){c[f>>2]=t;c[r>>2]=g;z=t;break}else{dc()}}}while(0);if((y|0)!=0){t=c[a+(h+20)>>2]|0;n=29280+(t<<2)|0;if((j|0)==(c[n>>2]|0)){c[n>>2]=z;if((z|0)==0){c[28980>>2]=c[28980>>2]&~(1<<t);break}}else{if(y>>>0<(c[28992>>2]|0)>>>0){dc()}t=y+16|0;if((c[t>>2]|0)==(j|0)){c[t>>2]=z}else{c[y+20>>2]=z}if((z|0)==0){break}}if(z>>>0<(c[28992>>2]|0)>>>0){dc()}c[z+24>>2]=y;t=c[a+(h+8)>>2]|0;do{if((t|0)!=0){if(t>>>0<(c[28992>>2]|0)>>>0){dc()}else{c[z+16>>2]=t;c[t+24>>2]=z;break}}}while(0);t=c[a+(h+12)>>2]|0;if((t|0)!=0){if(t>>>0<(c[28992>>2]|0)>>>0){dc()}else{c[z+20>>2]=t;c[t+24>>2]=z;break}}}}else{t=c[a+h>>2]|0;y=c[a+(h|4)>>2]|0;n=29016+(x<<1<<2)|0;if((t|0)!=(n|0)){if(t>>>0<(c[28992>>2]|0)>>>0){dc()}if((c[t+12>>2]|0)!=(j|0)){dc()}}if((y|0)==(t|0)){c[7244]=c[7244]&~(1<<x);break}if((y|0)!=(n|0)){if(y>>>0<(c[28992>>2]|0)>>>0){dc()}n=y+8|0;if((c[n>>2]|0)==(j|0)){C=n}else{dc()}}else{C=y+8|0}c[t+12>>2]=y;c[C>>2]=t}}while(0);c[p+4>>2]=e|1;c[p+e>>2]=e;if((p|0)==(c[28996>>2]|0)){c[28984>>2]=e;i=b;return}else{D=e}}else{c[d>>2]=w&-2;c[p+4>>2]=q|1;c[p+q>>2]=q;D=q}q=D>>>3;if(D>>>0<256){w=q<<1;d=29016+(w<<2)|0;e=c[7244]|0;C=1<<q;if((e&C|0)!=0){q=29016+(w+2<<2)|0;j=c[q>>2]|0;if(j>>>0<(c[28992>>2]|0)>>>0){dc()}else{E=q;F=j}}else{c[7244]=e|C;E=29016+(w+2<<2)|0;F=d}c[E>>2]=p;c[F+12>>2]=p;c[p+8>>2]=F;c[p+12>>2]=d;i=b;return}d=D>>>8;if((d|0)!=0){if(D>>>0>16777215){G=31}else{F=(d+1048320|0)>>>16&8;E=d<<F;d=(E+520192|0)>>>16&4;w=E<<d;E=(w+245760|0)>>>16&2;C=14-(d|F|E)+(w<<E>>>15)|0;G=D>>>(C+7|0)&1|C<<1}}else{G=0}C=29280+(G<<2)|0;c[p+28>>2]=G;c[p+20>>2]=0;c[p+16>>2]=0;E=c[28980>>2]|0;w=1<<G;a:do{if((E&w|0)!=0){F=c[C>>2]|0;if((G|0)==31){H=0}else{H=25-(G>>>1)|0}b:do{if((c[F+4>>2]&-8|0)!=(D|0)){d=D<<H;e=F;while(1){I=e+(d>>>31<<2)+16|0;j=c[I>>2]|0;if((j|0)==0){break}if((c[j+4>>2]&-8|0)==(D|0)){J=j;break b}else{d=d<<1;e=j}}if(I>>>0<(c[28992>>2]|0)>>>0){dc()}else{c[I>>2]=p;c[p+24>>2]=e;c[p+12>>2]=p;c[p+8>>2]=p;break a}}else{J=F}}while(0);F=J+8|0;d=c[F>>2]|0;j=c[28992>>2]|0;if(J>>>0<j>>>0){dc()}if(d>>>0<j>>>0){dc()}else{c[d+12>>2]=p;c[F>>2]=p;c[p+8>>2]=d;c[p+12>>2]=J;c[p+24>>2]=0;break}}else{c[28980>>2]=E|w;c[C>>2]=p;c[p+24>>2]=C;c[p+12>>2]=p;c[p+8>>2]=p}}while(0);p=(c[29008>>2]|0)+ -1|0;c[29008>>2]=p;if((p|0)==0){K=29432|0}else{i=b;return}while(1){p=c[K>>2]|0;if((p|0)==0){break}else{K=p+8|0}}c[29008>>2]=-1;i=b;return}function wm(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=i;if((a|0)!=0){e=aa(b,a)|0;if((b|a)>>>0>65535){f=((e>>>0)/(a>>>0)|0|0)==(b|0)?e:-1}else{f=e}}else{f=0}e=um(f)|0;if((e|0)==0){i=d;return e|0}if((c[e+ -4>>2]&3|0)==0){i=d;return e|0}Gm(e|0,0,f|0)|0;i=d;return e|0}function xm(b,c,d){b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;e=i;a:do{if((d|0)==0){f=0}else{g=d;h=b;j=c;while(1){k=a[h]|0;l=a[j]|0;if(!(k<<24>>24==l<<24>>24)){break}m=g+ -1|0;if((m|0)==0){f=0;break a}else{g=m;h=h+1|0;j=j+1|0}}f=(k&255)-(l&255)|0}}while(0);i=e;return f|0}function ym(){}function zm(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=a+c>>>0;return(E=b+d+(e>>>0<a>>>0|0)>>>0,e|0)|0}function Am(b){b=b|0;var c=0;c=b;while(a[c]|0){c=c+1|0}return c-b|0}function Bm(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=b-d>>>0;e=b-d-(c>>>0>a>>>0|0)>>>0;return(E=e,a-c>>>0|0)|0}function Cm(b,c,d){b=b|0;c=c|0;d=d|0;var e=0,f=0;while((e|0)<(d|0)){a[b+e|0]=f?0:a[c+e|0]|0;f=f?1:(a[c+e|0]|0)==0;e=e+1|0}return b|0}function Dm(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;r=r+1|0;c[a>>2]=r;while((e|0)<40){if((c[d+(e<<2)>>2]|0)==0){c[d+(e<<2)>>2]=r;c[d+((e<<2)+4)>>2]=b;c[d+((e<<2)+8)>>2]=0;return 0}e=e+2|0}nb(116);nb(111);nb(111);nb(32);nb(109);nb(97);nb(110);nb(121);nb(32);nb(115);nb(101);nb(116);nb(106);nb(109);nb(112);nb(115);nb(32);nb(105);nb(110);nb(32);nb(97);nb(32);nb(102);nb(117);nb(110);nb(99);nb(116);nb(105);nb(111);nb(110);nb(32);nb(99);nb(97);nb(108);nb(108);nb(44);nb(32);nb(98);nb(117);nb(105);nb(108);nb(100);nb(32);nb(119);nb(105);nb(116);nb(104);nb(32);nb(97);nb(32);nb(104);nb(105);nb(103);nb(104);nb(101);nb(114);nb(32);nb(118);nb(97);nb(108);nb(117);nb(101);nb(32);nb(102);nb(111);nb(114);nb(32);nb(77);nb(65);nb(88);nb(95);nb(83);nb(69);nb(84);nb(74);nb(77);nb(80);nb(83);nb(10);ba(0);return 0}function Em(a,b){a=a|0;b=b|0;var d=0,e=0;while((d|0)<20){e=c[b+(d<<2)>>2]|0;if((e|0)==0)break;if((e|0)==(a|0)){return c[b+((d<<2)+4)>>2]|0}d=d+2|0}return 0}function Fm(b,d,e){b=b|0;d=d|0;e=e|0;var f=0;if((e|0)>=4096)return xc(b|0,d|0,e|0)|0;f=b|0;if((b&3)==(d&3)){while(b&3){if((e|0)==0)return f|0;a[b]=a[d]|0;b=b+1|0;d=d+1|0;e=e-1|0}while((e|0)>=4){c[b>>2]=c[d>>2];b=b+4|0;d=d+4|0;e=e-4|0}}while((e|0)>0){a[b]=a[d]|0;b=b+1|0;d=d+1|0;e=e-1|0}return f|0}function Gm(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;f=b+e|0;if((e|0)>=20){d=d&255;g=b&3;h=d|d<<8|d<<16|d<<24;i=f&~3;if(g){g=b+4-g|0;while((b|0)<(g|0)){a[b]=d;b=b+1|0}}while((b|0)<(i|0)){c[b>>2]=h;b=b+4|0}}while((b|0)<(f|0)){a[b]=d;b=b+1|0}return b-e|0}function Hm(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){E=b<<c|(a&(1<<c)-1<<32-c)>>>32-c;return a<<c}E=a<<c-32;return 0}function Im(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){E=b>>>c;return a>>>c|(b&(1<<c)-1)<<32-c}E=0;return b>>>c-32|0}function Jm(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){E=b>>c;return a>>>c|(b&(1<<c)-1)<<32-c}E=(b|0)<0?-1:0;return b>>c-32|0}function Km(b){b=b|0;var c=0;c=a[n+(b>>>24)|0]|0;if((c|0)<8)return c|0;c=a[n+(b>>16&255)|0]|0;if((c|0)<8)return c+8|0;c=a[n+(b>>8&255)|0]|0;if((c|0)<8)return c+16|0;return(a[n+(b&255)|0]|0)+24|0}function Lm(b){b=b|0;var c=0;c=a[m+(b&255)|0]|0;if((c|0)<8)return c|0;c=a[m+(b>>8&255)|0]|0;if((c|0)<8)return c+8|0;c=a[m+(b>>16&255)|0]|0;if((c|0)<8)return c+16|0;return(a[m+(b>>>24)|0]|0)+24|0}function Mm(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;c=a&65535;d=b&65535;e=aa(d,c)|0;f=a>>>16;a=(e>>>16)+(aa(d,f)|0)|0;d=b>>>16;b=aa(d,c)|0;return(E=(a>>>16)+(aa(d,f)|0)+(((a&65535)+b|0)>>>16)|0,a+b<<16|e&65535|0)|0}function Nm(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;e=b>>31|((b|0)<0?-1:0)<<1;f=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;g=d>>31|((d|0)<0?-1:0)<<1;h=((d|0)<0?-1:0)>>31|((d|0)<0?-1:0)<<1;i=Bm(e^a,f^b,e,f)|0;b=E;a=g^e;e=h^f;f=Bm((Sm(i,b,Bm(g^c,h^d,g,h)|0,E,0)|0)^a,E^e,a,e)|0;return f|0}function Om(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0;f=i;i=i+8|0;g=f|0;h=b>>31|((b|0)<0?-1:0)<<1;j=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;k=e>>31|((e|0)<0?-1:0)<<1;l=((e|0)<0?-1:0)>>31|((e|0)<0?-1:0)<<1;m=Bm(h^a,j^b,h,j)|0;b=E;Sm(m,b,Bm(k^d,l^e,k,l)|0,E,g)|0;l=Bm(c[g>>2]^h,c[g+4>>2]^j,h,j)|0;j=E;i=f;return(E=j,l)|0}function Pm(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=a;a=c;c=Mm(e,a)|0;f=E;return(E=(aa(b,a)|0)+(aa(d,e)|0)+f|f&0,c|0|0)|0}function Qm(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=Sm(a,b,c,d,0)|0;return e|0}function Rm(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=i;i=i+8|0;g=f|0;Sm(a,b,d,e,g)|0;i=f;return(E=c[g+4>>2]|0,c[g>>2]|0)|0}function Sm(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0;g=a;h=b;i=h;j=d;k=e;l=k;if((i|0)==0){m=(f|0)!=0;if((l|0)==0){if(m){c[f>>2]=(g>>>0)%(j>>>0);c[f+4>>2]=0}n=0;o=(g>>>0)/(j>>>0)>>>0;return(E=n,o)|0}else{if(!m){n=0;o=0;return(E=n,o)|0}c[f>>2]=a|0;c[f+4>>2]=b&0;n=0;o=0;return(E=n,o)|0}}m=(l|0)==0;do{if((j|0)!=0){if(!m){p=(Km(l|0)|0)-(Km(i|0)|0)|0;if(p>>>0<=31){q=p+1|0;r=31-p|0;s=p-31>>31;t=q;u=g>>>(q>>>0)&s|i<<r;v=i>>>(q>>>0)&s;w=0;x=g<<r;break}if((f|0)==0){n=0;o=0;return(E=n,o)|0}c[f>>2]=a|0;c[f+4>>2]=h|b&0;n=0;o=0;return(E=n,o)|0}r=j-1|0;if((r&j|0)!=0){s=(Km(j|0)|0)+33-(Km(i|0)|0)|0;q=64-s|0;p=32-s|0;y=p>>31;z=s-32|0;A=z>>31;t=s;u=p-1>>31&i>>>(z>>>0)|(i<<p|g>>>(s>>>0))&A;v=A&i>>>(s>>>0);w=g<<q&y;x=(i<<q|g>>>(z>>>0))&y|g<<p&s-33>>31;break}if((f|0)!=0){c[f>>2]=r&g;c[f+4>>2]=0}if((j|0)==1){n=h|b&0;o=a|0|0;return(E=n,o)|0}else{r=Lm(j|0)|0;n=i>>>(r>>>0)|0;o=i<<32-r|g>>>(r>>>0)|0;return(E=n,o)|0}}else{if(m){if((f|0)!=0){c[f>>2]=(i>>>0)%(j>>>0);c[f+4>>2]=0}n=0;o=(i>>>0)/(j>>>0)>>>0;return(E=n,o)|0}if((g|0)==0){if((f|0)!=0){c[f>>2]=0;c[f+4>>2]=(i>>>0)%(l>>>0)}n=0;o=(i>>>0)/(l>>>0)>>>0;return(E=n,o)|0}r=l-1|0;if((r&l|0)==0){if((f|0)!=0){c[f>>2]=a|0;c[f+4>>2]=r&i|b&0}n=0;o=i>>>((Lm(l|0)|0)>>>0);return(E=n,o)|0}r=(Km(l|0)|0)-(Km(i|0)|0)|0;if(r>>>0<=30){s=r+1|0;p=31-r|0;t=s;u=i<<p|g>>>(s>>>0);v=i>>>(s>>>0);w=0;x=g<<p;break}if((f|0)==0){n=0;o=0;return(E=n,o)|0}c[f>>2]=a|0;c[f+4>>2]=h|b&0;n=0;o=0;return(E=n,o)|0}}while(0);if((t|0)==0){B=x;C=w;D=v;F=u;G=0;H=0}else{b=d|0|0;d=k|e&0;e=zm(b,d,-1,-1)|0;k=E;h=x;x=w;w=v;v=u;u=t;t=0;while(1){I=x>>>31|h<<1;J=t|x<<1;a=v<<1|h>>>31|0;g=v>>>31|w<<1|0;Bm(e,k,a,g)|0;i=E;l=i>>31|((i|0)<0?-1:0)<<1;K=l&1;L=Bm(a,g,l&b,(((i|0)<0?-1:0)>>31|((i|0)<0?-1:0)<<1)&d)|0;M=E;i=u-1|0;if((i|0)==0){break}else{h=I;x=J;w=M;v=L;u=i;t=K}}B=I;C=J;D=M;F=L;G=0;H=K}K=C;C=0;if((f|0)!=0){c[f>>2]=F;c[f+4>>2]=D}n=(K|0)>>>31|(B|C)<<1|(C<<1|K>>>31)&0|G;o=(K<<1|0>>>31)&-2|H;return(E=n,o)|0}function Tm(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return Jc[a&15](b|0,c|0,d|0)|0}function Um(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;Kc[a&63](b|0,c|0,d|0,e|0,f|0)}function Vm(a,b,c){a=a|0;b=b|0;c=+c;Lc[a&3](b|0,+c)}function Wm(a,b){a=a|0;b=b|0;return+Mc[a&3](b|0)}function Xm(a){a=a|0;return Nc[a&7]()|0}function Ym(a,b){a=a|0;b=b|0;Oc[a&63](b|0)}function Zm(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;Pc[a&7](b|0,c|0,d|0,e|0,f|0,g|0,h|0)}function _m(a,b,c){a=a|0;b=b|0;c=c|0;Qc[a&31](b|0,c|0)}function $m(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;return Rc[a&3](b|0,c|0,d|0,e|0,f|0,g|0)|0}function an(a,b){a=a|0;b=b|0;return Sc[a&31](b|0)|0}function bn(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Tc[a&15](b|0,c|0,d|0)}function cn(a){a=a|0;Uc[a&15]()}function dn(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return Vc[a&3](b|0,c|0,d|0,e|0)|0}function en(a,b,c){a=a|0;b=b|0;c=c|0;return Wc[a&31](b|0,c|0)|0}function fn(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;return Xc[a&3](b|0,c|0,d|0,e|0,f|0)|0}function gn(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;Yc[a&31](b|0,c|0,d|0,e|0)}function hn(a,b,c){a=a|0;b=b|0;c=c|0;ba(0);return 0}function jn(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ba(1)}function kn(a,b){a=a|0;b=+b;ba(2)}function ln(a){a=a|0;ba(3);return 0.0}function mn(){ba(4);return 0}function nn(a){a=a|0;ba(5)}function on(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;ba(6)}function pn(a,b){a=a|0;b=b|0;ba(7)}function qn(a,b){a=a|0;b=b|0;Ec(a|0,b|0)}function rn(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ba(8);return 0}function sn(a){a=a|0;ba(9);return 0}function tn(a){a=a|0;return Sa(a|0)|0}function un(a,b,c){a=a|0;b=b|0;c=c|0;ba(10)}function vn(){ba(11)}function wn(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ba(12);return 0}function xn(a,b){a=a|0;b=b|0;ba(13);return 0}function yn(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ba(14);return 0}function zn(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ba(15)}




// EMSCRIPTEN_END_FUNCS
var Jc=[hn,Ld,Nd,Yd,Zd,xk,Bk,jf,Rf,Sf,Vf,ej,fj,Bj,sm,hn];var Kc=[jn,Fg,Gg,Hg,Ig,Jg,Lg,Mg,Ng,Og,hi,gi,fi,ei,di,ci,bi,ii,ji,ki,li,mi,ni,oi,pi,qi,ri,si,ti,ui,vi,wi,xi,yi,zi,Ai,Bi,Ci,Di,Ei,Fi,ai,$h,_h,vj,wj,jn,jn,jn,jn,jn,jn,jn,jn,jn,jn,jn,jn,jn,jn,jn,jn,jn,jn];var Lc=[kn,Pd,Vd,kn];var Mc=[ln,Qd,Wd,ln];var Nc=[mn,Bd,ge,ee,fe,mn,mn,mn];var Oc=[nn,le,Cd,de,Md,Od,Yk,_k,Zk,Xk,af,bf,ef,gf,hf,Wf,hg,ig,tg,rg,wg,xg,Eg,Qg,Sg,Tg,eh,fh,gh,ph,zh,Ah,Ch,Nh,Vh,Xh,Zh,Ii,Ji,Si,Vi,Yi,kj,oj,nn,nn,nn,nn,nn,nn,nn,nn,nn,nn,nn,nn,nn,nn,nn,nn,nn,nn,nn,nn];var Pc=[on,Dh,Fh,Jh,Kh,Lh,Oh,on];var Qc=[pn,Rd,Td,Xd,Te,Ue,qn,Rk,_e,$e,ff,qg,ih,Ih,Wh,Yh,Hi,Ri,nj,xj,Cj,Ik,tm,pn,pn,pn,pn,pn,pn,pn,pn,pn];var Rc=[rn,ij,jj,rn];var Sc=[sn,Sd,Ud,_d,$d,ae,be,tn,Hj,um,Ze,cf,df,Tf,Uf,ug,yg,Ag,dh,qh,rh,sh,th,sn,sn,sn,sn,sn,sn,sn,sn,sn];var Tc=[un,ce,Tk,Wk,Ve,Sk,Vk,Ll,Ml,Nl,Ol,Pl,un,un,un,un];var Uc=[vn,me,ne,oe,xd,yd,Ad,rd,ie,he,nf,mf,lf,kf,vn,vn];var Vc=[wn,Qk,gj,hj];var Wc=[xn,Ed,Ck,Dk,Gk,Fk,Ek,jg,kg,lg,mg,ng,mh,zg,Bg,Cg,Ug,Vg,Wg,Xg,_g,Zg,Fj,Ok,xn,xn,xn,xn,xn,xn,xn,xn];var Xc=[yn,lj,mj,yn];var Yc=[zn,jh,kh,lh,Eh,Gh,Ph,Qh,Rh,Sh,Th,Li,Mi,Ni,Oi,Pi,Ui,Wi,Xi,Pk,Ak,zn,zn,zn,zn,zn,zn,zn,zn,zn,zn,zn];return{_testSetjmp:Em,_strlen:Am,_free:vm,_main:Xe,_i64Add:zm,_saveSetjmp:Dm,_memset:Gm,_malloc:um,_strncpy:Cm,_memcpy:Fm,_i64Subtract:Bm,_calloc:wm,runPostSets:ym,stackAlloc:Zc,stackSave:_c,stackRestore:$c,setThrew:ad,setTempRet0:dd,setTempRet1:ed,setTempRet2:fd,setTempRet3:gd,setTempRet4:hd,setTempRet5:id,setTempRet6:jd,setTempRet7:kd,setTempRet8:ld,setTempRet9:md,dynCall_iiii:Tm,dynCall_viiiii:Um,dynCall_vid:Vm,dynCall_di:Wm,dynCall_i:Xm,dynCall_vi:Ym,dynCall_viiiiiii:Zm,dynCall_vii:_m,dynCall_iiiiiii:$m,dynCall_ii:an,dynCall_viii:bn,dynCall_v:cn,dynCall_iiiii:dn,dynCall_iii:en,dynCall_iiiiii:fn,dynCall_viiii:gn}})


// EMSCRIPTEN_END_ASM
({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_vid": invoke_vid, "invoke_di": invoke_di, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_viiiiiii": invoke_viiiiiii, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "_glUseProgram": _glUseProgram, "_fread": _fread, "_glLineWidth": _glLineWidth, "_glGenRenderbuffers": _glGenRenderbuffers, "_glDeleteProgram": _glDeleteProgram, "_longjmp": _longjmp, "_glBindBuffer": _glBindBuffer, "_clock_gettime": _clock_gettime, "_fsync": _fsync, "_llvm_pow_f32": _llvm_pow_f32, "_glTranslatef": _glTranslatef, "_sbrk": _sbrk, "_glBlendFunc": _glBlendFunc, "_glDisableVertexAttribArray": _glDisableVertexAttribArray, "_sinf": _sinf, "_sysconf": _sysconf, "_close": _close, "_ferror": _ferror, "_glLoadMatrixf": _glLoadMatrixf, "_glfwGetMousePos": _glfwGetMousePos, "_fileno": _fileno, "_glfwTerminate": _glfwTerminate, "_puts": _puts, "_glLoadIdentity": _glLoadIdentity, "_glMatrixMode": _glMatrixMode, "_glfwInit": _glfwInit, "_write": _write, "_ftell": _ftell, "_glShaderSource": _glShaderSource, "_glFramebufferRenderbuffer": _glFramebufferRenderbuffer, "_glOrtho": _glOrtho, "_glVertexPointer": _glVertexPointer, "_tmpnam": _tmpnam, "_glGetBooleanv": _glGetBooleanv, "_tmpfile": _tmpfile, "__getFloat": __getFloat, "_glVertexAttribPointer": _glVertexAttribPointer, "_glHint": _glHint, "_send": _send, "_setlocale": _setlocale, "_glfwOpenWindow": _glfwOpenWindow, "_glBindRenderbuffer": _glBindRenderbuffer, "_glViewport": _glViewport, "___setErrNo": ___setErrNo, "_glDeleteTextures": _glDeleteTextures, "_putchar": _putchar, "_floor": _floor, "_glEnable": _glEnable, "_printf": _printf, "_glGenTextures": _glGenTextures, "_sprintf": _sprintf, "_glGetIntegerv": _glGetIntegerv, "_glGetString": _glGetString, "_glPushMatrix": _glPushMatrix, "_llvm_bswap_i32": _llvm_bswap_i32, "_glAttachShader": _glAttachShader, "_read": _read, "_fwrite": _fwrite, "_time": _time, "_glBindFramebuffer": _glBindFramebuffer, "_glDetachShader": _glDetachShader, "_glGenFramebuffers": _glGenFramebuffers, "_exit": _exit, "_llvm_pow_f64": _llvm_pow_f64, "_glDeleteFramebuffers": _glDeleteFramebuffers, "_glColor4f": _glColor4f, "_glfwPollEvents": _glfwPollEvents, "_lseek": _lseek, "_glCheckFramebufferStatus": _glCheckFramebufferStatus, "___buildEnvironment": ___buildEnvironment, "_glEnableClientState": _glEnableClientState, "_pwrite": _pwrite, "_open": _open, "_glClearColor": _glClearColor, "_glIsEnabled": _glIsEnabled, "_glBindTexture": _glBindTexture, "_snprintf": _snprintf, "_emscripten_get_now": _emscripten_get_now, "_glGetFloatv": _glGetFloatv, "_glDrawArrays": _glDrawArrays, "_glCreateShader": _glCreateShader, "_fseek": _fseek, "_getenv": _getenv, "_fclose": _fclose, "_glActiveTexture": _glActiveTexture, "_glTexCoordPointer": _glTexCoordPointer, "_recv": _recv, "_glCompileShader": _glCompileShader, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_abort": _abort, "_glTexImage2D": _glTexImage2D, "_fopen": _fopen, "_glDisableClientState": _glDisableClientState, "_cosf": _cosf, "_glDeleteRenderbuffers": _glDeleteRenderbuffers, "_glLinkProgram": _glLinkProgram, "_fprintf": _fprintf, "__reallyNegative": __reallyNegative, "_glClear": _glClear, "_sscanf": _sscanf, "_glPopMatrix": _glPopMatrix, "_glRenderbufferStorage": _glRenderbufferStorage, "__exit": __exit, "_glBindAttribLocation": _glBindAttribLocation, "_glPixelStorei": _glPixelStorei, "_pread": _pread, "_mkport": _mkport, "_fflush": _fflush, "_feof": _feof, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___errno_location": ___errno_location, "_fputc": _fputc, "__scanString": __scanString, "_glDisable": _glDisable, "_emscripten_cancel_main_loop": _emscripten_cancel_main_loop, "_emscripten_longjmp": _emscripten_longjmp, "__formatString": __formatString, "_fputs": _fputs, "_glTexParameterf": _glTexParameterf, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "_stderr": _stderr }, buffer);
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _strncpy = Module["_strncpy"] = asm["_strncpy"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _calloc = Module["_calloc"] = asm["_calloc"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

Runtime.stackAlloc = function(size) { return asm['stackAlloc'](size) };
Runtime.stackSave = function() { return asm['stackSave']() };
Runtime.stackRestore = function(top) { asm['stackRestore'](top) };


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}






